{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae8dfd31299fb204434caa2f82cf4fc9?d=identicon&version=1",
            "client": "website",
            "content": "<p>How do you return a copy of a vector in C++ ? I'm fiddling with some C++ and was wondering whether it's possible to add an element to a copy of a vector while passing it as an argument to a function. This is sometimes useful with recursive functions and I'm trying to replicate this behavior with C++.</p>\n<p>As an example, in python you can easily do:</p>\n<div class=\"codehilite\"><pre>def permutations(list):\n    result = []\n    _permutations(list, [], result)\n   return result\n\ndef _permutations(list, perm, result):\n    if len(perm) == len(list):\n        result.append(perm)\n        return\n    for e in list:\n        _permutations(list, perm + [e], result)\n    return\n\nprint permutations([1, 2, 3])\n\n&gt;&gt;&gt;\n[[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 3, 1], [1, 3, 2], [1, 3, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 3, 1], [3, 3, 2], [3, 3, 3]]\n</pre></div>\n\n\n<p>This is what I would like to somewhat replicate in C++:   _permutations(list, perm + [e], result)</p>\n<p>In this case, I'm passing a copy of perm + [e] to the function _permutations. Can I do something similar in C++?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19348552,
            "is_me_message": false,
            "last_edit_timestamp": 1396455968,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "timur.ridjanovic@gmail.com",
            "sender_full_name": "Timur Ridjanovic (F'13)",
            "sender_id": 2859,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "return copy of vector",
            "submessages": [],
            "timestamp": 1396455538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fcd73cb735a7c0f50049f6bea94233f17eaee624?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>auto copy = vector;<br>\ncopy.push_back(e);<br>\n// pass copy to the function</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19349625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mark.samman@gmail.com",
            "sender_full_name": "Mark Samman (W'14)",
            "sender_id": 5004,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "return copy of vector",
            "submessages": [],
            "timestamp": 1396456890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae8dfd31299fb204434caa2f82cf4fc9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks, that works! So it seems like I need to copy.push_back(e); before I pass copy to the function. That means there's no way of performing modifications on the vector as it is passed to the function? something like function(copy.push_back(e))  </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19350170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "timur.ridjanovic@gmail.com",
            "sender_full_name": "Timur Ridjanovic (F'13)",
            "sender_id": 2859,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "return copy of vector",
            "submessages": [],
            "timestamp": 1396457580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fcd73cb735a7c0f50049f6bea94233f17eaee624?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Not that I am aware of. If you\u2019re using C++11, you could also use emplace_back instead of push_back to construct whatever it is you\u2019re pushing to the vector \u201cin place\" to avoid a temporary.</p>\n<p>You could create a function to do that though:</p>\n<div class=\"codehilite\"><pre>std::vector&lt;type&gt; my_vector_push(std::vector&lt;type&gt; vector, type value) {\n    vector.emplace_back(value);\n    return vector;\n}\n\nfunction(my_vector_push(vector, e));\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19350845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mark.samman@gmail.com",
            "sender_full_name": "Mark Samman (W'14)",
            "sender_id": 5004,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "return copy of vector",
            "submessages": [],
            "timestamp": 1396458391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae8dfd31299fb204434caa2f82cf4fc9?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool! thanks for that!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 19351254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "timur.ridjanovic@gmail.com",
            "sender_full_name": "Timur Ridjanovic (F'13)",
            "sender_id": 2859,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "return copy of vector",
            "submessages": [],
            "timestamp": 1396458856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>I've subscribed you all to the C++ thread because <span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> and I were just looking at who had worked with C++<br>\n<span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> <span class=\"user-mention\" data-user-email=\"tjarjour@iupui.edu\">@Tyler Jarjoura (F2'14)</span> <span class=\"user-mention\" data-user-email=\"lindsey.r.raymond@gmail.com\">@Lindsey Raymond (F2'14)</span> <span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> <span class=\"user-mention\" data-user-email=\"sean.y.ting@gmail.com\">@Sean Ting (F2'14)</span> <span class=\"user-mention\" data-user-email=\"joppeschwartz@gmail.com\">@Joseph A. Schwartz (F1'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28765566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "calling new C++ers",
            "submessages": [],
            "timestamp": 1412694132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d31c78cf8a71b368d9c4fb5e9333af5b4e5a497c?x=x&version=1",
            "client": "website",
            "content": "<p>Hi,<br>\nI  just learned C++ recently. <br>\nIs there any project I could contribute to or somebody who would be interested in doing some pair programming in C++?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28769293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdulieu@gmail.com",
            "sender_full_name": "Muriel Dulieu Holzer (F2'14)",
            "sender_id": 6694,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1412698672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d195980af547f834d334e8ab6df0135?d=identicon&version=1",
            "client": "website",
            "content": "<p>Don't have any C++ projects at the moment, but if you come up with something I could pair.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28775264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sean.y.ting@gmail.com",
            "sender_full_name": "Sean Ting (F2'14)",
            "sender_id": 6668,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1412706009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> <span class=\"user-mention\" data-user-email=\"sean.y.ting@gmail.com\">@Sean Ting (F2'14)</span> i  have an interesting compiler project that i need to do in the next two weeks: i would like to go through the LLVM kaleidoscope JIT tutorials <a href=\"http://llvm.org/docs/tutorial/LangImpl1.html\" target=\"_blank\" title=\"http://llvm.org/docs/tutorial/LangImpl1.html\">http://llvm.org/docs/tutorial/LangImpl1.html</a>, and then try to marry that to a simple clang frontend, as described here: <a href=\"http://fdiv.net/2012/08/15/compiling-code-clang-api\" target=\"_blank\" title=\"http://fdiv.net/2012/08/15/compiling-code-clang-api\">http://fdiv.net/2012/08/15/compiling-code-clang-api</a>. the idea is to get a functioning C REPL (aka incremental JIT compilation, linking and loading). the idea is that you could input a c source string for a function, and then input another source string that  calls the previously defined function.<br>\ni'm a HS alum, and i usually come in on thursdays; i can be available online other times as well, just have to respect the limited hours that i can be in the space. i think this would be a good thing to pair on because there's some reading up front to do that we can pursue at our own pace, and then team up on the harder part of connecting the dots. i believe <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> took a  look at kaleidoscope during the last batch; perhaps he could help as well.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28962505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413042532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> that is a really neat project!  Having a C REPL was something I would have paid money for back when I did lots of C programming.  I'd be super interested to hear about progress updates on it, and would be really interested in pairing on it as well.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28964440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413047094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, <span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> and <span class=\"user-mention\" data-user-email=\"sean.y.ting@gmail.com\">@Sean Ting (F2'14)</span> since we're all currently in the space, if either of you are interested in this project, maybe we could do some pairing on playing with LLVM Kaleidescope or the CLANG api before <span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> comes in next Thursday...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28964911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413048053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> glad to hear it. if you are interested in having a real c repl i suggest looking at this first: <a href=\"http://root.cern.ch/drupal/content/cling\" target=\"_blank\" title=\"http://root.cern.ch/drupal/content/cling\">http://root.cern.ch/drupal/content/cling</a> - they look like they know what they are doing! my goal is more exploratory/eccentric; i'm writing a programming language (ploy) and am evaluating several compilation options: ahead-of-time (AOT) vs just-in-time (JIT); and ploy-to-c vs ploy-to-llvm. the above proposal would be a nice way to get a feel for the four possibilities.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28964929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413048116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span>, Thanks for the pointer! I had never heard of cling before.  But actually, my interest in the project stems more from a desire to learn about LLVM, and understand JIT better, with the added bonus that I have an historical interest in the subject of building a C repl.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28965174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413048538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d31c78cf8a71b368d9c4fb5e9333af5b4e5a497c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> Thank you for talking about this project. Do you think this is a project that is accessible as a first project? My only experience in C++ so far are the exercises of the book \"C++ primer\".</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28975474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdulieu@gmail.com",
            "sender_full_name": "Muriel Dulieu Holzer (F2'14)",
            "sender_id": 6694,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413073436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d195980af547f834d334e8ab6df0135?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> <span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> <span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> sorry about the slow response; was moving apartments this weekend and had limited internet. That looks pretty interesting, I'll take a look through the docs this afternoon.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29045768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sean.y.ting@gmail.com",
            "sender_full_name": "Sean Ting (F2'14)",
            "sender_id": 6668,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413209604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>I was actually considering going through the Kaleidoscope tutorial and doing something with Clang as well, so count me in for all pairing/discussion purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29046064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413210044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c35ca5c26afe5ce2b62e0d25c9af7c50a096323c?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"http://facultyweb.cs.wwu.edu/~phil/classes/f14/352/\" target=\"_blank\" title=\"http://facultyweb.cs.wwu.edu/~phil/classes/f14/352/\">http://facultyweb.cs.wwu.edu/~phil/classes/f14/352/</a><br>\n<span class=\"user-mention\" data-user-email=\"tjarjour@iupui.edu\">@Tyler Jarjoura (F2'14)</span>  <span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29047125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "joppeschwartz@gmail.com",
            "sender_full_name": "Joe Schwartz (F1'14)",
            "sender_id": 6418,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "UNIX shell project website",
            "submessages": [],
            "timestamp": 1413211998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdulieu@gmail.com\">@Muriel (Dulieu) Holzer (F2'14)</span> i think this would be a challenging first project to tackle on your own, because the LLVM libraries use templates which can get confusing. in general i think it is harder to use external libs than write your own code, but it is a good way to learn. the LLVM documentation is not great, but the tutorial itself is popular so working through that should be within reach. i suggest at least reading through the LLVM tutorial and trying to compile the code. note that you do not even need the llvm libs to compile the code in part 2; it's a handwritten parser, which is informative in its own right.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29047365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413212361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>also c++ can be challenging at the outset, because header search and linker errors can be very confusing. if you can't make the demo code compile don't hesitate to ask someone for help!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29047429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413212467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>So is anyone here interested in going through the Kaleidoscope tutorial one chapter a day starting today?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29047770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413213038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"a.alekseyev@inventati.org\">@Alex Alekseyev (F1'14)</span> I am!  But maybe a bit later in the afternoon?  I just got done with the SICP group and want to work on some other stuff first.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29049262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413215302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> Absolutely. Let's talk once you have a minute.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29049370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413215467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"a.alekseyev@inventati.org\">@Alex Alekseyev (F1'14)</span> Hey, I'm going to go grab some lunch, want to chat about Kaleidoscope when I get back? (15 minutes-ish)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29056777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413226441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>Sure.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29056817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413226462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adrien.guillo@gmail.com\">@Adrien Guillo (F2'14)</span> This is the tutorial I've been talking about: <a href=\"http://llvm.org/docs/tutorial/index.html\" target=\"_blank\" title=\"http://llvm.org/docs/tutorial/index.html\">http://llvm.org/docs/tutorial/index.html</a> - see if you're interested.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29056919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413226675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess the reason why it has to be written in C++ is for interfacing with LLVM ?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29057107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413226960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, but you have other options too. This very same tutorial, for example, is available in OCaml as well.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29057187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413227102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>for anyone interested in the c++ kaleidoscope tutorial, i've got it building and checked in here: <a href=\"https://github.com/gwk/clang-toy\" target=\"_blank\" title=\"https://github.com/gwk/clang-toy\">https://github.com/gwk/clang-toy</a><br>\nthis uses the clang 3.5 release binaries, and the clang 3.5 version of the docs. as far as i can tell, the tutorial is quite version-sensitive. there were a couple missing flags in the stated compiler command; i've provided a simple make file to get it to parse. i also picked out all of the sample kaleidoscope code from the chapters, and put them in files in test/. you can inoke them with e.g._bld/kaleidoscope &lt; test/ch7.ks<br>\ncheck out the mandelbrot ascii art :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29106930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413314051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adrien.guillo@gmail.com\">@Adrien Guillo (F2'14)</span> <span class=\"user-mention\" data-user-email=\"a.alekseyev@inventati.org\">@Alex Alekseyev (F1'14)</span> i've tried out the OCaml version of the tutorial in the past; the barrier to entry was much higher (at least at the time - in the last year) because the OCaml bindings only exist if you build LLVM yourself and have OCaml installed on your system (supposedly it autodetects). getting up and running becomes a multi-hour project.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29106978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413314163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>I did build LLVM myself, but I don't know OCaml and don't feel like learning two things at once. I'm also planning to fiddle with Clang a little, so not much choice for me. On the other hand, I believe <span class=\"user-mention\" data-user-email=\"adrien.guillo@gmail.com\">@Adrien Guillo (F2'14)</span> was about to go with Rust or Python.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29107375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413314690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>forking this thread to LLVM Kaleidoscope tutorial...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29152435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "pair programming/new project",
            "submessages": [],
            "timestamp": 1413393683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>(from pair programming/new project)<br>\nI just finished reading the tutorial. At this point I don't see any reason to get into the clang APIs, because the LLVM IRBuilder looks easy enough for my purposes. I'm also a ways away from actually trying this stuff out in ploy, because (I think) I first need to break ploy closure objects into closure data + global functions. If anyone wants to discuss the tutorial I'd be happy to, either over zulip or in person on Thursday morning or late afternoon.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29152628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "LLVM Kaleidoscope tutorial",
            "submessages": [],
            "timestamp": 1413393925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae8dfd31299fb204434caa2f82cf4fc9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a huge JSON file that contains a graph representation with data that I need to process.. I'm afraid javascript will be too slow to do it, as there is a lot of processing to do. Does anybody know if I'm likely to have considerable performance gains if I offload the task to C++? How good is C++ with JSON? I know there are libraries, but I don't know if I'd get performance gains with them. </p>\n<p>I'm likely to experiment with this, but I thought I'd ask here to see if anybody ran into a similar situation.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29427112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "timur.ridjanovic@gmail.com",
            "sender_full_name": "Timur Ridjanovic (F'13)",
            "sender_id": 2859,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "JSON",
            "submessages": [],
            "timestamp": 1413901893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm trying to implement a function over a container which has a generic implementation, but can be implemented more efficiently if the container has random access iterators. It feels like I should be able to write a generic function which is specialized on <code>C::iterator::iterator_category</code> somehow, but it's not clear how exactly it would work. Does anyone have any pointers?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31602492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "template speialization on member types",
            "submessages": [],
            "timestamp": 1417365855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>In case anyone's curious, the answer I ended up finding elsewhere was this:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">C</span><span class=\"o\">&gt;</span>\n<span class=\"k\">auto</span> <span class=\"n\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"o\">&amp;</span><span class=\"n\">container</span><span class=\"p\">,</span> <span class=\"n\">random_access_iterator_tag</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">decltype</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// fast implementation</span>\n<span class=\"p\">}</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">C</span><span class=\"o\">&gt;</span>\n<span class=\"k\">auto</span> <span class=\"n\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"o\">&amp;</span><span class=\"n\">container</span><span class=\"p\">,</span> <span class=\"n\">input_iterator_tag</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">decltype</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// slow implementation</span>\n<span class=\"p\">}</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">C</span><span class=\"o\">&gt;</span>\n<span class=\"k\">auto</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"o\">&amp;</span><span class=\"n\">container</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">decltype</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo_impl</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">iterator_traits</span><span class=\"o\">&lt;</span><span class=\"n\">decltype</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">))</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator_category</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I *think* that the extra parameter will get optimized out, since it's never used and it's an empty struct with no behavior, but not quite sure.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31604851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "template speialization on member types",
            "submessages": [],
            "timestamp": 1417368656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/848b72e1fb7be235f1075880e6b045b0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"hackerscool-bot@students.hackerschool.com\">@hackerscool</span> Hello, <br>\nDo we have any C++11 textbooks?  I can't find any in the library.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36391491,
            "is_me_message": false,
            "last_edit_timestamp": 1426006073,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "catherine.ojo@gmail.com",
            "sender_full_name": "Catherine Ojo (SP1'15)",
            "sender_id": 7651,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++11 Texts",
            "submessages": [],
            "timestamp": 1426006025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/849c0e2e2c09df57ba091b26cf836d6a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"catherine.ojo@gmail.com\">@Catherine Ojo (SP1'15)</span> I don't think there are many C++ textbooks in the library, let alone C++11. But if you're looking for some textbooks on C++11, check out <a href=\"http://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996/ref=sr_1_2?ie=UTF8&amp;qid=1426088760&amp;sr=8-2&amp;keywords=modern+c%2B%2B+design\" target=\"_blank\" title=\"http://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996/ref=sr_1_2?ie=UTF8&amp;qid=1426088760&amp;sr=8-2&amp;keywords=modern+c%2B%2B+design\">Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14</a>. The book came out just 3 months ago, and is written by none other than Scott Meyers, one of the best selling C++ authors.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36455154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "bz2228@columbia.edu",
            "sender_full_name": "Bocheng Zhou (W2'15)",
            "sender_id": 7091,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++11 Texts",
            "submessages": [],
            "timestamp": 1426089074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/848b72e1fb7be235f1075880e6b045b0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bz2228@columbia.edu\">@Bocheng Zhou (W2'15)</span> Thank you.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36459334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "catherine.ojo@gmail.com",
            "sender_full_name": "Catherine Ojo (SP1'15)",
            "sender_id": 7651,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++11 Texts",
            "submessages": [],
            "timestamp": 1426092119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cac6d1e6b078dbe912eb03b8d30470787030d330?x=x&version=2",
            "client": "website",
            "content": "<p>I have the above book on kindle, would be interested in pairing on reading (parts of) it <span class=\"user-mention\" data-user-email=\"catherine.ojo@gmail.com\">@Catherine Ojo (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38236961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "msapaydin@gmail.com",
            "sender_full_name": "Mehmet Serkan Apaydin (SP2'15)",
            "sender_id": 7872,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++11 Texts",
            "submessages": [],
            "timestamp": 1429217356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/848b72e1fb7be235f1075880e6b045b0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes.  What is the name of the book?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38241143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "catherine.ojo@gmail.com",
            "sender_full_name": "Catherine Ojo (SP1'15)",
            "sender_id": 7651,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++11 Texts",
            "submessages": [],
            "timestamp": 1429222604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Can I get some guidance on the canonical way in C++ to pass a function w/ arguments to another function, and then call that function at a later time? I'm mostly trying to figure out <code>std::bind</code>, I suppose, but I'm not sure I'm doing this the right way... I know it can be done with plain function pointers but I assume C++ has a fancier way of doing it than that</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47933558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444069099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>basically I'm trying to do the equivalent of </p>\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">):</span>\n   <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>in a sane way</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47933594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444069171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm not sure if anyone pays attention to this stream though lmao</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47933604,
            "is_me_message": false,
            "last_edit_timestamp": 1444069193,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444069188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>C++ at RC: \"why would we write C++ if we could write all these fun languages?\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47935057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444072054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know what the right way to do this is, but I've used <code>std::bind</code> in the past and it seemed to work ok. I don't really know how to use it, though -- I just googled it and did whatever google told me to do.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47936244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444074625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I figured out what I was doing wrong :) but thatnks <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47936960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>*thanks, even</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47936966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>actually just figured it out like 2 minutes ago hahahaha</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47936970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and yeah I'm totally a cargo cultist when it comes to <code>std::bind</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47936999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but yeah in this case I totally was just missing a <code>&amp;</code> and didn't notice <strong>**SIIIGHHHH</strong>*</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh yeah, one of my favorite errors! You're probably already using clang, but if not, I've found clang error messages to be way more helpful than gcc or VC++.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am actually using gcc because that's what's compatible with ESX :P </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ian@theknown.net\">@Ian Whitlock (S'13)</span> I wonder if you're the only RC alum who writes C++ professionally? Leah used to, but it's all Ruby nowadays, and I sometimes write C++ but all of my real production stuff has to be pure C.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It's a distinct possibility</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Argh that sucks. Clang will often tell you that you're missing an <code>&amp;</code> and suggest adding it.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I mostly don't know what I'm doing</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm boostrapping C++ knowledge as I go hahaha</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it does make me feel like a Real Legit Hardcore Haxxxxxor though</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47937206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444076912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the <code>std::bind</code> syntax is horrid</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47946942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444094597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but yes, if templates are not allowed, then <code>std::function</code> is the way to go</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47946946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444094612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>fwiw I prefer lambdas over <code>std::bind</code>. latter feels like a misfeature.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48016862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "passing around functions",
            "submessages": [],
            "timestamp": 1444174321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Has anyone used rtags or any other proper thing that will let you trace symbol definitions, etc.? I've tried ctags and etags in the past, but they're basically hacks, and they have a really high failure rate. VC++ with Visual Studio is great, but VC++ itself has pretty terrible error messages, so right now I'm using both VC++ and clang to get both good symbol tracing and navigation and good error messages. This is sort of annoying, though.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56772504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rtags / other way to trace symbols",
            "submessages": [],
            "timestamp": 1462385163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Rtags sounds great, but.... the last time I tried to set up an emacs mode to use something like that, it took a day and still didn't work 100%, so I'm not sure it's worth the time to try.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56772544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rtags / other way to trace symbols",
            "submessages": [],
            "timestamp": 1462385237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, one reason that VC++ error messages suck is that, until quite recently, they didn't use an AST for templates. It was just text substitution, like C macros.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56772604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rtags / other way to trace symbols",
            "submessages": [],
            "timestamp": 1462385365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Bit of a shot in the dark here, but my Spidey sense says <span class=\"user-mention\" data-user-email=\"cheng754@gmail.com\">@Shaun Yi Cheng (SP1'16)</span> might have relevant experience.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56774192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rtags / other way to trace symbols",
            "submessages": [],
            "timestamp": 1462387980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nick@hackerschool.com\">@Nick Bergson-Shilcock</span>  Thanks for the mention. I probably would not see this thread otherwise.<br>\n<span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span>  Hey Dan, I've been doing C++ for years so I understand that exact frustration. VC++ is the best IDE to trace symbol definitions, which is super useful when browsing spaghetti code. I could just eat lunch with one hand and use the other hand to right click and go to definition etc etc. But at the same time error messages are bad/lengthy especially when it involves templates. I recently came across this example:</p>\n<p>#include &lt;iostream&gt;<br>\n#include &lt;vector&gt;<br>\n#include &lt;memory&gt;</p>\n<p>int main()<br>\n{<br>\n    std::vector&lt;std::unique_ptr&lt;int&gt;&gt; foo;<br>\n    std::vector&lt;std::unique_ptr&lt;int&gt;&gt; bar = foo;<br>\n    return 0;<br>\n}</p>\n<p>The error messages from g++ is a lot easier to decipher than VC++ 2015.  In g++ it basically says unique_ptr's copy constructor is disabled. In VC++2015, it creates a lot of gibberish, which only becomes more decipher-able after I already understand the answer from g++. <br>\nI have used ctags and found it usable but unreliable at times. Never heard of rtags until you mentioned it. I might try it sometime. Sorry, I guess I didn't provide any new solutions other than saying that I am in the same boat - I like to use VC++ to browse large code base, and if needed, use multiple compilers to get different error messages.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56776626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rtags / other way to trace symbols",
            "submessages": [],
            "timestamp": 1462392022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a way to do this for a member of a class? I can get this to work if it's just a function, but I'm trying to overload <code>operator==</code> a class of <code>Foo&lt;T&gt;</code> so that it only compares equality if for some <code>Foo&lt;T&gt;</code> and <code>Foo&lt;U&gt;</code>, <code>U == T</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56865439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462574857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>oh goodness</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462576450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I have successfully avoided template magic. whether or not it was intentional, I don't know.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462576587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I'm going to go with a workaround. The member function will just call a <code>helper</code> function with the appropriate template specializations.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462576895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that I either need to never use templates or sit down and read one of the 1k page books about templates. But I'm working in this codebase where a tiny part is templated and the rest isn't, so it doesn't seem worth it to spend the time to learn it \"for real\".</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462576937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>does the helper method mean that <code>operator==</code> just won't be defined?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462576961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>if so, that seems like an acceptable solution, since it would get inlined?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56866749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462577372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, I have a method that calls a helper function template with <code>enable_if</code> to only call <code>==</code> if <code>T == U</code>. This seems like a hack because it seems like  <code>==</code> itself should handle that.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56867091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462577999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>Would it be a problem if you just compare the resulting types,  like this:</p>\n<p>#include &lt;iostream&gt;<br>\n#include &lt;typeinfo&gt;<br>\nusing namespace std;</p>\n<p>template &lt;class T&gt;<br>\nclass foo {<br>\n   public:<br>\n   bool operator==(auto &amp;a) {<br>\n     return typeid(*this)==typeid(a);<br>\n   }<br>\n};</p>\n<p>int main()<br>\n{<br>\n  cout &lt;&lt;\"Equality:\";<br>\n  foo&lt;int&gt; fi;<br>\n  foo&lt;int&gt; df;<br>\n  cout&lt;&lt;(fi==df)&lt;&lt;endl;<br>\n}</p>\n<p>//compiled with g++  -std=c++1y</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56867161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462578124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I'm understanding that correctly, that's the same as <code>return std::is_same&lt;T, U&gt;</code>, but I also want to check the equality of the actual things (or some method on the actual things). I can do</p>\n<div class=\"codehilite\"><pre>if (std::is_same&lt;T, U&gt; ) {\n  // normal compare in here\n}\n</pre></div>\n\n\n<p>except that doing that causes a compile error in VC++ (works fine in clang and gcc, though).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56867239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462578312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, I have the hack working and I'm going to see if I can make it less hacky by using tag dispatch on <code>operator==</code>. That seems like it should be straightforward, but then again so did using <code>enable_if</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56867394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1462578703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b085bcb2533a000bf8505dcada29345e?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is not super helpful to your immediate problem, but I've been doing some work with D, and it makes this SFINAE/static-if/compile-time-introspection stuff really really easy. If you're really interested in this stuff, it's definitely worth taking a look at.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 57811976,
            "is_me_message": false,
            "last_edit_timestamp": 1463594511,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carljv@gmail.com",
            "sender_full_name": "Carl Vogel (W'14)",
            "sender_id": 5023,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "SFINAE / enable_if with member function",
            "submessages": [],
            "timestamp": 1463594154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm porting some code Windows code for a threadsafe (unordered) map that's designed to be fast and have no allocations. On Windows/VC++, this is implemented as a <code>volatile</code> pointer plus an offset, so basically it's a hash table backed by a run-time resizable C array. Inserting new entries is handled by doing <code>interlockedcomparexchange64</code> and only updating the key if the key matches the sentinel value for an empty  slot (and otherwise re-probing to find another slot).</p>\n<p>This works fine because <code>volatile</code> on VC++ (with the appropriate compiler options) acts as a memory barrier and <code>interlockedcompareexchange64</code> lets you do some pointer arithmetic and compare&amp;exchage two arbitrary locations. From a machine code standpoint, that makes sense because it should just compile down to a <code>cmpxchg</code> instruction.</p>\n<p>This is unsafe on clang/gcc because <code>volatile</code> doesn't guarantee memory ordering. That's what <code>std::atomic</code> is supposed to be for. But, if I'm reading the <code>std::atomic</code> docs correctly, <code>compare_exchange_weak</code> and <code>compare_exchange_strong</code> can't be used on arbitrary addresses. Instead, they can only be used to compare and and exchange an \"actual\" atomic with some value.</p>\n<p>One way to solve this would be to write the appropriate assembly (or find the appropriate intrinsics if they're available). I'm much more comfortable in assembly than in C++, and we're already not cross-platform since we have a custom compiler in the codebase that only emits x86 code. However, I think that creates a maintainability problem for anyone who isn't me.</p>\n<p>The other way I can think of to do this is to use <code>std::atomic</code>. In that case, AFAICT I can't just re-use the existing code that basically takes a raw C array. I also can't use <code>std::array</code> since that's templated on array size and the array is supposed to be resizable. Well, I technically could but it would be a huge mess, so that's' out. I can use <code>std::vector</code> by creating a wrapper around <code>std::atomic</code> (the wrapper will be required because <code>vector</code> assumes that the underlying objects are copy constructable, and <code>atomic</code> isn't copy constructable. That would make re-sizing unsafe (from a thread safety standpoint), but resizing is already unsafe in the existing code, so that isn't a loss. However, that seems like a mess, much messier than just writing the assembly myself. Is there an easier/better way to do this that won't result in a maintainability burden for folks who aren't fluent in assembly?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60866375,
            "is_me_message": false,
            "last_edit_timestamp": 1466456965,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "std::atomic or other mechanism for threadsafe array/map",
            "submessages": [],
            "timestamp": 1466456681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, it looks like <code>__sync_bool_compare_and_swap</code> should basically do what I want. Maybe.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60869128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "std::atomic or other mechanism for threadsafe array/map",
            "submessages": [],
            "timestamp": 1466461819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>You seem to be more way more knowledgeable than me on the topic, but if you're interested in the maintainability of your code, I'd say two things. First that if you use volatile for its memory guarantees you should put three lines of // DANGER comments above and below, because that is relying on Visual C++ being very conservative. <code>volatile</code>doesn't do what most programmers expect, and if in that case Visual C++ does, it's really an exception. <br>\nOther than that you should be able to either use intrinsics or std::atomic, although I don't know much about the subject, I know that preshing's blog (<a href=\"http://preshing.com\" target=\"_blank\" title=\"http://preshing.com\">preshing.com</a>) and bartosz milewski's blogs are great resources.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60869208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "std::atomic or other mechanism for threadsafe array/map",
            "submessages": [],
            "timestamp": 1466462014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there an easy way to get \"easily\" get multi-platform tasks that share a threadpool and have a priority? The priority system doesn't have to be sophisticated.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61468339,
            "is_me_message": false,
            "last_edit_timestamp": 1467768319,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "async tasks?",
            "submessages": [],
            "timestamp": 1467767389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see there's <code>std::async</code> but those don't even really appear to be tasks. AFAICT, depending on what launch policy you choose, you can have every <code>async</code> launch in a new thread, or you can have them always run in the same thread, or... something that's implementation defined and depends on your compiler.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61468392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "async tasks?",
            "submessages": [],
            "timestamp": 1467767507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>AFAICT, in terms of cross-platform options, the obvious options are to use boost (currently banned from the project I'm working on) or write my own thread pool either using<code>std::thread</code> or <code>std::async</code>with the launch policy that makes it basically a wrapper around <code>std::thread</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61468459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "async tasks?",
            "submessages": [],
            "timestamp": 1467767637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there some other option that I'm missing?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61468496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "async tasks?",
            "submessages": [],
            "timestamp": 1467767689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So... since the C++ stream has apparently become the \"Dan asks questions about C++ stream\".</p>\n<p>Does anyone know of a hosted CI setup that will let you use modern C++ (C++14)? As things are now, it looks like we're going to use appveyor for Windows CI and set up a couple of local boxes to handle Mac CI, and maybe a couple of VMs to handle Linux CI. I would prefer to avoid running our own CI and would love to hear about a hosted option that we could use. However, the hosted solutions that I know of are not sufficient. Here's a bug from our internal bug tracker describing issues we've had with Travis:</p>\n<p>Appveyor has been pretty solid. We get results from CI within seconds or tens of seconds and AFAIK we've only seen one false failure. But they only support Windows.</p>\n<p>With Travis, we have (at least) three serious issues:<br>\n1. The vast majority of failures are due to flakiness or changes on their end, making the CI results noisy to the point of uselessness.<br>\n2. When we get failures due to changes on their end, it's often very time consuming to fix the failures. Over the lifetime of the project I think Alex has spent a day (or more?) on CI fixes, and I've spent probably two days on CI. The time alone is bad enough, but this is substantially more disruptive than it sounds because the time is often and hour and an hour there.<br>\n3. Travis is really slow. It looks like we could pay more money and speed it up to the point where it \"only\" takes 2 minutes to finish a CI run, but that's still 1-2 orders of magnitude slower than Appveyor.</p>\n<p>On 1 &amp; 2, if you look at the Travis bug tracker, it's easy to see that <a href=\"https://github.com/travis-ci/travis-ci/issues/6300\" target=\"_blank\" title=\"https://github.com/travis-ci/travis-ci/issues/6300\">C++ CI is a low priority for them</a>, and they're not really interested in making <a href=\"https://github.com/travis-ci/travis-ci/issues/5959\" target=\"_blank\" title=\"https://github.com/travis-ci/travis-ci/issues/5959\">changes that would make C++ CI</a> <a href=\"https://github.com/travis-ci/travis-ci/issues/5821\" target=\"_blank\" title=\"https://github.com/travis-ci/travis-ci/issues/5821\">easier to set up</a> for anyone who doesn't want to use an obsolete compiler.</p>\n<p>On 3, Travis is allegedly faster if you have a <code>travis.yml</code> that has <code>sudo: false</code>, but we can't do that at the moment because we rely on apt-get. It looks like <a href=\"https://github.com/boostorg/hana/blob/master/.travis.yml\" target=\"_blank\" title=\"https://github.com/boostorg/hana/blob/master/.travis.yml\">hana has a .travis.yml that installs modern compilers with without sudo</a>, by manually downloading and running the source and install process via what is effectively a giant shell script. From looking at their actual CI results, it doesn't appear that they get much speedup from that doing, although maybe they get more reliability? The author of that yaml file <a href=\"https://github.com/travis-ci/travis-ci/issues/6300#issuecomment-232842843\" target=\"_blank\" title=\"https://github.com/travis-ci/travis-ci/issues/6300#issuecomment-232842843\">indicates that he spends a ton of time tweaking it to keep it up to date (with breaking Travis changes???)</a>, and that they have to update their Travis setup almost daily, so I don't think that would solve (2).</p>\n<p>I've looked into CircleCI a bit, and it looks like it's likely to be substantially faster, perhaps solving (3), but they also appear to not really care about C++ support.</p>\n<p>If we do nothing, we'll have working (and pretty good) Windows CI, and no Linux or Mac CI. I think that's actually as long as no one wants to contribute to this project, but that we'll have problems pretty quickly if any outside contributors want to work on this. It's understandable that neither Travis nor Circle care about C++, but it means that there doesn't appear to be a passable off-the-shelf CI solution for us.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62491706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "CI solution?",
            "submessages": [],
            "timestamp": 1469994119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm trying to emulate the behavior of a graphics display using just the console in C++ (i.e. an ASCII renderer) and since I also want to display animations, I need to control when cout flushes its buffer to avoid flickering. What's the best way to accomplish this?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62627966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470270862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/719bfb1c4c0234d9526cc67dfce695a1808eaaea?x=x&version=1",
            "client": "website",
            "content": "<p>not sure but maybe ncurses is what you want?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62628143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "me@danielputtick.com",
            "sender_full_name": "Dan Puttick (he) (W2'20)",
            "sender_id": 9489,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470271222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I've used ncurses before and it's very good, but I'm trying to avoid it this time, using just something like iostream or some OS-specific function, at this point I don't mind making a platform-specific implementation (I'm running OS X).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62628410,
            "is_me_message": false,
            "last_edit_timestamp": 1470272857,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470271805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I was thinking of something like telling cout to use a very big buffer so that it never gets flushed before I manually call cout &lt;&lt; flush</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62628597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470272284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>My guess was that doing something like this wouldn't require ncurses, but I might be wrong...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62628634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470272387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could just use a <code>stringstream</code> instead of using <code>cout</code> directly, and then write the contents of the <code>stringstream</code> to <code>cout</code> whenever you want to flush it - I don't think there's a way to make <code>cout</code> buffer things more than it normally would</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62628845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470272867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doy@tozt.net\">@Jesse Luehrs (F1'14)</span> I'm not super familiar with streams beyond basic cout and cin manipulation, but based on your suggestion I wrote something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">stringstream</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"c1\">// write stuff to str with str &lt;&lt; &quot;stuff&quot;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">rdbuf</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>But I guess I'm doing something wrong, because I'm still getting flickering when I render animations.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62629593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Full control of cout flush",
            "submessages": [],
            "timestamp": 1470274648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>We have two things that (IMO) conflict, and I don't know what the best way to resolve them is.</p>\n<p>1. RAII! It's great.</p>\n<p>2. Things that take a long time to destroy. An example might be a multi-threaded queue that holds ownership of items until they're consumed. Destructing the queue without letting items drain out causes the items to leak, and the process of deleting the items themselves is non-trivial, so having the queue destructor understand how to delete the items and then delete them would also take a while.</p>\n<p>It's not technically illegal to have a destructor that can hang for an arbitrarily long period of time, but we don't really like that idea, so we have <code>Shutdown</code> methods for anything that has to wait on something else before destructing (or things that are complicated). This is also nice because we don't have to worry about being extremely careful about not throwing an exception (because throwing an exception in a destructor is dangerous, and just having blanket catch in the destructor means that we can't really handle exceptions properly).</p>\n<p>However, this means that we have these methods that must be called before the destructor is called, and since the destructor can be called for all weird reasons if an exception pops up, it's hard to reason about the code.</p>\n<p>One solution would be to adopt the Google approach and ban C++ exceptions, but that ship has sailed. Is there another really simple solution to this problem?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100050946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "RAII vs. things that take a long time to destroy",
            "submessages": [],
            "timestamp": 1471410952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't think of one... this is a classic example of why I try to avoid C++, honestly. :/</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100076369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "RAII vs. things that take a long time to destroy",
            "submessages": [],
            "timestamp": 1471464741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am thinking of going to the coming C++ meetup - <a href=\"http://www.meetup.com/nyccpp/events/233772015/\" target=\"_blank\" title=\"http://www.meetup.com/nyccpp/events/233772015/\">http://www.meetup.com/nyccpp/events/233772015/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100598279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ Meetup",
            "submessages": [],
            "timestamp": 1472673442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone else interested?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100598281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ Meetup",
            "submessages": [],
            "timestamp": 1472673450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4c0e58ba10336fc4edffdcbd0f158f2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not this time, but if there's future c++ meetups you're going to, I'd be interested.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100599459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "Leah.A.Hanson@gmail.com",
            "sender_full_name": "Leah Hanson (F1'16)",
            "sender_id": 848,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ Meetup",
            "submessages": [],
            "timestamp": 1472675524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb7f1991f31f7d940da112842cec3471a8459232?x=x&version=1",
            "client": "website",
            "content": "<p>I'm already planning to go to Naomi's talk that day but next time I would go!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100599666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alinen@savvysine.com",
            "sender_full_name": "Aline Normoyle (F1'16)",
            "sender_id": 100030,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ Meetup",
            "submessages": [],
            "timestamp": 1472675927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>FYI: This is *next* Thursday, not today.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100622227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ Meetup",
            "submessages": [],
            "timestamp": 1472731226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to setup <a href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md\" target=\"_blank\" title=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md\">Catch</a> and the tutorial looks really straightforward, but I'm getting compilation errors. <br>\nI did <code>wget https://raw.githubusercontent.com/philsquared/Catch/master/single_include/catch.hpp</code> to grab the single-header version of Catch and then I made a file with their example under 'Writing Tests' and I saved it as example.cpp. <br>\nWhen I compile with g++ I get screenfuls of error messages and when I compile with clang++ I get the more helpful error '...catch.hpp:74:10: fatal error: 'sstream' file not found<br>\n#include &lt;sstream&gt;'<br>\nI googled this error and it looks like a lot of the time when people get similar errors its because they're trying to compile a C file when they mean to compile a C++ file.. but my extension is .cpp so that doesn't seem to be the issue. I also tried compiling with the flag  -std=c++11 with both clang++ &amp; g++ to no avail.<br>\nAnyone know what might be wrong/ have suggestions for what to try?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101300281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474340517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure if will work, but try this: <code>gcc -x c++ example.cpp -lstdc++</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101300825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474341949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>what OS are you using? gcc version?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101300867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474342001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmmm, thanks Junior, but that also didn't work... when I run that I get the screenfuls of error messages that I was getting before. The actual error at the bottom is \"ld: symbol(s) not found for architecture x86_64\" which I think means it just can't find certain functions and above all the errors are of the form \"std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long) const\", referenced from: ...\" so I thought it might be a C11 issue...<br>\nI'm on OSX (Version 10.10.3) and I'm using gcc version 7.0.0 or clang version 4.0.0</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101316214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474380671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh wait it can't find std::all_of which is c11 so I bet it totally is a c11 issue. Going to check my paths!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101316421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474381009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I think I had a similar problem on a Linux machine some time ago. Just more random guessing, try adding this option to gcc <code>-stdlib=libstdc++</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101316468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474381107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><code>Catch</code> is  C++ so you should definitely compile it with <code>g++</code> or <code>clang++</code>. If you use <code>gcc</code> and then do <code>-x c++ -stdlib=libstdc++</code> it's somewhat equivalent to directly calling <code>g++</code> :)<br>\nWhat exactly are the error messages <span class=\"user-mention\" data-user-email=\"annie.cherk@gmail.com\">@Annie Cherkaev (S2'16)</span> ? And the contents of your file?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101351561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474459573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>&lt;sstream&gt; is a C++ only header, which is why you can have that problem when you use a C compiler (they don't know about the C++ standard library, and that's what the options Junior uses do: they force the c compiler suite to compile in \"C++ mode\". Which works since gcc can handle both C and C++ using the same command line, and clang mimics gcc's options.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101351609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474459732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>If I copy paste into <code>test_catch.cpp</code>:</p>\n<div class=\"codehilite\"><pre>#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\n#include &quot;catch.hpp&quot;\n\nunsigned int Factorial( unsigned int number ) {\n    return number &lt;= 1 ? number : Factorial(number-1)*number;\n}\n\nTEST_CASE( &quot;Factorials are computed&quot;, &quot;[factorial]&quot; ) {\n    REQUIRE( Factorial(1) == 1 );\n    REQUIRE( Factorial(2) == 2 );\n    REQUIRE( Factorial(3) == 6 );\n    REQUIRE( Factorial(10) == 3628800 );\n}\n</pre></div>\n\n\n<p>and I download <code>catch.hpp</code> and put it in the same directory as <code>test_catch.cpp</code>, and then I do <code>g++ test_catch.cpp</code>, it works fine on my machine:</p>\n<div class=\"codehilite\"><pre>[adrien@MacBookPro ~/dev/cpp]$ ./a.out\n===============================================================================\nAll tests passed (4 assertions in 1 test case)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101351664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474459881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey! Thanks for the explanation, and yeah that's exactly the file I'm trying to compile with catch.hpp in the same directory... I actually also tried it on someone else's machine last night and it worked no problem, I think my problem is that I built gcc &amp; clang from llvm source a few weeks ago, and the installation was a little tricky so I think I might have messed up some kind of linking... The error messages I'm getting say \"Undefined symbols for architecture x86_64:\" at the beginning and then dozens of lines of messages of the form \"\"std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long) const\", referenced from: &lt;something involving Catch&gt;; I was thinking it was a c11 linking problem because of the \"cxx11\" in all the errors... I spent a couple hours yesterday trying to figure out what exactly the problem was but I couldn't figure it out... so I think I'm just going to nuke llvm over the weekend and do a clean reinstall and see if that fixes things.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101357293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474471674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Can you do a <code>which -a g++</code> ?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101358305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474473278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>It most likely comes from a somewhat not working LLVM shadowing your system LLVM (which should be working :))</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101358320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474473322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I've never been sure about the advantages or disadvantages of header-only implementations. The rule of thumb for me is to implement functions in a .cpp whenever possible, but there are many header-only libraries out there, and I remember I read somewhere that if the implementation is in the header file it can be inlined by the compiler (but I thought I had to add 'inline' for that). Will I end up with duplicate function definitions in my executable if I use header-only implementations? Why doesn't the linker seem to complain about the 'duplicate definitions'? When should I make header-only implementations in general?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101397459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474562041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Unless you clearly know why, you should implement functions in your .cpp.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101399143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474565093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're using templates, I believe you have to do something like this, otherwise the compiler won't know which types to specialize down to until link time, at which point it's too late. Even here it's not uncommon to have two header files, one of which is, well, the header, and the other of which contains the implementation even though it's technically a header file. It's also technically possible to do using a the normal h/cpp split by explicitly stating all of the specializations you're going to have in the cpp, but IMO that's annoying because it makes the templated code non-general and it requires  library users to go in and specify every type they're going to use.</p>\n<p>I'm not an expert, but I believe another reason people do header-only stuff is just because it's simpler to distribute the code for use as a library.</p>\n<p>The inlining thing is true, but you can also get the same benefit by using link-time optimization (LTO). LTO is notorious for making builds take forever, but... doing everything header-only also causes builds to take forever. Additionally, the latest version of clang has \"thin-LTO\", which allegedly gives you the benefits if LTO without making the compile take forever (I haven't tried it, but I should).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101399149,
            "is_me_message": false,
            "last_edit_timestamp": 1474565509,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474565107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Headers usually have 'include guards' to avoid defining things twice.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101399154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474565116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You just got 2 simulatenous answers for the price of one ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101399168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474565160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>But even with the include guards, let's say I have one header-only library and two .cpp files that use it. If I generate the object files for those .cpps, I'd get the functions from the library defined in both object files. Then if I try to link everything I should get an error because of the duplicate definitions.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101400467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474567208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I just did a quick test and I did get the duplicate definition error. The error only goes away if I explicitly define the function in the header-only library as inline.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101400500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474567300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>The test I did was with C-style functions. Now I re-defined the function in the header-only lib as a static function of a class and I didn't get the linking error.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101401011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474568141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Running <code>nm</code> on the object file I see that the function inside the class is marked as <code>W</code>, which is the same type I get for an out-of-class explicitly inlined function. Apparently only functions inside a class get automatically inlined.</p>\n<div class=\"codehilite\"><pre>$ nm test.o\n0000000000000000 W _Z41no_class_explicit_inline_library_functionv\n0000000000000000 T _Z44no_class_no_explicit_inline_library_functionv\n000000000000000b T _Z45no_class_no_explicit_inline_consumer_functionv\n0000000000000000 W _ZN9SomeClass41class_no_explicit_inline_library_functionEv\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101401505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474568961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, so the compiler has marked both the static member function inside the class and the inlined version of the function as Weak symbols. I googled about the weak symbols and the rule the linker follows is that if there are multiple weak symbols and no strong symbol of the same same, the linker then chooses one randomly.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101402379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474570334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting, that's why I don't get the linking error. Member functions also get marked as weak symbols. I'm still not sure that weak symbol necessarily means inline function, but at least now the \"header-only implementations get inlined\" thing makes more sense to me <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101403113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474571597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>The Wikipedia says this about weak symbols - A weak symbol denotes a specially annotated symbol during linking of Executable and Linkable Format (ELF) object files. By default, without any annotation, a symbol in an object file is strong. During linking, a strong symbol can override a weak symbol of the same name. In contrast, two strong symbols that share a name yield a link error during link-time. When linking a binary executable, a weakly declared symbol does not need a definition. In comparison, (by default) a declared strong symbol without a definition triggers an undefined symbol link error.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101405149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474575809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I do not know how the c++ compiler decided that an inline function is a candidate for being a weak symbol</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101405191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header-only implementations",
            "submessages": [],
            "timestamp": 1474575845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\">@Adrien Lamarque (S1'16)</span> woah, which -a g++ gets me<br>\n<code>Icarus:templates annie$ which -a g++\n/usr/local/bin/g++\n/usr/local/bin/g++\n/usr/local/bin/g++\n/usr/local/bin/g++\n/usr/bin/g++\n/usr/local/bin/g++</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101410429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474587623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>usr/bin/g++ Totally worked! Thanks so much Adrien!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101410478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474587811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":party_popper:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/party_popper.png\" title=\":party_popper:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101410480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1474587827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>Does anybody have experience with CPPUTest? I have some quick questions</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101589580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475008972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>I'm setting up a new project and trying to do things properly</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101589594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475009024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>is there any idiomatic way to run a test that runs the full program over a certain input and checks against a certain output?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101589646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475009086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>or is that just not needed and I should just focus on testing invidual components/functions?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101589650,
            "is_me_message": false,
            "last_edit_timestamp": 1475009124,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475009092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I used them in my last them. Can't say I am an expert though</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475013709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>We used CPPUnit to test the functions though</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475013941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Had a separate regression framework to test the full program.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475013973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>If I were you, I would probably use it mainly for the unit testing purpose and not test the full program with it.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475014028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>yeah that's what I was thinking. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592341,
            "is_me_message": false,
            "last_edit_timestamp": 1475014121,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475014051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>what was the framework?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101592344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Testing frameworks",
            "submessages": [],
            "timestamp": 1475014058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8e94b6f934d3ba2cca228d3b6bfde76e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've talked with <span class=\"user-mention\" data-user-email=\"vipyne@gmail.com\">@Vanessa Pyne (F2'16)</span> about sharing C++ tutorials. Here are some that I've found:<br>\n- <a href=\"https://www.udemy.com/free-learn-c-tutorial-beginners/\" target=\"_blank\" title=\"https://www.udemy.com/free-learn-c-tutorial-beginners/\">Udemy</a> video tutorials for beginners<br>\n- <a href=\"https://www.coursera.org/learn/c-plus-plus-a\" target=\"_blank\" title=\"https://www.coursera.org/learn/c-plus-plus-a\">Coursera</a> video tutorials for C programmers (has two parts, A and B)<br>\n- <a href=\"http://www.learncpp.com/\" target=\"_blank\" title=\"http://www.learncpp.com/\">Learncpp</a> set of posts and exercises.</p>\n<p>I haven't done any of these, so tell me what do you think. I am probably going to start the last one, learncpp</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101658695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "marianotrebino@gmail.com",
            "sender_full_name": "Mariano Trebino (F2'16)",
            "sender_id": 100204,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475160565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9690951b67c661578fe5cc381ff00da?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>Cool, have you checked the book  Modern Effective C++ ? I heard it's a good book, especally  if you already have an idea how C++ works </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101658997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "marcioklepacz@gmail.com",
            "sender_full_name": "Marcio Klepacz (F2'16)",
            "sender_id": 100196,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475161078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8e94b6f934d3ba2cca228d3b6bfde76e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm looking the table of contents of the book. Seems pretty nice but currently out of my scope. I will read it after the tutorials.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "marianotrebino@gmail.com",
            "sender_full_name": "Mariano Trebino (F2'16)",
            "sender_id": 100204,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475165393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"marianotrebino@gmail.com\">@Mariano Trebino (F2'16)</span> I have that book at my place if we don't have it here. You're welcome to check it out.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101665499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475172356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b15fa198d8b13ae4dce3d72dad761804?d=identicon&version=1",
            "client": "website",
            "content": "<p>im also learning C++ while here. we should plan on meeting every so often to bounce ideas / questions off each other. </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101667933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "m-krenik@hotmail.com",
            "sender_full_name": "Matthew Krenik (F2'16)",
            "sender_id": 100205,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475177043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm up to meet once a week or so.  i'm only doing little stuff on the side.  like today i compiled a super simple multi file program from scratch.  if anyone wants to do something silly like generate the assembly for a hello world program, lets pair!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101668550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475178141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Did I hear assembly! <img alt=\":heart_eyes:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/heart_eyes.png\" title=\":heart_eyes:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101668617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475178269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>you heard right <span class=\"user-mention\" data-user-email=\"satabdidas@gmail.com\">@Satabdi Das (F1'16)</span>  lmk what time works for you if you want to pair :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101668660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1475178362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b15fa198d8b13ae4dce3d72dad761804?d=identicon&version=1",
            "client": "website",
            "content": "<p>im wanting to finish one or two projects in Bash and the Linux environment before I move on to C++. But I will catch up to ya'll</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101668931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "m-krenik@hotmail.com",
            "sender_full_name": "Matthew Krenik (F2'16)",
            "sender_id": 100205,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Tutorials",
            "submessages": [],
            "timestamp": 1475178853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Anytime next week?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101669060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1475179085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ finally figured out what the problem was! The instructions for building llvm are roughly, check out llvm from svn, then do some build stuff, then cd .., then make a new 'build' dir and do some build stuff there. I think sometime after I did this I thought this file structure was messy so I moved the 'build' directory into the llvm directory... which messed up all my file links. </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101824588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "help setting up Catch unit testing framework?",
            "submessages": [],
            "timestamp": 1475550270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Hey!  I've always been told to understand the C preprocessor as just a big text substitution machine, and nothing more.  Usually that takes me far, but I feel a bit confused about the following code (adapted)<br>\n// THEIR_MACRO and THEIR_OTHER_MACRO imported from somewhere<br>\n// some_variable and some_function_pointer defined somewhere up here... somewhere<br>\n#define MY_MACRO(parameter)                                                                                  \\<br>\n     THEIR_MACRO(some_variable,  some_function_pointer,  parameter)     \\<br>\nTHEIR_OTHER_MACRO(MY_MACRO)                                                                           \\<br>\n#undef MY_MACRO</p>\n<p>Now, at first glance, it kind of looks like there's some sort of function object/pointer MY_MACRO that's being passed to THEIR_OTHER_MACRO which then evaluates the function MY_MACRO at some value(s) of parameter that it provides/figures out somehow.<br>\nBUT, the C preprocessor is not a language in itself, it just substitutes text, or so I've learned.  So like what is exactly going on here in terms of text substitution?  I don't want to misunderstand the actual process and make macros that go horribly wrong</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103529953,
            "is_me_message": false,
            "last_edit_timestamp": 1479327770,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479327713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>#define MY_MACRO(parameter) ...\nTHEIR_MACRO(some_variable, some_function_pointer, parameter)\nTHEIR_OTHER_MACRO(MY_MACRO)\n#undef MY_MACRO\n</pre></div>\n\n\n<p>It looks like you are defining a function-like macro for MY_MACRO. Then you are calling the macro <code>THEIR_MACRO</code> and then you are calling <code>THEIR_OTHER_MACRO</code>.  Although I got a little confused earlier after reading the code because <code>\\</code> at the end of a macro definition means continuation to the next line.</p>\n<p>The arguments to a macro are pre-scanned and completely macro-expanded before they are substituted in the macro body. It's not a function pointer or object. </p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n#define THEIR_OTHER_MACRO(A) \\\n  c = A\n\n#define MY_MACRO \\\n a + b\n\nint main() {\n  int a = 3, b = 4, c;\n  THEIR_OTHER_MACRO(MY_MACRO);\n  printf(&quot;%d\\n&quot;, c);\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479335390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>And I tried this but compilation error - </p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n#define THEIR_OTHER_MACRO(A) \\\n  c = A\n\n#define MY_MACRO(X)                             \\\n a + b\n\nint main() {\n  int a = 3, b = 4, c;\n  THEIR_OTHER_MACRO(MY_MACRO);\n  printf(&quot;%d\\n&quot;, c);\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479335537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Could you please share original code snippet.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479335555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Here's what gcc documentation says - A function-like macro is only expanded if its name appears with a pair of parentheses after it. <br>\n<a href=\"https://gcc.gnu.org/onlinedocs/cpp/Object-like-Macros.html#Object-like-Macros\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/cpp/Object-like-Macros.html#Object-like-Macros\">https://gcc.gnu.org/onlinedocs/cpp/Object-like-Macros.html#Object-like-Macros</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479335742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Ah!  I see it now.  I know I said I was not going to get confused and make sure to treat C macros as JUST text substitution and literally NOTHING else, but it's so hard to not see it as code because on the surface, it does look like it!  As for your example, it fails to compile because the second line of main() expands to</p>\n<div class=\"codehilite\"><pre><span></span>c = MY_MACRO\n</pre></div>\n\n\n<p>And then here the preprocessor complains and pouts because MY_MACRO is defined as something that gets expanded with an argument, but there are no parentheses after MY_MACRO.  If we modify the code as follows...</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n#define THEIR_OTHER_MACRO(A) \\\n    c = A()\n\n#define MY_MACRO(X) \\\n    a + b\n\nint main() {\n    int a = 3, b=4, c;\n    THEIR_OTHER_MACRO(MY_MACRO);\n    printf(&quot;%d\\n&quot;, c);\n}\n</pre></div>\n\n\n<p>The only modification was c = A to c  = A ().  When we try to expand</p>\n<div class=\"codehilite\"><pre><span></span>THEIR_OTHER_MACRO(MY_MACRO)\n</pre></div>\n\n\n<p>on the first pass it expands as before, namely</p>\n<div class=\"codehilite\"><pre><span></span>c  = MY_MACRO()\n</pre></div>\n\n\n<p>It literally pastes the string \"MY_MACRO\" to where A was in the macro. <br>\nNow, this second pass will resolve correctly to</p>\n<div class=\"codehilite\"><pre><span></span>c = a + b\n</pre></div>\n\n\n<p>We're achieving something like passing function pointers through very crude and literal (100% literal) recursive copying and pasting.  Coding the C preprocessor must be pretty easy now that I think about it.  You just do literal symbol substitution with no edge cases, no ifs, ands, nor buts, no context, no nothing.  It's as if I wanted to make a good macros system, but I had something somewhat usable after an hour, called it a day, and never came back to it.<br>\nAs for what code I was trying to understand, if you go to<br>\n<a href=\"https://www.tensorflow.org/versions/r0.11/how_tos/adding_an_op/index.html\" target=\"_blank\" title=\"https://www.tensorflow.org/versions/r0.11/how_tos/adding_an_op/index.html\">https://www.tensorflow.org/versions/r0.11/how_tos/adding_an_op/index.html</a><br>\nand search for \"register_types.h\" (without the quotation marks),  the code snippet immediately underneath does this.  The macro in register_types.h pretty much just runs the macro REGISTER_KERNEL(type) you provide for a whole bunch of type's so you save on copy and pasting over and over again... which is the point of macros I guess!</p>\n<p>If only C was one of those languages capable of having syntactic macros  <img alt=\":anguished:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/anguished.png\" title=\":anguished:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103537232,
            "is_me_message": false,
            "last_edit_timestamp": 1479338556,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C preprocessor",
            "submessages": [],
            "timestamp": 1479338367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm coding math functions in C++ and for many of them, for some input values there is no valid result to return. A simple example: a division with denominator = 0. In Rust, it's possible to do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">numerator</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">denominator</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">f64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">denominator</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">numerator</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">denominator</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>What's the common approach to do something similar in C++? Is returning a pointer to a number a reasonable solution? (nullptr is None) What about \"modern C++\"? unique_ptr?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103541168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479346587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Is c++17 too recent? If not: <a href=\"http://en.cppreference.com/w/cpp/utility/optional\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/utility/optional\">http://en.cppreference.com/w/cpp/utility/optional</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103541722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479347774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Otherwise, I would be tempted to just return a <code>NaN</code> (at least in this specific case)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103541729,
            "is_me_message": false,
            "last_edit_timestamp": 1479347838,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479347827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I didn't know about std::optional, I'm definitely gonna need it at some point, but for the stuff I'm doing right now, I think returning NaN is enough. Thanks! </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103542120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479348708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>You could have access to it as <code>std::experimental::optional</code> via <code>&lt;experimental/optional&gt;</code> if you can use C++14:</p>\n<div class=\"codehilite\"><pre><span></span>$ cat example.cpp\n#include &lt;experimental/optional&gt;\n#include &lt;iostream&gt;\n\nint main(void) {\n    std::experimental::optional&lt;int&gt; x = 3;\n    std::experimental::optional&lt;int&gt; y;\n\n    std::cout &lt;&lt; x.value_or(10) &lt;&lt; std::endl;\n    std::cout &lt;&lt; y.value_or(10) &lt;&lt; std::endl;\n}\n$ g++ --std=c++14 example.cpp\n$ ./a.out\n3\n10\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103548407,
            "is_me_message": false,
            "last_edit_timestamp": 1479363895,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479363843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://en.cppreference.com/w/cpp/experimental/optional\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/experimental/optional\">http://en.cppreference.com/w/cpp/experimental/optional</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103548469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479363973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Is there any real performance difference between<br>\n...<br>\n  for(int ControllerIndex = 0; ControllerIndex &lt; CONTROLLER_MAX; ControllerIndex++)<br>\n  {<br>\n    controller_state *Controller = Input-&gt;Controllers[ControllerIndex];<br>\n  }<br>\n...<br>\nand<br>\n...<br>\n controller_state *Controller<br>\n  for(int ControllerIndex = 0; ControllerIndex &lt; CONTROLLER_MAX; ControllerIndex++)<br>\n  {<br>\n   Controller = Input-&gt;Controllers[ControllerIndex];<br>\n  }<br>\n...<br>\nor does the compiler just spit out the same code / doesn't make much of a difference?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103563068,
            "is_me_message": false,
            "last_edit_timestamp": 1479397537,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479397443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you looked at the assembly for each? (i know almost nothing about compilers).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103563761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479398405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't see any performance impact in a practical sense. In your example, it looks like the *Controller pointer would be allocated once in the  stack of the main function, as opposed to the stack of the for loop in the 2nd version, which would maybe add a tiny amount of overhead.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103564392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479399478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>However, there is in fact zero difference in practice, as your clever compiler allocates the pointer in the main function's stack in both cases : <a href=\"http://stackoverflow.com/questions/982963/is-there-any-overhead-to-declaring-a-variable-within-a-loop-c\" target=\"_blank\" title=\"http://stackoverflow.com/questions/982963/is-there-any-overhead-to-declaring-a-variable-within-a-loop-c\">http://stackoverflow.com/questions/982963/is-there-any-overhead-to-declaring-a-variable-within-a-loop-c</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103564465,
            "is_me_message": false,
            "last_edit_timestamp": 1479399664,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479399557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/GFBtpOVPKZ0f1hum-mVdKBNC/Screen-Shot-2016-11-17-at-11.19.56-AM.png\" target=\"_blank\" title=\"Screen-Shot-2016-11-17-at-11.19.56-AM.png\">Screen-Shot-2016-11-17-at-11.19.56-AM.png</a> very, very slight difference</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/GFBtpOVPKZ0f1hum-mVdKBNC/Screen-Shot-2016-11-17-at-11.19.56-AM.png\" target=\"_blank\" title=\"Screen-Shot-2016-11-17-at-11.19.56-AM.png\"><img src=\"/user_uploads/13/GFBtpOVPKZ0f1hum-mVdKBNC/Screen-Shot-2016-11-17-at-11.19.56-AM.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103564547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479399721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vipyne@gmail.com\">@Vanessa Pyne (F2'16)</span> can you paste a diff? I can't see it by eyeballing.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103564800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479400201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I only see different numbers 20&lt;-&gt;28, ie slightly different variable locations on the stack (I think ? My assembly skills are very rusty)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103565128,
            "is_me_message": false,
            "last_edit_timestamp": 1479400883,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479400811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any other differences?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103565132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479400826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fb9db70f2a2a6ecf06ad7c798a5c9240697c4f20?x=x&version=1",
            "client": "website",
            "content": "<p>Modern C++ compilers are very smart. You should write the most readable and maintainable code first and then profile it after if you have performance requirements that aren't being met.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103565338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan.schucher@gmail.com",
            "sender_full_name": "Nathan Schucher (F2'16)",
            "sender_id": 100199,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479401185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fb9db70f2a2a6ecf06ad7c798a5c9240697c4f20?x=x&version=1",
            "client": "website",
            "content": "<p>(I fall into this trap all the time and am being a huge hypocrite rn)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103565347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan.schucher@gmail.com",
            "sender_full_name": "Nathan Schucher (F2'16)",
            "sender_id": 100199,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479401208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I fell into this with Rust yesterday. I was like \"I can unsafe memset an uninitialized vector to zero instead of <code>vec![0; length]</code>\" but I think compilers are good at recognizing memset.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103565455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479401385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>vipyne /Users/vipyne/Desktop $ diff one-assemb.s two-assemb.s <br>\n17c17<br>\n&lt;   movl    $0, -20(%rbp)</p>\n<hr>\n<blockquote>\n<p>movl    $0, -28(%rbp)<br>\n19c19<br>\n&lt;   cmpl    $10, -20(%rbp)</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>cmpl    $10, -28(%rbp)<br>\n22c22<br>\n&lt;   movslq  -20(%rbp), %rax</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>movslq  -28(%rbp), %rax<br>\n26c26<br>\n&lt;   movq    %rax, -32(%rbp)</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>movq    %rax, -24(%rbp)<br>\n28c28<br>\n&lt;   movl    -20(%rbp), %eax</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>movl    -28(%rbp), %eax<br>\n30c30<br>\n&lt;   movl    %eax, -20(%rbp)</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>movl    %eax, -28(%rbp)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103566893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479403550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure! <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span>  </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103566947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479403602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Add triple quotes above / below :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103566956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479403642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>ooooo thanks guys!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103567006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479403695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Anyway, looks like <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> was right, and it's just offsets.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103567024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479403756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone have any recommendations for projects that someone learning C++ could do? Maybe anything involving a Raspberry Pi? Sorry if this is a silly question, I'm just struggling for direction/unsure of what specifically I want to be working on/would benefit from working on</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103570978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479410020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/74df5731ba535a4fdb258101a3d49877?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not raspberry pi, but the university of chicago has a great set of C projects that you could just do in C++ - see <a href=\"http://chi.cs.uchicago.edu/index.html\" target=\"_blank\" title=\"http://chi.cs.uchicago.edu/index.html\">http://chi.cs.uchicago.edu/index.html</a> . I did the chirc project in my batch and it was a great experience. Reimplementing the Raft protocol is also a popular project if you'd like to learn distributed systems.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jameshkatz@gmail.com",
            "sender_full_name": "James Katz (S2'16)",
            "sender_id": 9509,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479410685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>awww yeah that's exactly what I was looking for, I think</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479410723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>what would you say the \"prerequisite\" level for doing some of these is?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479410756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just FYI if you haven't seen this already, you can easily try C++ vs. different compilers and get the assembly output at <a href=\"http://godbolt.org/\" target=\"_blank\" title=\"http://godbolt.org/\">godbolt.org</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479410769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/74df5731ba535a4fdb258101a3d49877?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's a tough question. For what it's worth, I hadn't used C in 5+ years when I did it, and knew absolutely nothing about networking. I spent the first week brushing up on C syntax and then jumped right in.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jameshkatz@gmail.com",
            "sender_full_name": "James Katz (S2'16)",
            "sender_id": 9509,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479410983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/74df5731ba535a4fdb258101a3d49877?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also set up facilitator sessions once every few days to whiteboard project architecture and go over my progress to make sure I was on the right track. <span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span>  was a big help (he was the one who originally sent me the chicago link)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103571664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jameshkatz@gmail.com",
            "sender_full_name": "James Katz (S2'16)",
            "sender_id": 9509,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479411031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fb9db70f2a2a6ecf06ad7c798a5c9240697c4f20?x=x&version=1",
            "client": "website",
            "content": "<p>This is awesome</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103572742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan.schucher@gmail.com",
            "sender_full_name": "Nathan Schucher (F2'16)",
            "sender_id": 100199,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Optimizer",
            "submessages": [],
            "timestamp": 1479412979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks. At first I started using <code>std::experimental::optional</code> compiling with <code>-std=c++1z</code>, but c++14 works as well like you said.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103574849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479416273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Be careful about NaNs though, they propagate silently. I would strongly recommend asserting against NaN inputs in as many places as you can, otherwise they're a nightmare to debug.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103578454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479421551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Definitely. It's a different class of pain from null pointers.. I guess it's just as insidious.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103579487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479423481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm looking at the chirc project and I think it's assuming I have some understanding of how sockets work/how to work with them?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103580180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479424753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/74df5731ba535a4fdb258101a3d49877?d=identicon&version=1",
            "client": "website",
            "content": "<p>what I used - <a href=\"http://beej.us/guide/bgnet/\" target=\"_blank\" title=\"http://beej.us/guide/bgnet/\">http://beej.us/guide/bgnet/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103580437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jameshkatz@gmail.com",
            "sender_full_name": "James Katz (S2'16)",
            "sender_id": 9509,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479425167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is all sooooo helpful, thank you so much</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103585294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Recommendations for projects in C++?",
            "submessages": [],
            "timestamp": 1479435643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7e136f4f55497371ddb649fc3f5b9874?d=identicon&version=1",
            "client": "website",
            "content": "<p>You may also want to consider whether you want to comply with the IEEE-754 standard for floating point math. It's not necessarily intuitive and might not be right for all cases, but it does specify things like <code>0.0/0.0</code> should be <code>NaN</code>, and <code>x/0.0</code> should be positive or negative <code>Inf</code> depending on the sign of <code>x</code>. There's a useful reference on IEEE floats <a href=\"https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\" target=\"_blank\" title=\"https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\">here</a>. There are some other fun float esoterica like signed zeros.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103587049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sfr@media.mit.edu",
            "sender_full_name": "Spencer Russell (he)",
            "sender_id": 100013,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479439691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I've had to deal with NaN propagation in JavaScript before and sometimes things can go wrong, but I guess to some extent I got used to debugging those problems when they arise.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103590456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479448238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I think I've come across signed zeros before but didn't pay much attention to it. The IEEE floating point reference has many interesting points, like this one:</p>\n<blockquote>\n<p>If zero did not have a sign, then the relation 1/(1/x) = x would fail to hold when x = \u00b1Infinity. The reason is that 1/-Infinity and 1/+Infinity both result in 0, and 1/0 results in +Infinity, the sign information having been lost.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103590801,
            "is_me_message": false,
            "last_edit_timestamp": 1479449254,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Option<numeric_type> (Rust) in C++",
            "submessages": [],
            "timestamp": 1479449146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm getting random segfaults that are very difficult to reproduce. Sometimes I manage to consistently reproduce the segfault, but as soon as I add debug messages between function calls to find where the bug is, it disappears. This has happened very often, and then I have to find a way to consistently reproduce the bug again. I've never used any serious debugging tools for C++. Any recommendations?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103600960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479474671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe this? <a href=\"https://github.com/silentbicycle/autoclave\" target=\"_blank\" title=\"https://github.com/silentbicycle/autoclave\">https://github.com/silentbicycle/autoclave</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103602099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479477329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>What are your compilation parameters? On windows, debug build will default to initialize all uninitialized variables to zero, which can blow up in release builds. <br>\nFor this type of problems (this screams memory issue!) I would take a hard look at clang sanitizers (there's a garden variety of them) and possibly static analysis tool (I think clang has one as well? On windows VS has /analyze, check out Bruce Dawson's articles on the topic)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103602141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479477390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Also make sure you compile with the highest levels of warnings possible.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103602142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479477419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Otherwise, if you release, segfaulting build has debug symbols, it's completely feasible to just dive in with a debugger. Again, Visual Studio is the best on Windows, but on Linux and OS X there are various options. I recently used VS Code for debugging Rust on Mac OS X and it worked fine after a bit of configuring !</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103602188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479477506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, guys, I'm gonna try your suggestions. Also, what are your thoughts on valgrind? More than once, I've seen it come up when people talk about memory issues, but I've never used it. (btw, Adrien, I'm on OS X and I've been able to reproduce the segfault both in release and debug builds)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103603162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479479632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "okhttp",
            "content": "<p>Basic instructions to use a debugger :<br>\n1) install lldb (i use gdb bug think they work the same)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479483232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "okhttp",
            "content": "<p>2) lldb ./program (run a debug build)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479483266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "okhttp",
            "content": "<p>3) in lldb : run.<br>\n4) after it crashes, type : bt</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479483310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "okhttp",
            "content": "<p>To get a stack trace.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479483322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "okhttp",
            "content": "<p>And, type l to see the source.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103605444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479483918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>lldb is the default debugger on Mac OS X :) I would advise trying Visual Studio Code for a GUI to lldb. That's what I did for rust and it's much nicer than the command line. XCode can probably debug as well, but I'm not familiar with it.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103607467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479487661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>valgrind is a great tool as well, although I havent used seriously for a while</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103607473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479487679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're not on windows or mac, I'd recommend using valgrind. Unless you have a very long running program, valgrind is easy to use. If you're on a mac, valgrind is very flaky and I wouldn't recommend using it. AFAIK there is no valgrind for windows.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103614954,
            "is_me_message": false,
            "last_edit_timestamp": 1479501212,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479501157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree with <span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\">@Adrien Lamarque (S1'16)</span> If you're not really used to either lldb or gdb, it's much easier to get around in the VS or Xcode debuggers.</p>\n<p>But... for most segfaults I find that running under lldb or gdb and typing <code>bt</code> is basically all the debugging info I need.</p>\n<p>If it's failing really rarely you can try <a href=\"http://rr-project.org/\" target=\"_blank\" title=\"http://rr-project.org/\">rr</a>, but this sounds like something you can easily catch in a debugger?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103615047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479501332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got some resources in my earlier thread, the \"recommendations for C++ projects\" thread, but I'm having a hard time finding one really unified resource for getting a great handle on sockets/best practices/etc</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103622781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479516714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/24c83c922884d915db7dbcd14e6ec628c06f6efa?x=x&version=1",
            "client": "website",
            "content": "<p>C, but this resource is <em>fantastic</em> for learning the basics of sockets and low level networking things<br>\n<a href=\"http://beej.us/guide/bgnet/\" target=\"_blank\" title=\"http://beej.us/guide/bgnet/\">http://beej.us/guide/bgnet/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103622940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andrew@nothing-to-say.org",
            "sender_full_name": "Andrew Yoon (he) (F2'16)",
            "sender_id": 100202,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479517044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's the one I was reading  </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103622998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479517167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>but I feel like there's something missing and it doesn't go as into detail with some things as I'd like. </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103623005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479517188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like, it starts out amazing with going into super detail but I feel it...sort of peters out and leaves me with questions</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103623077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479517273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>like, what if I want to read from a socket and write at the same time? </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103623127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Sockets?",
            "submessages": [],
            "timestamp": 1479517329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I tried valgrind on OS X with my buggy program, it outputs some messages and then hangs using 99% CPU :S I'm gonna try lldb (probably with VS Code)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103624638,
            "is_me_message": false,
            "last_edit_timestamp": 1479521346,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479521105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm having a very hard time debugging this. At least now I'm able to reproduce more easily the bug and know better in which line it happens, but it's still a lot of guessing. I wish I were able to isolate the minimum amount of code in my project to reproduce the bug in a new project, but as soon as I even remove stuff that has a very little chance of being involved with the bug, it becomes almost impossible to reproduce. I have a 3D mesh class (with vertices and faces (groups of 3 vertices)). More or less, I have code like this inside a class constructor:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">auto</span> <span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">Mesh</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"n\">mesh</span><span class=\"o\">-&gt;</span><span class=\"n\">vertices</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">));</span> <span class=\"c1\">// mesh-&gt;vertices is a std::vector&lt;Vector3&gt;</span>\n<span class=\"n\">mesh</span><span class=\"o\">-&gt;</span><span class=\"n\">vertices</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"n\">mesh</span><span class=\"o\">-&gt;</span><span class=\"n\">vertices</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"k\">auto</span> <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">Face</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// this constructor doesn&#39;t do anything fancy, just saves the 3 numbers as attributes</span>\n<span class=\"n\">mesh</span><span class=\"o\">-&gt;</span><span class=\"n\">faces</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">);</span> <span class=\"c1\">// mesh-&gt;faces is a std::vector&lt;Face&gt;</span>\n</pre></div>\n\n\n<p>I've got errors in the 2 last lines in different scenarios, it's kind of random which one throws the error. I don't even have a clue of what might be causing them to fail, those lines look so simple. I'm not even doing any kind of multithreading. Sometimes the error just disappears and my strategy to make it happen again is to add / remove bogus attribute definitions in the Face class, which is an indication that something is really messed up and I'm desperate enough to try anything. Like I said, the project has more code and maybe I'm missing something important somewhere else, but at this point, really any guess of what might be even remotely causing this would be helpful. <img alt=\":face_with_cold_sweat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/face_with_cold_sweat.png\" title=\":face_with_cold_sweat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103631858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479540087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Sometimes when none of those 2 lines fail, after the last line I call a Mesh method that prints faces.size() and I get a garbage value...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103632402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479541675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jrojasdavalos@gmail.com\">@Junior Rojas (S1'16)</span> Do you have the code available to try out? Like, is it on github or something?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103634141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479546692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span>, I managed to remove a lot of unnecessary stuff from my project and still reproduce the bugs (they still happen randomly). This is the code. <a href=\"/user_uploads/13/i3BXuwVJKEheNd6gseF39cRu/buggy-code.zip\" target=\"_blank\" title=\"buggy-code.zip\">buggy-code.zip</a> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103635879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479551669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fb9db70f2a2a6ecf06ad7c798a5c9240697c4f20?x=x&version=1",
            "client": "website",
            "content": "<p>I can't reproduce this bug</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103646119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan.schucher@gmail.com",
            "sender_full_name": "Nathan Schucher (F2'16)",
            "sender_id": 100199,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479578707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>It's also hard for me to reproduce it and just by looking at the code I can't see what might be wrong. Sometimes I don't exactly get a segfault, but I get a garbage value in faces.size(). Commenting in / out the \"normal\" attribute in core/Face.hpp and compiling the program again until it fails often works for me. For example, I just got this output after doing that:</p>\n<div class=\"codehilite\"><pre><span></span>$ ./gl-scene\ncreating mesh\nadding vertices\nadding faces\nface count: 1\nresizing normals from 0 to 3\ninitializing normals to zero\naccumulating normals\nface count: 2\nface #0\ni0 0\ni1 1\ni2 2\ncomputing cross product\nface #1\ni0 0\ni1 0\ni2 0\ncomputing cross product\nnormalizing normals\ndestroying mesh\nend main\n</pre></div>\n\n\n<p>There are 2 \"face count\" messages, if you look at the code you'd see that both should have the same value.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103648067,
            "is_me_message": false,
            "last_edit_timestamp": 1479583782,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479583768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting. I can't reproduce the segfault or the change in \"face count\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103648450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479584711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb7f1991f31f7d940da112842cec3471a8459232?x=x&version=1",
            "client": "website",
            "content": "<p>You mentioned that adding print statements changed the crash behavior?  If yes, this suggests a timing error to me. Is your program multithreaded?  </p>\n<p>My thought would be to try to understand make_shared() and push() better.  For example, I had trouble in the past where resize() did not allocate memory like I expected . Initializing my vector without using resize() worked around the problem.  How are the normals resized?  If faces.size() crashes, it could be due to a memory overrun of the variables that are defined before it.  Is normals defined before faces for example.</p>\n<p>Good luck on this problem. These are always the worst to debug. Usually the cause once you find it is totally reasonable in hindsight. <img alt=\":thinking_face:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thinking_face.png\" title=\":thinking_face:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103656798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alinen@savvysine.com",
            "sender_full_name": "Aline Normoyle (F1'16)",
            "sender_id": 100030,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479606993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alinen@seas.upenn.edu\">@Aline Lyn Normoyle (F1'16)</span>, there is no multithreading, but I am indeed resizing the normals with resize(), although I get segfaults even before normals.resize() is executed, so I'm not sure if that's the cause.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103661663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479620075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm actually starting to suspect that maybe this has nothing to do with errors in the code, perhaps something is wrong with the way I'm building the project. Maybe the reason why things go wrong after I add / remove useless attributes to arbitrary classes is that when I recompile stuff (running make), some other files that depend on the changes, for some reason, do not get recompiled and assume a different memory layout of the classes I just modified? Not sure if what I'm saying here makes sense... But as far as I can remember, the only way I've been able to consistently reproduce the bug is by adding / removing useless attributes to arbitrary classes and recompiling with make which doesn't necessarily rebuild everything. I've noticed that if I clean everything and run cmake and make from scratch, the bug is gone. I'm gonna try to reproduce the bug in clean builds to be sure.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103661711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479620216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Following that hypothesis, that might explain why before when I added debug messages to the problematic sections the bug magically disappeared, because the new debug messages forced the files to be recompiled.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103661854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479620556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Ok. So after looking at make's output messages and reproducing this compilation dependency problem in a minimal project, I think I'm convinced that the error is in the way I build the project rather than in the actual code. Apparently cmake is failing to build the correct dependency graph for my files in the makefile.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103663518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479625292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Let's say I want to have a project with two (or more) directories (modules), let's say for now \"math\" and \"core\". Both of these directories will have many classes. I'm putting both .hpp and .cpp files in the same directory. I'd also like to be able to include all math and core classes with a single #include, so I have math/math.hpp and core/core.hpp which just #include all the relevant classes of the module. Let's say some core classes use math classes, so they #include \"../math/math.hpp\". This dependency across directories is what apparently cmake doesn't like and isn't reflected in the makefile. Maybe this organization is not a good idea or maybe it's not that bad, but my CMakeLists.txt configuration is missing something. How do you guys modularize your C++ projects? Will C++17 have a proper module system? <img alt=\":thinking_face:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thinking_face.png\" title=\":thinking_face:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103663727,
            "is_me_message": false,
            "last_edit_timestamp": 1479627413,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479625843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>#include \"../math/math.hpp\"</p>\n</blockquote>\n<p>I don't really understand cmake so maybe someone else can explain why, but IME it's problematic to ever have a \"..\" in an include path when using cmake.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103664558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479628309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>What does the dependency relationship look like?</p>\n<p>Is it</p>\n<div class=\"codehilite\"><pre><span></span>core -&gt; math\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>core -&gt; math -&gt; core\n</pre></div>\n\n\n<p>or neither of the above?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103664638,
            "is_me_message": false,
            "last_edit_timestamp": 1479628519,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479628508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Just core -&gt; math. In my example, core depends on math, but math doesn't depend on core.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103664676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479628611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>So... I don't think I really use cmake correctly and someone might have better advice, but one thing that could work is:</p>\n<p>You could have core and math defined as libraries. And then to make the includes work you can add math as a \"source_group\". I suspect this isn't good advice, but it's what we do <a href=\"https://github.com/bitfunnel/bitfunnel/\" target=\"_blank\" title=\"https://github.com/bitfunnel/bitfunnel/\">here</a> and it does seem to work.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103664762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479628826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The structure we have is that each non-test leaf-level directory under <code>src</code> is a \"library\". Headers in those directories are \"private\" and can only be accessed by other files in that library. Anything that needs to be accessed by another library has a header file in <code>inc</code> (except for <code>Utilities</code>, which is special cased to be visible by everything), which has all of its stuff marked as public headers, which get included as \"source_group\". I don't think the inc/src structure is important/standard, but the thing where headers are split up into public and private groups seems common.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103664810,
            "is_me_message": false,
            "last_edit_timestamp": 1479633782,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479629012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I see. I'll take a closer look at the repo for reference, I definitely need to fix my cmake config.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103665599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479631316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bb7f1991f31f7d940da112842cec3471a8459232?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, yes, you can get seg faults with mismatched headers and libraries.</p>\n<p>When I have include files across directories, I usually point to them using an include path in my make or project file.  I also like to organize modules in terms of libraries with no circular dependencies. When one library or application needs the library,  you just need its build settings to point to the headers (by setting an include directory) and libraries (by setting a library path and lib name to link against).  My setup usually looks like</p>\n<div class=\"codehilite\"><pre><span></span>/libsrc (where library source go)\n/appsrc (where application source go)\n/bin (where exes go)\n/lib (where libraries go\n/include (where public headers go, I prefer to make all my headers public unless there&#39;s a reason not to)\n/tmp (where temp files go, convenient for deleting)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103674479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alinen@savvysine.com",
            "sender_full_name": "Aline Normoyle (F1'16)",
            "sender_id": 100030,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "hard to reproduce segfault",
            "submessages": [],
            "timestamp": 1479656591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479764717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>is this : top = top + 1;<br>\n      stack[top] = data;</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479764726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>is this piece of code : top = top + 1;<br>\n      stack[top] = data;</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479764744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>the same with stack[top++]=data</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479764755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479764761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that would be the same as <code>stack[++top]=data</code> and that your code above would be the same as</p>\n<div class=\"codehilite\"><pre><span></span>stack[top]=data;\ntop = top + 1;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103723558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479765027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>thanks </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103724039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479765808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8583df6c401e50a991e66a538516386bb528840e?x=x&version=1",
            "client": "desktop app Windows 0.5.1",
            "content": "<p>also can I have an int test function and can I invoke it like this : test()</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103724354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "carmen.mitru@gmail.com",
            "sender_full_name": "Carmen Mitru (W1'16)",
            "sender_id": 100328,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479766314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure what you mean, but I think the answer is yes?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103727477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479771926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, I'm also learning C++, if you want maybe we can go over some stuff together</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103729485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1479776157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"mi\">14</span><span class=\"p\">;</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">q</span><span class=\"p\">);</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;The value of x is: &quot;</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"n\">is</span> <span class=\"mi\">14</span>\n</pre></div>\n\n\n<p>Can anyone explain what is going on here and why this is occurring? This is c++11 and I'm really intrigued with what the reason for this is</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330358,
            "is_me_message": false,
            "last_edit_timestamp": 1481083794,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>The not often used , operator returns the last chained value</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>woah</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>so i,j,q returns q</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had expected that it would behave like a tuple in, say, Python</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>but obviously not</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, my advice for using c and c++ is make zero assumptions</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>i mean, it's not std::tuple of course but i didn't know the , was doing an operator</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>seriously</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh yeah definitely, I'm loving that though</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>New C++ is pretty cool though :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>what are some use cases where <code>,</code> might actually be useful</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481083947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, <a href=\"https://en.wikipedia.org/wiki/Comma_operator#Uses\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Comma_operator#Uses\">https://en.wikipedia.org/wiki/Comma_operator#Uses</a> lists some</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481084020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is awesome</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481084137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>btw do you have any experience with curses</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104330966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481085097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have some experience with ncurses which to my understanding supersedes it</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104331060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481085293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104331718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481086834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey, still there?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104331815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481087073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah (well with a delay :P)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104332967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481089860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Whoa! I didn't know this!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104372694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481169954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://adrianmaceiras.wordpress.com/2012/09/08/fun-with-portability-issues-long-long-vs-long-vs-int64_t/\" target=\"_blank\" title=\"https://adrianmaceiras.wordpress.com/2012/09/08/fun-with-portability-issues-long-long-vs-long-vs-int64_t/\">Interesting portability issues</a> with int64_t vs long vs long long</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104538020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "64 bit ints",
            "submessages": [],
            "timestamp": 1481561206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>I've accidentally burned myself with this when switching between C++ and a language that had tuples. That was a super duper fun bug to try and figure out.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104544920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481573470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, C++ does have std::tuple, i guess I was just thinking that the thing i was trying to do would behave more...tuple-y </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104546812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Unexpected Behaviour",
            "submessages": [],
            "timestamp": 1481576699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d9ab8d7802ad731390b5cf5983882fd?d=identicon&version=1",
            "client": "website",
            "content": "<p>seriously, this is the best thing ever (definite hyperbole but i love working with C++ so much)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104596803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jackie.meggesto@gmail.com",
            "sender_full_name": "Jacqueline Elizabeth Meggesto (SP1'17)",
            "sender_id": 100325,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1481682336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fb9db70f2a2a6ecf06ad7c798a5c9240697c4f20?x=x&version=1",
            "client": "website",
            "content": "<p>+1</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104598704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan.schucher@gmail.com",
            "sender_full_name": "Nathan Schucher (F2'16)",
            "sender_id": 100199,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1481686813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting article: <a href=\"https://runtimeverification.com/blog/?p=200#more-200\" target=\"_blank\" title=\"https://runtimeverification.com/blog/?p=200#more-200\">https://runtimeverification.com/blog/?p=200#more-200</a><br>\n<span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\">@Adrien Lamarque (S1'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104599193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "undefined behaivor in benchmarks for c verification challeng",
            "submessages": [],
            "timestamp": 1481688003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><img alt=\":thumbs_up:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/thumbs_up.png\" title=\":thumbs_up:\">  I laughed when reading John Regehr's comment: \"Well, 14% is a pretty low number, considering that approximately 100% of real-world C applications are undefined!\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104614765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "undefined behaivor in benchmarks for c verification challeng",
            "submessages": [],
            "timestamp": 1481724456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?d=identicon&version=1",
            "client": "website",
            "content": "<p>RAII is pretty neat and (not to take away from C++) it's also worth taking a look at how Rust does it if you are interested in alternate and even safer system languages.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104651573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "mdenchev@gmail.com",
            "sender_full_name": "Michail Denchev (S1'16)",
            "sender_id": 9330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1481797279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>+100</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105049264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1482728802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>It's such an elegant and powerful idiom. <code>defer</code> statements (go), context managers and the like (Python, C#, Java) are strictly less expressive. I wish that a. it had a better name, and b. I could explain better why it's so powerful.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105049660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1482729755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I'll also second the suggestion to look at Rust. It has a lot of the nice things from C++ around memory management and resource management. There's no template metaprogramming, and the generics are \"first class\" in the type system. The trait system is a combination of pure virtual methods and concepts, the latter of which has yet to make it into the C++ standard.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105049662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Why is RAII the best thing ever",
            "submessages": [],
            "timestamp": 1482729755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/65522ace7bc03891996c35e075e69a20?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm getting this error:<br>\n<code>ld: warning: ignoring file ./affdex-sdk/lib/libaffdex-native.so, file was built for unsupported file format ( 0x7F 0x45 0x4C 0x46 0x02 0x01 0x01 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 ) which is not the architecture being linked (x86_64): ./affdex-sdk/lib/libaffdex-native.so</code><br>\n<a href=\"https://gist.github.com/cjroth/f082de62550e99abdbb2c06223038902\" target=\"_blank\" title=\"https://gist.github.com/cjroth/f082de62550e99abdbb2c06223038902\">https://gist.github.com/cjroth/f082de62550e99abdbb2c06223038902</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106229183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "chris@cjroth.com",
            "sender_full_name": "Chris Roth (W1'16)",
            "sender_id": 100321,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Need help compiling something",
            "submessages": [],
            "timestamp": 1485278560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e9bbea7116dbac067c366b35a5e494286fbe2b21?x=x&version=1",
            "client": "website",
            "content": "<p>One day, you may think its a good idea to delete all those include gaurds, list which files need to be included in comments at the tops of your headerfiles, and go on from there -- including headers in your files one by one, all the way to the top!<br>\nBut I tell you, thats probably not a great way to do it &lt;/post&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106232078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "genericpb@gmail.com",
            "sender_full_name": "Mel Vaughan (W2'17)",
            "sender_id": 100446,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header file organization",
            "submessages": [],
            "timestamp": 1485283238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Have you see iwyu (include what you use): <a href=\"https://include-what-you-use.org/\" target=\"_blank\" title=\"https://include-what-you-use.org/\">https://include-what-you-use.org/</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106245859,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "satabdidas@gmail.com",
                        "full_name": "Satabdi Das (F1'16)",
                        "id": 100028
                    },
                    "user_id": 100028
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ant6nd@gmail.com",
                        "full_name": "Ant6n Dubrau (W2'17)",
                        "id": 100465
                    },
                    "user_id": 100465
                }
            ],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header file organization",
            "submessages": [],
            "timestamp": 1485304848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e9bbea7116dbac067c366b35a5e494286fbe2b21?x=x&version=1",
            "client": "website",
            "content": "<p>oh cool! i was wondering if there was something like this. Sadly I use C more often, which isn't covered I guess</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106246403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "genericpb@gmail.com",
            "sender_full_name": "Mel Vaughan (W2'17)",
            "sender_id": 100446,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header file organization",
            "submessages": [],
            "timestamp": 1485305918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"chris@cjroth.com\">@Chris Roth (W1'16)</span> I am assuming the <code>libaffdex-native.so</code> is a third-party library. Are you compiling on Mac or Linux? My guess would be the .so was built on some other platform than the one you are compiling it. Try looking at the header of <code>libaffdex-native.so</code>  using objdump or readelf if you are on Linux. If these tools can't read it, either the file is corrupted or has a different binary file format.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106290303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Need help compiling something",
            "submessages": [],
            "timestamp": 1485390728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\">@Kamal Marhubi (S1'15)</span> iwyu is super cool! Thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106292074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "header file organization",
            "submessages": [],
            "timestamp": 1485394618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hey guys, I can't seem to get syntax highlighting to work for includes in my files. I'm using the cmd line devenv command to launch visual studio (which means there's no project file). I don't know if that has something to do with it or not. plz halp, my code looks like a notepad document</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106324248,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f632",
                    "emoji_name": "astonished",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sara.johanna.lindstrom@gmail.com",
                        "full_name": "Sara Lindstr\u00f6m (W2'17)",
                        "id": 100456
                    },
                    "user_id": 100456
                }
            ],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "MSVC2015 Syntax Highlighting",
            "submessages": [],
            "timestamp": 1485459383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Having been programming in JS for a significant amount of time, and progressively moving to C++ recently, I didn't expect to meet the infamous function.bind(this) again, now in C++:<br>\n<a href=\"http://en.cppreference.com/w/cpp/utility/functional/bind\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/utility/functional/bind\">http://en.cppreference.com/w/cpp/utility/functional/bind</a><br>\nDoes anybody use this regularly? At least I've found it useful a number of times, to set member functions as \"callbacks\", basically the same reason why I'd use it in JS.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106550391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485939661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9347\">@Junior Rojas (S1'16)</span> I prefer to write a lambda over bind. Its syntax is a little inscrutable, with those weird things from <a href=\"http://en.cppreference.com/w/cpp/utility/functional/placeholders\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/utility/functional/placeholders\">std::placeholders</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106559202,
            "is_me_message": false,
            "last_edit_timestamp": 1485957257,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485957238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>That said, if I didn't have to reach for placeholders, I might use bind.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106559260,
            "is_me_message": false,
            "last_edit_timestamp": 1485972348,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485957318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>we use bind a fair bit in my codebase at work. it's annoying, but works alright.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106565766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485967059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, lambdas, I didn't think of that... I think I'd prefer lambdas' syntax over bind.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106574466,
            "is_me_message": false,
            "last_edit_timestamp": 1485980553,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485980258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Is this how you'd do it with lambdas? (Also includes what I'm doing with bind right now)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;functional&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">globalHandler</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeClass</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SomeClass</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;handler! n = &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">n</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;, m = &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> \n\n    <span class=\"kt\">void</span> <span class=\"n\">setGlobalHandlerUsingBind</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">globalHandler</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">SomeClass</span><span class=\"o\">::</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">setGlobalHandlerUsingLambda</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">globalHandler</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">SomeClass</span> <span class=\"n\">sc</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n    <span class=\"n\">sc</span><span class=\"p\">.</span><span class=\"n\">setGlobalHandlerUsingBind</span><span class=\"p\">();</span>\n    <span class=\"n\">globalHandler</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">);</span>\n\n    <span class=\"n\">sc</span><span class=\"p\">.</span><span class=\"n\">setGlobalHandlerUsingLambda</span><span class=\"p\">();</span>\n    <span class=\"n\">globalHandler</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106574510,
            "is_me_message": false,
            "last_edit_timestamp": 1485980338,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1485980328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah I think so. Read up on the <a href=\"http://en.cppreference.com/w/cpp/language/lambda#Lambda_capture\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/lambda#Lambda_capture\">capture types</a>, and figure out if you want to be explicit about capture or not. Otherwise seems right to me.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106592589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1486012701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Disclaimer: I haven't written C++ in slightly over a year. But I am about to write some this week, so maybe I'll relearn it a bit!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106592590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function.bind(this)",
            "submessages": [],
            "timestamp": 1486012730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>On mac, at least for C/C++ programs compiled with Apple's clang, when an assertion fails, in the terminal I get a message like this:</p>\n<div class=\"codehilite\"><pre><span></span>Assertion failed: failedAssertion, function someFunction, file /path/to/some/file.cpp, line 123.\n</pre></div>\n\n\n<p>If I hold CMD and click on /path/to/some/file.cpp, the file gets opened in XCode, which is kinda cool, but I'd like to use a different editor. Does anybody know how to configure this?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107132962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "configure text editor for clang on mac",
            "submessages": [],
            "timestamp": 1487075879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I just realized this has nothing to do with clang. My terminal automatically enables CMD+click on any string that looks like a file path and it uses the default program associated with the file extension, so it was just a matter of configuring that.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107134922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "configure text editor for clang on mac",
            "submessages": [],
            "timestamp": 1487080058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>TIL you can define your own literal suffix, like <code>_example</code>, that will operate on the literal that came before it, like <code>\"asdf\"_example</code>, and return whatever type you like</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108434871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User defined literals",
            "submessages": [],
            "timestamp": 1489778346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>As seen in <a href=\"https://github.com/nlohmann/json#tofrom-strings\" target=\"_blank\" title=\"https://github.com/nlohmann/json#tofrom-strings\">https://github.com/nlohmann/json#tofrom-strings</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108434875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User defined literals",
            "submessages": [],
            "timestamp": 1489778358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/nlohmann/json/blob/develop/src/json.hpp#L13796\" target=\"_blank\" title=\"https://github.com/nlohmann/json/blob/develop/src/json.hpp#L13796\">Implemention of <code>_json</code></a>, <a href=\"http://en.cppreference.com/w/cpp/language/user_literal\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/user_literal\">language docs for user-defined literals</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108434941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User defined literals",
            "submessages": [],
            "timestamp": 1489778434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>hi, I'm kinda new, an understatement, to C++, and I'm having trouble with compiling ... mainly I'm trying to run this example for <a href=\"https://people.freedesktop.org/~aacid/docs/qt4/\" target=\"_blank\" title=\"https://people.freedesktop.org/~aacid/docs/qt4/\">poppler and qt</a> - but I'm confused about including and linking libraries and the many error messages <img alt=\":grimacing:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f62c.png\" title=\":grimacing:\"> </p>\n<p>Does anyone have some resources, on the simpler side <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\":smile_cat:\">, for understanding some ins and outs? Someone on IRC pointed me to <code>pkg-config</code>,  but it's not helping me <em>understand</em> it any better</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108709467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490313553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Will it be possible for you to share (some of) the error messages (if there are too many)? This is a nice guide on linkers - <a href=\"http://www.lurklurk.org/linkers/linkers.html\" target=\"_blank\" title=\"http://www.lurklurk.org/linkers/linkers.html\">http://www.lurklurk.org/linkers/linkers.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108870892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490666969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Oh yeah, I was going to say the same; it's pretty much impossible to help with errors like that without seeing the output.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108893372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490718094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"fenimoreplove@gmail.com\" data-user-id=\"100182\">@Fenimore Love (F2'16)</span></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108893377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490718114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\":smile_cat:\"> so the errors messages kind of change as I try new things, I've since gotten the tiny program I needed to work fiddling around -- mainly my confusion is with linkers and <code>cflag</code>? And at the current moment I'm trying to compile a QT application, <a href=\"https://doc.qt.io/archives/qq/qq27-poppler.html\" target=\"_blank\" title=\"https://doc.qt.io/archives/qq/qq27-poppler.html\">https://doc.qt.io/archives/qq/qq27-poppler.html</a> --</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108894724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490720599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"satabdidas@gmail.com\" data-user-id=\"100028\">@Satabdi Das (F1'16)</span>  for the link, it's not very cute and friendly (like most of the C resources i've been finding <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f638.png\" title=\":smile_cat:\"> ) but it looks like it's right up my ally (beginners guide to linkers)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108894770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490720653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>soon soon i'll be trying again to compile this QT thing, and I'll come back here and hand in some of my error messages... with pleasure <img alt=\":cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f408.png\" title=\":cat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108894772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490720684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>So I'm back on track, unable to compile because I get this error message: : <code>QLabel: No such file or directory include &lt;QLabel&gt;</code></p>\n<p>This means, I think, that the qt library which I am including, doesn't have QLabel? I realize qt5 puts it in QtWidgets, but I can't figure out what I'm not including... In anycase the code is from the above link example from qt. </p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;QLabel&gt;\n#include &lt;QRectF&gt;\n#include &lt;poppler-qt4.h&gt;\n</pre></div>\n\n\n<p>The <code>pro</code> file, which I think is some sort of makefile, looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>FORMS         = window.ui\nHEADERS       = documentwidget.h \\\n                window.h\nSOURCES       = documentwidget.cpp \\\n                main.cpp \\\n                window.cpp\n\n# The following are the correct include and library paths for Ubuntu 8.04\n# (Hardy Heron). Modify these to refer to the directories on your system\n# that contain the poppler-qt4.h header file and [lib]poppler-qt4 library.\n\nINCLUDEPATH  += /usr/include/poppler/qt4\nLIBS         += -L/usr/lib -lpoppler-qt4\n</pre></div>\n\n\n<p>and indeed those locations have the proper libs</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>I realize that's kind of a Qt question. But in anycase, the link <span class=\"user-mention\" data-user-email=\"satabdidas@gmail.com\" data-user-id=\"100028\">@Satabdi Das (F1'16)</span> provided is helpful, but doesn't strike me as very 'beginners' <img alt=\":smiley_cat:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f63a.png\" title=\":smiley_cat:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>So, I'm a little fuzzy on Qt, but I seem to recall that you need to preprocess your stuff with a qt-specific tool to set everything up</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>right, like qmake, which is also mysterious to me<br>\nbut forthis example I just imported it into their IDE QtCreator, and clicked build</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>anyway, how are you trying to build?  what is the command line?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>ah</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>does \"QLabel.h\" or something similar exist in /usr/include/poppler/qt4?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the error you're getting is because it can't find the header file</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>not the library</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>no it's not in <code>/usr/include</code>, but I figured it would be in the qt4 source, /usr/include/qt4`</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>i see so the headers are not libs</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you made the .pro file?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>mmmh</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>no I didn't make the pro file</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>OK</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>so where is the QLable.h file?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>on your filesystem</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>all</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>I see it in /usr/include/qt4</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>OK</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>is there a \"/usr/include/qt4/poppler\" directory?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>maybe because I'm using arch, which calls qt4 qt4 and qt5 qt,  it's confused</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>no, no qt4/poppler</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>OK</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>actually</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>it goes <code>/usr/include/qt4/QtGui/qlabel.h</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903940,
            "is_me_message": false,
            "last_edit_timestamp": 1490735787,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>remove \"poppler/\" from your INCLUDEPATH value</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108903941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>remove \"poppler/\" from your INCLUDEPATH value</p>\n</blockquote>\n<p>cool, well something moves :), looks like</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>but then a lot of other things break..</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>As <span class=\"user-mention\" data-user-email=\"recurse@ardent.nebcorp.com\" data-user-id=\"9097\">@Joe Ardent (SP1'17)</span>  says, you need to give in the include path the path till the header file. <code>/usr/include/qt4/QtGui</code>. And perhaps this might explain why you need to give it in the include path? <a href=\"https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html\">https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490735995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>can I just += multiple paths to includepath?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you definitely can!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>cool</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you can also ':' separate multiple values</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>mmh</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>so I suspect that it is because of naming on Arch (which tends to use the latest versions as default), the g++ command issued by <code>qmake</code> is </p>\n<div class=\"codehilite\"><pre><span></span>g++ -c -pipe -g -Wall -W -D_REENTRANT -fPIC -DQT_QML_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -I../qq27-poppler -I. -isystem /usr/include/poppler/qt4 -isystem /usr/include/qt -isystem /usr/include/qt/QtGui -isystem /usr/include/qt/QtCore -I. -isystem /usr/include/libdrm -I/usr/lib/qt/mkspecs/linux-g++ -o documentwidget.o ../qq27-poppler/documentwidget.cpp\n</pre></div>\n\n\n<p>which then looks in <code>/usr/include/qt/</code> for the <code>QtGui</code> etc, but the qt4 package isn't in <code>/usr/include/qt</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>try mangling that invocation until it works :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>lol</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>specifically, the '-I' things</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>it all feels very mangled, cpp is way hard to just jump in to</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the -D etc. are probably fine</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>cool thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><code>-I /foo/bar</code> means, \"Look for header files in /foo/bar.\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>hmmm thanks that is very clear</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490736905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I don't know what <code>-i</code> means, though</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not disagreeing with you about C++, but I think you're running into extra incidental complexity related to Qt :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>yeah looks like</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>but otherwise, these concepts are from C (header and library search paths with <code>-I</code> and <code>-L</code> respectively)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>so -i is headers and -l is libs... which are just headers themselves?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>no</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>mmhem</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>case matters; capital \"i\" (<code>-I</code>) is \"include path\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>ok</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>i've gotta jet, but thanks for the info :) I'll update when I de-mangle it :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>libs (libraries) are static archives (.a files) or dynamic shared objects</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>(.so files)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>they're binary objects produced by a compiler</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p><code>so</code> and <code>.a</code> files are used in the same way then, as libraries</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>binary... right</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>they ARE libraries</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>right</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>and the linker will look for them in the lib path, specificed with <code>-L</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904854,
            "is_me_message": false,
            "last_edit_timestamp": 1490737313,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>we link libraries, but include headers</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yes :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>cooooool</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>understandment</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>woops</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>not a word</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>comprehension :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>thank you</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ab7ac8d0421135a2615ee68497efe480de3a293b?x=x&version=1",
            "client": "website",
            "content": "<p>gtg</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "fenimoreplove@gmail.com",
            "sender_full_name": "Fenimore Love (he) (F2'16)",
            "sender_id": 100182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>when you include a header, the C pre-processor literally substitutes in the contents of the header file at the point where you did \"#include &lt;foo&gt;\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>which is why you need the actual textual headers in order to use the stuff</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108904917,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fenimoreplove@gmail.com",
                        "full_name": "Fenimore Love (he) (F2'16)",
                        "id": 100182
                    },
                    "user_id": 100182
                }
            ],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "makefile woes",
            "submessages": [],
            "timestamp": 1490737392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I've been trying to get familiar with C++ development on Windows and I found that libraries for Windows are usually distributed as .lib and .dll files that are specific to some Visual Studio version. It's a little bit confusing because apparently .libs can either be static libraries or some \"description of .dlls\". On UNIX, static libs (.a files) are basically just compressed archives that you can add as another \"source\" and I don't think they have to match your C++ compiler or anything. I believe dynamic libraries are also agnostic to what compiler you are using. On UNIX, I'd usually just do something like</p>\n<div class=\"codehilite\"><pre><span></span>some-cpp-compiler source.cpp SomeStaticLibrary.a -lSomeDynamicLibrary\n</pre></div>\n\n\n<p>to use a static library and link against a dynamic library.<br>\nWhat's the equivalent of this on Windows (at least at a high level), and why does it depend so much on the version of Visual Studio?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110017552,
            "is_me_message": false,
            "last_edit_timestamp": 1493079740,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "libraries: Windows vs UNIX",
            "submessages": [],
            "timestamp": 1493079495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>For C++ on Linux, you absolutely need to link against libraries compiled with a compatible compiler, because the ABI is not guaranteed to be stable across compilers. Regular C, though, has a stable ABI.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110024300,
            "is_me_message": false,
            "last_edit_timestamp": 1493094143,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "libraries: Windows vs UNIX",
            "submessages": [],
            "timestamp": 1493094118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>This is a pretty interesting rundown of different types of compatibility for the kde project, and of the careful steps a programmer must take with their programming are in order to maintain binary compatibility</p>\n<p><a href=\"https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B\" target=\"_blank\" title=\"https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B\">https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110024410,
            "is_me_message": false,
            "last_edit_timestamp": 1493094360,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "libraries: Windows vs UNIX",
            "submessages": [],
            "timestamp": 1493094339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>dlls are just <a href=\"https://en.wikipedia.org/wiki/Portable_Executable\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Portable_Executable\">PE files</a>, so they are compiler agnostic. The .lib files you mention are called import libraries, and this <a href=\"http://stackoverflow.com/questions/16737347/shared-libraries-windows-vs-linux-method\" target=\"_blank\" title=\"http://stackoverflow.com/questions/16737347/shared-libraries-windows-vs-linux-method\">SO question</a> goes into detail about the difference between the Linux and Windows method. I'm surprised that you're having problems with them being version specific... I can imagine that ABI changes could be a problem, but I'd be surprised if the compilers weren't backwards compatible at least. Is the code you're trying to link with C or C++? One thing you can do is recreate the import library file from a dll directly using dumpbin, see the <a href=\"http://stackoverflow.com/questions/9946322/how-to-generate-an-import-library-lib-file-from-a-dll\" target=\"_blank\" title=\"http://stackoverflow.com/questions/9946322/how-to-generate-an-import-library-lib-file-from-a-dll\">method here</a>.<br>\nThe equivalent command on Windows, using cl.exe (MS' compiler) would be:<br>\n<code>cl.exe source.cpp import-library.lib</code><br>\nand that's it. (If you're using visual studio, you can check out the command line used by going into Project properties &gt; C/C++ &gt; command line.) There's no need to give the DLL itself, you just need to make sure that the DLL will be present somewhere in the search directories when the executable is run. (Or you'll get the <a href=\"http://www.delete-computer-history.com/wp-content/uploads/2013/08/missingdll1.5.png\" target=\"_blank\" title=\"http://www.delete-computer-history.com/wp-content/uploads/2013/08/missingdll1.5.png\">\"missing DLL\" error box</a>). When using the import library, the linker will create stubs for the functions exported by the DLL. At run-time, the OS will load all the DLLs that the file depends upon (you can use a tool like Dependency walker to see them), and patch up these stubs with the real addresses. <br>\nIf you want to link fully dynamically, you can also call <code>LoadLibrary</code> yourself (similar to <code>dlopen</code> on Linux) and <code>GetProcAddress</code>(equivalent to <code>dlsym</code>) to get a function pointer given a name.</p>\n<div class=\"message_inline_image\"><a href=\"http://www.delete-computer-history.com/wp-content/uploads/2013/08/missingdll1.5.png\" target=\"_blank\" title=\"&quot;missing DLL&quot; error box\"><img src=\"https://uploads.zulipusercontent.net/024dd42543ce8a50cff84c08ed0c346480d8e10f/687474703a2f2f7777772e64656c6574652d636f6d70757465722d686973746f72792e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031332f30382f6d697373696e67646c6c312e352e706e67\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110050723,
            "is_me_message": false,
            "last_edit_timestamp": 1493148457,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "libraries: Windows vs UNIX",
            "submessages": [],
            "timestamp": 1493148327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, I hadn't thought about incompatible ABIs, but yeah, that makes sense. <span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> , I haven't had any version-specific problems using Windows libs yet, because I could download the files for the version of VS I was using and I just followed the lib instructions to get it working on VS. I was just curious about the internals and the fact that there were different files for different versions of VS, which was different from my experience on UNIX.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110055435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "libraries: Windows vs UNIX",
            "submessages": [],
            "timestamp": 1493155906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Probably the thing I hate the most from writing C/C++ code is the fact that we still rely on header files to express dependencies between different chunks of code. I'm always looking for alternatives to make this easier to deal with.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110485022,
            "is_me_message": false,
            "last_edit_timestamp": 1494058768,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494058568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I tried Microsoft's C++ compiler that has experimental support for modules, which worked pretty well for toy cases, but I ran into strange compilation problems when I tried to <code>#include</code> some external libraries, and there is very little documentation about it since it's experimental.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110485023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494058578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Apparently clang also has its own implementation of something like modules, but I haven't tried it. Even though the official documentation is somewhat extensive, there aren't many practical code examples to get a better sense of how to use them in real projects.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110485024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494058603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>There is also this project <a href=\"http://www.lazycplusplus.com/\" target=\"_blank\" title=\"http://www.lazycplusplus.com/\">http://www.lazycplusplus.com/</a> which I've found very useful so far. It's a tool that can take a single C++ like file and automatically generate the .h and .cpp files. One drawback is that when I get compilation errors, the reported line number doesn't match with my original source, because I pass the compiler the autogenerated files instead of the original file I write. It's not perfect, but I'd rather deal with this than with having to manually write header files.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110485030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494058643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Hopefully, modules will become part of the standard some day, but in the meantime, does anybody have any other recommendations?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110485072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494058721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>What exactly is bothering you? If it's compile times, you might want to look into \"unity\" builds (aka single compilation unit builds.) <a href=\"https://cheind.wordpress.com/2009/12/10/reducing-compilation-time-unity-builds/\" target=\"_blank\" title=\"https://cheind.wordpress.com/2009/12/10/reducing-compilation-time-unity-builds/\">https://cheind.wordpress.com/2009/12/10/reducing-compilation-time-unity-builds/</a><br>\nOther than that I can't think of a good solution. Modules are still way in the future, so in the meantime you'll have to deal with include files :/</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110490389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494072810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Compilation time is an issue once the project is big enough, but the fact that I often find myself writing duplicate code when I program in C/C++ because of header files is very demotivating, sometimes even more than compilation times, especially when beginning a project since I want to make changes all the time because I'm just trying different things to find out what works best. Something as simple as adding an argument or changing a type in a function means that not only do I have to modify the .cpp, but I also have to go to the corresponding header file and write the same thing again. I guess that at some level, header files may make sense, but what bothers me is that I can't find a good reason for why we are doing it by hand and not have it automated by some external tool, if not by the compiler itself. To give an example, one might wonder why we are doing memory management \"by hand\" in C++ instead of using, say, a garbage collector, but I can think of real use cases where explicit memory management does make sense, even if it sounds like more work. I can't find a good reason to justify the additional work of writing header files by hand, which makes me feel demotivated when I write C/C++. I've been using <a href=\"http://www.lazycplusplus.com\" target=\"_blank\" title=\"http://www.lazycplusplus.com\">http://www.lazycplusplus.com</a> to automate this and I feel more productive and a little less demotivated.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110491752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494076383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d9ed5f596714f4f3946f0896c9247b7686db1f6?x=x&version=4",
            "client": "website",
            "content": "<p>I used to turn in all my <a href=\"https://github.com/pirate/C--DataStructures#info\" target=\"_blank\" title=\"https://github.com/pirate/C--DataStructures#info\">C++ assignments</a> with no header files, it drove my prof bonkers the first couple weeks but eventually everyone in the class started doing it and it became the norm.  Of course simple homework scripts are a different matter than writing library code you intend to share :D</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110531301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@sweeting.me",
            "sender_full_name": "Nick Sweeting (he) (S1'14)",
            "sender_id": 5883,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494173524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Well, the fact that declaration and definition are separate is an unfortunate consequence of the compilation model of C++. I don't find that too much of an annoyance, but for sure there's no reason why it shouldn't be automated :) If you use window, I think one of the heavyweight refactor tools (Visual Assist X or Resharper) should be able to handle that sort of things, I think? That lazy C++ thing looks neat, I might actually use it in my workflow.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110533797,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ without header files",
            "submessages": [],
            "timestamp": 1494179438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>Is:</p>\n<div class=\"codehilite\"><pre><span></span>std::vector&lt;Thing&gt; v;\nThing* t = &amp;(*v.end());\n</pre></div>\n\n\n<p>valid code?<br>\nIt seems to work when I try it, but I could see <code>*v.end()</code>being a general no-no.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111287622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495725348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>It's <a href=\"http://en.cppreference.com/w/cpp/container/vector/end\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/container/vector/end\">undefined behaviour</a></p>\n<div class=\"codehilite\"><pre><span></span>This element acts as a placeholder; attempting to access it results in undefined behavior.\n</pre></div>\n\n\n<p>My guess is that in your case, the implementation of vector uses pointers (most implementations probably do) so it ends up being OK, but you really shouldn't be doing that.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111287802,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ryan.riddle7@gmail.com",
                        "full_name": "Ryan Riddle (SP1'17)",
                        "id": 100526
                    },
                    "user_id": 100526
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trbabb@gmail.com",
                        "full_name": "Tim Babb (S1'17)",
                        "id": 101091
                    },
                    "user_id": 101091
                }
            ],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495725670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting aside: the mere act of forming the pointer <code>t+1</code> is undefined.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111294347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495736937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>In what sense? Obviously it can't be dereferenced, but</p>\n<div class=\"codehilite\"><pre><span></span>for (Thing* p = ...; p != off_end(...), ++p) {\n    ...\n}\n</pre></div>\n\n\n<p>should be valid, no?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111294451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495737116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>That's how I've always used iterators in C++</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495740127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>(eg, <code>iter != v.end()</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495740181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> actually it's not! and that is the only exception in the standard. You're allowed to point past the last an element of an object, but not more. See this <a href=\"https://stackoverflow.com/questions/27472531/what-is-the-rationale-for-one-past-the-last-element-of-an-array-object\" target=\"_blank\" title=\"https://stackoverflow.com/questions/27472531/what-is-the-rationale-for-one-past-the-last-element-of-an-array-object\">Stack Overflow answer</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495741110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>In the sense that it is undefined behavior according to the spec!</p>\n<blockquote>\n<p>If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p><a href=\"https://github.com/cplusplus/draft/blob/c%2B%2B14-cd/source/expressions.tex#L3716-L3719\" target=\"_blank\" title=\"https://github.com/cplusplus/draft/blob/c%2B%2B14-cd/source/expressions.tex#L3716-L3719\">https://github.com/cplusplus/draft/blob/c%2B%2B14-cd/source/expressions.tex#L3716-L3719</a><br>\nor <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf</a> section 5.7-5.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297068,
            "is_me_message": false,
            "last_edit_timestamp": 1495742528,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495741490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Right, but <code>t</code> above is one-past-the-end. So forming <code>t+1</code> invokes UB.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297087,
            "is_me_message": false,
            "last_edit_timestamp": 1495741548,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495741516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>This is true in C as well. There is afaik nothing in either spec that says a pointer is a number. There is simply arithmetic defined between them.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495741601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>You're totally right, I misread / got confused by your reply :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Pointer to vector's off-end",
            "submessages": [],
            "timestamp": 1495742157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>So, I just learned that this typoed program:</p>\n<div class=\"codehilite\"><pre><span></span>class A {\npublic:\n  A(int xs) : x(x) {}\n  int x;\n}\n</pre></div>\n\n\n<p>will work, and the initializer in the initializer list will just be garbage. is that just xcode/clang being weird or is this actually desired behavoir?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112304979,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ryan.riddle7@gmail.com",
                        "full_name": "Ryan Riddle (SP1'17)",
                        "id": 100526
                    },
                    "user_id": 100526
                }
            ],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497913465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>I wonder if maybe it's an Xcode error-parsing issue. When I compile this with clang:</p>\n<div class=\"codehilite\"><pre><span></span>struct F {\n    int x, y;\n\n    F(int xx, int y):x(x),y(y) {}\n};\n\nint main() {\n    F f = F(4,5);\n}\n</pre></div>\n\n\n<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span>./structor.cpp:4:24: warning: field &#39;x&#39; is uninitialized when used here [-Wuninitialized]\n    F(int xx, int y):x(x),y(y) {}\n                       ^\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497913888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems no worse than</p>\n<div class=\"codehilite\"><pre><span></span>int a = a;\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>Foo a = a;\n</pre></div>\n\n\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#363\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#363\">which seem to be legal</a> :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305208,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f627",
                    "emoji_name": "anguished",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trbabb@gmail.com",
                        "full_name": "Tim Babb (S1'17)",
                        "id": 101091
                    },
                    "user_id": 101091
                },
                {
                    "emoji_code": "1f627",
                    "emoji_name": "anguished",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rudichen@gmail.com",
                        "full_name": "Rudi Chen (S1'17)",
                        "id": 101102
                    },
                    "user_id": 101102
                }
            ],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497913938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think <span class=\"user-mention\" data-user-email=\"trbabb@gmail.com\" data-user-id=\"101091\">@Tim Babb (S1'17)</span> 's example must have some warnings as errors, which is reasonable. What do you mean by \"actually desired behavoir\"? :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497914004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a7cfba3d94a1b727e5d91ed13aad1a25ff02ba79?x=x&version=2",
            "client": "website",
            "content": "<p>If you're running clang from an Xcode project, you might want to check your project's build settings for targeted language version and enabled errors/warnings.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "business@stefan-lesser.com",
            "sender_full_name": "Stefan Lesser (S1'17)",
            "sender_id": 101083,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497914052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\" data-user-id=\"820\">@Dan Luu (W'13)</span> : It was printed as a warning, not an error. But when <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> and I looked on his machine, Xcode (which highlights lines with other warnings) was silent about the offending line.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497914097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ohhh</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497914338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>c++11 standards compliant. i mean, it is being assigned an undefined variable, and it doesn't catch it as an usued parameter either.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497914385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>setting <code>-Wall -Werror</code> doesn't seem to help either. but i figure that might just be me not having the first clue about xcode. still, that i compiles in the first case makes me shudder.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112305801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497915040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could try <code>-Weverything</code>, but I think that's not usable with large codebases if you don't go through and exclude a bunch of warnings (it will warn on C++98 linting stuff, among other things). If you don't want to do that you could also try <code>-Wextra</code>.</p>\n<p>Strictly speaking, many (most?) of the things you get warnings about are legal c++11/c++14/c++17/whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112307231,
            "is_me_message": false,
            "last_edit_timestamp": 1497918025,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++ initializer list gotcha",
            "submessages": [],
            "timestamp": 1497918014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, I have a very simple question here.  Do the constructors called in these two initialization routines ever differ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">logging</span><span class=\"o\">::</span><span class=\"n\">logger</span> <span class=\"n\">myLogger</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">logging</span><span class=\"o\">::</span><span class=\"n\">logger</span> <span class=\"n\">myLogger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">::</span><span class=\"n\">logger</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>I imagine the logging::logger class's default constructor is called in both cases.  Yet, the second case works, but the first case does not.  Something is up in the <em>first</em> case, resulting in \"invalid field\" errors from my compiler.  So what is going on here exactly?  I suspect there's some polymorphic behavior involved.  One of these must be calling the constructor of a class somewhere else in the class hierarchy.  Why?  If not, then what is going on, exactly.  Maybe it's related to templates?  I do believe the logger class is itself a typedef for a templated class.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115692969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505064197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>The first statement is interpreted by the compiler as a function declaration. Have a look at this - <a href=\"https://stackoverflow.com/questions/2318650/is-no-parentheses-on-a-constructor-with-no-arguments-a-language-standard\" target=\"_blank\" title=\"https://stackoverflow.com/questions/2318650/is-no-parentheses-on-a-constructor-with-no-arguments-a-language-standard\">https://stackoverflow.com/questions/2318650/is-no-parentheses-on-a-constructor-with-no-arguments-a-language-standard</a></p>\n<p>In the second case, the statement is an initialization hence the assignment operator for logger is not called but myLogger is directory constructed using the default constructor</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115695224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505069715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Oh wow that's... that does make sense.  I feel really silly, thank you so much!  It's just, the fact that you can call the constructor with arguments<br>\nlike</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">logging</span><span class=\"o\">::</span><span class=\"n\">logger</span> <span class=\"n\">myLogger</span><span class=\"p\">(</span><span class=\"n\">someParameter</span><span class=\"p\">,</span> <span class=\"n\">someOtherParameter</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>I guess it just led me to believe that you could call a default constructor with no arguments in the same fashion.  And oh</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">logging</span><span class=\"o\">::</span><span class=\"n\">logger</span> <span class=\"n\">myLogger</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Should call the default constructor too, right?  Which reminds me, is there any way to declare a \"myLogger\" object without calling the constructor?  This isn't actually important, but I'm really curious.  You can declare storage for an int on the stack without initializing it to any value by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">myInteger</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Is there anything analogous for class instantiation that, say, allocates sizeof(myLogger) memory on the stack but doesn't actually call the default constructor ?  Maybe the constructor has a lot of time-consuming logic that you don't quite want to run right now</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115695845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505071229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I too made the same assumption in the past about calling the default constructor with empty parenthesis.<br>\nThere's no way you can declare an object without calling the constructor.  If you don't give an initializer, then the default constructor gets called. Here's a little more information on default initialization - <a href=\"http://en.cppreference.com/w/cpp/language/default_initialization\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/default_initialization\">http://en.cppreference.com/w/cpp/language/default_initialization</a>. In case of <code>int myInteger</code> nothing is done and <code>myInteger</code> gets an indeterminate value. But if it was declared as <code>static int myInteger;</code>, then <code>myInteger</code> would have been zero initialized.<br>\nThe way, I think it is everything in C++ gets intialized to some value when I declare it. For basic types, the values are indeterminate. For classes, it gets initialized to values that I write in its constructors.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115701587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505085406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ap469@cornell.edu\" data-user-id=\"100334\">@Andy Perez (W1'16)</span>: if you don't want the object to be initialized right away, don't write a constructor, just write an init() function. (Or better, init to safe defaults in the constructor, and require the user to call init() later, with checks in your methods).<br>\nOr you can just use a pointer. If you really want the memory to be on the stack, you can <em>hack</em> something using placement new but it'll be really, really dirty.  <a href=\"https://godbolt.org/g/DfSbuj\" target=\"_blank\" title=\"https://godbolt.org/g/DfSbuj\">https://godbolt.org/g/DfSbuj</a></p>\n<p>If you're interested in the minutiae (and pitfalls) of variable initialization in C++, check out this GotW entry: <a href=\"https://herbsutter.com/2013/05/09/gotw-1-solution/\" target=\"_blank\" title=\"https://herbsutter.com/2013/05/09/gotw-1-solution/\">https://herbsutter.com/2013/05/09/gotw-1-solution/</a></p>\n<p>TL;DR: like everything with C++, initialization is super complex because of arcane legacy rules and bad interaction between language parts.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115729882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505148327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Haha, I was actually considering allocating a char buffer as a solution.  That's so awfully hackish though, definitely hope I'll never be forced to do that by a library, seems terrible.  And I love minutae!  I think I enjoy delving into language minutae rabbitholes more than doing actual work sometimes.  That \"most vexing parse\" though,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// same problem (gadget and doodad are types)</span>\n<span class=\"n\">widget</span> <span class=\"nf\">w</span><span class=\"p\">(</span> <span class=\"n\">gadget</span><span class=\"p\">(),</span> <span class=\"n\">doodad</span><span class=\"p\">()</span> <span class=\"p\">);</span>\n</pre></div>\n\n\n<p>There have been times where there's something wrong with my code and I it looks completely correct so I just refactor until it works... I'm so certain that the above and the other initialization quirks mentioned in the article are responsible for at least 95% of those problems...  But yea, I always thought that if you wanted w to be a function, you would have to declare it as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">widget</span> <span class=\"n\">w</span><span class=\"p\">(</span> <span class=\"n\">gadget</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">(),</span> <span class=\"n\">doodad</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">())</span>\n</pre></div>\n\n\n<p>In this case, the intent would be obvious... but, whose idea was it for gadget() to ever be interpreted as \"pointer to function that returns gadget and has no parameters\".  Maybe it could have made sense in C since there was no such thing as a default constructor for a type, but it doesn't make any sense in C++.  It's not like C++ doesn't already break some C code, it could have broken that too.</p>\n<p>Anyway, since this question-asking excursion has proven to be a lot more educational than I expected it to be, I have one last question!  Maybe you could help me out on this one too,  <span class=\"user-mention\" data-user-email=\"satabdidas@gmail.com\" data-user-id=\"100028\">@Satabdi Das (F1'16)</span> <span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> .  I ran into this code while reading through the tesseract OCR library</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"p\">...</span>\n     <span class=\"c1\">// Avoid memory leak caused by auto variable when return is called.</span>\n     <span class=\"k\">static</span> <span class=\"n\">tesseract</span><span class=\"o\">::</span><span class=\"n\">TessBaseAPI</span> <span class=\"n\">api</span><span class=\"p\">;</span>\n     <span class=\"p\">...</span>\n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This one was a bit puzzling to me, because what difference does declaring a variable static in main, of all places, make anyway?  Main is only called once, so we're not maintaining a value over multiple calls.  The only thing I could come up with is that static variables are not allocated on the stack, so maybe you're avoiding overflowing the stack with a very large automatically allocated variable.  I don't understand what that would have to do with the comment though, because regardless of where this object is allocated I imagine the destructor is going to eventually be called anyway, at the end of the program, which (almost) coincides with main's return statement.  Why would making it static make memory not leak?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115733178,
            "is_me_message": false,
            "last_edit_timestamp": 1505154388,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505154158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>If you enjoy C++ minutiae, you're in for a treat, because there is no end to it! You could start reading Exceptional C++ / More Exceptional C++ / Effective C++ / More Effective C++ / Effective Modern C++. </p>\n<p>With regards to your question, this might be because exit() causes destructors for global and static variables to be called, which is not the case for most stack variables. But I don't understand why the comment would mention a return and not <code>exit</code> in that case. (Because a return would also call destructors.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115733397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505154551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, yes.  I remember reading one of those books a long while back, when I had much more limited knowledge of the C++ standard library, C++ itself, and just programming in general.  It mostly flew over my head but was still cool enough to read through.  I should go back to it, I'll definitely appreciate it much more now than I did then, and it'll make tons more sense to boot!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115733822,
            "is_me_message": false,
            "last_edit_timestamp": 1505155229,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505155210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> If you don't write a constructor, won't the default constructor be called the moment you write something like <code>Foo fooObj;</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115740613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505166484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Yes, although you can have what's called a \"trivial constructor\", which is a constructor that performs no action. <br>\n<a href=\"http://en.cppreference.com/w/cpp/language/default_constructor\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/default_constructor\">http://en.cppreference.com/w/cpp/language/default_constructor</a><br>\n(Which is basically how you get a similar behaviour to C's <code>struct</code> even though C++'s <code>struct</code>s are really classes)<br>\n(See here: <a href=\"http://en.cppreference.com/w/cpp/concept/PODType\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/concept/PODType\">http://en.cppreference.com/w/cpp/concept/PODType</a><br>\nNote how one of the requirements for being a POD is being a TrivialType which includes having \"one or more default constructors, all of which are either trivial or deleted, and at least one of which is not deleted.\")</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115742451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505170277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Also, note how the complexity of C++'s semantics is fractal <img alt=\":scream:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f631.png\" title=\"scream\"></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115742458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Object Initialization",
            "submessages": [],
            "timestamp": 1505170320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, it's me again<br>\nI'm stuck with a conundrum, this time involving the evil thing known as a goto statement (and a global variable, oh my!)<br>\nI have a c++ program whose logic mostly resides within two for loops, and I want it to peacefully unwind whenever the program receives a SIGINT signal (achieved through pressing CTRL-c in the terminal the program is running in).  My solution was more or less as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;signal.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"p\">....</span>\n<span class=\"c1\">// OMG a global</span>\n<span class=\"k\">static</span> <span class=\"kt\">bool</span> <span class=\"n\">SIGINT_RECEIVED</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// This stuff registers an interrupt handler</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sigaction</span> <span class=\"n\">sigIntHandler</span><span class=\"p\">;</span>\n    <span class=\"n\">sigIntHandler</span><span class=\"p\">.</span><span class=\"n\">sa_handler</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"n\">SIGINT_RECEIVED</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">;};</span>\n    <span class=\"n\">sigemptyset</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sigIntHandler</span><span class=\"p\">.</span><span class=\"n\">sa_mask</span><span class=\"p\">);</span>\n    <span class=\"n\">sigIntHandler</span><span class=\"p\">.</span><span class=\"n\">sa_flags</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">sigaction</span><span class=\"p\">(</span><span class=\"n\">SIGINT</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">sigIntHandler</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"nl\">stuff</span> <span class=\"p\">:</span> <span class=\"n\">things</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"nl\">otherstuff</span> <span class=\"p\">:</span> <span class=\"n\">stuff</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">SIGINT_RECIEVED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Stopped program on &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">stuff</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">moreStuff</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n                <span class=\"k\">goto</span> <span class=\"n\">ESCAPE_MAIN_LOOPS</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"c1\">// program logic belongs here otherThings)</span>\n\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nl\">ESCAPE_MAIN_LOOPS</span><span class=\"p\">:</span>\n    <span class=\"c1\">// finishing up and closing shop.  This code here should always execute, whether the for loop ended naturally or otherwise</span>\n\n    <span class=\"p\">...</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>And, I used a global too!  I tried to use a local variable, but lambdas with non-empty closures can't convert to function pointers, which are the only thing that sigaction (from signal.h) accepts.  And, even worse... there's a goto!  Does that mean that I go to jail? And don't pass go, and don't collect $200, or is this an actual valid use of both globals and goto statement?  To be honest, from what I understand, the reason you don't use gotos is because it promotes incomprehensible spaghetti code, but it seems that the most sane and clear way to break out of nested for loops in exceptional circumstances is through the use of a goto statement; a goto statement that is very humble in it's scope: it merely escapes the for loops and does nothing more.  If I could just MEGABREAK my way out of nested loops I would, but unfortunately I cannot.  I also cannot return my way out of them, because I have more code I want to run.<br>\nI could, conceivably, check in every for loop for whether SIGINT_RECEIVED has been set to true, and move the if statement outside the for loops.  I can't help but feel it makes my code a lot less clear.  In the end, I feel someone who comes upon the above code will immediately understand it, so does that mean it's fine to do it?  I mean, in general, goto statements do seem like the most sane way to get out of nested for loops in exceptional circumstances.  And also, is it at all possible to escape the use of the global?  I don't see a way around it, and using a global to hold a signal from the OS does seem like a really reasonable thing to do</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116128288,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1505964162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>(I'm going to assume your loops are not waiting on IO via a <code>select(2)</code>-like call, which seems right given how you wrote them. If that's wrong, google either <code>signalfd(2)</code> (Linux only) or self-pipe trick (portable).)</p>\n<p>In that case, I don't think there's much sensible stuff you can do to get rid of the global. You can eliminate the goto by changing the for loops to while loops, and including your condition, but I think breaking out of nested loops is an acceptable use of goto. It's probably a good idea to make the global an atomic so that it's still correct if you introduce multiple threads.</p>\n<p>The only way I see to eliminate the global is to use either <code>signalfd(2)</code> or the self-pipe trick, and do non-blocking reads. But if you want to promptly shut down, that costs you a syscall per loop which is probably not great. If you don't mind terminating \"soon\", you could attempt to read every nth time through the loops. Checking on every iteration with <code>signalfd(2)</code>could look something like:</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;signal.h&gt;\n#include &lt;unitstd.h&gt;\n#include &lt;sys/signalfd.h&gt;\n#include &lt;iostream&gt;\n....\nint main() {\n    // Create mask containing SIGINT.\n    sigset_t mask;\n    sigemptyset(&amp;mask);\n    sigaddset(&amp;mask, SIGINT);\n\n    // Block SIGINT so it isn&#39;t delivered &quot;normally&quot;.\n    if (sigprocmask(SIG_BLOCK, &amp;mask, NULL) == -1) {\n        std::cerr &lt;&lt; &quot;OH NOES&quot; &lt;&lt; std::endl;\n        return 1;\n    }\n\n    int fd;\n    if ((fd = signalfd(-1 /* create */, &amp;mask, SFD_NONBLOCK | SFD_CLOEXEC) == -1) {\n        std::cerr &lt;&lt; &quot;OH NOES&quot; &lt;&lt; std::endl;\n        return 1;\n    }\n\n    for(const auto stuff : things) {\n        for(const auto otherstuff : stuff) {\n            if(read(fd) != -1) {\n                std::cout &lt;&lt; &quot;Stopped program on &quot; &lt;&lt; stuff &lt;&lt; &quot; &quot; &lt;&lt; moreStuff &lt;&lt; std::endl;\n                goto ESCAPE_MAIN_LOOPS;\n            }\n            // program logic belongs here otherThings)\n        }\n    }\n    ESCAPE_MAIN_LOOPS:\n    // finishing up and closing shop.  This code here should always execute, whether the for loop ended naturally or otherwise\n    ...\n\n    return 0;\n}\n</pre></div>\n\n\n<p>(To be clear, I don't think this is a great idea unless your loop body is significantly more expensive than a syscall. Even then it's a fair amount of song and dance to eliminate a reasonable use of a global.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116130673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1505969756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>ping <span class=\"user-mention\" data-user-email=\"julian@cipht.net\" data-user-id=\"101992\">@Julian Squires</span> who knows many unixes.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116130712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1505969787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>To be extra clear, I think the global + goto is entirely reasonable. The only change I'd make is to make the global an atomic.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116130858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1505970136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dcf9561473705b0e781edb4525bed2ac?d=identicon&version=1",
            "client": "website",
            "content": "<p>The goto is essentially emulating an exception, which IIRC is the standard case for when you might want to use goto.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116130863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ternus@cternus.net",
            "sender_full_name": "Christian Ternus (F1'17)",
            "sender_id": 101717,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1505970192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Globals and gotos are the defacto approach for this situation.  Since this is C++, I had the brief worry that maybe destructors wouldn't get called in such a case, but a quick check of the standard (second paragraph of 6.6) assures us that everything will happen as we want it.</p>\n<p>I took a peek at libev's source which I know has careful signal handling, but it's a bit too complicated to serve as a good example.  If I had more time, I'd look for other examples of this.  Maybe think of a program you think of as well-behaved on SIGINT, and check its sources.  Chances are good you'll find a global and a goto (or a <code>return</code>; it's common for people who loathe gotos to do their non-local control flow by wrapping it all in a function).</p>\n<p>I feel that, in general, gotos that always flow towards the end of the function are just fine.</p>\n<p>As Kamal noted, the global variable should be atomic; in the past <code>volatile</code> was considered the minimum so the compiler doesn't botch things too badly, but we have <code>sig_atomic_t</code> now: <a href=\"https://www.securecoding.cert.org/confluence/display/c/SIG31-C.+Do+not+access+shared+objects+in+signal+handlers\" target=\"_blank\" title=\"https://www.securecoding.cert.org/confluence/display/c/SIG31-C.+Do+not+access+shared+objects+in+signal+handlers\">https://www.securecoding.cert.org/confluence/display/c/SIG31-C.+Do+not+access+shared+objects+in+signal+handlers</a></p>\n<p>(Edited to add my favorite \"non-evil instance of Goto\": <a href=\"https://en.wikipedia.org/wiki/Kazushige_Goto\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Kazushige_Goto\">https://en.wikipedia.org/wiki/Kazushige_Goto</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116151850,
            "is_me_message": false,
            "last_edit_timestamp": 1506020356,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1506014568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>top</code> uses this pattern, though it just does <code>exit</code> instead of a <code>goto</code>:  <a href=\"https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L78-L87\" target=\"_blank\" title=\"https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L78-L87\">https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L78-L87</a> <a href=\"https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L1284-L1292\" target=\"_blank\" title=\"https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L1284-L1292\">https://github.com/freebsd/freebsd/blob/master/contrib/top/top.c#L1284-L1292</a></p>\n<p>The blame for this leads to an interesting commit: <a href=\"https://github.com/freebsd/freebsd/commit/fbb6cc445422ee11280f71a645ea26345adf7a35\" target=\"_blank\" title=\"https://github.com/freebsd/freebsd/commit/fbb6cc445422ee11280f71a645ea26345adf7a35\">https://github.com/freebsd/freebsd/commit/fbb6cc445422ee11280f71a645ea26345adf7a35</a><br>\nAs always, it might be interesting to look at the OpenBSD sweep that probably lead to that commit; around that time, they probably identified and patched many signal handlers: some would have usage examples that might help justify your goto.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116152530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1506015773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/82446bda3068a30f7ac951482d2cc3c46b487304?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the responses, everyone!  I'm glad to hear that I wasn't crazy to think that the global+goto pattern here was appropriate.  </p>\n<p>And as it turned out, <span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (S1'15)</span> , your intuition on my loops waiting on IO via a <code>select(2)</code>-like call was actually pretty spot-on.  After reading about the self-pipe trick and the like, I realized that I could have re-coded the for-loop logic to use pipes and <code>select()</code>.  In essence my code creates a pool of threads of finite size to finish work and the for loop waits for one to be done to start another once there are enough threads running; it would have been a lot less code elsewhere to use pipes to meditate this, and trivial to add in handling of the signal using the self-pipe trick and <code>select()</code>.</p>\n<p>Anyway, I never realized how tricky signal handling could be.  After reading the links that <span class=\"user-mention\" data-user-email=\"julian@cipht.net\" data-user-id=\"101992\">@Julian Squires</span> left, along with a few more security guidelines, I realized that uh... in essence you really want to be careful what you put inside of a signal handler.  There's a lot that doesn't belong in there, for various reasons.  In essence, you're best just setting a <code>volatile sig_atomic_t</code> flag and literally doing nothing else inside of it.  That explains pretty neatly the reason for those freebsd commits, the signal handlers had jumps and various function calls within them, it was asking for trouble.<br>\n<a href=\"https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers\" target=\"_blank\" title=\"https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers\">https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116166075,
            "is_me_message": false,
            "last_edit_timestamp": 1506039912,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ap469@cornell.edu",
            "sender_full_name": "Andy Perez (they) (W1'16)",
            "sender_id": 100334,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Non-evil instance of goto?",
            "submessages": [],
            "timestamp": 1506039849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I came across these operators <a href=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/Vector.h#69-74\" target=\"_blank\" title=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/Vector.h#69-74\">in the android source</a>, and I'm trying to decide if they could possibly make any sense:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"cm\">/*! copy operator */</span>\n            <span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span>     <span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n            <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span>           <span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">);</span>\n            <span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span>     <span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">SortedVector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n            <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span>           <span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">SortedVector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Particularly speaking about the const variants. I'm struggling to see how a const assignment operator can make semantic sense: the whole point of assignment is to change <code>*this</code>!</p>\n<p>Here is <a href=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/Vector.h#257\" target=\"_blank\" title=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/Vector.h#257\">one of the definitions</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">TYPE</span><span class=\"o\">&gt;</span> <span class=\"kr\">inline</span>\n<span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;::</span><span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">VectorImpl</span><span class=\"o\">::</span><span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">VectorImpl</span><span class=\"o\">&amp;&gt;</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In this instance, the code compiles with gcc &lt;=6, but not with gcc 7. <code>Vector</code> privately inherits from <code>VectorImpl</code>, so the call to <code>VectorImpl::operator=()</code> is calling a parent class method. gcc 7 complains\u2014rightly, I think\u2014that you can't make this call, as <a href=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/VectorImpl.h#56\" target=\"_blank\" title=\"https://android.googlesource.com/platform/system/core/+/master/libutils/include/utils/VectorImpl.h#56\">there is no const overload</a> of <code>operator=()</code> on <code>VectorImpl</code>: </p>\n<div class=\"codehilite\"><pre><span></span>            <span class=\"n\">VectorImpl</span><span class=\"o\">&amp;</span>     <span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">VectorImpl</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>and <a href=\"https://android.googlesource.com/platform/system/core/+/master/libutils/VectorImpl.cpp#69\" target=\"_blank\" title=\"https://android.googlesource.com/platform/system/core/+/master/libutils/VectorImpl.cpp#69\">it *does* mutate inner state</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">VectorImpl</span><span class=\"o\">&amp;</span> <span class=\"n\">VectorImpl</span><span class=\"o\">::</span><span class=\"k\">operator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">VectorImpl</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">LOG_ALWAYS_FATAL_IF</span><span class=\"p\">(</span><span class=\"n\">mItemSize</span> <span class=\"o\">!=</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">mItemSize</span><span class=\"p\">,</span>\n        <span class=\"s\">&quot;Vector&lt;&gt; have different types (this=%p, rhs=%p)&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span> <span class=\"o\">!=</span> <span class=\"o\">&amp;</span><span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">release_storage</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">mCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">mStorage</span> <span class=\"o\">=</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">mStorage</span><span class=\"p\">;</span>\n            <span class=\"n\">mCount</span> <span class=\"o\">=</span> <span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">mCount</span><span class=\"p\">;</span>\n            <span class=\"n\">SharedBuffer</span><span class=\"o\">::</span><span class=\"n\">bufferFromData</span><span class=\"p\">(</span><span class=\"n\">mStorage</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">acquire</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">mStorage</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"n\">mCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Am I missing something, or are the <code>const</code> overloads on <code>Vector</code> nonsense?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118547066,
            "is_me_message": false,
            "last_edit_timestamp": 1510801084,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510800966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is pretty mysterious.  My first guess was some kind of automated refactoring gone wrong.  Sadly nothing in blame to indicate anything, which is already a bad sign; if this were legit, it's clearly rare enough that it deserves a comment or a clear message in the git history.  I couldn't find any occurrences of this in a bunch of randomly selected large C++ codebases (LLVM, et cetera).  I checked the standard to see if there was anything clear there, but the section on overloaded assignment (\"over.ass\") is very brief.</p>\n<p>Finally, I found <a href=\"http://www.archivum.info/comp.lang.c++.moderated/2006-12/01019/Re-Can-copy-assignment-operator-be-const.html\" target=\"_blank\" title=\"http://www.archivum.info/comp.lang.c++.moderated/2006-12/01019/Re-Can-copy-assignment-operator-be-const.html\">this Usenet discussion</a>.  I'm not sure it clarifies things for me, though, although at least it shows that this is a behavior that's been discussed and at least someone thinks is useful.  Is there somewhere else where bitvectors are implemented in terms of Vector or anything?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118567022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510843869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>See also <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#574\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#574\">C++ Standard Core Language issue 574</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118567146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510844043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So in light of that, the draft C++17 standard, section 12.18.17 (I realize now I should have been looking at the \"copy assignment\" section, not the \"overloaded assignment\" section... what a language...) seems to implicitly permit this, and those comments seem to indicate it's for const proxy objects with some underlying mutable thing.  I don't know if that makes sense here or not, but all those kinds of mixes of mutability are exactly why I threw my hands up in the air and moved to OCaml years ago.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118567558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510844717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4384.html#621\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4384.html#621\">Issue 621</a> is interesting too</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118567782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510845066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I found <a href=\"https://github.com/google/googletest/blob/d175c8bf823e709d570772b038757fadf63bc632/googletest/include/gtest/gtest.h#L1677-L1679\" target=\"_blank\" title=\"https://github.com/google/googletest/blob/d175c8bf823e709d570772b038757fadf63bc632/googletest/include/gtest/gtest.h#L1677-L1679\">an example in gtest</a> where it's (ab)using it for \"nice\" message logging via some macro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.</span>\n<span class=\"c1\">// A class that enables one to stream messages to assertion macros</span>\n<span class=\"k\">class</span> <span class=\"nc\">GTEST_API_</span> <span class=\"n\">AssertHelper</span> <span class=\"p\">{</span>\n<span class=\"c1\">// [...]</span>\n  <span class=\"c1\">// Message assignment is a semantic trick to enable assertion</span>\n  <span class=\"c1\">// streaming; see the GTEST_MESSAGE_ macro below.</span>\n<span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Message</span><span class=\"o\">&amp;</span> <span class=\"n\">message</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>There's a comment explaining why. Of course, the <code>GTEST_MESSAGE_</code> macro mentioned has changed name and moved to <a href=\"https://github.com/google/googletest/blob/d175c8bf823e709d570772b038757fadf63bc632/googletest/include/gtest/internal/gtest-internal.h#L1128-L1130\" target=\"_blank\" title=\"https://github.com/google/googletest/blob/d175c8bf823e709d570772b038757fadf63bc632/googletest/include/gtest/internal/gtest-internal.h#L1128-L1130\">a different file</a> in the meantime:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#define GTEST_MESSAGE_AT_(file, line, message, result_type) \\</span>\n<span class=\"cp\">  ::testing::internal::AssertHelper(result_type, file, line, message) \\</span>\n<span class=\"cp\">= ::testing::Message()</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118568647,
            "is_me_message": false,
            "last_edit_timestamp": 1510846758,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510846550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the literature review!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118568696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "const assignment operators?",
            "submessages": [],
            "timestamp": 1510846607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hey guys, lately I've been trying to dip my toes into C++, but having trouble finding a good resource to pick it up.<br>\nWhen I see something like this, I get pretty confused.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Definition for binary tree:</span>\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Tree</span> <span class=\"p\">{</span>\n   <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">left</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">),</span> <span class=\"n\">right</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n   <span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n   <span class=\"n\">Tree</span> <span class=\"o\">*</span><span class=\"n\">left</span><span class=\"p\">;</span>\n   <span class=\"n\">Tree</span> <span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">;</span>\n <span class=\"p\">};</span>\n</pre></div>\n\n\n<p>I understand the basics of Templates, but that first line in the struct is really confusing to me.<br>\nWhat is going on?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119861925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513452100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>that is an inline constructor definition using a constructor initialization list</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119862305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513453070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>it basically says that if you call <code>Tree(v)</code>, it will set the <code>value</code> member to <code>v</code>, and the left and right members to <code>nullptr</code>, and do nothing else</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119862344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513453094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Ahh okay. I did a little bit more digging and discovered that classes and structs in C++ are the same apart from class members defaulting to private, and struct members defaulting to public. An initialization list is a separate concept, and can be used to call the non-default constructors of a classes'/structs'  member variables. In the example I pasted above, the initialization list is used just as a shorthand. You don't need to worry about falling into a constructor loop only because left and right are pointers. Is all this a correct understanding?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119866017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513462050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarkar.krishnan@gmail.com\" data-user-id=\"100326\">@Krishnan Sarkar (W1'16)</span> that all sounds right. You can also use the initialization list to call other constructors of the same class, as well as base class constructors. It's fairly common to have empty constructor bodies in C++; all the <code>this.x = x</code> or <code>super(x, y)</code> calls can be handled in the initialization list.</p>\n<p>The example from <a href=\"http://en.cppreference.com/w/cpp/language/initializer_list\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/initializer_list\">the cppreference page</a> is pretty good:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nl\">Class</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Base</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// ....</span>\n    <span class=\"n\">Class</span> <span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"p\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"p\">(</span> <span class=\"mi\">123</span> <span class=\"p\">),</span> <span class=\"c1\">// initialize base class</span>\n        <span class=\"n\">x</span> <span class=\"p\">(</span> <span class=\"n\">x</span> <span class=\"p\">),</span>      <span class=\"c1\">// x (member) is initialized with x (parameter)</span>\n        <span class=\"n\">y</span> <span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>      <span class=\"c1\">// y initialized to 0</span>\n        <span class=\"n\">f1</span><span class=\"p\">{</span><span class=\"s\">&quot;test.cc&quot;</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">app</span><span class=\"p\">},</span> <span class=\"c1\">// this takes place after m and lg are initialized</span>\n        <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"s\">&quot;test.bin&quot;</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span><span class=\"o\">|</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">app</span><span class=\"p\">),</span>\n        <span class=\"n\">lg</span> <span class=\"p\">(</span> <span class=\"n\">m</span> <span class=\"p\">),</span>      <span class=\"c1\">// lg uses m, which is already initialized</span>\n        <span class=\"n\">m</span><span class=\"p\">{}</span>            <span class=\"c1\">// m is initialized before lg even though it appears last here</span>\n    <span class=\"p\">{}</span>                <span class=\"c1\">// empty compound statement</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119898161,
            "is_me_message": false,
            "last_edit_timestamp": 1513541453,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513541364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>(the comments are a bit confusing because they are referencing the code that was snipped out in <code>// ....</code> - basically, members are initialized in the order that they are actually declared in the class, not the order they are declared in the initialization list)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119898663,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sarkar.krishnan@gmail.com",
                        "full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
                        "id": 100326
                    },
                    "user_id": 100326
                }
            ],
            "recipient_id": 30232,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513542597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah sorry, shouldn't have snipped!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119921835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513596254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Wait, can you post the code with the snipped part included?<br>\nJust to get a better understanding. Also, what is that last empty compound statement doing? I see that it's not added as part of the list (because  no comma). But, to me, it looks like something that would throw a compiler error. So what exactly is going on there?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119947930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Getting Into C++ as a C user",
            "submessages": [],
            "timestamp": 1513640479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Has anybody worked with variants in C++ 17? It seems like <code>std::visit</code> is the equivalent of the pattern matching feature available in functional languages, but it looks pretty involved, using variadic templates, lambdas, constexpr and auto&amp;&amp; ... Is that really the equivalent of pattern matching or is there a better way?<br>\n<a href=\"http://en.cppreference.com/w/cpp/utility/variant/visit\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/utility/variant/visit\">http://en.cppreference.com/w/cpp/utility/variant/visit</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120293176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++17 variants",
            "submessages": [],
            "timestamp": 1514384116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>It is the \"modern C++\" equivalent, unfortunately... You can always fall back on switch, enums and structs, though.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120293461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++17 variants",
            "submessages": [],
            "timestamp": 1514384690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f613\" title=\"sweat\">:sweat:</span> I think I'll just use a struct tagged with an enum attribute to indicate its type and check it with a switch.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120293831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++17 variants",
            "submessages": [],
            "timestamp": 1514385553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Fun fact: <code>std::variant</code> is even worse than you may think; they had to add an extra state that is valueless and occurs when move/copy constructors throw an exception to get the \"exception guarantee\": <a href=\"http://en.cppreference.com/w/cpp/utility/variant/valueless_by_exception\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/utility/variant/valueless_by_exception\">http://en.cppreference.com/w/cpp/utility/variant/valueless_by_exception</a><br>\n<span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120295047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "C++17 variants",
            "submessages": [],
            "timestamp": 1514388235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I was reading the C++ lexer in Clang and I learned that you can define user-defined literals in C++: <a href=\"http://en.cppreference.com/w/cpp/language/user_literal\" target=\"_blank\" title=\"http://en.cppreference.com/w/cpp/language/user_literal\">http://en.cppreference.com/w/cpp/language/user_literal</a></p>\n<p>So I can define a <code>long double operator \"\" _km(long double)</code>, and so when I reference the literal <code>13.1_km</code> in my program, that operator function is called with a value of <code>13.1L</code>.</p>\n<p>This seems pretty cool. Does anyone know of any programs that use this feature in a cool way? Or is it a feature that people generally avoid?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120935800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User-defined literals, wow!",
            "submessages": [],
            "timestamp": 1515703368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>That is super cool! I have always thought that it would be cool to have some sort of unit type safety, so you can't add feet to meters or something. Seems like this could enable a system like that.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120938052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User-defined literals, wow!",
            "submessages": [],
            "timestamp": 1515706633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Apparently the C++ standard library defines some custom literals. You can write <code>1_h</code> to represent a <code>std::chrono::duration</code> of 1 hour, for example</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120938375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User-defined literals, wow!",
            "submessages": [],
            "timestamp": 1515707136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>But yes, exactly, these could totally be used to do such a thing! Like I imagine you can only add two <code>std::chrono::duration</code> together, and you can add <code>1_h + 1_s</code> to get a duration of \"one hour and one second.\"</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120938447,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f386",
                    "emoji_name": "fireworks",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 30232,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "User-defined literals, wow!",
            "submessages": [],
            "timestamp": 1515707259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm getting a surprising linker error trying to compile a program (fish shell) for OpenBSD.</p>\n<p>If I understand this error correctly, the linker can't find the <code>delete</code> operator for some basic string type?</p>\n<p><a href=\"https://gist.github.com/anonymous/cd8f2bf62a1a4bf2c6737a745e208059\" target=\"_blank\" title=\"https://gist.github.com/anonymous/cd8f2bf62a1a4bf2c6737a745e208059\">https://gist.github.com/anonymous/cd8f2bf62a1a4bf2c6737a745e208059</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122909179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1519446791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does this look like a C++ version mismatch or something similar? For context, I successfully ran autoconf and automake before this - no errors.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122909220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1519446860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>$ clang --version<br>\nOpenBSD clang version 4.0.0 (tags/RELEASE_400/final) (based on LLVM 4.0.0)<br>\nTarget: amd64-unknown-openbsd6.2<br>\nThread model: posix<br>\nInstalledDir: /usr/bin</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122909231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1519446916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Argh didn't see all the things.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122945506,
            "is_me_message": false,
            "last_edit_timestamp": 1519534553,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1519534493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kamal@marhubi.com\" data-user-id=\"8090\">@Kamal Marhubi (m2'18)</span> pardon?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122976701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1519609755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p>Hi all, <br>\nUp to this point, all the code I've ever written has been in vim.  This is all mostly C++ and C code.  I think I may be reaching the point where I should pick up an IDE since that might help me write code faster?  Any recommendations on which one I could use if I plan to continue mostly writing C++ and C?<br>\nGracias! Marlene</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123017760,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "modocache@gmail.com",
                        "full_name": "Brian Gesiak (he) (m1'18)",
                        "id": 105041
                    },
                    "user_id": 105041
                }
            ],
            "recipient_id": 30232,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "IDE recs for writing C++/C?",
            "submessages": [],
            "timestamp": 1519686922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I wish I had a good answer, I use Vim as well, sometimes with <a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" title=\"https://github.com/Valloric/YouCompleteMe\">https://github.com/Valloric/YouCompleteMe</a>, although it's a pain to set up!</p>\n<p>I hear Visual Studio Code is good for C++, but I haven't tried it. Some people swear by Visual Studio on Windows, or Xcode on macOS.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123024990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "IDE recs for writing C++/C?",
            "submessages": [],
            "timestamp": 1519701613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>CLion (made by the same people who make intellij) is pretty nice, but I believe it costs money outside of a 30 day trial.</p>\n<p>In theory, rtags plus editor integration can give you a lot of the benefit editor integration, but I've found rtags to be incredibly buggy. Of the four times I've installed it, it's mostly worked twice, and two other times I had to spend a day or more debugging it to get it into a mostly working state.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123088326,
            "is_me_message": false,
            "last_edit_timestamp": 1519821689,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "IDE recs for writing C++/C?",
            "submessages": [],
            "timestamp": 1519821661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The C++11 standard says:</p>\n<blockquote>\n<p>If an exception is thrown by the move constructor of a non-CopyInsertable T, the effects are unspecified.</p>\n</blockquote>\n<p>Why is this even allowed at all? This seems like a sign that you shouldn't do it, but a stronger sign would be to disallow this and this is specifically not disallowed.</p>\n<p>If you write something like</p>\n<div class=\"codehilite\"><pre><span></span>std::vector&lt;BarType&gt; foo;\n...\nfoo.push_back(std::move(bar));\n</pre></div>\n\n\n<p>The first-level maybe surprising thing is that this will invoke the copy constructor if the move constructor isn't <code>noexcept</code>. This is arguably the right thing because, in <code>C++98</code>, STL containers have the strong exception guarantee, which implies  that, if the <code>push_back</code> fails, <code>foo</code> is unmodified.</p>\n<p>The second-level maybe surprising thing is that, with <code>C++11</code>, if there is no copy constructor and the move constructor isn't <code>noexcept</code>, this operation can still happen (as opposed to being specified in a way that requires a compiler error).</p>\n<p>Back to the standard:</p>\n<blockquote>\n<p>If an exception is thrown by the move constructor of a non-CopyInsertable T, the effects are unspecified.</p>\n</blockquote>\n<p>This doesn't break backwards compatibility because <code>C++98</code> doesn't have <code>push_back</code> for types that are movable but not copyable, but just not breaking the language isn't a good reason to break the strong exception guarantee, so there must be some other reason. What's the other reason?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123088583,
            "is_me_message": false,
            "last_edit_timestamp": 1519823680,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "STL with non-noexcept move constructor",
            "submessages": [],
            "timestamp": 1519822295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't figured out the answer to this but, according to stackoverflow, a related strange thing is that, wrt the reasoning above, VC++ prior to the 2015 version always pretends the move constructor is <code>noexcept</code> because they didn't implement <code>noexcept</code> and a common case to to have a copy constructor and a <code>noexcept</code> move constructor, so they just assumed since they had no compatible way to detect <code>noexcept</code>(well, in the prior version, there was a <code>_NOEXCEPT</code> macro, but it wasn't widely used because it was non-standard).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123125389,
            "is_me_message": false,
            "last_edit_timestamp": 1519886000,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "STL with non-noexcept move constructor",
            "submessages": [],
            "timestamp": 1519885692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>My guess is that explicitly disallowing it (through SFINAE I suppose is what you had in mind?) is an oversight for when C++11 was fleshed out. There's been a lot of oversights in the C++1X era as far as I can tell. You might try pinging some of the C++ gurus on Twitter or on the C++ slack for a probably more accurate answer.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123138633,
            "is_me_message": false,
            "last_edit_timestamp": 1519912624,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "STL with non-noexcept move constructor",
            "submessages": [],
            "timestamp": 1519912566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\" data-user-id=\"5871\">@Bert Muthalaly (S'14)</span> there was a brain fart, I think.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123218692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "linker error",
            "submessages": [],
            "timestamp": 1520059866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Have heard good stuff about CLion and Eclipse. Though haven't used any of them personally. I use Emacs with a few modes turned on. I recently watched a 3 part video series and added some of the stuff shared in the video. Here's the first part if you are interested - <a href=\"https://www.youtube.com/watch?v=HTUE03LnaXA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=HTUE03LnaXA\">https://www.youtube.com/watch?v=HTUE03LnaXA</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HTUE03LnaXA\" href=\"https://www.youtube.com/watch?v=HTUE03LnaXA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=HTUE03LnaXA\"><img src=\"https://i.ytimg.com/vi/HTUE03LnaXA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123316718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "IDE recs for writing C++/C?",
            "submessages": [],
            "timestamp": 1520280902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really enjoy <a href=\"https://twitter.com/YossiKreinin/status/972019251656708096\" target=\"_blank\" title=\"https://twitter.com/YossiKreinin/status/972019251656708096\">this tweet</a> because the example he gives might look like trolling, but it's basically the \"standard\" example given by cppreference for how/why you might use <code>forward_as_tuple</code>.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/YossiKreinin/status/972019251656708096\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/7b5539b2808e1a4fd947df5d481015798530cea5/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3733373839373030383133373134323237322f714651524a586e515f6e6f726d616c2e6a7067\"></a><p>\"Modern C++\" feels just like Python! What's more Pythonic than  map.emplace(std::piecewise_construct, std::forward_as_tuple(a1,a2),  std::forward_as_tuple(a3,a4))?!</p><span>- Yossi Kreinin (@YossiKreinin)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123498777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "On \"modern C++ feels just like Python\"",
            "submessages": [],
            "timestamp": 1520615418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Has anyone here enjoyed attending a C++ meetup in NYC? If so, which one?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125791274,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carlos@amedee.net",
                        "full_name": "Carlos Amedee (he) (m1'18)",
                        "id": 105722
                    },
                    "user_id": 105722
                }
            ],
            "recipient_id": 30232,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Any good C++ meetups in NYC?",
            "submessages": [],
            "timestamp": 1524860805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found what seems to be a good intro to the STL here: <a href=\"http://www.fluentcpp.com/STL/\" target=\"_blank\" title=\"http://www.fluentcpp.com/STL/\">http://www.fluentcpp.com/STL/</a></p>\n<p>As someone trying to pick up C++ coming in from C, the STL is definitely one of my pain points! So hopefully this will be of help :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127392021,
            "is_me_message": false,
            "last_edit_timestamp": 1527814269,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "STL learning resources",
            "submessages": [],
            "timestamp": 1527814259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I think I may have a conceptual misunderstanding of streams. Is there a way to accomplish the below without using an intermediate <code>string</code>, since both the ifstream and ofstream are \"internally buffered by a <code>std::filebuf</code> \"? possibly by using the <code>&gt;&gt;</code> operator on the ifstream?</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main () {\n  string line;\n  ifstream in (&quot;in.txt&quot;);\n  ofstream out (&quot;out.txt&quot;);\n  while ( getline (in,line) ) out &lt;&lt; line &lt;&lt; &#39;\\n&#39;;\n  in.close();\n  out.close();\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127427347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fstreams",
            "submessages": [],
            "timestamp": 1527874148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>reading the docs more, maybe it's because <code>in</code> and <code>out</code> could have had <code>pubsetbuf</code> set to 0 meaning it couldn't work?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127427646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fstreams",
            "submessages": [],
            "timestamp": 1527874507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Beginner question: can I get some tips on how to install dependencies while messing around learning C++? I've been using CLion, which uses CMake, and I've kinda figured out how to use a tool called cget to install various packages I want to try: things like Boost, Google Bench, Google Test, etc. Things are working (cget has created a local my_project/cget/ directory with include/, lib/, etc. in it, and I've used include_directories/link_libraries in my top-level CMakeLists.txt to get access to them).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131015859,
            "is_me_message": false,
            "last_edit_timestamp": 1533608459,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533608430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But this feels janky and I don't even want to talk about how long it took me to get it working.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131016267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533608901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>that's generally how c++ goes. sorry. there are lots of build systems, each with their own ways of handle dependencies.</p>\n<p>you'll find a little subculture of c++ hackers who like to write single-header libraries. that is, the library is just a .h file. (a variant of this includes a single .c file.) for example, here's a GUI library in a single header file: <a href=\"https://github.com/vurtun/nuklear\" target=\"_blank\" title=\"https://github.com/vurtun/nuklear\">https://github.com/vurtun/nuklear</a> this makes it easy to plug the library into whatever build system you use. this is done for C too. a really popular example of this is SQLite, which ships a single .h/.c file for use. (it has its own build system for assembling the amalgamated file.)</p>\n<p>the existence of these things gives you a hint as to what a mess the world of c++ dependencies is. there are really good systems out there but each one is an island. (e.g. GN in chrome, or bazel.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131016727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533609482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Here's a video of Bjarne Stroustrup saying \"we could use a package manager\" when talking about C++20 and beyond<br>\n<a href=\"https://youtu.be/_wzc7a3McOs?t=1h1m30s\" target=\"_blank\" title=\"https://youtu.be/_wzc7a3McOs?t=1h1m30s\">https://youtu.be/_wzc7a3McOs?t=1h1m30s</a><br>\nRight now there's no clean way to manage dependencies unfortunately</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131017488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533610599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's my solution:</p>\n<p>1) When working on somebody else's code (including work code), use whatever build system they have set up (CMake, Bazel, etc.).  I never like their build system, but there's no choice here!</p>\n<p>2) For my own stuff (which consists of many small experiments to try out a library or a language feature), I run Ubuntu and put a shell script at the root of the project repo that installs the right dependencies.</p>\n<p>I usually invoke the compiler via a shell script and avoid makefiles.  For example, if I was going to link against zlib, I would just do something like:</p>\n<div class=\"codehilite\"><pre><span></span># build.sh\ndeps() {\n  sudo apt install zlib-dev  # didn&#39;t test that this was the right name\n}\n\nmyprog() {\n  cc -o myprog myprog.c -lz  # not tested either but it shows the idea :)\n}\n\n&quot;$@&quot;\n\n# invoke this script with ./build.sh deps or ./build.sh myprog\n</pre></div>\n\n\n<p>There is a difference between OS-managed dependencies (typically <code>-dev</code> packages), and dependencies you build yourself.  I usually do the former, but the scheme works perfectly well with the latter.</p>\n<p>That is, if I want google bench or googletest, I would write a shell function to clone their repo / download thier  tarball and <code>configure/make/install</code>.  Then I have a record of what dependency I used.</p>\n<p>I find this scheme to be very simple and reliable.  You can \"solve\" pretty much any build problem with a shell script (and it usually takes about one line, instead of messing with more complex build systems and package managers).</p>\n<p>CommonMark is another C dependency I've managed this way, and I do this with Python extension modules and distutils too.  I meant to blog about this, under the heading <strong>Make is Harder to Learn than C</strong> :-)</p>\n<p><a href=\"http://www.oilshell.org/blog/2018/07/22.html\" target=\"_blank\" title=\"http://www.oilshell.org/blog/2018/07/22.html\">http://www.oilshell.org/blog/2018/07/22.html</a></p>\n<hr>\n<p>At least one person got some value out of this style (<span class=\"user-mention\" data-user-id=\"116517\">@Jordan Ryan Reuter (S1'18)</span> )</p>\n<p>The other recommendation I have for learning C (or C++) is to always turn on ASAN.  It will give you a stack trace when you make memory errors.</p>\n<p>This is pretty much a must for C, but for C++ it's less of a big deal because idiomatic C++ has fewer raw pointers (i.e. using <code>vector&lt;&gt;</code> instead of array/length pairs).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131017847,
            "is_me_message": false,
            "last_edit_timestamp": 1533611835,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "david@zentus.com",
                        "full_name": "David Crawshaw (he) (S1'18)",
                        "id": 116353
                    },
                    "user_id": 116353
                }
            ],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533611247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh there is an example of this here: <a href=\"https://github.com/andychu/javascript-vs-c/blob/master/run.sh\" target=\"_blank\" title=\"https://github.com/andychu/javascript-vs-c/blob/master/run.sh\">https://github.com/andychu/javascript-vs-c/blob/master/run.sh</a></p>\n<p>Well, the address sanitizer part is there, and it does <code>-l m</code> for math, but that depenedency comes with the compiler, so you don't have to install anything.</p>\n<p>FWIW, I ported a tiny bit of C code to JavaScript and benchmarked the two programs (they came out the same in this limited case).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131019109,
            "is_me_message": false,
            "last_edit_timestamp": 1533612842,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533612780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Neat, hadn't heard of ASAN, thank you for that tip.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131019709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533613396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And yeah, I should really get comfier with shell programming...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131019863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533613578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>In case you missed it there is a snippet from ASAN in the README if you scroll down:</p>\n<p><a href=\"https://github.com/andychu/javascript-vs-c\" target=\"_blank\" title=\"https://github.com/andychu/javascript-vs-c\">https://github.com/andychu/javascript-vs-c</a></p>\n<p>In the style I'm using here, the only shell you really need to know is the function syntax and the <code>\"$@\"</code> trick (call the function named by the first arg with the rest of the arguments).</p>\n<p>Everything else is literally what you would have typed into the prompt, which is why I think shell is simple and effective. </p>\n<p>The other somewhat hard part is knowing how to invoke the C compiler, which I also mention could use its own blog post ... However I think learning how to do that is much easier than learning a particular build system that some project uses.  The knowledge of how the compiler is invoked transfers to other places, whereas there are N different build systems you could learn, and the knowledge doesn't really transfer.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131020053,
            "is_me_message": false,
            "last_edit_timestamp": 1533613969,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533613825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh also you can just make simple shell scripts like this too:</p>\n<div class=\"codehilite\"><pre><span></span>deps.sh:\n\n#!/bin/sh\nsudo apt install zlib-dev\n\nbuild.sh:\n\n#!/bin/sh\ncc -o myprog ...\n</pre></div>\n\n\n<p>You just paste a command into text file, add <code>#!/bin/sh</code>, and chmod +x it!</p>\n<p>I don't like having 10 or 20 shell scripts, so I use this kinda funky <code>\"$@\"</code> trick.  I don't think that many people use it, but I have found it useful.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131020270,
            "is_me_message": false,
            "last_edit_timestamp": 1533614192,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533614128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/002c4f97784bd6c6e747c239d84097b220aa51a4?x=x&version=2",
            "client": "website",
            "content": "<p>ASAN really changed everything. Dynamic analysis is why programming in C++ still makes sense.</p>\n<p>Also check out the other sanitizers. ASAN, MSAN, and TSAN are the big three for me.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131033328,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                }
            ],
            "recipient_id": 30232,
            "sender_email": "david@zentus.com",
            "sender_full_name": "David Crawshaw (he) (S1'18)",
            "sender_id": 116353,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "installing dependencies",
            "submessages": [],
            "timestamp": 1533634831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Random fun lambda example: <a href=\"https://gist.github.com/cqfd/5b43c4585145eb5058aa8361d7cdd620\" target=\"_blank\" title=\"https://gist.github.com/cqfd/5b43c4585145eb5058aa8361d7cdd620\">https://gist.github.com/cqfd/5b43c4585145eb5058aa8361d7cdd620</a>. (The challenge is to guess what will get printed.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131111724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533738252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh, TIL.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131124860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533752750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i did guess right, but only because i thought of all the weird things that could make sense and settled on my favorite. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131126306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533754443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that\u2019s a good one!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131126317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533754455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>btw, my version of g++ (8.2.0 on os x, from homebrew) required me to put a semicolon after the definition of <code>f</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131126367,
            "is_me_message": false,
            "last_edit_timestamp": 1533754529,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533754521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> oh, haha, typos weren't meant to be part of the quiz :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131127766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533756276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a modified example from a nice Andrew O'Dwyer talk, by the way: <a href=\"https://www.youtube.com/watch?v=WXeu4fj3zOs\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=WXeu4fj3zOs\">https://www.youtube.com/watch?v=WXeu4fj3zOs</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"WXeu4fj3zOs\" href=\"https://www.youtube.com/watch?v=WXeu4fj3zOs\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=WXeu4fj3zOs\"><img src=\"https://i.ytimg.com/vi/WXeu4fj3zOs/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131127944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "fun lambda example",
            "submessages": [],
            "timestamp": 1533756502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>What are people's thoughts on Boost in 2018? Vote <span class=\"emoji emoji-1f680\" title=\"rocket\">:rocket:</span> if you do Boost <span class=\"emoji emoji-1f6a4\" title=\"speedboat\">:speedboat:</span> if you prefer a Boost-free project...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131170436,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "isla.carson@hotmail.co.uk",
                        "full_name": "Isla Carson (she) (W2'19)",
                        "id": 100044
                    },
                    "user_id": 100044
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kamal@marhubi.com",
                        "full_name": "Kamal Marhubi (he) (m2'18)",
                        "id": 8090
                    },
                    "user_id": 8090
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jrojasdavalos@gmail.com",
                        "full_name": "Junior Rojas (he) (S1'16)",
                        "id": 9347
                    },
                    "user_id": 9347
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nelhage@nelhage.com",
                        "full_name": "Nelson Elhage",
                        "id": 100476
                    },
                    "user_id": 100476
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.rankine@me.com",
                        "full_name": "Sean Rankine (he) (SP1'18)",
                        "id": 109426
                    },
                    "user_id": 109426
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vsrinivas@ops101.org",
                        "full_name": "Venkatesh Srinivas (he) (S2'18)",
                        "id": 120560
                    },
                    "user_id": 120560
                },
                {
                    "emoji_code": "1f6a4",
                    "emoji_name": "speedboat",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "liu.brandon@gmail.com",
                        "full_name": "Brandon Liu (SP2'18)",
                        "id": 111910
                    },
                    "user_id": 111910
                },
                {
                    "emoji_code": "1f680",
                    "emoji_name": "rocket",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "liu.brandon@gmail.com",
                        "full_name": "Brandon Liu (SP2'18)",
                        "id": 111910
                    },
                    "user_id": 111910
                }
            ],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "boost poll",
            "submessages": [],
            "timestamp": 1533819697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This lightning talk really de-fuzzed my mental model: <a href=\"https://www.youtube.com/watch?v=fSB57PiXpRw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fSB57PiXpRw\">https://www.youtube.com/watch?v=fSB57PiXpRw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"fSB57PiXpRw\" href=\"https://www.youtube.com/watch?v=fSB57PiXpRw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=fSB57PiXpRw\"><img src=\"https://i.ytimg.com/vi/fSB57PiXpRw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131198995,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@ballingt.com",
                        "full_name": "Tom Ballinger (he) (W'12)",
                        "id": 807
                    },
                    "user_id": 807
                }
            ],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "rvo, copy elision",
            "submessages": [],
            "timestamp": 1533851292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I am building a toy lisp-interpreter in C++. Right now the goal is to identify a list (ex. <code>( + 1 2)</code> ) and use the first member of the list to look up a lambda function in the global function table. Then i want to call the lambda with the remaining arguments. My question: Is there a way to call a lambda with a vector of arguments? In other words, is there a way to loop through each of the arguments in my list of arbitrary size and apply them to the function one by one? </p>\n<p>The only way around this problem I can think of is to hard-code all the built-in in functions with the proper argument index (ex. <code>additionFunc(argVec[0], argVec[1])</code>).  Does anyone know of a better way to go about this? Any C++ features I might not know about? Any boost libs?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147451298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541890652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://en.cppreference.com/w/cpp/language/variadic_arguments\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/language/variadic_arguments\">https://en.cppreference.com/w/cpp/language/variadic_arguments</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147451833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541891350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>The syntax is literal <code>...</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147451840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541891368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> </p>\n<p>Lisp interpreters are a really fun project to work on. I remember working on my own Lisp interpreter.</p>\n<p>Depending on how you are implementing the lambda call, you may run into some pain since the number of arguments accepted by different functions is different. This causes the signatures of the corresponding C++ functions to be different. As an example, the <code>+</code> function has a signature of <code>LispObject f(LispObject, LispObject)</code> while the <code>car</code> function has a signature of <code>LispObject f(LispObject)</code>. This means there isn't a single C++ type you could use to represent both functions.</p>\n<p>An alternative solution is to have all the lambdas take in a vector and extract the arguments themselves. Under this scheme the addition function would look something like:</p>\n<div class=\"codehilite\"><pre><span></span>LispObject additionFunc(args Vector&lt;LispObject&gt;) { ... }\n</pre></div>\n\n\n<p>Then when you call a function in the interpreter, you construct a vector of the arguments and pass that to the underlying C++ function. This way all C++ functions have the exact same signature - <code>LispObject f(Vector&lt;LispObject&gt;)</code>. This makes it possible to use a single type to represent all Lisp functions.</p>\n<p>Does this make sense?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147453817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541894512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I'm understanding this correctly, I would just choose a different representation for your functions and arguments.  You shouldn't need varargs in C++ to write a Lisp interpreter.  IMO it would complicate the solution without any advantage (although I'm open to hearing an explicit reason for wanting to do it).</p>\n<p>I think you might be mixing up the host language and the interpreted language a bit, which is understandable.  The features you use in the host language don't have to relate that strongly to the language you're interpreting.</p>\n<p>In other words, Functions in C++ are very different things than functions in Lisp (or Python, etc.)  IMO a lot of FFIs are made worse by this confusion, e.g. Python's.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147454685,
            "is_me_message": false,
            "last_edit_timestamp": 1541895765,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541895750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Thank you to both of you. The problem I am having is the actual invocation of the function with the vector of args. Since the size of the vector is not known until runtime, I need a way to apply an unknown number of args to a function. </p>\n<p>After a bit more searching  I have found this: <a href=\"https://stackoverflow.com/questions/17114213/generic-template-for-calling-function-with-vector-elements\" target=\"_blank\" title=\"https://stackoverflow.com/questions/17114213/generic-template-for-calling-function-with-vector-elements\">https://stackoverflow.com/questions/17114213/generic-template-for-calling-function-with-vector-elements</a><br>\nHopefully the above solution is not the only way to do this, as it looks messy and tbh I don't know enough about templates to fully understand it</p>\n<p>As the maximum amount of arguments a function in C /C++ can take is 13 (i think) i could hard-code 13 different functions each that take a lambda, and a vector :<code>LispVal unaryFunc(lambda, argVector) { return lambda(argVector[0]);  } \nLispVal binaryFunc(lambda, argVector) { return lambda(argVector[0], argVector[1]); }</code> etc.<br>\n---but this seems repetitive.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147454705,
            "is_me_message": false,
            "last_edit_timestamp": 1541896197,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541895815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Ah <span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> that is exactly what i am doing...I figured it might be helpful to use the same data representation in C++ as in lisp (this also makes parsing easier, bc all you have to do is find a set of matching parens and treat the list as a func call (unless its a data-list)) but I guess this is not the smartest thing to do</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147454847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541896031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> your second example was along the lines of what I was doing, except I was being very stupid about the implementation. I just reread your answer and I understand what i messed up. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147457720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541900346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK great, glad that helped.  I've looked at Lisp interpreters in many languages, including several in C and C++, and there are many different choices you can make in the implementation.  Functions and their arguments can be represented in many different ways.</p>\n<p>Many host languages don't have closures, and Lisp does, which complicates things significantly.</p>\n<p>I'm writing a Python interpreter now in C++, and I have a similar issue with exceptions.  Should I use C++ exceptions to implement Python exceptions?  They are similar but not the same.</p>\n<p>CPython itself of course doesn't do this, because C doesn't have exceptions!</p>\n<p>Keeping the host language and target language conceptually separate is important.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147463922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "function call with arbitrary number of args",
            "submessages": [],
            "timestamp": 1541913471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am writing some code to measure the CPU time and the real time  of a program in C++.  The code creates a few threads and I want to measure how long each thread takes. Hence the functions have to be MT safe. I have explored clock(), clock_gettime(), getrusage(), std::chrono::high_resolution_clock::now() and I like clock_gettime() and std::chrono::high_resolution_clock::now(). But the online documentations of these 2 functions don't mention explicitly they are thread-safe.<br>\nclock_gettime() is POSIX.1 compliant and I found this - <a href=\"http://www.unix.org/whitepapers/reentrant.html\" target=\"_blank\" title=\"http://www.unix.org/whitepapers/reentrant.html\">http://www.unix.org/whitepapers/reentrant.html</a>. Is it safe to assume that clock_gettime() is thread safe?<br>\nAnd I don't have access to the C++ standard, but for std::chrono::high_resolution_clock, I found these 2 - <a href=\"https://docs.microsoft.com/en-us/cpp/standard-library/thread-safety-in-the-cpp-standard-library\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/cpp/standard-library/thread-safety-in-the-cpp-standard-library\">https://docs.microsoft.com/en-us/cpp/standard-library/thread-safety-in-the-cpp-standard-library</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm</a>.<br>\nI still can't be sure if these functions are thread-safe. I used both these 2 functions in a small experimental code on multiple threads and they seem to work fine. Is there a way I can be really sure about them?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 154995097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Measuring runtime in C++",
            "submessages": [],
            "timestamp": 1547318763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>POSIX-specified functions are threadsafe unless mentioned otherwise: <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_407\" target=\"_blank\" title=\"http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_407\">http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_407</a>. I'm not sure if there's a similar rule for C++ stdlib functions.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 154997776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nikhil.benesch@gmail.com",
            "sender_full_name": "Nikhil Benesch (he) (W2'19)",
            "sender_id": 198449,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Measuring runtime in C++",
            "submessages": [],
            "timestamp": 1547323647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"198449\">@Nikhil Benesch (W2'19)</span> clock_gettime() conforms to POSIX1.2001. Do you think is there a way I can find the 2001 version of the document?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155096121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Measuring runtime in C++",
            "submessages": [],
            "timestamp": 1547483600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Sure: <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/\" target=\"_blank\" title=\"http://pubs.opengroup.org/onlinepubs/009695399/\">http://pubs.opengroup.org/onlinepubs/009695399/</a>. That's technically the 2004 edition, but the 2004 edition is just the 2001 edition plus a few minor corrections.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155096917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nikhil.benesch@gmail.com",
            "sender_full_name": "Nikhil Benesch (he) (W2'19)",
            "sender_id": 198449,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Measuring runtime in C++",
            "submessages": [],
            "timestamp": 1547484249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I need to store and access up to size_t number of bits, and access them quickly in near-constant time.  The allocations can be done at the start of runtime, and persist until the end of runtime.  I've been looking at vector&lt;bool&gt; and bitsets, but I'm really not sure where to go!  I won't know the number of bits I need to store until runtime, but I could work around this by using bash and macros.  Does anyone know enough to have a conversation about this with me?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155104630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547490451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I've never used bitset, but it looks reasonable? vector will be way too heavy for this</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155104833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547490633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>oh, I see. it's fixed size. yeah, I would just allocate a big ol' bunch of bytes up front and access it with macros or an inline function or something like that</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155105068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547490811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, that's what I was thinking too.  But the amount of allocation can vary from aprox 135million to 1500 million</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155106278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547491743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>So that's not too feasible either</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155106294,
            "is_me_message": false,
            "last_edit_timestamp": 1547491762,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547491755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>The upper range of 1500 million bits = 187,500,000 bytes ~= 178 MB, so the <a href=\"http://www.cplusplus.com/reference/vector/vector-bool/\" target=\"_blank\" title=\"http://www.cplusplus.com/reference/vector/vector-bool/\"><code>bool</code> specialization of <code>vector</code></a> you mentioned earlier sounds reasonable to me, at least as a place to start</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155106823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, sorry, that wasn't very clear / was completely inaccurate.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107078,
            "is_me_message": false,
            "last_edit_timestamp": 1547492451,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>The max is about 33.75GB probably</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yup.  A reasonable use case (i.e. not a test case) would be 11.25gbs for one of the arrays.  Another array with length 1/3 of the bit array will also be needed that stores integers.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107401,
            "is_me_message": false,
            "last_edit_timestamp": 1547492755,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>is 11.25gbs larger than RAM? if so, you could do your initial load by streaming to a file and then <code>mmap</code> it</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Mmmh, I haven't heard of mmap before.  I'll look into it.  I will need to frequently access disparate sections of that array though, unfortunately.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also, it may or may not be larger than RAM, depending on the technology used</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I think mmap may fit that use case especially if there's locality in your access pattern</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>There isn't for the bit array, but there is for the int array, which will use more space in memory in any case.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155107890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547492958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any of malloc(), mmap(), or vector&lt;bool&gt; should work fine.  Personally I would not use vector&lt;bool&gt;, since the salient thing here is the amount of memory, and vector&lt;bool&gt; somewhat disguises that.  Also I believe \"Effective C++\" from Scott Meyers (a good book) discourages vector&lt;bool&gt;, because it's a weird specialization of vector.</p>\n<p>I think of this as a C problem, and C++ doesn't add anything in this particular case.  The C++ details are distracting from what you want.</p>\n<p>Usually people just write a few of macros in C to get and set bits.  It will probably look something like this:</p>\n<p><a href=\"http://www.coranac.com/documents/working-with-bits-and-bitfields/\" target=\"_blank\" title=\"http://www.coranac.com/documents/working-with-bits-and-bitfields/\">http://www.coranac.com/documents/working-with-bits-and-bitfields/</a></p>\n<p>malloc() returns a void*, so I think the easiest thing is to divide the number of bits by 8 and round up to get bytes, and then cast to a <code>char*</code> (i.e. <code>uint8_t*</code>).  And then use macros or inline functions to get, set, clear, flip, etc.</p>\n<p>mmap() will start up faster, but I would say if you don't have a clear idea of how to do it with malloc, it will help to do it that way first, since it's very \"standard\".</p>\n<p>Depending on how paging is configured on your kernel, malloc() and mmap() should behave basically the same way after startup.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155108800,
            "is_me_message": false,
            "last_edit_timestamp": 1547493791,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547493721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm I guess the problem with the document above is that it's mostly talking about sets of 32 or 64 bits.  You have to additionally compute the byte where the bit you want lives.</p>\n<p>I guess if vector&lt;bool&gt; works that might save you some effort, despite what I wrote.  I usually write out all the bit manipulation, which is short, but maybe not trivial to test or copy from somewhere.  I thought it would something you can Google easily but there are a lot of results with related problems and not this exact one.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155109430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Happily I don't need to do any bit manipulation.  After encoding my data in it format, I'll only need to read from it.  Unfortunately, I'm encoding string where each character can be one of 5.  As a result, I need 3 bits per index in the string.  Which isn't nicely dividable by 8.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155109940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll start off with having a look at the malloc tuff just now.  I guess my other concern is what happens when I can't malloc contiguous memory?  I've had failures due to this in the past, where std::vector somehow manages to succeed</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110067,
            "is_me_message": false,
            "last_edit_timestamp": 1547494569,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, I remember where I solved this problem!   Here's some code I wrote several years ago that does the same thing, but I recognize it's not trivial to pull out everything you need:</p>\n<p><a href=\"https://github.com/google/rappor/blob/master/client/cpp/encoder.cc#L234\" target=\"_blank\" title=\"https://github.com/google/rappor/blob/master/client/cpp/encoder.cc#L234\">https://github.com/google/rappor/blob/master/client/cpp/encoder.cc#L234</a></p>\n<p>bloom_out is an array of bytes.  In this case it's a vector&lt;uint8_t&gt;, but it could be a buffer allocated by malloc. </p>\n<p>Here <code>index</code> is the byte index, and then <code>bit_to_set</code> is the bit index within that byte.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think as long as you divide the malloc size by 8 it should work in every case that vector / vector&lt;bool&gt; does .  vectors should use more or less the same allocator under the hood</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, I was thinking of doing something similar.  There's also calloc(), which I could use to dynamically allocate blocks of 24 bits, which is the lcm of 3 &amp; 8</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110149,
            "is_me_message": false,
            "last_edit_timestamp": 1547494692,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>there should be a computation where you can treat a big buffer as an array of 3 bit numbers</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>no I see where you are coming from.  I think you need to calculate the number of bytes, which is basically (# elems * 3 bits) / (8 bits  per byte) rounded up to the nearest byte</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I usually do this kind of thing by writing unit tests :)  it's straightforward but easy to get wrong</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, that's what I'm thinking.  But, just to make things complicated, I'm also going to cast them into ints at some point too...  i.e. I'll cast approx 30 bits padded with 0s into a 32 int, which I'm then going to use to make comparisons.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you want some kind of macro or inline function to get element I, where each element is 3 bits long.</p>\n<p>I think that is a little problematic because 3 doesn't fit into 32 or 64 (the size of an int), which may  matter</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Urgh, so complicated!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah you are dealing with a lot of data, so efficiency probably matters.  most people would probably make it simpler by  using a less efficient representation</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547494976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can certainly use 30 bits out of 32 to represent 10 elements, or 63 bits out of 64 to represent 21 elements.</p>\n<p>It's possible to use all 32 or 64 bits, but off the top of my head I'm not sure how hard that is</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically the problem is to translate between bits and bytes.   For element 10, you know it will start at bit 30 and end at bit 33.</p>\n<p>then you would have to figure out what bytes to access to load bit 30-33, which may be 1 or 2 bytes.  and then extract the value.</p>\n<p>it's not hard but I might be tempted to just go with 4 bits per elements and see if your program crashes or performs slowly first :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>4 bits per element is a lot easier to write the code for</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155110892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I really want to avoid that though - memory is at a massive premium here unfortunately.  I'm thinking that for an array of N characters,  I can malloc  (N*3/8).  Then write accessors that allows me to index into it to retrieve the bits I want.  I'm not too sure how to do this properly though, as I can't take much performance hits.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>4 bits rather than3 would up by memory requirements by several GBs</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111025,
            "is_me_message": false,
            "last_edit_timestamp": 1547495357,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I guess I could cast to int and mask the ends of to retrieve only the info I want.  Mmmh</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I usually try to get my whole algorithm working end-to-end on smaller data before optimizing the representation.  i.e. it's hard to think of a case where 33% less data is make-or-break. </p>\n<p>that said, if you want to go for the 3 bit representation first I think it's doable</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm already at that stage in terms of the full algorithm</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think basically you have 2 steps.  Map item 10 to start bit 30 and end bit 33 -- open interval like [30, 33)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you map 30 -&gt; (byte, bit) and 33 (byte, bit)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you retrieve those 1 or 2 bytes.     and then do the bit math with 2 operations</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm working on Genome Assembly, where the data can be in the range of 100s of GBs.  So 33% less can mean that you can fit the alg onto your supercomputer, or you can't</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>it will be a somewhat complicated bit mask.  you should not need to loop over bits.    your data either straddles 1 byte or 2 bytes</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I didn't understand your last messages.  Could you rephrase?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>it will be a somewhat complicated bit mask.  you should not need to loop over bits.    your data either straddles 1 byte or 2 bytes</p>\n</blockquote>\n<p>Exactly.  It may span more bits if I look at ranges in the array, but a max of 2 bytes will need to be \"spliced\" to retrieve the data</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I.e. I don't understand what you mean by this:</p>\n<blockquote>\n<p>I think basically you have 2 steps.  Map item 10 to start bit 30 and end bit 33 -- open interval like [30, 33)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well I'm sort of thinking aloud, but there are basically two cases here.  Your bits straddle a byte or they don't.</p>\n<p>So it can look lke this</p>\n<div class=\"codehilite\"><pre><span></span>0000xxx0 00000000   # not straddling bytes\n000000xx x0000000   # straddling 2 bytes\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>the start bit 30 and end bit 33 help you determine if you are straddling bytes or not.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Exactly</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>i don't have the exact algorithm in my head, but it is doable :)  hopefully that way of thinking about it helps</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>looping over 3 bits isn't that bad either</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>i.e. if your elements were 77 bits long, you would want to do some tricks not to loop over 77 bits, and do byte-wise math instead</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>here you need 3 bit operations either way to get the element.    so you could do it bit-by-bit</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically you know you want bits [30, 33).  then translate bits 30, 31, 32 to (byte, bit) pairs</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, for sure. I think I'll stick with malloc and masking for now, and then move onto mmap for the integer stuff.  The idea is to have my algorithm work on subsections of the integer array at a time, thus requiring only parts of it to be stored in RAM at a time.  So the mmap sounds perfect for this</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then that gives you the 3 bits you need to get your value back at item i</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah mmap and malloc are an independent concern.  once you get it working with malloc(), you can switch to mmap() without changing the bit manipulation code</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>either way you're dealing with an array of bytes in memory</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Mmh, I think I need to look into the bit manipulation stuff more</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Exactly.  Which goes back to the original question of using malloc vs std::vector</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547495995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the key is the (byte index, the bit index within the byte).  that is what I'm doing with the code linked above with (<code>index</code>, <code>bit_to_set</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>(This is really useful for me - thanks!)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>I think the key is the (byte index, the bit index within the byte).  that is what I'm doing with the code linked above with (<code>index</code>, <code>bit_to_set</code>)</p>\n</blockquote>\n<p>Exactly</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm just not sure whether to use a nice wrapper like std::vector or to use malloc</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK great!  yeah it will be fiddly but should not end up as very much code.  </p>\n<p>I use vector for easy resizing, which you may or may not need here</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155111979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>the way I'm using it in the rAPPOR code is basically like malloc.  it's NOT using vector&lt;bool&gt;, which is very different than vector&lt;uint8_t&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, I thought so too.  But then again, std::vector provides reference access for individual bits only, which will probably add extra overhead seeing as I need series of 3 bits.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>vector&lt;uint8_t&gt; is basically the same as <code>char*</code> in C  or <code>unsigned char*</code> or <code>uint8_t*</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>But I can probably work around that</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's all big arrays of bytes</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Garrr</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I think those are all independent concerns, if you get the bit manipulation working you can switch back and forth without changing anything.  for very big arrays for some reason malloc feels more idiomatic.  it's fewer layers, although vector&lt;&gt; probably does the same thing  under the hood</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Right.  I think you're right. It's the under the hood part I'm worried about - std::vector&lt;bool&gt; is described as \"possibly space efficient\" which makes me worried that my indexing might not work nicely if I access the memory in a \"raw\" manner (i.e. not through the vector implementation itself).  So I think I'll go with malloc.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks so much for all your help!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155112426,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547496411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I forgot to mention that a Python interpreter can be very helpful in prototyping these calculations.  Python has a bit notation whereas C doesn't.</p>\n<p>You might be able to convince GDB to do something like this, but I prefer Python.  The main caveat with Python is that integers are arbitrary precision, so you can shift by 1000 or 10,000 and have it work.  Otherwise Python bit operations behave exactly like C's</p>\n<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; 0b000110\n6\n&gt;&gt;&gt; 0b000110 &lt;&lt; 3\n48\n&gt;&gt;&gt; bin(0b000110 &lt;&lt; 3)\n&#39;0b110000&#39;\n&gt;&gt;&gt; int(&#39;000110&#39;, 2)  # base 2\n6\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155113233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547497193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since you said you have 5 values, another possible encoding is \"base 5\".</p>\n<p>You can fit 27 base 5 digits in a 64-bit integer:</p>\n<div class=\"codehilite\"><pre><span></span>In [5]: math.log(2**64, 5)\nOut[5]: 27.563299716697156\n</pre></div>\n\n\n<p>In contrast, the 3-bit encoding takes 3 * 27 = 81 bits rather than 64.</p>\n<p>As usual, there's a time-space tradeoff.  The base 5 encoding is more compact, but it takes longer to decode and encode.</p>\n<p>You have to use integer division and modulus (%), rather than shifting and masking.  In other words, <code>x &gt;&gt; 3</code> is like  <code>x / (2^3)</code> and <code>x &amp; 0b00000111</code> is like  <code>x % (2^3)</code>.</p>\n<p>There's an analogy to base85 vs. base64.  I thought base85 was obscure, but through some Googling I just learned  that git uses it (not sure exactly where.)</p>\n<p><a href=\"https://github.com/git/git/blob/master/base85.c#L93\" target=\"_blank\" title=\"https://github.com/git/git/blob/master/base85.c#L93\">https://github.com/git/git/blob/master/base85.c#L93</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Ascii85\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Ascii85\">https://en.wikipedia.org/wiki/Ascii85</a></p>\n<hr>\n<p>Also I'm curious why there are 5 values?  Is it ACGT and \"unknown\" ?  You could also have 2 parallel arrays: 2 bits a piece for ACGT, and 1 bit for the other?  That would be easier to code, but it's not denser than the 3-bit encoding of course.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155131322,
            "is_me_message": false,
            "last_edit_timestamp": 1547510556,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547510344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>ACGT plus a termination character to mark the edges of different sections (reads) of DNA.  That is a super interesting thought.  Mmmmh.  It might also play out a little nicer when casting to int.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155131866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547510787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>As a nice compromise, it's also possible to encode 3 base 5 digits in an 8-bit integer.  I need to look into it, but that may be a good trade off between compression and speed whilst also preventing some letters from \"spilling over\" into the next byte.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155132136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547511043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>That method would provide a slightly better version of encoding as compared to the 3 bit encoding.  3 bit encoding allows 8 bases to be encoded in 3 bits, whilst this allows for 9.  This is a reasonable improvement over many millions of bases.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155132214,
            "is_me_message": false,
            "last_edit_timestamp": 1547513877,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547511129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Which may or may not be a good idea.  I'm thinking it might be alright, as it'll make the code simpler.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155132718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547511614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Actually, I think I found a better way.  I can encode things in a similar fashion to signed chars.  I.e. consider a byte, consisting of 4 pairs of bits. xx xx xx xx.  I can use the first bit to indicate the absence or presence of a termination character in the 1st, 2nd or 3rd DNA molecule.  These molecules can then be encoded in each pair.  so   3 0 1 2 would indicate the sequence AC* The 3 indicates that the 3rd molecule is the termination character *.  It needs some work, but I think I can use it to avoid using masks everywhere.  It needs work though/</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155134650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547513671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>How long are the sections?  If they are very long, then I would consider a length-prefixed encoding rather than a sentinel.</p>\n<p>The original encoding used a sentinel: You have ACGT, and then a special symbol * that is not equal to any of them.</p>\n<p>If you go for a length-prefixed, you could have something like:</p>\n<p>&lt;359 encoded as varint&gt; then &lt;359 2-bit digits ACGT ...&gt; (which is both compact and easy to compute on)</p>\n<p><a href=\"https://en.wikipedia.org/wiki/LEB128\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/LEB128\">https://en.wikipedia.org/wiki/LEB128</a> is a name for \"varint\" that I recently learned.  Google Protobufs and WebAssembly both use this integer format.  It's based on 7 bits of data and then a continuation bit, hence base 128 because 2^7 = 128.</p>\n<p>It sounds like the thing you are suggesting may be close to that ?</p>\n<p>It sounds like you have billions of ACGT digits.  Are there also billions of sections?  Or only millions or thousands?  If so, then I would not use a base 5 or 3-bit encoding, because the length-prefixed encoding would be more space efficient when there are few sections.</p>\n<p>Of course I don't know the full context of the problem, so there could be some reason you want to use a sentinel.  But because you care a lot about space, then I'd consider the # of sections relative to the # of \"data\" values.  Using 2 bits rather than 3 will be faster, smaller, and easier to write code for.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155137718,
            "is_me_message": false,
            "last_edit_timestamp": 1547517841,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547517372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW this is analogous to the difference between a C style string and a Pascal style string:</p>\n<p><a href=\"https://stackoverflow.com/questions/48382577/difference-between-c-and-pascal-strings\" target=\"_blank\" title=\"https://stackoverflow.com/questions/48382577/difference-between-c-and-pascal-strings\">https://stackoverflow.com/questions/48382577/difference-between-c-and-pascal-strings</a></p>\n<p><a href=\"https://stackoverflow.com/questions/28519732/what-is-a-pascal-style-string\" target=\"_blank\" title=\"https://stackoverflow.com/questions/28519732/what-is-a-pascal-style-string\">https://stackoverflow.com/questions/28519732/what-is-a-pascal-style-string</a></p>\n<p>C strings use sentinels (NUL), while Pascal strings are length-prefixed.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155138227,
            "is_me_message": false,
            "last_edit_timestamp": 1547517963,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547517926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also I should add that simply using a fixed width encoding of 16/32/64 for the length might be fine -- varint is more of an optimization on top, to optimize the size of the length itself.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155138889,
            "is_me_message": false,
            "last_edit_timestamp": 1547518694,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547518675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Each section may be of different length, and I need to be able to index into the concatenation of  them, as if the termination character is there.  I could, however, increase the number of ACGTs before the sentinel marker, in order to increase the compression</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155139383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547519238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>There's approx 100 bases (one of ACGT) to every termination character.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155139391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547519265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK interesting, I probably don't understand the full context well enough, i.e. the concatenation part.  You might be able to do that with any representation by having some sort of <code>sequence.get(i)</code> interface, perhaps with an index to the beginning of each sequence.</p>\n<p>Anyway, it sounds like there are a bunch of ideas to try out.</p>\n<p>If you end up trying more than one thing I'd be interested in reading a performance comparison!  In particular this discussion got me curious about the penalty of doing base 5 vs. base 4 or 8.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 155154192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Storing and accessing lots of bits",
            "submessages": [],
            "timestamp": 1547541706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6affb49df763896d737ac7e0ed618139?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Anybody know of a good one?  Right now I'm using a docker container running linux, but I wonder if ther's a simpler solution.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156607791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dbgoldberg01@gmail.com",
            "sender_full_name": "David Goldberg (he) (W1'18)",
            "sender_id": 134182,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "valgrind alternative for mac",
            "submessages": [],
            "timestamp": 1548167298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>What are your goals? AddressSanitizer and MemorySanitizer can catch many of the same bugs that Valgrind's memcheck pass does.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156608657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nikhil.benesch@gmail.com",
            "sender_full_name": "Nikhil Benesch (he) (W2'19)",
            "sender_id": 198449,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "valgrind alternative for mac",
            "submessages": [],
            "timestamp": 1548167904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>But I don't know of any replacement for callgrind/cachegrind.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 156608732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nikhil.benesch@gmail.com",
            "sender_full_name": "Nikhil Benesch (he) (W2'19)",
            "sender_id": 198449,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "valgrind alternative for mac",
            "submessages": [],
            "timestamp": 1548167957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm working with a very large amount of memory, that I need to organise in an array structure.  However, I can't use the standard array, as it throws memory errors for large amounts of data, as it's not possible to allocate that much contiguous memory.  At the moment, std::vector is a viable solution, but I'd like to learn more about how to manage memory without resorting to a structure I have little control over.  Has anyone ran into this problem before?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904077,
            "is_me_message": false,
            "last_edit_timestamp": 1549670157,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Don't think I can help, but curious too. How does std::vector end up working? Is it allocating separate chunks or something?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I thought std::vectors were contiguous too under the hood.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And just checking, is your array on the stack or dynamically allocated?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>dynamically allocated</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you share a code sample of the way you're allocating the array in the solution that throws memory errors?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904727,
            "is_me_message": false,
            "last_edit_timestamp": 1549671613,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "isla.carson@hotmail.co.uk",
                        "full_name": "Isla Carson (she) (W2'19)",
                        "id": 100044
                    },
                    "user_id": 100044
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil.benesch@gmail.com",
                        "full_name": "Nikhil Benesch (he) (W2'19)",
                        "id": 198449
                    },
                    "user_id": 198449
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 30232,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool. Hmm. I hadn't realized there would be much of a difference between dynamically allocating an array vs a std::vector, so I'm curious how the std::vector version manages to work.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157904736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549670805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>What's very large in your case? What platform are you on? Are you compiling to 64-bits code ?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157992590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549835172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>The answer to your problem is using (anonymous) mmap on Unix or VirtualAlloc on windows. These are the platform allocators that the standard libraries (and thus containers like vector, and functions like malloc and new) utilise</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157992663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549835291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>You should not have any problem allocating big chunks of memory unless you compile to 32bits (which would limit the address space to 2 or 3G depending on OS and compiler options). 64 bits addresses currently only represent a 48 bits address space but that is enough to allocate terabytes of memory</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157992734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549835445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>The only limitation on 64 bits processes might come from the OS killing your process if your working set (amount of memory that you are effectively using) becomes too large, here unices and windows have different behaviors</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157992808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1549835567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks a lot for all the replies.  I'm intending on adding the code /  answering properly as soon as  I can.  But - in the meantime - a tidbit I found: std::vector has only been guaranteed to use contiguous memory since c++17 according to <a href=\"https://en.cppreference.com/w/cpp/container/vector\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/container/vector\">https://en.cppreference.com/w/cpp/container/vector</a>.  I'm using c++11 right now.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158832719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1550528107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW I think that page is saying that the ContiguousContainer concept was introduced in C++ 17 (I've never heard of it, and I've written C++ for 15+ years).</p>\n<p>However <code>std::vector</code> should be guaranteed have been using contiguous memory since it existed (since C++ 98 or much earlier).  Otherwise you couldn't take the address of an element and do pointer arithmetic on it.  Ditto for for <code>std::string</code>.</p>\n<p>FWIW I can't think of any case where <code>std::vector</code> would work and <code>malloc()</code> would fail, except for <code>std::vector&lt;bool&gt;</code> which is a weird specialization that people like Scott Meyers tell you not to use (which means I've never used it)  :-)</p>\n<p>vector&lt;bool&gt; would succeed because it supposedly uses 1 bit per element rather than 1 byte.  You can of course do this with malloc() but the API has a factor of 8 difference in items vs. physical memory, which isn't obvious.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158850423,
            "is_me_message": false,
            "last_edit_timestamp": 1550554666,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1550554483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<hr>\n<p>Oh it looks like you said \"standard array\" results in a memory error and not malloc().  My guess is that you are trying to declare a huge array on the stack (with a local variable) rather than the heap (with malloc), but I would have to see the code to be sure.</p>\n<p>The size of the stack is determined by the OS.  I think a typical stack size is 8 MB ?  It's not going to be more than 1 GB, and you definitely can't use all your machine's memory with an array on the stack.</p>\n<p>I pointed some people to this page which has nice diagrams:</p>\n<p><a href=\"https://manybutfinite.com/post/anatomy-of-a-program-in-memory/\" target=\"_blank\" title=\"https://manybutfinite.com/post/anatomy-of-a-program-in-memory/\">https://manybutfinite.com/post/anatomy-of-a-program-in-memory/</a></p>\n<p>Stack and heap are one of those things that's at the intersection of C/C++ and the OS, so it's sometimes not well covered in pure C++ books.  It works somewhat differently on Linux and Windows, but the ideas are basically the same.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158850741,
            "is_me_message": false,
            "last_edit_timestamp": 1550555130,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1550554966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>From my experience it is better to allocate memory directly and manage it yourself if the amount is really HUGE, i.e., like</p>\n<div class=\"codehilite\"><pre><span></span>int * arr = new int[2000000];\n</pre></div>\n\n\n<p>What is even better is to stop having to think about controlling memory allocation and focus on the high-level algorithm - but I do agree it is not always possible to have that luxury.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159281579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551025073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, I'm still confused why you would get an error with the raw array approach but not with std::vector\u2014that's why I was wondering if the array was stack allocated, but it's not.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159281770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551025422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And like Andy said, I read that C++ reference as saying that std::vectors have always been contiguous.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159281822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551025475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm still focussing on my presentation, and will post my code after that's done.  But I'm talking arrays that exceed 2^32 in length.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159299713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551047151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Okay, so here's the code that doesn't work for \"large\" sizes:</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdint.h&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main(){\n\n    int size = 2000000000;\n    // size = 200;\n    std::vector&lt;uint_least64_t&gt; test_vector(size, 0);\n    for (int i = 0; i &lt; size; i++) { test_vector[i] = 0; }\n\n    uint_least64_t* test_array[size];\n    for (int i = 0; i &lt; size; i++) { test_array[i] = 0; }\n\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159741022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551468064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Compiled with <code>g++ -g3 filename.cpp</code></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159741043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551468096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>It returns <code>Exception has occurred.  EXC_BAD_ACCESS (code=1, address=0x7ffb36135750)</code> on the debugger on the line <code> uint_least64_t* test_array[size];</code> and  throws a seg fault when called from the terminal.  However, when run with <code>size = 200;</code>, there's no problems.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159741163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551468209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100044\">@Isla Jean Carson (W2'19)</span> won't the array be allocated on the stack?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159742413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551469264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm forgetting my C :(</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159742550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551469375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Righttttttt</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159743819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551470249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>You're very right</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159743821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551470251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f95e07c22da0d35f4c212cad4a019f097d690e1?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Wow.  Silly moment there!  Thanks a lot <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159744057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "isla.carson@hotmail.co.uk",
            "sender_full_name": "Isla Carson (she) (W2'19)",
            "sender_id": 100044,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551470409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, absolutely!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159745275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551471271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't call it silly -- I think every C programmer stumble across this one way or the other, i.e. learn it the hard way.  It's hard to pick up from a book, because they often try to teach you \"abstract\" C++ divorced from the OS.</p>\n<p>A similar issue is why you can't return the address of a variable on the stack.  Your program will behave very strangely and not give you any indication of why :)</p>\n<p>AddressSanitizer helps a lot and I recommended it to many people at RC, and it found such errors in their code.  That is, it gives you something approximating a real error message, instead of something like what you got with the stack overflow.</p>\n<hr>\n<p>The syntax of C and C++ also give you no help.  I just re-watched a Rich Hickey talk complaining about:</p>\n<p><code>Foo* f();</code></p>\n<p>There is a very real problem with that declaration.  In Hickey's terms, it tells you NOTHING. ;)  You don't know whether you got something that points into the heap, statically initialized data, or the stack (a programming error).  You have to trust that the original author documented it correctly, or read the source code (potentially including every conditional).</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159747217,
            "is_me_message": false,
            "last_edit_timestamp": 1551488339,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551472868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>re: addresssanitizer etc., it's interesting to me that one of the things that makes Rust popular is that it gives you most of the raw power of C++ (all of it, due to FFI and unsafe, really), but if you stick to the really expressive safe subset, there just happens to be a static analyzer built into the compiler that checks that you're not returning references to the stack, etc. There's no real reason you couldn't develop a workflow that automated those checks for C++, but it's not the easy default, so no one really does (which makes it hard to get started because no one has done it before etc.).</p>\n<p>Anyway, I guess the take-away is UX and ergonomics matter, which is tangential</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159748334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551473789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes absolutely, Rust solves exactly the problem with C and C++ that Hickey was talking about -- this was in this 2009 talk:</p>\n<p><a href=\"https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\" target=\"_blank\" title=\"https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\">https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey</a></p>\n<p>It's not the ONLY way to solve the problem, but it's definitely a solution which they put an amazing amount of effort into.  I prefer REPLs to long compilers for most problems, but that's a different discussion :)</p>\n<p>I have actually thought about how to make shell a first class dev env for C and C++, but that's also a different discussion.  I basically use shell as my REPL for C.  C and C++ are definitely like making fire with sticks and rocks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159750696,
            "is_me_message": false,
            "last_edit_timestamp": 1551488350,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Allocating HUGE arrays",
            "submessages": [],
            "timestamp": 1551475706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/813126b0289ae35cb6de4ee22d838f962dcfadac?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not writing enough code in my job to become fluent in C++ again as quickly as I want to.<br>\nAnd I hate working in a language that I don't think in.</p>\n<p>So -- do y'all have any favorite resources that could serve as a guided tour of (modern!) C++ for the experienced programmer? I have plenty of books about the language ... what I'm after is more on the practice problem / drills side of things. </p>\n<p>(Right now, all my side/hobby projects aren't programming related, and I don't want the mental overhead of defining a project and managing it just to refresh on C++ ... I want the equivalent of flashcards / grammar drills for studying a language. I'm solid on algorithms.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161390558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "lindzey@gmail.com",
            "sender_full_name": "Laura Lindzey (she) (m1'19)",
            "sender_id": 2131,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Exercises for C++ fluency",
            "submessages": [],
            "timestamp": 1553198288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It might be worth looking into <a href=\"https://exercism.io/tracks/cpp\" target=\"_blank\" title=\"https://exercism.io/tracks/cpp\">https://exercism.io/tracks/cpp</a> to see if it's worth your time! I have used it for go fluency, and because someone reviews my code, I have learned some useful things I wouldn't have otherwise. The caveat is that the mentors are volunteers, so the feedback loop might be long, so maybe you can do it as a side exercise.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161391263,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "surprise",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jritterling@gmail.com",
                        "full_name": "Jiheh Ritterling (she) (W1'18)",
                        "id": 134289
                    },
                    "user_id": 134289
                }
            ],
            "recipient_id": 30232,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Exercises for C++ fluency",
            "submessages": [],
            "timestamp": 1553198861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>Does anyone have a good way to concat variadic std::vector&lt;T&gt;s together to make one big std::vector&lt;T&gt;?  This solution seems like it abuses variadic expansion in a way I'm not super comfortable with: <a href=\"https://stackoverflow.com/questions/23439221/variadic-template-function-to-concatenate-stdvector-containers\" target=\"_blank\" title=\"https://stackoverflow.com/questions/23439221/variadic-template-function-to-concatenate-stdvector-containers\">https://stackoverflow.com/questions/23439221/variadic-template-function-to-concatenate-stdvector-containers</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162656463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "variadic template functions and expansions",
            "submessages": [],
            "timestamp": 1554494924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/28f189507e2e8b8e810d64114d86cbc64900833c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey, like always, I'm get this all mixed up! Can anyone point me in the right direction (no pun intended)!<br>\nFrom Object A creates objects B inside.<br>\nI wanna get a pointer to Bs from outside of object A.<br>\nAs in: Foo *p = A.getB()</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162657840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "agusanzorena@gmail.com",
            "sender_full_name": "Agustin Ramos Anzorena (he) (SP1'19)",
            "sender_id": 203423,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554495969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/28f189507e2e8b8e810d64114d86cbc64900833c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I tried this:</p>\n<p>objB objA::*getB(int index){<br>\n    return &amp;Bs[index];<br>\n}</p>\n<p>but noup..</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162657961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "agusanzorena@gmail.com",
            "sender_full_name": "Agustin Ramos Anzorena (he) (SP1'19)",
            "sender_id": 203423,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554496082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e3fda2fd1d67e162591fca24980ed91e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203423\">@Agustin Ramos Anzorena (SP1'19)</span>  i think the * needs to go after the type (objB) like this:</p>\n<p>objB *objA::getB(int index){<br>\nreturn &amp;Bs[index];<br>\n}</p>\n<p>depending on the type of Bs you might not need the &amp;</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162659283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nick23hi@gmail.com",
            "sender_full_name": "Nick Aversano (he) (SP2'19)",
            "sender_id": 215548,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554497127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/28f189507e2e8b8e810d64114d86cbc64900833c?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Thanx Nick! I'm gonna try that out!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162665560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "agusanzorena@gmail.com",
            "sender_full_name": "Agustin Ramos Anzorena (he) (SP1'19)",
            "sender_id": 203423,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554502051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c1aa35851f3c13bba869185ae03a36467e258865?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi Eric, if your source is on github then I could fork it and compile it on my side to look at the error easily and see if I come up with something :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162760327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "diego.valverde.g@gmail.com",
            "sender_full_name": "Diego Valverde Garro (m3'19)",
            "sender_id": 214927,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554651656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e9d86a1292e632cee716a5baa8e672b9e926a75?x=x&version=2",
            "client": "website",
            "content": "<p>I'm extra late to this, but you can think of C++'s function declarations as:</p>\n<div class=\"codehilite\"><pre><span></span>[type] [name]([args]) {\n    [body]\n}\n</pre></div>\n\n\n<p>So whenever you have a complex type, e.g. <code>objB *</code>, you can just stick it into the type area like <span class=\"user-mention\" data-user-id=\"215548\">@Nick Aversano (SP2'19)</span> suggested!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162820791,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "agusanzorena@gmail.com",
                        "full_name": "Agustin Ramos Anzorena (he) (SP1'19)",
                        "id": 203423
                    },
                    "user_id": 203423
                }
            ],
            "recipient_id": 30232,
            "sender_email": "cerekh@gmail.com",
            "sender_full_name": "Cerek Hillen (he) (W2'20)",
            "sender_id": 6670,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554733054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/28f189507e2e8b8e810d64114d86cbc64900833c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanx <span class=\"user-mention\" data-user-id=\"6670\">@Cerek Hillen (F2'14)</span> ,  I'm understanding how to move along with pointers!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162861413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "agusanzorena@gmail.com",
            "sender_full_name": "Agustin Ramos Anzorena (he) (SP1'19)",
            "sender_id": 203423,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Function returning a pointer",
            "submessages": [],
            "timestamp": 1554763138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2c519a6780d234da6797a581ec6b569a25fa5cac?x=x&version=2",
            "client": "website",
            "content": "<p>delete delete_later;  // Don't delete delete_later now.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163330885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "vsrinivas@ops101.org",
            "sender_full_name": "Venkatesh Srinivas (he) (S2'18)",
            "sender_id": 120560,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "From a line of C++ I'm writing for myself this AM",
            "submessages": [],
            "timestamp": 1555270753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am looking for strategies people use to write C++ code fast in the interviews. I know everybody think and write code at different pace. But if you've ever interviewed in C++ and/or ever thought about his question, I'd like to know your views on it.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164554551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Interviewing in C++",
            "submessages": [],
            "timestamp": 1556642931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I haven't interviewed in C++ before but I feel like the key to this would be getting to know the APIs of the standard library really well, especially the STL container types, streams and concurrency primitives.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164555263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Interviewing in C++",
            "submessages": [],
            "timestamp": 1556643486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>That's a good point <span class=\"user-mention\" data-user-id=\"111910\">@Brandon Liu (SP2'18)</span>  I think that's the minimum one needs to do to interview in C++ otherwise it'd be very difficult and time consuming to implement the data structures provided by the STL.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164626643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Interviewing in C++",
            "submessages": [],
            "timestamp": 1556720423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I browse this list occasionally and think a lot of the tips are good interview material: <a href=\"https://abseil.io/tips/\" target=\"_blank\" title=\"https://abseil.io/tips/\">https://abseil.io/tips/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164627040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Interviewing in C++",
            "submessages": [],
            "timestamp": 1556720763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e3fda2fd1d67e162591fca24980ed91e?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi! does anyone know if there's a <code>clang-format</code> option (or something better than clang-format) that will break up multiline function definitions and calls like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m4</span> <span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">OrthgraphicProjection2D</span><span class=\"p\">(</span>\n  <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"n\">input</span><span class=\"o\">-&gt;</span><span class=\"n\">roomSize</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span>\n  <span class=\"n\">input</span><span class=\"o\">-&gt;</span><span class=\"n\">roomSize</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span>\n  <span class=\"mi\">0</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n\n<p>^this is similar to what prettier-js does.  it drives me crazy that the default for c/c++ in cf is  instead this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m4</span> <span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">OrthgraphicProjection2D</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">input</span><span class=\"o\">-&gt;</span><span class=\"n\">roomSize</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span>\n                                        <span class=\"n\">input</span><span class=\"o\">-&gt;</span><span class=\"n\">roomSize</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170796356,
            "is_me_message": false,
            "last_edit_timestamp": 1563035476,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nick23hi@gmail.com",
            "sender_full_name": "Nick Aversano (he) (SP2'19)",
            "sender_id": 215548,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "clang-format option for multiline statements",
            "submessages": [],
            "timestamp": 1563035381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know the answer, but I definitely want this, too! (And could not find an appropriate reaction emoji to say so without using text.)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170796721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "clang-format option for multiline statements",
            "submessages": [],
            "timestamp": 1563036029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e3fda2fd1d67e162591fca24980ed91e?d=identicon&version=1",
            "client": "website",
            "content": "<p>so it seems like there are a few options that can get _close_ but not exactly to this with clang-format.</p>\n<p><code>AllowAllArgumentsOnNextLine: false</code> coming in <a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\" target=\"_blank\" title=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">clang-format version 9</a><br>\nhere are some relevant options i'm currently using:<br>\n<code>BinPackArguments: false</code><br>\n<code>BinPackParameters: false</code><br>\n<code>AllowAllParametersOfDeclarationOnNextLine: false</code></p>\n<p>this gets close! but wow dealing with these options is a pain</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">GameRender</span><span class=\"p\">(</span>\n  <span class=\"n\">game_memory</span><span class=\"o\">*</span> <span class=\"n\">memory</span><span class=\"p\">,</span>\n  <span class=\"n\">game_input</span><span class=\"o\">*</span> <span class=\"n\">input</span><span class=\"p\">,</span>\n  <span class=\"n\">game_render_commands</span><span class=\"o\">*</span> <span class=\"n\">commands</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>i want a prettier-js-like opinionated formatter for c/c++</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170798656,
            "is_me_message": false,
            "last_edit_timestamp": 1563039360,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nick23hi@gmail.com",
            "sender_full_name": "Nick Aversano (he) (SP2'19)",
            "sender_id": 215548,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "clang-format option for multiline statements",
            "submessages": [],
            "timestamp": 1563039270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8756446588cfc2014859f5f1fa68c850?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't seen many standards that require the closing paren and opening brace of a function definition to be on its own line, but I so prefer that - it makes diffs better and, I think, makes for a good visual guide of parameters vs code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">GameRender</span><span class=\"p\">(</span>\n  <span class=\"n\">game_memory</span><span class=\"o\">*</span> <span class=\"n\">memory</span><span class=\"p\">,</span>\n  <span class=\"n\">game_input</span><span class=\"o\">*</span> <span class=\"n\">input</span><span class=\"p\">,</span>\n  <span class=\"n\">game_render_commands</span><span class=\"o\">*</span> <span class=\"n\">commands</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// body of function</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Someday I'll dive into the llvm et al style guides that clang-format supports...</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170799653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "jason.a.owen@gmail.com",
            "sender_full_name": "Jason Owen (SP2'19)",
            "sender_id": 100450,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "clang-format option for multiline statements",
            "submessages": [],
            "timestamp": 1563041206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e3fda2fd1d67e162591fca24980ed91e?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can get close if you're ok with function braces always breaking with <code>BreakBeforeBraces: Linux</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">GameRender</span><span class=\"p\">(</span>\n  <span class=\"n\">game_memory</span><span class=\"o\">*</span> <span class=\"n\">memory</span><span class=\"p\">,</span>\n  <span class=\"n\">game_input</span><span class=\"o\">*</span> <span class=\"n\">input</span><span class=\"p\">,</span>\n  <span class=\"n\">game_render_commands</span><span class=\"o\">*</span> <span class=\"n\">commands</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// body of function</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 170801249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nick23hi@gmail.com",
            "sender_full_name": "Nick Aversano (he) (SP2'19)",
            "sender_id": 215548,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "clang-format option for multiline statements",
            "submessages": [],
            "timestamp": 1563044252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c062449003eb6630b6d5c576c59c6714a1dbca0?x=x&version=1",
            "client": "website",
            "content": "<p>I am going to present \"A Series of Unfortunate Bugs\" at this year's cppcon.  I am going to share a few bugs that I still remember because they were really difficult to solve and they improved my debugging and programming skills. If you want to share your war stories, I'll be happy to include it in my slides and give you credit. I am particularly interested in bugs that either took a long time to solve, or you learned something new about the language or tools or anything that you think will help somebody become better as a C++ programmer.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171725403,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f41b",
                    "emoji_name": "bug",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sqliu52@gmail.com",
                        "full_name": "Susan Q. Liu (S2'18)",
                        "id": 120075
                    },
                    "user_id": 120075
                },
                {
                    "emoji_code": "1f41b",
                    "emoji_name": "bug",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f41b",
                    "emoji_name": "bug",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                },
                {
                    "emoji_code": "1f41b",
                    "emoji_name": "bug",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f41b",
                    "emoji_name": "bug",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jason.a.owen@gmail.com",
                        "full_name": "Jason Owen (SP2'19)",
                        "id": 100450
                    },
                    "user_id": 100450
                }
            ],
            "recipient_id": 30232,
            "sender_email": "satabdidas@gmail.com",
            "sender_full_name": "Satabdi Das (F1'16)",
            "sender_id": 100028,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Interesting bugs you solved",
            "submessages": [],
            "timestamp": 1564087016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I recently released an <a href=\"https://github.com/protomaps/OSMExpress\" target=\"_blank\" title=\"https://github.com/protomaps/OSMExpress\">open source project</a> and have a lot of interested users. The build instructions I give right now are to clone the entire git repo, which includes many dependencies as submodules, and build with CMake. I want to provide a binary distribution for end users though, and it's unclear to me the best way to accomplish this. </p>\n<p>I imagined I might be able to provide a single static binary, but learned this is <a href=\"https://stackoverflow.com/questions/5259249/creating-static-mac-os-x-c-build\" target=\"_blank\" title=\"https://stackoverflow.com/questions/5259249/creating-static-mac-os-x-c-build\">impossible on macOS</a>. Ideally I would have one build script in common between macOS/FreeBSD/Linux. (I have also ruled out using Docker for this.)  Seems like the next step up is to provide a zipfile of the executable and its dependencies (.dylibs on mac, .SOs on linux) and hardcode the executable's <code>rpath</code> to be able to find these? Does anyone have a minimal example of how to accomplish this? Or is there a different approach I'm missing?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176155809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1568940998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111910\">@Brandon Liu (SP2'18)</span> I think that OS X answer is both outdated and misleading.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176202175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1568992880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I believe you should be able to build a binary for OSX that statically links whatever you want OTHER than system libraries, which you don't need to because they will already be available on every machine</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176202296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1568992951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I think the typical approach would be, for stuff that's in Homebrew or otherwise easily-available dependencies, you instruct the user to install them (rather than distribute or link them statically yourself), and link those dynamically as well</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176202433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1568993045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>also, that answer (from 2011) references gcc and notes that apple will stop using gcc soon. Apple did stop using gcc -- the \"gcc\" name on OS X is a symlink to clang. So the set of supported compiler flags will be completely different from whatever the 2011 situation was.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176202481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1568993113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>OK, I see what you mean - that makes sense for libraries like zlib, bzip2, Expat that I depend on. I'm looking into <a href=\"https://conan.io\" target=\"_blank\" title=\"https://conan.io\">https://conan.io</a> now to see if there's some part to help solve this problem.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176234758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1569018078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I actually got this working by just fiddling with CMake variables a lot.</p>\n<ul>\n<li>The key was to not use the '-static' CMake option for libraries that need to link against system libraries, as this would fail on macOS</li>\n<li><code>BUILD_SHARED_LIBS=OFF</code> is used by convention to create static libraries but other libraries might have their own flags</li>\n<li>don't use <code>target_link_directories</code> as it makes your program non-relocatable</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176430042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "distributing a command line program",
            "submessages": [],
            "timestamp": 1569296899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Can anyone suggest some good resources/books/tutorials for learning C++? I\u2019ve found a few but not sure which are good and which ones to start with.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184264362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577370237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Can I ask what kind of usage you aim to get out of C++? Are you just looking to understand the basics down, or seeking to work in games, or finance, or scientific computing, etc.?</p>\n<p>You can learn the basics of C++ pretty quickly but unfortunately the language is so enormously complex that it's a significant time investment to learn about all the footguns. Some industries like games only use a subset, and other industries use...  a different subset.</p>\n<p>In general, I would stand by the recommendations in this reddit thread: <a href=\"https://www.reddit.com/r/cpp/comments/5pqv8o/whats_the_best_c_beginners_book/dct3t2b/?st=k4oq8eb1&amp;sh=f0c43555\" target=\"_blank\" title=\"https://www.reddit.com/r/cpp/comments/5pqv8o/whats_the_best_c_beginners_book/dct3t2b/?st=k4oq8eb1&amp;sh=f0c43555\">https://www.reddit.com/r/cpp/comments/5pqv8o/whats_the_best_c_beginners_book/dct3t2b/?st=k4oq8eb1&amp;sh=f0c43555</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184347261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577485685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f47a0818d457159648b86840bfa5b6c0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I transitioned to a role where I am expected to work in C++ so I'd like to understand the basics, but the work is finance related so that would be the main focus. Thanks for the recommendations!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184445691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "elana.l1@gmail.com",
            "sender_full_name": "Elana Liskovich (SP2'19)",
            "sender_id": 215648,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577671581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Does you work have a style guide? (also - what version of C++?) If so, it might help to post the gist of it - there's lots of different things that \"C++\" can look like depending on the version and what features you're allowed to use, so it might help to know that before you go off and learn a bunch of things that won't necessarily be applicable :)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184446085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577672364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>(i don't have a good recommendation, since i learned c++ pretty piecemeal over the course of a few years and hope to never have to use it again, but knowing that might help other folks make recommendations)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184446141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577672463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I've transitioned from knowing zero C++ 3 years ago to using it as my primary language; have relied on online resources but did buy the Scott Meyers  Effective C++ book which is widely recommended. I found it useful and refer to it once in a while but it's more of a reference than a read-straight-through book</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184448907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577677902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I am often feeling around in the dark but what's worked for me is absorbing the style of whatever libraries I'm depending on, as the primary reason for me using C++ is access to libraries that have no equivalent in other languages</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184448958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577677970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>In terms of evaluating resources I think you can safely ignore anything pre C++11 or that uses auto_ptr; something I would consider, but I haven't done myself, is becoming well read in one of the main C++ mega-libraries as a way to narrow your focus: Boost, Folly or Abseil</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184449102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577678243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Turns out the C++ standards committee has an education study group, with a bunch of recommendations: <br>\n<a href=\"https://isocpp.org/blog/2018/12/sg20-education-and-recommended-videos-for-teaching-cpp\" target=\"_blank\" title=\"https://isocpp.org/blog/2018/12/sg20-education-and-recommended-videos-for-teaching-cpp\">https://isocpp.org/blog/2018/12/sg20-education-and-recommended-videos-for-teaching-cpp</a> and <br>\n<a href=\"https://www.cjdb.com.au/sg20-and-videos\" target=\"_blank\" title=\"https://www.cjdb.com.au/sg20-and-videos\">https://www.cjdb.com.au/sg20-and-videos</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184526973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577771828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>unfortunately, they all seem to be talks.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184527024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577771935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>And take the committee's recommendations with a grain of salt because \"committee C++\"(aka \"modern C++\") is not the only kind of C++ that people use. e.g. in games (and possibly in finance) nobody uses exceptions and it is extremely common to use custom in-house standard libraries instead of the default one (which has a lot of issue w.r.t. compile times, performance, memory allocation, etc.)</p>\n<p>I would recommend you focus on the basics (probably with the C++ primer book); the \"C layer\" (functions, structs, etc.) and the \"object layer\" (inheritance, namespaces, overloading..). Any C++ book or resource is likely to spend a lot of time on obscure corners and you can literally spend decades learning and getting a feel for this, but it's not necessary. Probably best to focus next on what your in-house coding style calls for.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184561012,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "elana.l1@gmail.com",
                        "full_name": "Elana Liskovich (SP2'19)",
                        "id": 215648
                    },
                    "user_id": 215648
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 30232,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Learning C++",
            "submessages": [],
            "timestamp": 1577819853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "website",
            "content": "<p>Hey <br>\nI'm currently working on a video game for which I'm writing my own engine in C++11 (<a href=\"https://github.com/SourenP/ungroup_game\" target=\"_blank\" title=\"https://github.com/SourenP/ungroup_game\">https://github.com/SourenP/ungroup_game</a>). My code base is getting a little big and the way I've been defining global constants isn't scaling well - especially for consts that I need to change often to test different variations of the game.</p>\n<p><strong>How I'm doing it now</strong><br>\nI have a <code>game_settings.hpp</code> file that has most of the global constants that define a \"variation\" of the game. For example <code>player_speed</code> or <code>enemy_count</code>.</p>\n<p>This issue with this is that every time I change the <code>player_speed</code>, I need to recompile like 50 files because they all <code>#include game_settings.hpp</code>.</p>\n<p><strong>Alternative 1</strong><br>\nI've considered defining all the constants in their relevant files (e.g. <code>player_speed</code> would go in <code>Player.cpp</code>)<br>\nPros:</p>\n<ul>\n<li>faster build time</li>\n<li>can include then in <code>game_settings.hpp</code> as <code>extern consts</code> if I need to make them global</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>I don't have a list of variables I can look at that define a \"variation\" of the game. They are now spread out all over the code... and I need to grep for them every time i want to change them instead of just opening <code>game_settings.hpp</code>. I guess I could <code>extern</code> them in <code>game_settings.hpp</code> anyways but that doesn't seem clean if they don't  <em>need</em> to be global.</li>\n</ul>\n<p><strong>Alternative 2</strong><br>\nI've also considered moving them into a yaml or json file and loading that in at runtime. Not sure how easy this is and if it's a good idea or not...</p>\n<p>Anyone have suggestions or opinions about this?<br>\n<span class=\"user-mention\" data-user-id=\"255130\">@Malte Skarupke (he) (W2'20)</span> <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187568182,
            "is_me_message": false,
            "last_edit_timestamp": 1581009733,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581009433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Makes sense to me to get these constants from a config file. I don't know much about games programming though.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187568424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581009573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I usually end up dropping in <a href=\"https://github.com/nlohmann/json\" target=\"_blank\" title=\"https://github.com/nlohmann/json\">https://github.com/nlohmann/json</a> to my projects, it's just a header. TOML seems better (comments!) but I haven't been motivated to switch yet</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187569071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581009981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2193d0d44d3a89de9a2c14dbf38302a2320b022?x=x&version=2",
            "client": "website",
            "content": "<p>I agree with the others that these can probably live in a configuration file. If you were working with designers who don't touch code that often, you'd definitely want to put things like \"player speed\" and \"enemy count\" into a configuration file that's possible to change without having to recompile.</p>\n<p>These are also variables that would eventually end up in a game editor if the engine grows, so that you would even be able to change them at runtime without having to restart the game every time. But that's for later and a first step towards that might just be a configuration file.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187569522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "malteskarupke@fastmail.fm",
            "sender_full_name": "Malte Skarupke (he) (W2'20)",
            "sender_id": 255130,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581010233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "website",
            "content": "<p>Cool<br>\nThanks y'all</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187569739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581010401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "website",
            "content": "<p>Would the pattern then be to have the game_settings.cpp module load the json into an object and then have all the other classes have access to that object by including game_settings.hpp?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187570023,
            "is_me_message": false,
            "last_edit_timestamp": 1581010574,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581010563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>that could work, one issue with that might be that if you encode all the config values as struct or class members then you'll have the same global recompile issue you're dealing with right now. if new config options or constants don't get added often that might be fine, but if they do you might want to think about storing the config data in a heap-allocated data structure</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187570955,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 30232,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581011193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>I either 1) make a <a href=\"https://stackoverflow.com/questions/17712001/how-is-meyers-implementation-of-a-singleton-actually-a-singleton\" target=\"_blank\" title=\"https://stackoverflow.com/questions/17712001/how-is-meyers-implementation-of-a-singleton-actually-a-singleton\">Meyer's Singleton</a> object that all code can access or 2) use a dependency injection style where your main function builds the Config object and passes it down into everything else - drawback being it's a lot more code, benefit being it's much more unit testable</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187571069,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581011278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wait so does this mean that my global variables can't be constants because I need to set them at runtime according to what I read from the json?<br>\nIs there a way in C++ to set a global variable only once at runtime then not let it be modified later?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187597665,
            "is_me_message": false,
            "last_edit_timestamp": 1581030044,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581029963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>If you're initializing a const object the constructor will still be able to set the fields of the object, it's only const after the constructor finishes</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187597799,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 30232,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581030075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh maybe I should use one large object instead of making each field its own variable then</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187597821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581030110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>also in modern C++ you can do this with a lambda: <a href=\"https://stackoverflow.com/a/3568429/1382869\" target=\"_blank\" title=\"https://stackoverflow.com/a/3568429/1382869\">https://stackoverflow.com/a/3568429/1382869</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187597870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581030130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>static ConfigReader cr(&quot;configfile&quot;);\n\nconst Globals{\n    .foo=cr.get(&quot;foo&quot;).default(123),\n    .bar=cr.get(&quot;bar&quot;).default(&quot;somestring&quot;),\n    ...\n};\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187671014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581102685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187671024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581102692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>er.. my C is leaking, the <code>.foo=</code> initialization syntax isn't in C++ until C++20</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187671047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "How to define consts in a large project",
            "submessages": [],
            "timestamp": 1581102712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone have experience with this? I'm trying to build libclang for iOS, but I think I just need more general advice around cross-compiling.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187698669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Cross compiling for iOS",
            "submessages": [],
            "timestamp": 1581130115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I used to maintain the cross-build environment at my previous job -- but it's all dependent on your target environment, so without specific questions and poking around your environment, I can't really help too much.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187745306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Cross compiling for iOS",
            "submessages": [],
            "timestamp": 1581225210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's all ad-hoc convincing tools that weren't really designed for cross compilation to call your cross compiler with the right paths; the smarter the tool, the more weird corners you run into.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187745345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Cross compiling for iOS",
            "submessages": [],
            "timestamp": 1581225246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> that's what i'm discovering right now :) but I think i'm getting it to work! let's see ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187763759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Cross compiling for iOS",
            "submessages": [],
            "timestamp": 1581264509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>I'm using this <code>opencv-rust</code> library, which links against opencv (written in C++).<br>\nI've just learned that on windows, symbols are not exported by default unless one adds <code>__declspec(dllexport)</code>, and opencv has a macro <code>CV_EXPORT</code> that <code>#define</code>s to __declspec on windows platforms.<br>\nThe developer of the library I'm using has started development on linux though, and seems to have depended on some of the functionality in opencv that doesn't have <code>CV_EXPORT</code> on it, I guess assuming that all the symbols were exported.</p>\n<p>This is only in a side <code>contrib</code> module, so it didn't break the whole library, but I think it breaks using this <code>contrib</code> on windows, unless I recompile opencv with the CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS flag.<br>\nWhat to do here? Is symbol visibility part of the API(ABI I guess), even if only on windows? I've read around that CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS was discouraged, but I'm going to turn it on now to get my project done.</p>\n<p>Should we not use the symbols with the <code>CV_EXPORT</code> macro on them, is that idiomatic?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188481451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Using un-exported symbols",
            "submessages": [],
            "timestamp": 1582053199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>Side question, do people use <code>-fvisibility=hidden</code> on gcc often too? I guess this would be the same etiquette</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188481601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Using un-exported symbols",
            "submessages": [],
            "timestamp": 1582053295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is definitely part of the ABI, and on Linux I'm used to seeing libraries use <code>__attribute__((visibility(\"hidden\")))</code> or similar, as well as passing a version script to <code>ld</code>.  It's always a pain when you have to get around it, though, especially in your situation. :-/</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188500585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Using un-exported symbols",
            "submessages": [],
            "timestamp": 1582067094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0789f8732b00c0952a58c7e4de8ae016e1bfbe20?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone have any experience in using open mp?</p>\n<p>i have this embarrassingly parallel code (path tracing) in a for loop that I want to optimize but it involves shared_ptrs. By using <code>pragma omp parallel for</code>, it slows down by a factor of 2. I understand that this may the result of updating shared pointers which are atomically copied. Does anyone have any tips in benchmarking / debugging this?</p>\n<div class=\"codehilite\"><pre><span></span><code>for (int32_t j = 0; j &lt; y_res_; j++) {\n        for (int32_t i = 0; i &lt; x_res_; i++) {\n           RGBUnit pxl;\n            ...\n            for (uint32_t alias = 0; alias &lt;= aliasing_its_; ++alias) {\n                 ....\n                auto objects = scene_manager.getObjects(r); //shared pointers\n                pxl += color(r, objects);\n            }\n            pxl /= (aliasing_its_ + 1);\n            buf.setUnit(gammaTransform(pxl, gamma), i, j); //RGBUnit\n        }\n    }\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204935184,
            "is_me_message": false,
            "last_edit_timestamp": 1595607955,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "neil.liu16@gmail.com",
            "sender_full_name": "Neil Liu (he) (SP2'20)",
            "sender_id": 276158,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595607244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0789f8732b00c0952a58c7e4de8ae016e1bfbe20?x=x&version=2",
            "client": "website",
            "content": "<p>I've also tried <code>#pragma omp parallel for num_threads(2)</code> and there is also a performance decrease by a factor of 2, which is interesting because there's just 1 additional thread</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204935344,
            "is_me_message": false,
            "last_edit_timestamp": 1595607360,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "neil.liu16@gmail.com",
            "sender_full_name": "Neil Liu (he) (SP2'20)",
            "sender_id": 276158,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595607346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>i have this embarrassingly parallel code (path tracing) in a for loop that I want to optimize but it involves shared_ptrs. By using pragma omp parallel for, it slows down by a factor of 2. I understand that this may the result of updating shared pointers which are atomically copied. Does anyone have any tips in benchmarking / debugging this?</p>\n</blockquote>\n<p>If you're on linux, perf is your friend.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and, yeah -- each shared get of a pointer involves an atomic increment or decrement.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>which involves talking to all other processors and locking the cache line.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>when other processors are doing work in that cache line (ie, when it's not in the E state), that gets relatively expensive.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988184,
            "is_me_message": false,
            "last_edit_timestamp": 1595652411,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(E state: <a href=\"https://en.wikipedia.org/wiki/MESI_protocol\">https://en.wikipedia.org/wiki/MESI_protocol</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you can hoist the get of the shared_ptrs out of the loop, you can probably improve things.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204988191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595652440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2193d0d44d3a89de9a2c14dbf38302a2320b022?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also if you're just reading from the shared_ptr, you don't need to make a copy of the ptr. Either pass the object around as a plain pointer or as a reference. This is safe to do as long as the last reference doesn't go away on a different thread.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205068472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "malteskarupke@fastmail.fm",
            "sender_full_name": "Malte Skarupke (he) (W2'20)",
            "sender_id": 255130,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595799582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0789f8732b00c0952a58c7e4de8ae016e1bfbe20?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"255045\">Ori Dean Bernstein (he) (W2'20)</span> <a href=\"#narrow/stream/24319-C.2B.2B/topic/OpenMP.20Help/near/204988184\">said</a>:</p>\n<blockquote>\n<p>when other processors are doing work in that cache line (ie, when it's not in the E state), that gets relatively expensive.</p>\n</blockquote>\n<p>Very interesting! Thanks for confirming. I never expected the decrease in performance to be this much.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"255130\">Malte Skarupke (he) (W2'20)</span> <a href=\"#narrow/stream/24319-C.2B.2B/topic/OpenMP.20Help/near/205068472\">said</a>:</p>\n<blockquote>\n<p>Also if you're just reading from the shared_ptr, you don't need to make a copy of the ptr. Either pass the object around as a plain pointer or as a reference. This is safe to do as long as the last reference doesn't go away on a different thread.</p>\n</blockquote>\n<p>Thanks for the tip, I think I will look into this more. I've tried to stay away using naked pointers but it seems I need to implement your suggestion here.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205077227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "neil.liu16@gmail.com",
            "sender_full_name": "Neil Liu (he) (SP2'20)",
            "sender_id": 276158,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "OpenMP Help",
            "submessages": [],
            "timestamp": 1595816547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm (re)learning C++ and I've come across some syntax that is confusing me. I have a feeling I missed something in my introductory materials. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Here's one way of declaring a pointer to something:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Song</span><span class=\"o\">*</span> <span class=\"n\">pSong</span>  <span class=\"o\">=</span>  <span class=\"k\">new</span> <span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"sa\">L</span><span class=\"s\">&quot;Nothing on You&quot;</span><span class=\"p\">,</span> <span class=\"sa\">L</span><span class=\"s\">&quot;Bruno Mars&quot;</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<p>Here's another way, using smart pointers:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Song</span><span class=\"o\">&gt;</span>  <span class=\"n\">pSong</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Song</span><span class=\"p\">(</span><span class=\"sa\">L</span><span class=\"s\">&quot;Nothing on You&quot;</span><span class=\"p\">,</span> <span class=\"sa\">L</span><span class=\"s\">&quot;Bruno Mars&quot;</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<p>In the first case it's obvious to me that we're creating a new variable called <code>pSong</code> of type <code>Song*</code> and assigning it the return value of the right hand side. But what's happening in the second case? I understand that <code>unique_ptr&lt;Song&gt;</code> is saying this is of type <code>unique_ptr</code> and it has a <code>Song</code> inside of it, but what is the syntax to the right of that that is assigning the variable name and the value?</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206710127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597246461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>I would call that an initializer. You might also see the initializer written with braces (i.e. <code>unique_ptr&lt;Song&gt; pSong{new Song(...)}</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206712696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597247527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "website",
            "content": "<p>Ah, I see. Now when I googled \"C++ initializer\" I ended up on this page which is very helpful <a href=\"https://en.cppreference.com/w/cpp/language/initialization\">https://en.cppreference.com/w/cpp/language/initialization</a></p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"276140\">@Jimmy Tang (he) (SP2'20)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206714298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597248195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>Yeah I just googled and was about to link to that page too. For further reading, you might want to read on the difference between copy- and direct-initialization; Often, depending on the class, the <code>=</code> makes little semantic difference, but you won't be able to write <code>unique_ptr&lt;Song&gt; pSong = new Song(...)</code></p>\n<p><a href=\"https://en.cppreference.com/w/cpp/language/copy_initialization\">https://en.cppreference.com/w/cpp/language/copy_initialization</a><br>\n<a href=\"https://en.cppreference.com/w/cpp/language/direct_initialization\">https://en.cppreference.com/w/cpp/language/direct_initialization</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206714548,
            "is_me_message": false,
            "last_edit_timestamp": 1597248398,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597248299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Yeahhh I was just reading about that.</p>\n<p>So, this whole time when I've been doing <code>std::string s = \"hello\"</code> I've been using an initializer without realizing it. Wild.</p>\n<p>This operator overloading stuff is wild! It can hide a lot of complexity</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206714846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597248424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Not really  connected to the question, but here is a personal reflection on C++: the farther you are from pointers the better you are! In your example the best option I feel is to do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Song</span> <span class=\"nf\">song</span> <span class=\"p\">(</span><span class=\"s\">&quot;Nothing on You&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Bruno Mars&quot;</span><span class=\"p\">);</span>\n<span class=\"c1\">// Use song as needed</span>\n<span class=\"c1\">// Pass a reference to song to any functions which need it</span>\n<span class=\"c1\">// Once execution leaves the current scope &#39;song&#39; will be destroyed - you don&#39;t need to bother about it</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206716099,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "talyian@gmail.com",
                        "full_name": "Jimmy Tang (he) (SP2'20)",
                        "id": 276140
                    },
                    "user_id": 276140
                }
            ],
            "recipient_id": 30232,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597249096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>small side note note  I think it's preferred to just do that as:</p>\n<div class=\"codehilite\"><pre><span></span><code> auto pDong = std::make_unique&lt;Song&gt;(...)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206730657,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                }
            ],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597256121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>...er. pSong</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206730667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597256125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>reasoning is that you can't accidentally make an accidentally non-unique <code>unique_ptr</code> if you never create a raw pointer in the first place. eg:</p>\n<div class=\"codehilite\"><pre><span></span><code>Song *s = new Song(...)\nstd::unique_ptr&lt;Song&gt; sa(s);\nstd::unique_ptr&lt;Song&gt; sb(s);\n</code></pre></div>\n\n\n<p>is going to go very sideways.</p>\n<p>Also, it rhymes with <code>std::make_shared&lt;T&gt;()</code>, which (usually, implementation dependent caveats aside) has some efficiency hack to pack the reference count with the allocated value, so you're only doing one malloc per shared_ptr instead of two.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206730923,
            "is_me_message": false,
            "last_edit_timestamp": 1597257267,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "What is the name for this syntax?",
            "submessages": [],
            "timestamp": 1597256253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"327412\">@Zain Sheraz (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"327383\">@Maya Farber Brodsky (she) (F1'20)</span> when should we meet up again? I'm sure we all have things to talk about :)</p>\n<p>Also who else should we tag in here? I recall other folks being at the first meeting but my mind is failing me</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207652718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "F1 Study Group",
            "submessages": [],
            "timestamp": 1598026199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I am writing a blog post about a problem I encountered using virtual classes and templates in C++ last week. My goal with this blog post is primarily to practice writing blog posts and to solidify my understanding of what was actually happening when I ran in to this problem. Given that I am a beginner and I am writing this for beginners I'm fine being not 100% correct, but I'd like to avoid being misleading or wrong. If not for anyone else, then at least for myself!</p>\n<p>To that end I'm curious for the folks who know more about C++ if you could give this blog post a once over and tell me if my understanding of this problem, and its solution, are correct. Thanks a bunch!</p>\n<p><a href=\"https://gist.github.com/jazzdan/a08a5a935aa4a17ec48d05a7f5a4ada0\">https://gist.github.com/jazzdan/a08a5a935aa4a17ec48d05a7f5a4ada0</a></p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208005061,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Blog post on templates",
            "submessages": [],
            "timestamp": 1598381064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your understanding is correct, and so is the solution.</p>\n<p>This is a common pitfall of C++, related to the way it borrows its compilation model from C.  I'm pretty sure I had to learn this the hard way too, I recall a coworker telling me a long time ago</p>\n<p>To be perfectly honest this is why some people recommend learning C before C++, though you will also find the opposite opinion to start with \"pure C++\" :-/</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208039883,
            "is_me_message": false,
            "last_edit_timestamp": 1598400710,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Blog post on templates",
            "submessages": [],
            "timestamp": 1598400639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Related term:</p>\n<ul>\n<li>\"translation unit\" -- synonym for \"compilation unit\", but may give more results</li>\n</ul>\n<p>Related concepts:</p>\n<ul>\n<li>forward declarations (a C-ish thing)</li>\n<li>opaque pointers (a C-ish thing)</li>\n<li>PIMPL (C++)</li>\n</ul>\n<p>All of those related to the compilation model of translation units.  In C++ you tend to have more code in headers than in C</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208039931,
            "is_me_message": false,
            "last_edit_timestamp": 1598400785,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Blog post on templates",
            "submessages": [],
            "timestamp": 1598400700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208042819,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "263a",
                    "emoji_name": "smiling_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "Blog post on templates",
            "submessages": [],
            "timestamp": 1598403578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Anyone have an error tracking tool they especially like for native code? (that could maybe also handle Rust in the future?). I've seen lots of chatter about Mobile/JS solutions for this in my network but not so much for native server code.</p>\n<p>Right now we just get these C++ stack traces dumped in the logs, symbols mangled, it's a pain. Feels like there must be an off the shelf solution for this, but maybe I'm wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Seems like some tools in this space might be Sentry, Rollbar, Airbrake, and Backtrace? Hard to know how first class the C++ experience is in them at first blush though.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212767314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602205024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "website",
            "content": "<p>Have you looked at Crashpad? I think Sentry supports this as well: <a href=\"https://sentry.io/for/minidumps/\">https://sentry.io/for/minidumps/</a> though there might be some work to \"symbolicate\" dumps into a human readable trace</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212836100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602255270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Yeah someone else recommended Sentry to me as well, and now I'm having a hard time understanding how crashpad, minidumps and sentry all play together. Poking around on the crashpad site it doesn't seem to advertise itself as something that other folks should use</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212843341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602258652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Sentry is just the SaaS that ingests events. For interpreted languages, communicating with the Sentry API is done by a simple runtime library (usually just installs an exception hook and POSTs via HTTP). For C++ you need a few parts - I _think_ the way crash/breakpad works is there's actually another process that monitors your application and collects dumps/puts them onto Sentry</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212856782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602266049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>At one of my last clients they were using it across different projects to monitor crashes on interactive graphics installations</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212856853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602266091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>backtrace seems quite nice</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212861541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602268774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(and I've known the cto for a while, the guy is crazy smart)</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212861549,
            "is_me_message": false,
            "last_edit_timestamp": 1602268849,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602268786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>yeahhh I was in a coworking space with Backtrace for a while :D I wish they had a onboarding page on their site for \"So you're new to native code and you want to use backtrace\" because their docs are also like step 1: configure crashpad, step 2: install our stuff, step 3: done and I'm like \"Wait, go back to step 1\"!</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212862113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602269136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>It seems Backtrace has a Visual Studio extension for configuring a C++ project with their tool, but my project runs on Linux and is just built with gcc =\\</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212862276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602269208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>hm.. depends on your environment.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212877602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602278785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I worked at Backtrace.  I don't know what they've done with the web side, which had been a problem, but the non-web stuff is superb and I'd strongly recommend giving it a shot.  They have a lot of really nice tooling that I'm not sure is fully exposed to the end user.  C++ was a major focus as I recall.  I'd love to be able to say I could help you get it setup, but I haven't touched it in about two years, so I don't think I'd be of any help.  I recall it being quite simple on Linux though.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212984226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1602454582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327414\">@Dan Miller (he) (F1'20)</span> How are you generating the stack traces? Gdb does a pretty good job of it. On most machines I have seen 'stack' is implemented as a script which calls gdb to dump a stack trace. If you want something inside of your code you can call gdb or pstack from your crash-handler, in a separate process. This is a handy solution which I have used at work. At work we use Google's breakpad library, but it doesn't work in 100% of cases.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214192429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1603375846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Good question ... the C++ processes that we run are actually headless Firefox. It looks like I should do some research in to how these processes are currently printing stack traces to the logs, then from there I can figure out which tools are best suited for reading it.</p>",
            "content_type": "text/html",
            "display_recipient": "C++",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214192990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 30232,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 24319,
            "subject": "error tracking",
            "submessages": [],
            "timestamp": 1603376085,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
