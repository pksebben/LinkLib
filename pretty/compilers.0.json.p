{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>George King</strong> ping</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6438478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370294115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nanopass compiler framework paper: <a href=\"http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf\" target=\"_blank\" title=\"http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf\">http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6737453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "nanopass",
            "submessages": [],
            "timestamp": 1370980944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://llvm.org/docs/tutorial/LangImpl2.html\" target=\"_blank\" title=\"http://llvm.org/docs/tutorial/LangImpl2.html\">http://llvm.org/docs/tutorial/LangImpl2.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6815938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1371156743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ ping @<strong>Aki Yamada</strong></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6815943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1371156751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@lindsey </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6816099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "nanopass",
            "submessages": [],
            "timestamp": 1371156973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woops! @<strong>Lindsey Kuper</strong> Interesting! I set up a compiler resources wiki page at <a href=\"http://wiki.hackerschool.com/index.php/Compiler_Resources\" target=\"_blank\" title=\"http://wiki.hackerschool.com/index.php/Compiler_Resources\">http://wiki.hackerschool.com/index.php/Compiler_Resources</a>. Feel free to add things</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6816127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "nanopass",
            "submessages": [],
            "timestamp": 1371157022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://news.ycombinator.com/item?id=835020\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=835020\">https://news.ycombinator.com/item?id=835020</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6821414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1371167779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Martin T\u00f6rnwall</strong> There's still hope! From a paper on SML/NJ's history: \"Early in the development of the compiler we used a hand-written lexical analyzer and a recursive- descent parser.\"</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7246918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "recursive-descent",
            "submessages": [],
            "timestamp": 1372202607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Aki Yamada</strong> This is kind of late but I feel like that comment is an incredible find. How did you come across it?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Nabil Hassein</strong> I can't remember, I don't think I was reading HN in 2009, so I must have stumbled on it when searching for Lisp compiler stuff</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just by google searching?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>probably, although nowadays HN's Octopart-based search is pretty good</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>although HN has gone to the dogs since the NSA stories broke, there's treasure in them thar hills... I've found more than a few gems with \"site:news.ycombinator.com\" searches </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I saved one I found interesting the other day. Think I'm going to look at it again now actually</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372205991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Found it. I'm going to post it in another stream because it is not about compilers or lisp-hacking.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7248475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "lisp-hacking",
            "submessages": [],
            "timestamp": 1372206083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have any familiarity with partial evaluation (similarly named to, but totally different from, partial application) or the related Futamura projections? <a href=\"https://en.wikipedia.org/wiki/Partial_evaluation\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Partial_evaluation\">https://en.wikipedia.org/wiki/Partial_evaluation</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7995407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373900089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>The wikipedia article is a good introduction, but this is what I read about, some time ago, that completely blew my mind: <a href=\"http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html\" target=\"_blank\" title=\"http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html\">http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html</a></p>\n<p>I want to write something like this!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7995434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373900147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nabil.hassein@gmail.com\">@Nabil Hassein</span> I wrote about it once, with some concrete code: <a href=\"http://wry.me/misc/peval.html\" target=\"_blank\" title=\"http://wry.me/misc/peval.html\">http://wry.me/misc/peval.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8005935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373916527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"darius@wry.me\">@Darius</span>  Thanks for the pointer! I'll give it a read and probably bother you with questions later.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8006479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373917281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6fcf78ff016b9e89d65cf5108925915a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nabil.hassein@gmail.com\">@Nabil Hassein</span> Did you see <a href=\"http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/\" target=\"_blank\" title=\"http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/\">http://blog.ezyang.com/2010/03/more-fun-with-futamura-projections/</a> ? it's a followup to sigfpe's post with code in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8042074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nada.amin@gmail.com",
            "sender_full_name": "Nada Amin",
            "sender_id": 2178,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373996946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> No, I didn't! Thanks very much for the pointer, this looks excellent</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8042131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373997041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Even on a skim I can tell it's an incredible read. I need to take some time to go through it slowly and try to implement some of these ideas, hopefully sooner rather than later</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8042428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1373997579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nada.amin@gmail.com\">@Nada Amin</span> and anyone else interested: I have a working brainfuck interpreter I want to turn into a compiler. Do you think you could pair with me to help me learn to do it, perhaps tomorrow?</p>\n<p>My background: this is the second interpreter I've written (the first was for Scheme;  I wrote both in Haskell) so I feel like I have some grasp of how interpreters work, but I don't know very much about compilers.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8046294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "brainfuck",
            "submessages": [],
            "timestamp": 1374004106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6fcf78ff016b9e89d65cf5108925915a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure! I'd be happy to pair with you :-) I am in 175 if you'd like to come over and show me your interpreter. Or we can do it tomorrow as well.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8046341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nada.amin@gmail.com",
            "sender_full_name": "Nada Amin",
            "sender_id": 2178,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "brainfuck",
            "submessages": [],
            "timestamp": 1374004207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://memegenerator.net/instance/33992180\" target=\"_blank\" title=\"http://memegenerator.net/instance/33992180\">http://memegenerator.net/instance/33992180</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9642001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "do you even lift?",
            "submessages": [],
            "timestamp": 1377787102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>An interesting inside look at Crankshaft, the Google V8 optimizing compiler. <a href=\"https://docs.google.com/document/d/1hOaE7vbwdLLXWj3C8hTnnkpE0qSa2P--dtDvwXXEeD0/pub\" target=\"_blank\" title=\"https://docs.google.com/document/d/1hOaE7vbwdLLXWj3C8hTnnkpE0qSa2P--dtDvwXXEeD0/pub\">https://docs.google.com/document/d/1hOaE7vbwdLLXWj3C8hTnnkpE0qSa2P--dtDvwXXEeD0/pub</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9837082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "crankshaft",
            "submessages": [],
            "timestamp": 1378280390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>What are your favorite examples of \"complete\" toy compilers?</p>\n<p>I put \"complete\" in quotes because what \"complete\" means is a bit of a judgment call.  It might target a relatively-high-level VM.  The source language might be rather low-level, itself.  There might be no runtime system to speak of.  There might be no debug info emitted.  And so on.  I just want to see examples of small self-contained toy compilers that showcase some aspect of compiler design.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11561953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382034868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> back in the day ClojureScript was pretty cool, 500 lines of code for analysis/compilation :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11561975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382034934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That's the sort of thing I'm looking for -- do you have a link?  maybe to an old git revision?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11562031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382035016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> <a href=\"http://github.com/clojure/clojurescript/blob/29704da016b89529631979b8598f8572b4b4b9aa/src/clj/cljs/compiler.clj\" target=\"_blank\" title=\"http://github.com/clojure/clojurescript/blob/29704da016b89529631979b8598f8572b4b4b9aa/src/clj/cljs/compiler.clj\">http://github.com/clojure/clojurescript/blob/29704da016b89529631979b8598f8572b4b4b9aa/src/clj/cljs/compiler.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11562114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382035190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Sweet, thanks!  I guess I need to learn something about ClojureScript!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11562292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382035447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Wow, this is awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11562339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382035537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> it's a pretty simple classic lisp approach. One thing I like - no custom types for the nodes, just generic immutable data. It would be nice for the compiler to be multipass - but given how much we rely on Google Closure for inlining and dead code elimination, we haven't bothered.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11562409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382035661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Cool, that should help me learn Clojure better. :)<br>\n<a href=\"https://github.com/darius/ichbins\" target=\"_blank\" title=\"https://github.com/darius/ichbins\">https://github.com/darius/ichbins</a> is a complete toy compiler in the sense that it compiles itself.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11566634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382042286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>There are several excellent examples of small compilers in Norvig's PAIP. The Prolog-to-Common-Lisp one was my least favorite at first, until I wrote a 'better' one that came out considerably longer.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11566837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382042542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>(Those are complete in the sense that they see actual use by unrelated code further on in the book -- they're not *just* explanations. Except the Scheme compiler, which comes last.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11567168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382043027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"darius@wry.me\">@Darius Bacon (F'12)</span> Thanks!  So ichbins.c is the generated file, and you just checked that in for illustrative purposes?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11572882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382051936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, boo at github's syntax highlighting fail in <a href=\"https://github.com/darius/ichbins/blob/master/ichbins.scm\" target=\"_blank\" title=\"https://github.com/darius/ichbins/blob/master/ichbins.scm\">https://github.com/darius/ichbins/blob/master/ichbins.scm</a> -- the \\\" is confusing it.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11572892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382051998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, checking that in was kind of dumb -- you can get annoying diffs with it.<br>\nIt should've used standard Scheme syntax #\\\" too. Still I quite enjoyed writing the silly thing.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11573618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Tiny compilers",
            "submessages": [],
            "timestamp": 1382053385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://nptel.iitm.ac.in/courses/106108052/module2/Run-time-St-All-1.pdf\" target=\"_blank\" title=\"http://nptel.iitm.ac.in/courses/106108052/module2/Run-time-St-All-1.pdf\">http://nptel.iitm.ac.in/courses/106108052/module2/Run-time-St-All-1.pdf</a> seems to be a handy writeup of some of the key ideas. <span class=\"user-mention\" data-user-email=\"gideond@gmail.com\">@Gideon Dresdner (F'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13706195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "runtime",
            "submessages": [],
            "timestamp": 1386261886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, <a href=\"http://llvm.org/docs/GarbageCollection.html\" target=\"_blank\" title=\"http://llvm.org/docs/GarbageCollection.html\">http://llvm.org/docs/GarbageCollection.html</a> and chapter 7 of the dragon book (2nd ed)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13706988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "runtime",
            "submessages": [],
            "timestamp": 1386262958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://docs.racket-lang.org/unstable/Automata__Compiling_State_Machines.html\" target=\"_blank\" title=\"http://docs.racket-lang.org/unstable/Automata__Compiling_State_Machines.html\">http://docs.racket-lang.org/unstable/Automata__Compiling_State_Machines.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13707865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "runtime",
            "submessages": [],
            "timestamp": 1386264235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oops, wrong thread :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 13707908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "runtime",
            "submessages": [],
            "timestamp": 1386264255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>marisa send me the lecture notes for a class she took on PL: <a href=\"http://www.cs.virginia.edu/~weimer/2014-4610/lectures.html\" target=\"_blank\" title=\"http://www.cs.virginia.edu/~weimer/2014-4610/lectures.html\">http://www.cs.virginia.edu/~weimer/2014-4610/lectures.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23359957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>looking over them now</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23359961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\">  it's got COOL too!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23360173,
            "is_me_message": false,
            "last_edit_timestamp": 1402951605,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>haha the lecture slides are insane: <a href=\"http://www.cs.virginia.edu/~weimer/2014-4610/lectures/weimer-pl-earley-01.pdf\" target=\"_blank\" title=\"http://www.cs.virginia.edu/~weimer/2014-4610/lectures/weimer-pl-earley-01.pdf\">http://www.cs.virginia.edu/~weimer/2014-4610/lectures/weimer-pl-earley-01.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23360297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p>so many comics <img alt=\":grin:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/grin.png\" title=\":grin:\"></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23360358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>\"You enjoy parsing. Parsing is easy and fun. \" <img alt=\":sweat_smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"> heh</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23360470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1402951726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>Super helpful tool for analyzing grammars: <a href=\"http://mdaines.github.io/grammophone/\" target=\"_blank\" title=\"http://mdaines.github.io/grammophone/\">http://mdaines.github.io/grammophone/#</a><br>\nI just used it to clarify that the go grammar is left recursive. Which means I have to deal with that in my parser, probably just as a special case though XD</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23371780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402968692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p>you could try rewriting it to not be left-recursive</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23371971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402969042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I have this: Expression = UnaryExpr | Expression binary_op UnaryExpr .</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23372036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402969147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>and I think is equivalent to: Expression = UnaryExpr {binary_op UnaryExpr}</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23372043,
            "is_me_message": false,
            "last_edit_timestamp": 1402969189,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402969166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>which I've already handled before</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23372046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402969171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>where squiggly braces means 'repeat zero or more times'</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23372124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "grammophone",
            "submessages": [],
            "timestamp": 1402969285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://aosabook.org/en/llvm.html\" target=\"_blank\" title=\"http://aosabook.org/en/llvm.html\">http://aosabook.org/en/llvm.html</a> hit the jackpot!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23880228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "architecture of llvm",
            "submessages": [],
            "timestamp": 1403831995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>super interesting</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23880230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "architecture of llvm",
            "submessages": [],
            "timestamp": 1403832002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>another resource: <a href=\"https://gcc.gnu.org/onlinedocs/gccint\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/gccint\">https://gcc.gnu.org/onlinedocs/gccint</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23880615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "gcc internals",
            "submessages": [],
            "timestamp": 1403832793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>for those of you following along at home: <a href=\"http://web.stanford.edu/class/archive/cs/cs143/cs143.1128/\" target=\"_blank\" title=\"http://web.stanford.edu/class/archive/cs/cs143/cs143.1128/\">http://web.stanford.edu/class/archive/cs/cs143/cs143.1128/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24447303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "stanford compilers",
            "submessages": [],
            "timestamp": 1404850006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>lecture slides are flipping fantastic</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24447315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "stanford compilers",
            "submessages": [],
            "timestamp": 1404850019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":grin:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/grin.png\" title=\":grin:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24448868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "stanford compilers",
            "submessages": [],
            "timestamp": 1404850796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/rui314/8cc\" target=\"_blank\" title=\"https://github.com/rui314/8cc\">https://github.com/rui314/8cc</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24623665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "8cc - super tiny c compiler",
            "submessages": [],
            "timestamp": 1405096529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p>lel</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24628464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "8cc - super tiny c compiler",
            "submessages": [],
            "timestamp": 1405102801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is cool</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24628516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "8cc - super tiny c compiler",
            "submessages": [],
            "timestamp": 1405102831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "Android",
            "content": "<p>a super awesome lady I know wrote a blog post about her compilers research PhD project <a href=\"http://pointersgonewild.wordpress.com/2014/07/17/my-paper-was-rejected-again\" target=\"_blank\" title=\"http://pointersgonewild.wordpress.com/2014/07/17/my-paper-was-rejected-again\">http://pointersgonewild.wordpress.com/2014/07/17/my-paper-was-rejected-again</a>. this one is about a paper bring rejected, and it's a really interesting insight into compilers research (and super brave)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24930312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1405641481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "Android",
            "content": "<p>her blog is awesome in general</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24930357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1405641499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"julia@jvns.ca\">@Julia Evans (F'13)</span> D:</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25171426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1406095235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>her higgs compiler seems super interesting</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25171430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1406095245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think Maxime's work is super cool, even though I don't understand a lot of it.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25171557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1406095494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>And yeah, it's really gutsy to publish your reviews.  \"Notably, the paper was shot down by a famous industry researcher who has done extensive work on trace compilation, a competing approach.\" -- I wonder how she knows who the reviewer is?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25171566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1406095534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>(For another example of an academic doing this, Edward Yang also posts reviews and review rebuttals for all his papers on <a href=\"http://ezyang.com/\" target=\"_blank\" title=\"http://ezyang.com/\">his website</a>.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25171610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1406095608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I realize this stream has been dead for weeks, but I too must recommend Maxime's blog. Her research is incredibly interesting and her posts are usually surprisingly easy to understand, compared to most other authors on the same topic. I also recommend <a href=\"http://wingolog.org\" target=\"_blank\" title=\"http://wingolog.org\">Andy Wingo</a>'s series on JavaScript engine internals.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26146056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407855801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, Maxime should be invited for an HS residency!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26146294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407856071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Reading this makes me so happy I don't care about publishing anymore. That was a really soul crushing part of grad school.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26196480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407936476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really want to go to grad school at some point but I don't know if I can do publish or perish. </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26200675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407942777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, Maxime seems like a really good person to have come for a residency (at least from what she posts on twitter and her blog). </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26200706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407942816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "website",
            "content": "<p>maxime is wonderful! She also does fun electronics projects like making shoes that light up with the music's beat for going dancing.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26200929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407943056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"julia@jvns.ca\">@Julia Evans (F'13)</span> Is that open source? I know someone who does a lighting system and wants it to have better beat detection.. :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26200972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407943086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> I don't know! She's <a href=\"https://twitter.com/love2code\" target=\"_blank\" title=\"https://twitter.com/love2code\">https://twitter.com/love2code</a> on twitter</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26201001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407943114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span>, if it helps at all, \"publish or perish\" isn't as much of a thing for grad students as it is for pre-tenure assistant professors.  I've known a lot of grad students who have done good work but haven't been able to get it accepted at prestigious venues.  Eventually, you just have to send your stuff to a workshop and move on.  (There's always going to be some workshop that will take it.)  If you're planning on an academic career afterward you have to be thinking about the prestige of the venue, but if you're just in grad school because you want to learn, then it's okay to not have your stuff appear in top venues.  It's ultimately your advisor and your committee, and not where your work is or is not published, that will determine whether and when you graduate. (Disclaimer: that's what my experience has been; it might not work that way everywhere. YMMV.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26238284,
            "is_me_message": false,
            "last_edit_timestamp": 1408005645,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407995745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>You should still shoot for the top venues if you think you've done something substantial, though, because there's no reason not to.  The fact that anyone can send something to a top venue and get a panel of experts to look at it and give thoughtful feedback, for free, is sort of amazing!  (Of course, sometimes the quality of the feedback is not that great, but other times it is.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26238427,
            "is_me_message": false,
            "last_edit_timestamp": 1407996046,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1407996030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> Huh. Thank you for the advice! </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26251456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compilers research",
            "submessages": [],
            "timestamp": 1408024753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just stumbled upon something that made me so happy I just had to share it. Over the past few years I've read (parts of) most of the popular textbooks on compiler construction. I've consistently found that the topic of instruction selection (the problem of mapping intermediate language constructs onto sequences of machine instructions) has gotten far too little attention. Here's a comprehensive review of modern instruction selection techniques, available for free as PDF! <a href=\"http://arxiv.org/ftp/arxiv/papers/1306/1306.4898.pdf\" target=\"_blank\" title=\"http://arxiv.org/ftp/arxiv/papers/1306/1306.4898.pdf\">http://arxiv.org/ftp/arxiv/papers/1306/1306.4898.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29933320,
            "is_me_message": false,
            "last_edit_timestamp": 1414840654,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "instruction selection",
            "submessages": [],
            "timestamp": 1414702335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span> This is fantastic, thank you.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29934779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "instruction selection",
            "submessages": [],
            "timestamp": 1414703923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, this is amazing.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29935081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "instruction selection",
            "submessages": [],
            "timestamp": 1414704229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d9ed5f596714f4f3946f0896c9247b7686db1f6?x=x&version=4",
            "client": "website",
            "content": "<p>This is great!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30014846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "recurse@sweeting.me",
            "sender_full_name": "Nick Sweeting (he) (S1'14)",
            "sender_id": 5883,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "instruction selection",
            "submessages": [],
            "timestamp": 1414823613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8880886d758e516691b420c771d1f6421d097ba1?x=x&version=1",
            "client": "website",
            "content": "<p>videos and lecture slides for the course are here <a href=\"http://www.wolczko.com/CS294/\" target=\"_blank\" title=\"http://www.wolczko.com/CS294/\">http://www.wolczko.com/CS294/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54891708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "oguzkayral@gmail.com",
            "sender_full_name": "O\u011fuz Kayral (S1'16)",
            "sender_id": 9089,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "berkeley VMs and managed runtimes",
            "submessages": [],
            "timestamp": 1458843542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>This is a continuation of <a href=\"https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F\" target=\"_blank\" title=\"https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F\">https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61581080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468004848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe this thread title is not the best choice considering we're now in the compilers stream, but it's the original title and maybe we'll then branch to new different threads as people start finding more specific interests in interpreters and compilers.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61581113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468004886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>One thing we were discussing is how difficult it is for beginners like me to become familiar with specific instruction sets they want to target with their compilers, such as x86_64.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468006992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>While in theory the official documentation should contain everything you need to know, it's difficult to follow if you just want to get started with basic examples and have no experience programming in assembly.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582441,
            "is_me_message": false,
            "last_edit_timestamp": 1468007140,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468006998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Trying to make an analogy, I remember when WebGL first came out, all we had was this official specification <a href=\"https://www.khronos.org/registry/webgl/specs/1.0/\" target=\"_blank\" title=\"https://www.khronos.org/registry/webgl/specs/1.0/\">https://www.khronos.org/registry/webgl/specs/1.0/</a> which in theory should have been enough to learn WebGL. In practice, nobody really learns WebGL by reading this thing. You usually wanna find some good tutorial, blog post or book. Is there anything similar for people trying to get started with assembly and compilers?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582445,
            "is_me_message": false,
            "last_edit_timestamp": 1468007528,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468007008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Hey there! a couple of links I have open:</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468007741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p><a href=\"http://c9x.me/compile/bib/\" target=\"_blank\" title=\"http://c9x.me/compile/bib/\">http://c9x.me/compile/bib/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468007743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>a bunch of fun excercises <a href=\"http://belkadan.com/blog/2016/05/So-You-Want-To-Be-A-Compiler-Wizard/\" target=\"_blank\" title=\"http://belkadan.com/blog/2016/05/So-You-Want-To-Be-A-Compiler-Wizard/\">http://belkadan.com/blog/2016/05/So-You-Want-To-Be-A-Compiler-Wizard/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61582914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468007763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1fdd84a57c15f7ecfdded3d0c32019ad32f8af5d?x=x&version=5",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>parsing css with parsec (haskell) <a href=\"http://blog.jakubarnold.cz/2014/08/10/parsing-css-with-parsec.html\" target=\"_blank\" title=\"http://blog.jakubarnold.cz/2014/08/10/parsing-css-with-parsec.html\">http://blog.jakubarnold.cz/2014/08/10/parsing-css-with-parsec.html</a><br>\nfinding bugs in c compilers with csmith <a href=\"https://embed.cs.utah.edu/csmith/\" target=\"_blank\" title=\"https://embed.cs.utah.edu/csmith/\">https://embed.cs.utah.edu/csmith/</a><br>\nparsing expressions with recursive descent <a href=\"http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm\" target=\"_blank\" title=\"http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm\">http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "arpith@feedreader.co",
            "sender_full_name": "Arpith Siromoney (he) (m6'20)",
            "sender_id": 9503,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "people working on compilers?",
            "submessages": [],
            "timestamp": 1468007940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d41c2072197ef3417feaa21d950dcb4c?d=identicon&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Can someone give me an introduction to LLVM, I'm back in the space next week, and I'd love to learn a bit about this ecosystem</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61583930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "roneesh@gmail.com",
            "sender_full_name": "Roneesh Vashisht (S1'16)",
            "sender_id": 9341,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "intro to LLVM",
            "submessages": [],
            "timestamp": 1468009220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>I loved this class! so much fun, Weimer is a blast.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61587553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "uva programming languages class",
            "submessages": [],
            "timestamp": 1468016185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>Kind of branching from <a href=\"https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F\" target=\"_blank\" title=\"https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F\">https://zulip.com/#narrow/stream/455.20Broadway/topic/people.20working.20on.20compilers.3F</a><br>\n<span class=\"user-mention\" data-user-email=\"darius@wry.me\">@Darius Bacon (F2'15)</span>, you mentioned you worked on something that generated asm.js code. I'd love to hear more about this project. If others have worked on something similar, please also share your experiences here :) . Have you looked into WebAssembly? I'm not totally sure what's the difference, but I think WebAssembly is more recent and (maybe) supposed to replace asm.js</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61627152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "asm.js and WebAssembly",
            "submessages": [],
            "timestamp": 1468118588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Sure -- it was <a href=\"http://wry.me/hacking/Turing-Drawings/\" target=\"_blank\" title=\"http://wry.me/hacking/Turing-Drawings/\">http://wry.me/hacking/Turing-Drawings/</a><br>\nIt takes Turing machines that paint graphics, so it's compiling from practically the simplest possible language. I haven't dived into WebAssembly so far, though I mostly like the sound of it.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61627337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "asm.js and WebAssembly",
            "submessages": [],
            "timestamp": 1468119110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>When I wrote about it there asm.js was less than a week old (counting from release), so it's pretty likely to be better now, like with less fixed overhead per call.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61627566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "asm.js and WebAssembly",
            "submessages": [],
            "timestamp": 1468119711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>btw, taking an example like <a href=\"http://www.wry.me/hacking/Turing-Drawings/#4,3,0,1,2,3,1,0,1,1,0,2,2,1,3,2,2,0,1,3,0,2,0,1,2,2,2,2,0,0,1,3,3,1,3,2,2,0\" target=\"_blank\" title=\"http://www.wry.me/hacking/Turing-Drawings/#4,3,0,1,2,3,1,0,1,1,0,2,2,1,3,2,2,0,1,3,0,2,0,1,2,2,2,2,0,0,1,3,3,1,3,2,2,0\">http://www.wry.me/hacking/Turing-Drawings/#4,3,0,1,2,3,1,0,1,1,0,2,2,1,3,2,2,0,1,3,0,2,0,1,2,2,2,2,0,0,1,3,3,1,3,2,2,0</a> and repeatedly hitting Slower or Faster is a great way to get a gut feel for how fast computers are -- how things are happening over many orders of magnitude.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61627617,
            "is_me_message": false,
            "last_edit_timestamp": 1468119858,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "asm.js and WebAssembly",
            "submessages": [],
            "timestamp": 1468119842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>(Two clicks for a factor of 10 in speed, about 3x per click.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61627695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "asm.js and WebAssembly",
            "submessages": [],
            "timestamp": 1468120020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f064a05448647a821438855810164407e4609eb9?x=x&version=2",
            "client": "website",
            "content": "<p>a wonderful paper / video for your friday afternoon <a href=\"https://www.disneyresearch.com/publication/machine-knitting-compiler/\" target=\"_blank\" title=\"https://www.disneyresearch.com/publication/machine-knitting-compiler/\">https://www.disneyresearch.com/publication/machine-knitting-compiler/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62133702,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "joelburget@gmail.com",
            "sender_full_name": "Joel Burget (SP1'15)",
            "sender_id": 7624,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "A Compiler for 3D Machine Knitting",
            "submessages": [],
            "timestamp": 1469212799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Coauthored by our own <span class=\"user-mention\" data-user-email=\"l.e.albaugh@gmail.com\">@Lea Albaugh (F'13)</span> (though she is not on this stream, and as you may already know). :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62134287,
            "is_me_message": false,
            "last_edit_timestamp": 1469213907,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "A Compiler for 3D Machine Knitting",
            "submessages": [],
            "timestamp": 1469213896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's also a <a href=\"https://www.youtube.com/watch?v=ihqcgrR0azw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ihqcgrR0azw\">video</a> of Lea's somewhat-related talk from !!Con 2015!</p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=ihqcgrR0azw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ihqcgrR0azw\"><img src=\"https://i.ytimg.com/vi/ihqcgrR0azw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62136016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "A Compiler for 3D Machine Knitting",
            "submessages": [],
            "timestamp": 1469216953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I just came across this article <a href=\"http://notes.willcrichton.net/rust-the-new-llvm/\" target=\"_blank\" title=\"http://notes.willcrichton.net/rust-the-new-llvm/\">http://notes.willcrichton.net/rust-the-new-llvm/</a> </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62172891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1469310957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>is anyone interested in working on coffeescript?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1471545430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://jashkenas.github.io/docco/\" target=\"_blank\" title=\"https://jashkenas.github.io/docco/\">https://jashkenas.github.io/docco/</a> is pretty cool and could be made a ton more useful with a compiler / static analysis built in</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1471545442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>here's an example of what it generates: <a href=\"http://coffeescript.org/documentation/docs/helpers.html\" target=\"_blank\" title=\"http://coffeescript.org/documentation/docs/helpers.html\">http://coffeescript.org/documentation/docs/helpers.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1471545492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>also, this bug is worth fixing: <a href=\"https://github.com/jashkenas/coffeescript/issues/4286\" target=\"_blank\" title=\"https://github.com/jashkenas/coffeescript/issues/4286\">https://github.com/jashkenas/coffeescript/issues/4286</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1471545556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>whoops, totally wrong thread, mybad</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "rust: the new llvm",
            "submessages": [],
            "timestamp": 1471545563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>making these docs smarter would be a great project: <a href=\"http://coffeescript.org/documentation/docs/helpers.html\" target=\"_blank\" title=\"http://coffeescript.org/documentation/docs/helpers.html\">http://coffeescript.org/documentation/docs/helpers.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "coffeescript",
            "submessages": [],
            "timestamp": 1471545611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>also, this bug is worth fixing: <a href=\"https://github.com/jashkenas/coffeescript/issues/4286\" target=\"_blank\" title=\"https://github.com/jashkenas/coffeescript/issues/4286\">https://github.com/jashkenas/coffeescript/issues/4286</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100112476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "coffeescript",
            "submessages": [],
            "timestamp": 1471545617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey!<br>\nOne of the projects I want to work on while at RC is a Lorem Ipsum for code.</p>\n<p>As in.</p>\n<p><code>_ipsum --lines 10</code></p>\n<div class=\"codehilite\"><pre>function bar(hello) {}\n\nfunction foo() {\n   var b = 10;\n   var a = b;\n   var c = a/b;\n}\n// ...\n</pre></div>\n\n\n<p>Any resources I should read to move towards this. I have basic compiler knowledge, but not sure where to start. I feel like I would need to represent the javascript grammar some way...</p>\n<p>\u00af\\_(\u30c4)_/\u00af</p>\n<p>Any thoughts are appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101659555,
            "is_me_message": false,
            "last_edit_timestamp": 1475162200,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475162100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>clarifying question that will impact your approach pretty dramatically: should it be stuff that looks like code, or actual code?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like code is fine to start. <br>\nBut eventually I would like it to generate code that runs.<br>\nThen code that includes custom identifiers and method calls.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>they're radically different approaches. you build a markov chain for stuff that looks like code, but it will probably almost never compile.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>but generating code itself isn't so hard if you start simple! know the starting point is basically the hardest part. i'm not sure I can do justice to explaining it over zulip, but I'll think about it, and if you want I can head in sometime in alum friendly hours to explain in person.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>hopefully I come up with a good way of explaining it soon enough. <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>That would be awesome. Ya, don't need to go from 0 -&gt; 100. Base problem could just be bunch of variable declarations :). </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>well, it's more instructive to have two syntactic constructs to start, otherwise the relevant structure looks unnecessary.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Variable assignments + Function declarations which can contain variable assignments :P</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>let's say you want to generate the source code for an if. what might code to do that look like? well, we have a fixed part and a variable part. the overall form of a function is definitely fixed, so, we can say something roughly like \"to generate the source for a function, string together the text \"function \" followed by a function name followed by \"(\" followed by an argument list\"... </p>\n<p>this is very high level, but basically the way to generate all this is recursively.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475163950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, a function generator is some string concatenation + knowledge of what other code generators you can call where + some source of randomness (for how many arguments to add, what to name them, or when there are multiple kinds of expressions you could insert, picking which kind to use).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>if that isn't a helpful description, then I'm going to stop for now and we can pick some time to whiteboard this</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101660776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>No that makes sense!<br>\n I found a grammar I can start working from and it's starting to be more clear.</p>\n<p><a href=\"https://gist.github.com/rbuckton/0d8c1f1c607f52f5ae37\" target=\"_blank\" title=\"https://gist.github.com/rbuckton/0d8c1f1c607f52f5ae37\">https://gist.github.com/rbuckton/0d8c1f1c607f52f5ae37</a></p>\n<p>Thinking I would start with some highlevel identifier. For each high level identifier there are a certain number of valid branches. So would randomly just choose paths to take, translating tokens to strings as needed.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661108,
            "is_me_message": false,
            "last_edit_timestamp": 1475164614,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>identifier</code> has a more specific meaning in this context, and using it this way is likely to confuse people. I think you might mean what people more often call a rule? not sure?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>so like, the rule for one kind of expression/statement includes rules for other kinds, and sometimes there's arbitrary choice allowed between two different kinds of rules, in which case you can insert randomness.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>^== me attempting to rephrase what I think you mean.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ya, I should watch my language :P. But exactly :).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475164913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>This is repeating information <span class=\"user-mention\" data-user-email=\"tehgeekmeister@gmail.com\">@Ezekiel Benjamin Smithburg (F2'15)</span> has been saying, but phrased another way:</p>\n<p>An approach I've seen to this problem is to generate a random AST, and then generate the code from that. If you do this in a language that already has the second step (for example, in Python you could use <a href=\"https://github.com/berkerpeksag/astor\" target=\"_blank\" title=\"https://github.com/berkerpeksag/astor\">astor</a> for this) then generating arbitrary valid ASTs is a smaller problem, and one that's easy to break up into subproblems: generating just random expressions, or just random assignments to start with.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475165633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, I agree on the random AST approach.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101661760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475165769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Astor looks interesting. That's neat that it generates source from the AST. I'll have to look around for a Javascript equivalent...maybe babel has components for this type of stuff. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101662484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475167152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suspect ast-&gt;source already exists. Even if it doesn't, it's not really the hardest part of the problem (unless you want to like, indent it nicely, without passing it through something else that does that.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101662601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1475167369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found this yesterday: <a href=\"https://takipi.github.io/java-bullshifier/\" target=\"_blank\" title=\"https://takipi.github.io/java-bullshifier/\">https://takipi.github.io/java-bullshifier/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103813291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1479957283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f050b80594d5d59676e0620842eb0316?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wicked <img alt=\":heart_eyes:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/heart_eyes.png\" title=\":heart_eyes:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103821493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "haroldtreen@gmail.com",
            "sender_full_name": "Harold Willis Treen (F2'16)",
            "sender_id": 100193,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1479978606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>speaking of random program generation: <a href=\"https://embed.cs.utah.edu/csmith/\" target=\"_blank\" title=\"https://embed.cs.utah.edu/csmith/\">https://embed.cs.utah.edu/csmith/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103834474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Generating source code from air",
            "submessages": [],
            "timestamp": 1480010456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been following this class: <a href=\"https://courses.engr.illinois.edu/cs421/page/lectures/\" target=\"_blank\" title=\"https://courses.engr.illinois.edu/cs421/page/lectures/\">https://courses.engr.illinois.edu/cs421/page/lectures/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110152520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Programming languages class , Illinois Urbana-Champaign",
            "submessages": [],
            "timestamp": 1493347307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>this looks interesting! have u been doing the MP assignments?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110153097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Programming languages class , Illinois Urbana-Champaign",
            "submessages": [],
            "timestamp": 1493348592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc979dfc088d7ca86c02fbfdb5f0fd93?d=identicon&version=1",
            "client": "website",
            "content": "<p>not yet, I've been doing the class handouts</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110153240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "miguelvilag@gmail.com",
            "sender_full_name": "Miguel Vil\u00e1 (F1'16)",
            "sender_id": 100037,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Programming languages class , Illinois Urbana-Champaign",
            "submessages": [],
            "timestamp": 1493348982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/606aef18d583ace9c7c160b861e329344cc98f88?x=x&version=2",
            "client": "website",
            "content": "<p>Trying to dive in, anyone has experience and/or interest in it? <a href=\"https://ohmlang.github.io/\" target=\"_blank\" title=\"https://ohmlang.github.io/\">https://ohmlang.github.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111202375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "parthiv@minerva.kgi.edu",
            "sender_full_name": "Parthiv Shah (S1'17)",
            "sender_id": 101078,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ohm, library/language for building parsers/compilers/etc.",
            "submessages": [],
            "timestamp": 1495552305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've played with it a little, mostly got stuck reading up on packrat parsers.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111300823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ohm, library/language for building parsers/compilers/etc.",
            "submessages": [],
            "timestamp": 1495748154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a cool system for sure!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111300824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ohm, library/language for building parsers/compilers/etc.",
            "submessages": [],
            "timestamp": 1495748157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"parthiv@minerva.kgi.edu\" data-user-id=\"101078\">@Parthiv\u200b \u200b (S1'17)</span> I went through the docs sometime ago and it looks neat. I don't like working with js, so I moved on.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111327984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ohm, library/language for building parsers/compilers/etc.",
            "submessages": [],
            "timestamp": 1495808965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5518741e12b2070f0063a21cd60c939?d=identicon&version=4",
            "client": "website",
            "content": "<p>I just discovered compiler explorer <a href=\"https://godbolt.org\" target=\"_blank\" title=\"https://godbolt.org\">https://godbolt.org</a> ... so useful</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113430004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "carl.douglas@gmail.com",
            "sender_full_name": "Carl Douglas (S1'17)",
            "sender_id": 101092,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compiler explorer",
            "submessages": [],
            "timestamp": 1500251454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>I find it a bit limiting. It can't really do much more than coloring asm and source in the same way to match them quick and give you docs about instructions while you hover over it. </p>\n<p>1. Compiling source with -g and passing -Sl to object dump gives source info in the assembly. <br>\n2. I got the intel manual and <a href=\"https://github.com/zneak/x86doc\" target=\"_blank\" title=\"https://github.com/zneak/x86doc\">https://github.com/zneak/x86doc</a> for something that feels like man pages for asm mnemonics.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113433923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compiler explorer",
            "submessages": [],
            "timestamp": 1500261110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i find the ability to quickly select different version of the compilers pretty handy, tbh</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113434203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "compiler explorer",
            "submessages": [],
            "timestamp": 1500261725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was looking at working on instruction scheduling for a vector language I was working on, and I noticed this in the OCaml compiler: (<code>asmcomp/amd64/scheduling.ml</code>)</p>\n<div class=\"codehilite\"><pre><span></span>(* Scheduling is turned off because the processor schedules dynamically\n   much better than what we could do. *)\n</pre></div>\n\n\n<p>This seems unlikely to me.  Anyone know any good examples of compilers with _great_ instruction scheduling on x86-64 in particular?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118173990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Instruction scheduling",
            "submessages": [],
            "timestamp": 1510082364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't but I feel like I've heard this before, I think in an architecture class and from someone working on very lean embedded devices- he said that lots of decisions that are usually made \"in hardware\" can be pushed out to the compiler if you want to squeeze all the power efficiency you can out of your chip but it makes writing the compiler really difficult</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118209898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Instruction scheduling",
            "submessages": [],
            "timestamp": 1510153623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about\" target=\"_blank\" title=\"https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about\">This</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119055133,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jayantjain1992@gmail.com",
                        "full_name": "Jayant Jain (S2'17)",
                        "id": 101326
                    },
                    "user_id": 101326
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1511877078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe we could aim to start it in earnest in January? I think that's the vibe rn.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119055136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1511877111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d922fc1f076ca5480a16c7d56a388a08?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah that sounds good to me. New Year resolution for 2018: learn about compilers! :D</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119055694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jayantjain1992@gmail.com",
            "sender_full_name": "Jayant Jain (S2'17)",
            "sender_id": 101326,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1511878216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d922fc1f076ca5480a16c7d56a388a08?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tagging the others who expressed an interest - <span class=\"user-mention\" data-user-email=\"mnoronha@uchicago.edu\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span> <span class=\"user-mention\" data-user-email=\"alicja.raszkowska@gmail.com\" data-user-id=\"100049\">@Alicja Raszkowska (F1'16)</span> <span class=\"user-mention\" data-user-email=\"julian@cipht.net\" data-user-id=\"101992\">@Julian Squires (F2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119055706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jayantjain1992@gmail.com",
            "sender_full_name": "Jayant Jain (S2'17)",
            "sender_id": 101326,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1511878259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> I'm in to start in January.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119056783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1511880327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/92c8091d071019ffc781478944ef13f2?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm working through the parsing portion of the nand2tetris compiler (which operates on a list of tokens) and have noticed the book and i have taken sort of different approaches on building up an AST. the book seems to preserve all the tokens and just put them into the correct spot in the AST, i.e., a class var declaration looks like this (in the xml that comes w/ the book):</p>\n<div class=\"codehilite\"><pre><span></span>&lt;classVarDec&gt;\n  &lt;keyword&gt; field &lt;/keyword&gt;\n  &lt;keyword&gt; int &lt;/keyword&gt;\n  &lt;identifier&gt; direction &lt;/identifier&gt;\n  &lt;symbol&gt; ; &lt;/symbol&gt;\n&lt;/classVarDec&gt;\n</pre></div>\n\n\n<p>whereas my approach was to imbue each token with semantic meaning at the parse phase, so the equivalent code for me is a struct (in rust pseudocode):</p>\n<div class=\"codehilite\"><pre><span></span>ClassVar {\n  var_type: ClassVarType::Field,\n  data_type: Type::Int,\n  name: &quot;direction&quot;,\n}\n</pre></div>\n\n\n<p>i don't understand the advantages of preserving raw tokens at this phase -- is this just a peculiarity of nand2tetris or a more general parsing strategy?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119364540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jared.r.mcdonald@gmail.com",
            "sender_full_name": "Jared McDonald (he) (W1'17)",
            "sender_id": 103219,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "AST representation",
            "submessages": [],
            "timestamp": 1512492630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c1d5c4ed4360b6a0298e3c99fcf1f989?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like they're building a parse tree, where you're building an AST - there's a pretty helpful blog post about the difference here: <a href=\"https://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/\" target=\"_blank\" title=\"https://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/\">https://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/</a> From that post:</p>\n<blockquote>\n<p>Parsers usually either construct ASTs directly in their actions, or first construct CSTs and then convert them to ASTs. It's interesting to note that CSTs are trivial to build once you have a grammar written [3], and some tools will build it automatically. After all, a CST is just another representation of the grammar. But beware of tools that promise to automatically build ASTs - this can work in a general sense only for trivial grammars, and what you'll get is most likely a CST rather than an AST.</p>\n</blockquote>\n<p>So, as far as I can tell, you might start with a parse tree/CST if you're using one of the tools he mentions, but you would want to ultimately convert it into an AST, because preserving all those raw tokens is cumbersome and unhelpful.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119365694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nlsandler@gmail.com",
            "sender_full_name": "Nora Lillian Sandler (she) (F2'17)",
            "sender_id": 101993,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "AST representation",
            "submessages": [],
            "timestamp": 1512494210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I never knew about this distinction; thanks for the article!  Too much time in Lisp, I guess.  I always thought of these as \"cluttered ASTs where the author didn't bother cleaning up the parser's output\".</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119366097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "AST representation",
            "submessages": [],
            "timestamp": 1512494845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/92c8091d071019ffc781478944ef13f2?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah, thanks for the article <span class=\"user-mention\" data-user-email=\"nlsandler@gmail.com\" data-user-id=\"101993\">@Nora Lillian Sandler (F2'17)</span>! i'm tempted to just skip the CST but then validating it against the book's xml \"unit tests\" is going to be quite involved</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119366614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jared.r.mcdonald@gmail.com",
            "sender_full_name": "Jared McDonald (he) (W1'17)",
            "sender_id": 103219,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "AST representation",
            "submessages": [],
            "timestamp": 1512495606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/92c8091d071019ffc781478944ef13f2?d=identicon&version=1",
            "client": "website",
            "content": "<p>i wonder if there are any advantages to first building a CST, other than being able to get it for free if you have specified a grammar (and are using a tool that can understand the grammar)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119366715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jared.r.mcdonald@gmail.com",
            "sender_full_name": "Jared McDonald (he) (W1'17)",
            "sender_id": 103219,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "AST representation",
            "submessages": [],
            "timestamp": 1512495773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Me too, just bumping this to say \"let's all reconvene in the new year and start roughly at the same time\" </p>\n<p>yay compilers! <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119396108,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1512554274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm working on a lambda calculus interpreter, and I've basically come up against the following problem:</p>\n<p>I have a grammar</p>\n<div class=\"codehilite\"><pre><span></span>a := b | c\nb := a a\n</pre></div>\n\n\n<p>where c is a terminal. So to write the parser, I reformulated it as</p>\n<div class=\"codehilite\"><pre><span></span>a := b | c | empty\nb := c a\n</pre></div>\n\n\n<p>Which works fine, giving right-recursive b and successfully parsing expressions. However, for evaluation, b is actually right-associative. There's nothing I can do about this, right? I can write hacky evaluation code, but before doing so, wanted to sanity-check :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119674021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "left recursion in grammar",
            "submessages": [],
            "timestamp": 1513102874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Ah so it turns out that this isn't that difficult to do by looping trying to consume pairs of tokens (above, c) and just returning the left if there was no right one! :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119674575,
            "is_me_message": false,
            "last_edit_timestamp": 1513103708,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "left recursion in grammar",
            "submessages": [],
            "timestamp": 1513103693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>Hey it's January!</p>\n<p>Does anyone have any thoughts on the three suggested \"reference textbooks\"?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120492261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514831287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Yay! (no thoughts re books though)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120493316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514833842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>the first one is the oft cited \"dragon book\",  kind of the necronomicon for compilers. I have a pdf of it lying around I can post up at some point... But I wasn't planning to do anything but go straight through the course syllabus and since it is optional I probably won't seek out the other two</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120493749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514834902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://meta.stackexchange.com/questions/25840/can-we-stop-recommending-the-dragon-book-please\" target=\"_blank\" title=\"https://meta.stackexchange.com/questions/25840/can-we-stop-recommending-the-dragon-book-please\">https://meta.stackexchange.com/questions/25840/can-we-stop-recommending-the-dragon-book-please</a></p>\n<p>makes me think that the dragon book might indeed be a nice companion; assuming the coursework itself is beginner-friendly.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120493860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514835171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I do think its reputation is deserved, I've read enough of it to understand why people like it so much, it is definitely comprehensive.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120494393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514836419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>should this be week one or next week be week one? either is good to me!</p>\n<p>So, what I want to learn about most in this is just how high level language constructs are turned into machine code. that might sound kind of general but I mean it concretely, some things are fairly easy to see 1:1, I understand how loops become <code>jmp</code> instuctions, but I don't really understand what complex language features end up being. </p>\n<p>and I am also curious about wehat \"optimization\" means in a modern context, though that one both sounds and is super general :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120497914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514844291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>also to answer my own question I do think I'm going to watch week 1 lectures this week and set up a dev env. I don't plan on definitely doing week:week everytime (every other mooc I've tried I've inevitably fallen off the tracks when I miss a week for some reason or another so I want to be more flexible with myself this time) but the first week is mostly background and concepts so should be fairly low risk for that</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120520190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514897519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Regarding the books: I like Appel a lot, but mostly because the canonical version is in ML and I like his spin on things.  Someone I worked with has high regard for Cooper and Torczon; I have a copy but haven't done more than peek at it, however some of the papers by the authors IIRC are excellent, like A Simple Fast Dominance Algorithm.  Both are surely better than the Dragon book, even if the last edition of the latter does have some good stuff in it.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120547734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1514943677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Is there a way to take advantage of the fact that EBNF can be expressed in EBNF for a simpler parser?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120754400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515370398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>I feel like the answer is no (since if you have the ability to build a parser from EBNF, the fact that you can then parse EBNF is moot), but it seems too 'nice' to ignore.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120754445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515370498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Slightly related: Can a language in the chomsky hierarchy express languages above them?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120805067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515463881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just in case you haven't come across it already, have you looked at <a href=\"https://en.wikipedia.org/wiki/META_II\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/META_II\">META II</a>? Here's <a href=\"https://www.youtube.com/watch?v=L1rwVBLHGiU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=L1rwVBLHGiU\">a talk on it</a> that I really like.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"L1rwVBLHGiU\" href=\"https://www.youtube.com/watch?v=L1rwVBLHGiU\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=L1rwVBLHGiU\"><img src=\"https://i.ytimg.com/vi/L1rwVBLHGiU/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120805370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515464573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>I have not!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120805428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515464761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>That was great! I can't find anything in the paper, the repo, or the metacompilers link that details how a fixed point compiler occurs, but if I understand correctly it happens at every iteration if you keep the syntax of your DSL the same.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120808333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515470970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>If a syntax rule is defined with higher priority that isn't mutually exclusive with a rule of lower priority, then it would change the semantics of how the compiler syntax definition is the next time it is run, but I don't see that happening more than once in a row for any manual change but I'm not 100% sure.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120808465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "ebnf fixed point?",
            "submessages": [],
            "timestamp": 1515471222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm aiming to write a LISP compiler and 'Lisp in Small Pieces' was recommended. Does anyone have a copy I could borrow for a few days or weeks?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120891286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "LISP compiler resources",
            "submessages": [],
            "timestamp": 1515623092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I've been slacking on the coursework for this as I try to establish a new pace of life, but I'm still highly interested.</p>\n<p>How's it gone for others?</p>\n<p>Designed to be \"simple to compile\" as it might be, I kinda like <code>Cool</code> so far~</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120922879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1515684879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not staying to any good schedule (and it's a good thing too as I've got a relatively chaotic schedule for the time being), but I'm still on board <span class=\"user-mention\" data-user-email=\"danweasel@gmail.com\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> ! Have you made it far?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121272273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1516377385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p>I'm still on board, despite a relative lack of progress...  I'm maybe halfway through the 2nd week of videos? </p>\n<p>My main blocker is the chaos of trying to implement some relatively consistent structure to my life in a new-ish city and a new job. Ideally I'd have some proscribed time(s) of the week to work on stuff like this rather than approaching it in adhoc fashion. But that clearly hasn't happened yet.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121277589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1516385986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>lol that sounds exactly like what I'm doing.  I think we should feel free to drop comments into this topic whenever!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121279391,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1516388763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I've also been slacking... I'm going to try to get caught up this weekend. I've just watched the first week I think, but that was back in December</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121288934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1516404540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> <span class=\"user-mention\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> <span class=\"user-mention\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span> Hey, I'm doing a batch right now and somehow I didn't see this thread :)</p>\n<p>I recently finished a very simple compiler for <code>nand2tetris</code> and I'm now diving into compilers deeper, so I've been watching the Stanford class videos. I was wondering whether any of you have gotten to week 7, because I have a question about the object layout. In particular, I don't understand why every object of a class has to store object size, class tag and the dispatch table. I'm particularly confused about dispatch table, because it seems that we don't need it, like, for all call sites, we can just generate labels of where to go.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125674174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1524666835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"6168\">@Liuda Nikolaeva (SP1'18)</span> I _probably_ speak for all of us when I say uh no we did not get that far :)</p>\n<p>It's still definitively on my todo list personally but it's been bumped by a few things!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125685440,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lohmataja@gmail.com",
                        "full_name": "Liuda Nikolaeva (SP1'18)",
                        "id": 6168
                    },
                    "user_id": 6168
                },
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lohmataja@gmail.com",
                        "full_name": "Liuda Nikolaeva (SP1'18)",
                        "id": 6168
                    },
                    "user_id": 6168
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Stanford Compiler Course",
            "submessages": [],
            "timestamp": 1524681722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p>When you're writing a compiler, how do you get sample programs and tests? I mean, sometimes you have a toy language for a course, and the course gives you sample programs, plus some way to test what you're generating, and as long as you're happy to stay within the bounds of the course, you're happy.<br>\nWhat do you do when you're writing a compiler for something else?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125953848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525196098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>I expect that you can think of it similarly to writing any other test case - what is the happy path, what are the edge cases, etc. (You'd probably want to think about this separately for the parsing, lexing, and actual compiling stages). That's just for tewting correctness though, testing perf, etc would be a whole different challenge. Cc <span class=\"user-mention\" data-user-id=\"101993\">@Nora Lillian Sandler (F2'17)</span>, who ran into this when writing a C compiler and might have useful tips about how to think about this <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125955278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525197994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>When I worked on Rust, every time we fixed a compiler bug we wrote a test and added it to the test suite.  We had three kinds of tests: compile-fail (i.e., things that raised compile-time errors), run-fail (things that raised run-time errors), and run-pass (things that compiled and ran successfully).  Looking at the <a href=\"https://github.com/rust-lang/rust/tree/master/src/test\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/tree/master/src/test\">tests directory</a>, the <code>compile-fail</code>, <code>run-fail</code>, and <code>run-pass</code> directories all still exist, as well as a lot of others.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125964363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525211410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, interesting! I wouldn't have come up with run-time error tests, this is cool.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125964692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525212051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, it's really useful to have those!  The test framework could check that a test would fail with a particular error.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125966013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525214295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or, rather, the test would pass if the compiler produced a particular run-time error. :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125966016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525214321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<ul>\n<li>I test everything in the tutorial, and any example programs that I write</li>\n<li>I check branch coverage in the compiler and come up with example programs that get me to 100%</li>\n<li>I test bugs that should now be fixed, similar to what Lindsey mentioned</li>\n<li>For each sample program, I run it after each compiler pass and check that the result didn't change. That helps a lot with narrowing down where things break.</li>\n<li>In some places I explicitly test the output of various passes, but this is a pain to maintain so I only do it for a really important properties</li>\n<li>I'm working on porting some R programs and testing the output against the original.</li>\n<li>I plan to generate random input programs and test that they either produce compile errors or run for at least a second without crashing</li>\n<li>I also have some more language-specific tests, like checking that some subset of the language can never allocate memory</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125968266,
            "is_me_message": false,
            "last_edit_timestamp": 1525218470,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525218126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.sqlite.org/testing.html\" target=\"_blank\" title=\"https://www.sqlite.org/testing.html\">https://www.sqlite.org/testing.html</a> may also be inspirational</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125968273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525218169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wrote a compiler that had a really ...narrow... spec, meaning that there were very few options for what valid sample programs looked like, and then I wrote a sort-of fuzzer that generated valid inputs + what the results of those inputs should evaluate to, to put the compiler through its paces. Your mileage may vary but I had fun thinking about how to write a program that generated example programs.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125977562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525236893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh yeah, writing a fuzzer that generates valid inputs is a great thing to do, partly because it forces you to think about the language spec and may lead to discovering infelicities in the spec.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126008638,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@sweeting.me",
                        "full_name": "Nick Sweeting (he) (S1'14)",
                        "id": 5883
                    },
                    "user_id": 5883
                }
            ],
            "recipient_id": 22621,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1525287648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Y'all might enjoy <a href=\"https://embed.cs.utah.edu/csmith/\" target=\"_blank\" title=\"https://embed.cs.utah.edu/csmith/\">Csmith</a>; I would like to hear of examples of similar generators for other languages.</p>\n<p>Also, some languages have huge conformance test suites you can take advantage of, like <a href=\"http://www.ada-auth.org/acats.html\" target=\"_blank\" title=\"http://www.ada-auth.org/acats.html\">Ada's ACATS</a>.  I think this is one of the nice things about writing a compiler for an existing language instead of a new one.</p>\n<p>WRT compiler error tests, I like <a href=\"https://github.com/ponylang/ponyc/blob/master/test/libponyc/badpony.cc\" target=\"_blank\" title=\"https://github.com/ponylang/ponyc/blob/master/test/libponyc/badpony.cc\">Pony's badpony.cc</a> as a nice simple example of making sure some change doesn't wipe out or change an expected error message.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126549701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1526320710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I am building a toy regular expression engine in Smalltalk. I've been working on the class designs and I am trying to break the lexing and parsing stages down into modular components. When I see other implementations they almost always have a lexer/scanner class. This does not make sense to me as lexing to me seems like it should be a single function that takes in a regexp pattern and an object containing a list of possible tokens, and produce a token stream. I don't see any reason for holding any state after the function does a single pass.  Does anyone happen to know what state a lexer object might want to hold, and what disadvantages of doing the lexing in a single function are?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530922786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>You're right, you don't need a lexer to parse a regex. Maybe it'd help for the fancier varieties like Perl-Compatible Regular Expressions.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Ah thank you! As a more general question: Is it a considered bad practice to take a verb, add an \"er\" to it and make it a class (scanner, parser, sorter, etc.)? I feel like i see this a lot in code and it seems to go against all the OOP stuff Ive learned</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I'd think of that as a small warning sign to consider, but not anything I'd raise to the status of a 'smell'.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe it'd be good to make your parser out of a bunch of classes, like one per nonterminal of the grammar, and that'd be more OO, but that might or might not be worthwhile...</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I'm reminded of the Lisp reader. I don't know why some people divide it up into a lexer and a parser, and it's often implemented in an extensible style where you can add new reader syntax, corresponding to that idea of new productions with new classes which I mentioned.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>The Lisp reader is not technically OO in the sense of using classes, but I think the spirit is the same.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> The usual reason for a lexer being a class or struct is that it doesn't materialize all the tokens in a big list.  The parser asks for the tokens one at a time, and the state is the current position.</p>\n<p>You could think of it as an iterator / generator.  In languages like Java and C++ that is expressed with a class.  In other languages you may not need a class.</p>\n<p><span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> I would argue for Perl-style regexes you should use a lexer rather than going character-by-character.  This is based on writing a lexer/parser for my own regex language, as well as recently writing a lexer/partial parser for Unix globs, which are surprisingly complicated [1].  (The parser is partial because it treats char classes as opaque.)</p>\n<p>I have written a ton of lexers (and parsers) and have a lot of opinions on this subject:</p>\n<p><a href=\"http://www.oilshell.org/blog/tags.html?tag=lexing#lexing\" target=\"_blank\" title=\"http://www.oilshell.org/blog/tags.html?tag=lexing#lexing\">http://www.oilshell.org/blog/tags.html?tag=lexing#lexing</a></p>\n<p>Jacquin let me know if you would like a (gentle) code review.  :)  I actually have a 13-page followup post that I didn't publish on the Oil lexer... I plan to split it into more than one post.</p>\n<p>[1] <a href=\"https://github.com/oilshell/oil/commit/a4c178ab0db26f19fba68a47e223266f3d610def\" target=\"_blank\" title=\"https://github.com/oilshell/oil/commit/a4c178ab0db26f19fba68a47e223266f3d610def\">https://github.com/oilshell/oil/commit/a4c178ab0db26f19fba68a47e223266f3d610def</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233937,
            "is_me_message": false,
            "last_edit_timestamp": 1530924060,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530923966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>So perhaps a singular \"compile(pattern)\" function with the implementation dealing with the various terminal classes, ultimately returning a parse tree...and another function which takes the parse tree and turns it into an automata? I guess what I can't seem to wrap my head around is the client interface...should it only be the compile(pattern) and run(string) functions? Or should i let the client deal with the various objects of the engine and have the client manually run the \"pipeline\" of different operations (compile() -&gt;  turnParseToStateMachine() -&gt; searchString())?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129233998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530924081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>  Yeah, I don't doubt that it can be a good idea for a complicated regex language. But for basic regexes (and a few basic extensions) there's no need: <a href=\"https://github.com/darius/parson/blob/master/eg_regex.py#L43\" target=\"_blank\" title=\"https://github.com/darius/parson/blob/master/eg_regex.py#L43\">https://github.com/darius/parson/blob/master/eg_regex.py#L43</a><br>\nI think the point where it would start to help is when you're trying to match the same kind of token in multiple productions in your parser.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129234089,
            "is_me_message": false,
            "last_edit_timestamp": 1530924515,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530924213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> it depends on your goals! In general I like the design where you have constructors to build a regex like Either(re1, re2), Sequence(re1, re2), Star(re), and so on; your parser calls on constructors; and then you can compile from those trees. That decouples the parsing from the rest. I think when you see programs that build up a regex as a string and then pass it to a regex library to parse, that's... not necessarily terrible, but it does seem like getting away from the most direct way to do things.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129234270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530924488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> I think the answer is highly language-dependent, and I'm not sure of the idioms in SmallTalk.  In Oil, I use a style something like this:</p>\n<div class=\"codehilite\"><pre><span></span>r = Reader()  # a reader can read either from a string, a disk file, or an interactive prompt, which is necessary in shell\nl = Lexer(r)  # lexer reads from the reader\np = Parser(l)  # parser reads from the lexer\ntree = p.Parse()\n</pre></div>\n\n\n<p>And then I wrap the whole thing up in a function for convenience.  However, I want to test the individual pieces separately, so I think it's important that they have their own interface, even if the user doesn't see them.</p>\n<p>So basically the answer is <strong>both</strong> -- I have a high-level interface, as well as the \"programmable pipeline\".  The flexibility is important for interactive languages with a REPL.</p>\n<p>In C you will see this, which I dislike:</p>\n<div class=\"codehilite\"><pre><span></span>yylex();\n/* now read global state mutated by yylex! */\n</pre></div>\n\n\n<p>Or something like this:</p>\n<div class=\"codehilite\"><pre><span></span>struct Lexer* lex = ...;\nnext(lex);\n/* Now use lex.id, lex.pos, etc. */\n</pre></div>\n\n\n<p>I don't really like those styles, but my point is that there are many different styles.  It depends on your use case I suppose.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129234360,
            "is_me_message": false,
            "last_edit_timestamp": 1530925004,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530924695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> Yes that looks nice for that use case.  The thing that pushes it over the edge for me is character classes, e.g. the mini-language inside <code>[]</code>.  Both Unix globs and regexes have this whole other mini-language inside <code>[]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129234462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1530924846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>  Sorry for the late response --ive been either asleep or in a car for most of the past 24hrs. That explanation helps a lot...i hadn't thought to have the parser pulling from the lexer. I scanned through a bit of the Clang source code today and they also seem to do it this way.  Is there any particular reason that this method is preferred to scanning all at once and then parsing all at once ?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129275772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1531005093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> For both bash and Python, you can't lex all at once because during interactive parsing, the lexer doesn't know when to stop!  Only the parser knows that.</p>\n<p>Consider:</p>\n<div class=\"codehilite\"><pre><span></span>def foo():&lt;newline&gt;\n  pass&lt;newline&gt;\n&lt;newline&gt;\n</pre></div>\n\n\n<p>At the first two newline tokens, the parser has to keep going.  At the last one, it has to return.  If you try to lex all at once, it would just keep going in an infinite loop.</p>\n<p>In bash there is an analogous case:</p>\n<div class=\"codehilite\"><pre><span></span>f() {&lt;newline&gt;\n  echo hi&lt;newline&gt;\n}&lt;newline&gt;  # must stop parsing here, but not before\n</pre></div>\n\n\n<p>Clang doesn't necessarily need to parse interactively, but in most batch parsers you want to be able throw out the whitespace and comment tokens.  Most parsers lose information and that saves a little memory.  If you lexed all at once you'd be forced to materialize it.</p>\n<p>(Although interestingly Clang's parser tries not to lose any information; I talk about this design issue here: <a href=\"http://www.oilshell.org/blog/2017/02/11.html\" target=\"_blank\" title=\"http://www.oilshell.org/blog/2017/02/11.html\">http://www.oilshell.org/blog/2017/02/11.html</a> )</p>\n<p>Another reason is that sometimes the parser has to provide the lexer with feedback, as I pointed out in my article on C's lexer.  The lexer doesn't have enough infromation to run on its own.  It gets information from the parser as its goes.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129353700,
            "is_me_message": false,
            "last_edit_timestamp": 1531148868,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1531147620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>So I am still stuck on this little toy project (building a basic regex engine) that feels like it should be way easier than I am making it. That being said, I definitely understand parts of it better (especially the part about the lexer which I had asked earlier). I have also been reading through the Dragon book which has been an awesome resource, but just takes way too much time to get through (since i am a pretty slow reader when it comes to this type of material). I have gotten to the chapter on parsing and have finally come to the realization that there are a bunch of different types of parsers for different types of grammars/situations (and that top down is not the only way to do it). Can someone please save me from reading 110 pages of the Dragon Book and point me to the proper \"type\" of parser for basic regular expressions (concat, union, and kleene star operators only)?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130012994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532109297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Have you written a parser for arithmetic expressions before? Like a+b*c?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130013159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532109515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>The main differences from parsing a regex are: there's an implicit \"juxtaposition\" operator, and there's the postfix '*', which is parsed kind of like a prefix '-', but of course not exactly.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130013261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532109619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>(You're not at RC today, are you?)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130013299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532109694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Unfortunately I am not...So I have gathered that the easiest way to do this is through converting infix to postfix...which I think I can figure out...My questions is: Is there a general rule for when something can be converted to postfix? Is it only for things that can be broken into \"algebras\" (which i believe is the fancy way of saying elements and their operators )? Or is there a more general rule?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130013509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532109974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Also, is there a technique to parse the expression based on a grammar for the regex? The infix to postfix seems to me like a way of breaking the regex down into its basic elements without using a grammar. Or am i wrong on this?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130013625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532110175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>You don't really need to convert to postfix -- parsing into a tree structure is the same amount of work. If you do want any tree structure converted to postfix, you can do that as a post-order traversal of the tree.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I brought up infix parsing because you can write a regex parser in the same style as an infix expression parser, and it's easy to find a tutorial about expression parsers, so that'd make a good jumping-off point.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I've forgotten, have you written a recursive-descent parser?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Yeah so you can either parse into a tree or convert to postfix. Correct? If I were to parse it into a tree, what \"type\" of parser would i use?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>If you have a grammar in a certain form, there is a technique to turn that into a recursive descent parser.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Right.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>And no i have not, but can the grammar be converted into a form that allows for RDP?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Recursive descent is pretty straightforward. OK, do you have a grammar to paste in here?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>The main restriction with RD is no \"left recursion\".</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>E --&gt; E | E<br>\nE --&gt; EE<br>\nE --&gt; E*<br>\nE --&gt; (E)<br>\nE --&gt; char</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016817,
            "is_me_message": false,
            "last_edit_timestamp": 1532113916,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016825,
            "is_me_message": false,
            "last_edit_timestamp": 1532113923,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>i.e. rules like \"&lt;A&gt; := &lt;A&gt; b | c\" (left recursion)<br>\ninstead of \"&lt;A&gt; := b &lt;A&gt; | c\" (not left recursion)<br>\n(these grammars denote different languages)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Ah, so all I have to do is change them around? Ok</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>OK, that does have left recursion (the first two rules).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>And I realize the grammar is wrong...I had not thought about it since I found out that the operators have different precedents</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016919,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>But it should serve the purpose of figuring out a general method I think</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532113996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>It describes a basic regex language correctly, it's just not one you can turn directly into a recursive program, because the program would infinite-loop.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I should add that the reason i am trying to convert it into a tree instead of postfix is merely b/c I am curious as to how to do it this way</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>That's fine. :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>So one good source about recursive-descent parsing is Wirth's book Compiler Construction. It's free online.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I don't believe it does b/c it does not take into account that * &gt; concat &gt; | as far as precedence goes</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130016999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I will check it out...thanks...are you saying that the grammar I gave above can't be turned into a recursive descent parser though because there is no way to turn it into a \"non-left recursive\" grammar?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>What I mean is that if you use those grammar rules to create a string, that string will be a valid regex. You're right that the grammar is ambiguous about how to parse a regex into a tree -- there could be different parse trees for the same regex string, with this grammar. So that's another reason to change the grammar.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I mean, an rdp from that grammar would look something like</p>\n<div class=\"codehilite\"><pre><span></span>def parse_e():\n    if parse_e() and expect(&#39;|&#39;) and parse_e(): return True\n   ...\n</pre></div>\n\n\n<p>and that first recursive call to parse_e() would keep getting called, with no further progress ever getting made, until the stack overflows.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>The scheme for getting an rdp from a grammar only works for grammars that don't do that.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Ok, but lets say that we want each operator to have the same precedence and that they are all left associative operators.  I realize that this would not result in proper regex searches, but for the sake of argument, lets leave that be. Is there a way to parse that grammar?  You've just mentioned above that a RDP will not work...is there another type of parser that will?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>You want a grammar like</p>\n<div class=\"codehilite\"><pre><span></span>E --&gt; Term &#39;|&#39; E\nE --&gt; Term\nTerm --&gt; Factor Term\nTerm --&gt; Factor\nFactor --&gt; Primary &#39;*&#39;\nFactor --&gt; Primary\nPrimary --&gt; &#39;(&#39; E &#39;)&#39;\nPrimary --&gt; char\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017261,
            "is_me_message": false,
            "last_edit_timestamp": 1532125643,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>That way the recursive calls bottom out.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>And the different parts like Term and Factor correspond to the different levels of precedence.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>So you don't have any ambiguity. An rdp works fine.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>This link I gave before: <a href=\"https://github.com/darius/parson/blob/master/eg_regex.py#L43\" target=\"_blank\" title=\"https://github.com/darius/parson/blob/master/eg_regex.py#L43\">https://github.com/darius/parson/blob/master/eg_regex.py#L43</a><br>\nis such a grammar (in a slightly different grammar syntax than we've been using today).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Alright thank you so much for your patience...final question: Is my grammar un-parsable by all types of parser? Is the only way I can get it to work by changing the grammar (as opposed to changing the parser \"type\")?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>You can ignore the parts like <code>:either</code> which are where it constructs the parse tree nodes.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>There are parsers that can work with any context-free grammar, like yours. But your grammar is ambiguous, so the parser would have to say \"I can tell this is a regex you've given me, but I can't tell you for sure what it means.\"</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>(Or it can answer \"this string is not a valid regex\" in other cases.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>So, one way to resolve the ambiguity is to give the rules precedence levels, and that's something some parser generators support! I was just suggesting if you write an rdp by hand then I would not think about it that way, as a beginner.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130017551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532114777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I just edited my example grammar above to be complete -- you could turn it into an rdp without the kind of problems I brought up.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130018014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532115325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> This is a great question that touches on several conversations I've had with others recently.</p>\n<blockquote>\n<p>I have gotten to the chapter on parsing and have finally come to the realization that there are a bunch of different types of parsers for different types of grammars/situations (and that top down is not the only way to do it). Can someone please save me from reading 110 pages of the Dragon Book and point me to the proper \"type\" of parser for basic regular expressions (concat, union, and kleene star operators only)?</p>\n</blockquote>\n<p>It sounds like you learned the hard way (as I did) that the language you want to parse and the algorithm required are highly coupled!  I talked about this with <span class=\"user-mention\" data-user-id=\"120659\">@Lincoln Clarete (S2'18)</span> and <span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> </p>\n<p>I think I want to make a post titled \"lies about parsing\".  The first lie is: you write a grammar, and then something like yacc will generate a parser for you.  That works in some cases, but in other cases it's not the best approach -- particularly when the language was not designed with a grammar in the first place (like regexes).</p>\n<p>I agree with Darius in that hand-written recursive descent is probably the best approach here.  I have looked at <code>sre_parse.py</code> in Python's stdlib, and that's the general approach is takes.  But the devil is in the details.</p>\n<p>I would honestly be surprised if there was a regex language that is NOT parsed by hand -- e.g. the regexes in libc, PCRE, Ruby, Perl, etc.</p>\n<hr>\n<p>Tangential comment: <code>re2</code> has a special type of parser because it's meant to be <em>safe from adversaries</em> (which almost no parsers are), but it's still hand-written.</p>\n<p><a href=\"https://swtch.com/~rsc/regexp/regexp3.html\" target=\"_blank\" title=\"https://swtch.com/~rsc/regexp/regexp3.html\">https://swtch.com/~rsc/regexp/regexp3.html</a></p>\n<blockquote>\n<p>RE2's parser is in <a href=\"http://parse.cc\" target=\"_blank\" title=\"http://parse.cc\">parse.cc</a>. It's a hand-written parser, both to avoid depending on a particular parser generator and because modern regular expression syntax is irregular enough to warrant special care. The parser does not use recursive descent, because the recursion depth would be potentially unbounded and might overflow the stack, especially in threaded environments. Instead the parser maintains an explicit parse stack, as a generated LR(1) parser would.</p>\n</blockquote>\n<hr>\n<p>A good compilers course should disabuse someone of the lie, but I noticed that some programmers have that misconception.</p>\n<p>This aspiration of computer science is captured by this paper, with the term \"pure declarative syntax\".  But that's not how things are parsed.  (I don't really recommend reading this paper, but I'm citing to show that I'm not straw-manning here.  The paper is written in an odd style, but the authors are reputable -- they also designed and developed the Nix package manager)</p>\n<p><a href=\"http://eelcovisser.org/post/135/pure-and-declarative-syntax-definition%3A-paradise-lost-and-regained\" target=\"_blank\" title=\"http://eelcovisser.org/post/135/pure-and-declarative-syntax-definition%3A-paradise-lost-and-regained\">http://eelcovisser.org/post/135/pure-and-declarative-syntax-definition%3A-paradise-lost-and-regained</a></p>\n<p>Anyway thing conversation is long, and if happen to be in RC, we should talk about it.  Did you manage to come last night?  I was talking with a bunch of people after tech talks but I didn't see you?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130024665,
            "is_me_message": false,
            "last_edit_timestamp": 1532122991,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532122392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>Yeah so I have spent the afternoon learning about Bottom-Up parsers (shift-reduce). This looks like it would work for my original grammar that was:<br>\nE --&gt; E | E<br>\nE --&gt; EE<br>\nE --&gt; E*<br>\nE --&gt; (E)<br>\nE --&gt; char<br>\nThat being said, is the general consensus that its much easier to write a TopDown LL parser than a BottomUp LR one?  I think i will likely end up using the grammar that <span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> provided (thank you very much!) or at least trying to come up with my own first before looking at his again. I was just curious which type of parser would allow me to do the original grammar (above).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130025100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532122927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something related to the lie that I learned from writing Oil:</p>\n<ul>\n<li>The POSIX shell standard has a yacc-style grammar (likewise, I think the ANSI C standard has a yacc-style grammar).</li>\n<li>But the grammar is a \"hack\" / compromise -- it describes what somebody happened to implement in C code.</li>\n</ul>\n<p>In other words, it's more natural to write a hand-written parser for shell because the original parser was hand-written!  You can describe it with a grammar, but you will see \"artifacts\" of the imperative code in there.</p>\n<p>In fact Bourne shell and yacc were developed around the same time historically (late 70's), so shell didn't take influence from yacc.  C was developed well before yacc (early/mid 70's).</p>\n<p>Another lie: grammars are declarative.  In fact grammars are a little like code -- you might to \"refactor\" them to make them execute better.  This is the left recursion issue that <span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> pointed out, and which I talked about with <span class=\"user-mention\" data-user-id=\"120659\">@Lincoln Clarete (S2'18)</span> regarding a weakness of PEGs (which is basically a formalism for a type of recursive descent parser.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130025108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532122942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (F2'15)</span> when you say that:<br>\nE --&gt; E | E<br>\nE --&gt; EE<br>\nE --&gt; E*<br>\nE --&gt; (E)<br>\nE --&gt; char<br>\nis ambiguous, what exactly do you mean? If I want the operators to all be at the same precedence (which I realize is NOT how a regex normally works) and if the operators are all left associative, I thought that this would get rid of the grammar's ambiguity.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130025240,
            "is_me_message": false,
            "last_edit_timestamp": 1532123115,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532123095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW this blog post addresses the left recursion issue and IIRC it's similar to how I think about it:</p>\n<p><a href=\"https://tavianator.com/bfs-from-the-ground-up-2/\" target=\"_blank\" title=\"https://tavianator.com/bfs-from-the-ground-up-2/\">https://tavianator.com/bfs-from-the-ground-up-2/</a></p>\n<p>The details may depend on the grammar but I think it's similar to what you're donig.</p>\n<p>The boolean language parser for OSH handles left recursion with a loop, as he does:</p>\n<p><a href=\"https://github.com/oilshell/oil/blob/master/osh/bool_parse.py\" target=\"_blank\" title=\"https://github.com/oilshell/oil/blob/master/osh/bool_parse.py\">https://github.com/oilshell/oil/blob/master/osh/bool_parse.py</a></p>\n<p>The code is not particularly clean probably for a couple different reasons, but it is well-tested.  Shell has a bunch of weirdness that makes it not entirely grammar-friendly.  Like I said, the imperative code came first, and then grammar came later.</p>\n<p>I did the transformation of the grammar but I don't recall the details at the moment!  We could talk about it in person.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130025931,
            "is_me_message": false,
            "last_edit_timestamp": 1532123936,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532123877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> let's take the regex \"ab|c\". Does this have a parse tree like (ab)|c, or like a(b|c)? Your grammar can parse it either way. That's the usual meaning of \"ambiguous\" with context-free grammars.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130027125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532125436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>If you annotate the grammar with precedence levels, and use a parser generator that distinguishes precedence, then yes, that resolves the ambiguity.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130027181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Type of parser for Basic Regexp",
            "submessages": [],
            "timestamp": 1532125481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span> </p>\n<p>I think I brought up \"lexer modes\" above, and I just got some feedback on someone who used it for both parsing regexes and parsing string interpolation syntax.  (I talked with <span class=\"user-mention\" data-user-id=\"111923\">@Yuri Vishnevsky (SP2'18)</span> about the string interpolation problem too).</p>\n<p><a href=\"https://www.reddit.com/r/ProgrammingLanguages/comments/932372/how_to_implement_string_interpolation/e3uo63s/\" target=\"_blank\" title=\"https://www.reddit.com/r/ProgrammingLanguages/comments/932372/how_to_implement_string_interpolation/e3uo63s/\">https://www.reddit.com/r/ProgrammingLanguages/comments/932372/how_to_implement_string_interpolation/e3uo63s/</a></p>\n<blockquote>\n<p>Wow, I was having similar problems with YASL (using my custom lexer/parser), for implementing both regexes (with /0x[0-9A-Ea-e]+(\\.[0-9A-Ea-e]*p[+-]?[0-9]+)?[LlFf]?/ syntax) and for string interpolation (with similar syntax to OP). The lexer modes seem to solve my problem perfectly. Thanks!</p>\n</blockquote>\n<hr>\n<p>I'm not necessarily saying this is the way you should do it, but it's a data point.  In fact, it's an uncommon way of doing it, but I think it's helpful and at least a couple other people do.  (The person I quoted wrote a 7000+ line language and bytecode interpreter in C, so it looks like he's a fairly experienced programmer.)</p>\n<p>To be fair one other person also mentioned that he is using a PEG to parse string interpolation (CAD1997 in the parent thread.)</p>\n<p>I think the state of the art for parsing regexes is:</p>\n<ul>\n<li>Write a bunch of ad hoc recursive code that scans character by character.  This obviously works since so many people do it, but it's quite messy and hard to shake the bugs out of.</li>\n</ul>\n<p>I think you were going with</p>\n<ul>\n<li>Write a grammar, and translate that to a recursive descent parser.  </li>\n</ul>\n<p>I think that the lexer modes complements the recursive descent parser.  Most people don't split up the lexer and parser when parsing regexes -- they go character by character -- but if you do want to split it up, using the <code>mode</code> arguments helps.</p>\n<p>There is a language inside <code>[]</code> and a language outside it.  Likewise, for string interpolation, there's a language inside <code>\"\"</code> and a language inside <code>${}</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132001220,
            "is_me_message": false,
            "last_edit_timestamp": 1534087750,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                }
            ],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "regexp lexer design",
            "submessages": [],
            "timestamp": 1534087700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57049d146c345bc0729052062e3397e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>How does incremental compilation work? Is it hard to implement?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132318233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "raymondsohn@gmail.com",
            "sender_full_name": "Raymond Sohn (he) (W2'15)",
            "sender_id": 936,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Incremental Compilation",
            "submessages": [],
            "timestamp": 1534529651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>Hey #compilers, I am looking into writing an interpreter for a <a href=\"https://94-8043756-gh.circle-artifacts.com/0/root/project/doc/reference-manual/language-syntax.html\" target=\"_blank\" title=\"https://94-8043756-gh.circle-artifacts.com/0/root/project/doc/reference-manual/language-syntax.html\">fairly simple statically-typed C-style language</a> and I was wondering if there are any tools for something like this along the lines of <a href=\"https://rpython.readthedocs.io/en/latest/\" target=\"_blank\" title=\"https://rpython.readthedocs.io/en/latest/\">RPython</a> which makes it relatively easy to create an interpreter for a dynamic language that when built basically gets a nice tracing JIT for free. I'm a little worried about RPython specifically because it 1) takes forever to build RPython projects and 2) seems very specifically geared to dynamic languages and may not be able to do much optimizing for known types (this may be false). I'm also aware of Truffle &amp; Graal, but that's also geared to dynamic languages. I think the closest thing I've seen is just using LLVM IR and their API bindings from e.g. OCaml (<a href=\"https://llvm.org/docs/tutorial/OCamlLangImpl1.html\" target=\"_blank\" title=\"https://llvm.org/docs/tutorial/OCamlLangImpl1.html\">link</a>), but that's basically compiling. Which is fine as long as that turns out to be roughly as easy and time-consuming as interpreting would be (we'd like to have quick boot times). Welcoming any and all thoughts and links, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132564487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1534924346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>There are languages along the lines of Staged ML, where you can take an interpreter, quasiquote parts of it, and make a basic compiler with little extra effort. A static partial evaluator is a program to automate that extra effort. The ur-version of this is backquote in Lisp, but you probably aren't too interested in compiling a typed language to Lisp.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132571064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1534934401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I misremembered the name of <a href=\"http://okmij.org/ftp/ML/MetaOCaml.html\" target=\"_blank\" title=\"http://okmij.org/ftp/ML/MetaOCaml.html\">http://okmij.org/ftp/ML/MetaOCaml.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132571112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1534934437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9337\">@Sean Talts (F1'16)</span> I dunno if this would be up your alley, but this talk demos implementing an interpreter in Racket that then lets you use SAT solvers to verify properties about your programs in that language: <a href=\"https://dev-videos.com/videos/KpDyuMIb_E0/Synthesis-and-Verification-for-All--Emina-Torlak\" target=\"_blank\" title=\"https://dev-videos.com/videos/KpDyuMIb_E0/Synthesis-and-Verification-for-All--Emina-Torlak\">https://dev-videos.com/videos/KpDyuMIb_E0/Synthesis-and-Verification-for-All--Emina-Torlak</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132573105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1534937719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't used it, but if I were thinking about implementing a language I would definitely see if that would be useful somehow.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132573111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1534937742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks! I hadn't seen these before. I was already considering ocaml so this staged MetaOCaml thing is pretty interesting, though it doesn't seem to provide additional tools for interpreters, which I was kind of hoping for in this production language. But it might be the best of both worlds to have both an interpreter and compiler with the same codebase to support both modes.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132633184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535025446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I gave a <a href=\"http://scattered-thoughts.net/blog/2018/08/16/julia-as-a-platform-for-language-development/\" target=\"_blank\" title=\"http://scattered-thoughts.net/blog/2018/08/16/julia-as-a-platform-for-language-development/\">talk</a> recently on doing this in Julia. Julia provides JIT specialization/monomorphization rather than tracing, so this is particularly suitable to languages that mostly have predictable types. It does require internalizing a high-level model of how the Julia compiler works, but on the other hand it's a core part of the language rather than a rarely-used extension like MetaOCaml is.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132641811,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535035804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might also find <a href=\"http://terralang.org/\" target=\"_blank\" title=\"http://terralang.org/\">Terra</a> interesting. It's not very well supported, but the design is well thought out so it's worth a read even if you don't plan to use it.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132641877,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f924",
                    "emoji_name": "drooling",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535035906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>I was wondering if this might make sense with Julia... Very cool! Julia easily links against native shared libraries, right?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132641994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535036029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, they put a ton of effort into making C FFI really easy.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132642066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535036089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>Awesome, this looks promising. I'll have to watch the talk. Does it have any nice pattern matching for easy AST transformations or parser/lexer libraries for easy parsing?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132642165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535036205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/RelationalAI-oss/Rematch.jl\" target=\"_blank\" title=\"https://github.com/RelationalAI-oss/Rematch.jl\">https://github.com/RelationalAI-oss/Rematch.jl</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132642427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535036442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pretty weak for parser libraries though. We rolled our own and didn't open-source it :(</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132642451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535036466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Annoyingly, they changed the way library lookup works in 1.0 and haven't updated the docs yet, so all the examples are broken.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132643159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535037147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fully explicit example:</p>\n<div class=\"codehilite\"><pre><span></span>julia&gt; using Libdl\n\njulia&gt; const libc = Libdl.dlopen(Libdl.find_library(&quot;libc&quot;))\nPtr{Nothing} @0x00007f951645e150\n\njulia&gt; const clock = Libdl.dlsym(libc, :clock)\nPtr{Nothing} @0x00007f951517e420\n\njulia&gt; ccall(clock, Int32, ())\n1338395\n</pre></div>\n\n\n<p>Which generates code like this:</p>\n<div class=\"codehilite\"><pre><span></span>julia&gt; f() = ccall(clock, Int32, ())\nf (generic function with 1 method)\n\njulia&gt; @code_llvm f()\n\n; Function f\n; Location: REPL[7]:1\ndefine i32 @julia_f_36050() {\ntop:\n  %0 = call i32 inttoptr (i64 140278280741920 to i32 ()*)()\n  ret i32 %0\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132643204,
            "is_me_message": false,
            "last_edit_timestamp": 1535037271,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.talts@gmail.com",
                        "full_name": "Sean Talts (F1'16)",
                        "id": 9337
                    },
                    "user_id": 9337
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535037217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9337\">@Sean Talts (F1'16)</span> would you be able to say more about what makes Graal geared towards dynamic languages? it seems like it supports many statically typed languages too, but I've only just skimmed some of the docs</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132659878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535057307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d98a6bad543795875e03f3ec2d8f6d3a8c8b138?x=x&version=1",
            "client": "website",
            "content": "<p>I was introduced to it that way at I think a papers we love talk a few years ago and hadn't really looked at it since; I think that was just the marketing stance at the time. Now I'm seeing that it can do anything (though most but not all of that list is also dynamic language optimization). I'll have to look into it more. Do you have any experience with it or know of stories using it?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132660843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sean.talts@gmail.com",
            "sender_full_name": "Sean Talts (F1'16)",
            "sender_id": 9337,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535058448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"863\">@Jamie Brandon (F'12)</span> i\u2019m about 10 minutes into your talk and you already convinced me that i should look into julia! thanks for that!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132661253,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jamie@scattered-thoughts.net",
                        "full_name": "Jamie Brandon (he) (W1'20)",
                        "id": 863
                    },
                    "user_id": 863
                }
            ],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535058983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9337\">@Sean Talts (F1'16)</span> unfortunately I have no experience with it. Someone suggested it to me a while ago for the language I'm working on, but I didn't look too deeply b/c I don't want to use the JVM. It looks like maybe it's less JVMy now?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132661641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535059463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be interested to see someone give Graal/Truffle a try. The promise of polyglot tooling is appealing, but I remain intimidated by how complex the stack is. I have no idea how I would diagnose and fix performance problems in a language implemented like that.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132663546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535061982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also <a href=\"https://github.com/graalvm/simplelanguage\" target=\"_blank\" title=\"https://github.com/graalvm/simplelanguage\">https://github.com/graalvm/simplelanguage</a> has 318 files. I just can't java...</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132663899,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "261d",
                    "emoji_name": "point_of_information",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sean.talts@gmail.com",
                        "full_name": "Sean Talts (F1'16)",
                        "id": 9337
                    },
                    "user_id": 9337
                },
                {
                    "emoji_code": "261d",
                    "emoji_name": "point_of_information",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535062600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>f# has facilities for typed quasiquotation and programmatic construction of expressions too, which then get run through .NET's JIT.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132666515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1535066901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh</span> I just watched the talk about Rosette and solver-aided programming languages (after having it in the queue for a month).  </p>\n<p>I really liked it!  The idea is new to me and it was clearly explained.</p>\n<p>The example about synthesizing/debugging a function to do branchless <code>max()</code> of 32-bit ints was cool.  Using high level programming languages to beat C/C++ makes me happy :)</p>\n<p>(I did an experiment with synthesizing a function in the Oil shell implementation.  It worked in the sense that the search succeeded, but it didn't turn out to be practical.  There are many performance problems elsewhere :-/ )</p>\n<hr>\n<p>I also watched <span class=\"user-mention\" data-user-id=\"863\">@Jamie Brandon (F'12)</span> 's talk on implementing languages with Julia!   It's great to see these ideas being used in practice.  Are the allocation issues you mentioned more like a \"nice-to-have\" or a dealbreaker that would make you consider reimplementing the system in another way?</p>\n<p>I had previously looked at the Scala LMS work and was pretty intrigued by it as well.</p>\n<p>I put some more papers in my queue to read.  I'm not sure if I can use any of this work, but I would like to understand the relationship a little better.  They have sort of the same flavor:</p>\n<ul>\n<li>PyPy / Graal is \"write a high-level interpreter in RPython/Java and get a JIT for free\"</li>\n<li>Rosette is \"write a high-level interpreter in Racket and get solver-aided tools like <code>verify</code>, <code>synthesize</code>, and <code>debug</code> for free\".</li>\n</ul>\n<p>Also I would like to understand the difference between Scala LMS and PyPy's techniques... one has explicit types and one doesn't but I don't think that really captures the difference.</p>\n<p>[1] <a href=\"https://emina.github.io/rosette/index.html\" target=\"_blank\" title=\"https://emina.github.io/rosette/index.html\">https://emina.github.io/rosette/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135527864,
            "is_me_message": false,
            "last_edit_timestamp": 1539163512,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1539161493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Are the allocation issues you mentioned more like a \"nice-to-have\" or a dealbreaker that would make you consider reimplementing the system in another way?</p>\n</blockquote>\n<p>It depends very much on what you are doing. In the system I was working on, the compiler itself was 'just engineering' that we had to get out of the way and all the real value was added by the layers on top, so it made sense to optimize for ease of development over getting that last 20% of quality. I think that's also try for a lot of other specialized languages (eg <a href=\"https://github.com/TuringLang/Turing.jl\" target=\"_blank\" title=\"https://github.com/TuringLang/Turing.jl\">Turing</a>, <a href=\"https://github.com/FluxML/Flux.jl\" target=\"_blank\" title=\"https://github.com/FluxML/Flux.jl\">Flux</a>) that are better off piggybacking on an existing compiler and runtime. But if you wanted to implement something where the runtime itself is important (eg Erlang, Go, Rust) then doing it in Julia would be a nightmare.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135596031,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1539249286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> That's great to hear. Messing with Rosette for a while is on my personal queue, but I keep putting it off since I don't have Racket stuff setup and am not sure how I'd be able to take anything I did with it and use it \"in production\" on my own projects (<a href=\"https://keminglabs.com/finda/\" target=\"_blank\" title=\"https://keminglabs.com/finda/\">Finda</a> is Rust and most of my other projects are clojure / clojurescript). So Rosette is on the \"academic\" queue, and I think there are a few dozen papers and other projects in front of it =P</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135655988,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22621,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "New compiler (or interpreter) for statically typed language",
            "submessages": [],
            "timestamp": 1539323187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Lots of times I feel like I don't know what the dalvik VM is doing. On android, the java or kotlin code that application devs write gets compiled by the toolchain into jvm bytecode. Then, a dexer takes that and emits dex files. These files can be run by either the dalvik VM, or by the android runtime. Beyond that I know nothing. I want that not to be the case, and I figure the best way to figure this out is to write my own compiler targeting the dalvik VM.</p>\n<p>But the reason I posted this is because I don't understand the JVM that well. Targeting dalvik means I miss out on the dexer. So... would it be reasonable to target both by defining my own IR and mapping that to both these reps?</p>\n<p>I'm just not sure what to do.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135795979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Homegrown IR",
            "submessages": [],
            "timestamp": 1539556429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101400\">@Ahmad Jarara (S2'17)</span>  I haven't used any of these tools, but sounds like an interesting project! i can't tell if you're more interested in the jvm in general or davlik specifically? If you defined your own IR, which part of the toolchain would that replace?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135841369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Homegrown IR",
            "submessages": [],
            "timestamp": 1539619712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>dalvik specifically. There's a lot more resources against the JVM then there are dalvik. I'm not sure I want to write a production ready dexer, but I want to get an 80% understanding of it and the VM.</p>\n<p>Maybe it's right to just reimplement the dexer instead. Would that involve desugaring?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135867436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Homegrown IR",
            "submessages": [],
            "timestamp": 1539648174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"125276\">@Matthew Graham (F1'18)</span> I think attempting to do an IR is too much at once.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135867810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Homegrown IR",
            "submessages": [],
            "timestamp": 1539648656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>(the dexer does not involve desugaring).<br>\nThe chain goes: desugar android's amalgam of java 6, 7, 8 features into java 6, then compile, then dex.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137126718,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2615",
                    "emoji_name": "coffee",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Homegrown IR",
            "submessages": [],
            "timestamp": 1541275606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>so i\u2019m rolling my own JIT for a pet project of mine, and i got to mmapping and executing jitted code. but now there is a bug somewhere that makes me segfault (i probably emit the wrong hex incantation somewhere). are there any good debuggers for JITTed code? optimally i\u2019d be able to look at something akin to assembly. something like objdump but for in-memory code would be sufficient, but obviously the more informative the better</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148215534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "debugging JITTing",
            "submessages": [],
            "timestamp": 1542961795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>so far i\u2019ve been using LLDB, but i\u2019ve been missing a bit of context and i want to be able to have it somewhere less ephemeral</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148215667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "debugging JITTing",
            "submessages": [],
            "timestamp": 1542962008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i guess i could also write the bytes to disk and debug there, but maybe a tool can help me instead?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 148222964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "debugging JITTing",
            "submessages": [],
            "timestamp": 1542971475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>UPDATE: if this ever comes up again, you can ping me for advice. i found some interesting techniques when working with in-memory object code now (if i\u2019m not around, a few pointers: <code>thread step-inst</code> and <code>disassemble --start-address &lt;addr&gt; --count &lt;n&gt;</code> are your friends, and the later can be used to dump the entire disassembly if you know either an end address or a rough instruction count)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150786100,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "debugging JITTing",
            "submessages": [],
            "timestamp": 1543858680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> Replying here so as not to pollute the <a class=\"stream\" data-stream-id=\"20295\" href=\"/#narrow/stream/20295-victory\">#victory</a> stream ...</p>\n<p>Your project set off a bunch of thoughts and Google searches ... :)  Have you seen this?</p>\n<p><a href=\"http://www.clifford.at/bfcpu/bfcomp.html\" target=\"_blank\" title=\"http://www.clifford.at/bfcpu/bfcomp.html\">http://www.clifford.at/bfcpu/bfcomp.html</a></p>\n<p>I think that's how people write mandelbrot and Towers of Hanoi in BF?  I downloaded and build the toolchain, which was very easy, and ran some examples.  I didn't try writing any code with it.  Maybe it could be extended with the new concurrency operators to \"show off\" the VM.</p>\n<p>I'm writing a Python VM now and am interested in CSP in general.  My experience with CSP has been mostly through Go, which I'm now reminded is different than Hoare's CSP [1].  I like Go's variant with first-class channels though.</p>\n<p>The VM is about 1000 lines and can run a toy fibonacci program.  It's reentrant and I would use pthreads for \"processes\" and pipes for channels.  I'm not sure when I will get to experiment with this -- it may not be for a long time, but I'm interested in where you go with the project.</p>\n<p>Does CSP require names for processes?  I don't see how cspfuck supports that?</p>\n<p>[1] <a href=\"https://golang.org/doc/faq#csp\" target=\"_blank\" title=\"https://golang.org/doc/faq#csp\">https://golang.org/doc/faq#csp</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150960018,
            "is_me_message": false,
            "last_edit_timestamp": 1544043516,
            "reactions": [
                {
                    "emoji_code": "1f6a2",
                    "emoji_name": "ship",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544043353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>  Yes, I\u2019ve seen this, but never dug deeply into it, but maybe I should! That\u2019s a great idea, thank you for that!</p>\n<p>I don\u2019t think you necessarily need names for processes. CSPfuck is very constraint in that regard anyway (to stay true to the mentality behind Brainfuck): All actors can only send messages to the actor \u201cabove\u201d or \u201cbelow\u201d them, so if you want to pass messages to the actors further away, you\u2019ll have to pass them through the actors in between first. This is extremely inconvenient, but then again, what about Brainfuck is really about convenience?</p>\n<p>And to be honest, the whole idea came from an entirely different angle, namely: what would \u201ctwo-dimensional\u201d Brainfuck look like, i.e. what would <code>^</code> and <code>v</code> do as opposed to <code>&gt;</code> and <code>&lt;</code>? The actors idea came later (I\u2019ve been doing some Erlang and Go and implementing message-passing sounded like fun). So in the end the whole thing is just a very silly idea and a giant yakshave to have an excuse to explore some deep ideas about computation without having to be super serious about it. Does that make sense?</p>\n<p>About your Python VM: I\u2019ve read some of your articles, but I\u2019m missing a lot of context and haven\u2019t yet found the time to catch up with all of your work. It\u2019s super interesting to me, though, and I love the idea!</p>\n<p>(BTW: we once had a short exchange on r/programminglangauges after you announced you were going to RC! I don\u2019t know whether you remember, but I do, because it was the first time that I really learned about your work)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150993498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544088581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> </p>\n<p>Hm so I found a different toolchain for Brainfuck here, which is used to make the Mandelbrot program.  (The Towers of Hanoi one is different toolchain -- I think <strong>nobody</strong> is good at writing BF, they all write compilers to do it)</p>\n<p>I managed to build the tiny toolchain, then build the mandelbrot.b from source C macros, and then run it!</p>\n<p><a href=\"http://esoteric.sange.fi/brainfuck/utils/\" target=\"_blank\" title=\"http://esoteric.sange.fi/brainfuck/utils/\">http://esoteric.sange.fi/brainfuck/utils/</a></p>\n<p>The way it works is really interesting!  I was scratching my head about how you can even implement Mandelbrot in brainfuck, because it has no floating point numbers.  It turns out he uses the C preprocessor to do bitwise operations that are like floating point?  I'm not sure of the exact details:</p>\n<p><a href=\"http://esoteric.sange.fi/brainfuck/utils/mandelbrot/cycle.bmacro\" target=\"_blank\" title=\"http://esoteric.sange.fi/brainfuck/utils/mandelbrot/cycle.bmacro\">http://esoteric.sange.fi/brainfuck/utils/mandelbrot/cycle.bmacro</a></p>\n<p>I was able to run it with Ubuntu's <code>bf</code>.  But I got an error when running it with cspfuck.  I didn't try debugging it further.  Let me know if you want a pull request for the runnable toolchain -- it's quite easy.</p>\n<p>I think it would be nice to have cspfuck run this program single-threaded, but later in theory it could be made multi-threaded ?  To show off the VM.  Mandelbrot should parallelize \"dumbly\" just by the pixel.</p>\n<div class=\"codehilite\"><pre><span></span>andy@lisa:~/src/brainfuck/mandelbrot$ ~/git/languages/cspfuck/bin/cspfuck  mandelbrot.b\nActor 0 tried to write to non-existant up channel, ignoring.&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;?????????@BAA@@@@??????&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;==============================   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;=============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;??????????@@@ABDDBAA@@@????????&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;==========================     &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;????????????@@@@AAADFCBBBCB@?????????&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=======================        &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;==\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151142752,
            "is_me_message": false,
            "last_edit_timestamp": 1544217995,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544217316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, your 2D idea reminds me of this StrangeLoop talk from a few years ago.  If I recall correctly, there are 144 chips running asynchronously (no common clock) and there instructions to pass data between them, AND they are in a two dimensional layout, and you can only pass messages between adjacent chips.</p>\n<p>However I can't find a good text description of it online. It might have only been in the video.  I will look a bit later.</p>\n<p><a href=\"https://www.thestrangeloop.com/2013/programming-a-144-computer-chip-to-minimize-power.html\" target=\"_blank\" title=\"https://www.thestrangeloop.com/2013/programming-a-144-computer-chip-to-minimize-power.html\">https://www.thestrangeloop.com/2013/programming-a-144-computer-chip-to-minimize-power.html</a></p>\n<p><a href=\"https://news.ycombinator.com/item?id=6667592\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=6667592\">https://news.ycombinator.com/item?id=6667592</a></p>\n<p><a href=\"https://blogs.msdn.microsoft.com/ashleyf/tag/greenarrays/\" target=\"_blank\" title=\"https://blogs.msdn.microsoft.com/ashleyf/tag/greenarrays/\">https://blogs.msdn.microsoft.com/ashleyf/tag/greenarrays/</a></p>\n<hr>\n<p>And yes I remember our exchange about RC!  I remember reading your Carp blog posts and I liked them a lot.  I think what I got out of it was that Carp has a divide between compile-time and runtime unlike most Lisps?</p>\n<p>It's powerful/general at compile-time and efficient/restricted  at runtime?  I could be misremembering.  I am increasingly fond of this concept because I see it in Zig, Lua/Terra, etc.  I am hoping to do something like that with OPy.  (That is a long story that could be a separate thread :) )</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151143444,
            "is_me_message": false,
            "last_edit_timestamp": 1544217968,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544217922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh duh, the error was because the compiled mandelbrot program had a \"comment\" in it, which overlapped with your extensions.  I deleted it and now it runs fine :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151145503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544219920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>  are there comments in this code? because if there are, brainfuck and cspfuck are no longer compatible (because cspfuck enriches brainfuck by other instructions). if not, it\u2019d be super helpful if you could send me the brainfuck source code for me to debug!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544226944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes that was my last comment :)  realized that late</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544226975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>see 1:58 message</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544226983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh whoops</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544226994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i just read the first comment because of the mention and then caught up! sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah this got me thinking about \"what is the minimal concurrent language?\"  since BF is supposed to be a minimal Turing machine</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>but I am not sure I like bf because it requires compilers to write nontrivial programs.  I was thinking Forth is a better minimal language.  it's easy to implement and you can write programs in it by hand</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yeah, this is a super interesting concept (and i think csp tried to answer it), but i think cspfuck is a good minimal encapsulation of the actor model. of course there are other models that would be fun to reduce as well (shared memory sounds hard to reduce and still make usable)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then I thought about concurrent forth which reminded me of the greenarrays thing :)  I didn't do anything but watch the talk</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh bf is quite terrible! but it definitely is minimal :D</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i wanted to implement a small distributed smalltalk VM if i find the time (this is one of the medium/big todos on my list)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried to find some minimal forth interpreters, but they are usually written in assembly language!  they are an alternative to  C, rather than being on top of C like nearly every other language</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yeah, <span class=\"user-mention\" data-user-id=\"100791\">@Saul Pwanson (SP2'17)</span> ran a forth implementation course while i was in batch that was a super interesting experience for  a lot of people because they implemented a forth compiler in assembly and that transformed their thinking a lot</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>anyway, its about 1am where i currently am, so i\u2019ll go to bed! but let\u2019s definitely have a chat about everything and anything at some point!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah OK no problem.  yeah I was trying to think of things to run on your VM.  I know there is a popular prime sieve program for CSP, like a hello world.  but I don't think that fits in the model.</p>\n<p>anyway we can talk about it later :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>totally! if you find any more cool or weird problems in the VM do tell me!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151151514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "CSP bf",
            "submessages": [],
            "timestamp": 1544227461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>TIL you can go <code>1 &lt; x &lt; 5</code> in python, so I tried <code>a == b == 0</code> (where <code>a = b = 0</code>). In C, this doesn't work \"correctly\" because (I expect, not having looked at the parser) <code>a == b = 1 != 0</code>, so I was conditioned to not expect it to work. But it did :) I can see <code>==</code> is just a special case of the behavior you would use to implement <code>&lt;</code>, but it's cool to learn they're all fancier and more ergonomic than I expected.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151207943,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22621,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1544331542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Nice! I've been wanting to add <code>a &lt; b &lt; c</code> syntax in leema but it's hard to get the parsing to work. That's cool that python can do it. I'll have to try to see if I can find how python does the parsing.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151496480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1544579664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Hey folks, I just released a pretty straightforward compiler that might be interesting to people here: <a href=\"https://medium.com/@paulbiggar/philip2-an-elm-to-reasonml-compiler-a210aaa6cd04\" target=\"_blank\" title=\"https://medium.com/@paulbiggar/philip2-an-elm-to-reasonml-compiler-a210aaa6cd04\">https://medium.com/@paulbiggar/philip2-an-elm-to-reasonml-compiler-a210aaa6cd04</a>. It \"parses\" by reading JSON from elm-format, then \"codegens\" using the OCaml pretty-printer. So all that's left is the AST transformation.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 154252397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Simple compiler",
            "submessages": [],
            "timestamp": 1546535833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>This was a light nerd snipe for me, the exact answer is here: <a href=\"https://docs.python.org/3/reference/expressions.html#comparisons\" target=\"_blank\" title=\"https://docs.python.org/3/reference/expressions.html#comparisons\">https://docs.python.org/3/reference/expressions.html#comparisons</a></p>\n<div class=\"codehilite\"><pre><span></span>comparison    ::=  or_expr (comp_operator or_expr)*\ncomp_operator ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;==&quot; | &quot;&gt;=&quot; | &quot;&lt;=&quot; | &quot;!=&quot;\n                   | &quot;is&quot; [&quot;not&quot;] | [&quot;not&quot;] &quot;in&quot;\n</pre></div>\n\n\n<p>In code, this is implemented in <a href=\"https://github.com/python/cpython/blob/master/Parser/Python.asdl\" target=\"_blank\" title=\"https://github.com/python/cpython/blob/master/Parser/Python.asdl\">Python.adsl</a> which is converted automatically into parser code. More specifically, these lines:</p>\n<div class=\"codehilite\"><pre><span></span>    expr = BoolOp(boolop op, expr* values)\n         [...]\n         -- need sequences for compare to distinguish between\n         -- x &lt; 4 &lt; 3 and (x &lt; 4) &lt; 3\n         | Compare(expr left, cmpop* ops, expr* comparators)\n</pre></div>\n\n\n<p>If you look at the parse tree and/or the AST, what ends up being generated is a single \"Compare\"  node with two parallel lists, one of which is the operands, and the other is the comparison operators. There is also a \"left\" operand to kickstart the comparison chain.</p>\n<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; import ast\n&gt;&gt;&gt; ast.dump(ast.parse(&quot;x &lt;= y &lt; z == w&quot;))\n&quot;Module(body=[Expr(value=Compare(left=Name(id=&#39;x&#39;, ctx=Load()), ops=[LtE(), Lt(), Eq()], comparators=[Name(id=&#39;y&#39;, ctx=Load()), Name(id=&#39;z&#39;, ctx=Load()), Name(id=&#39;w&#39;, ctx=Load())]))])&quot;\n&gt;&gt;&gt;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157364338,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549037921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>This is interesting, thanks! I've been thinking of how to implement this for leema but haven't figured out how to parse it yet.<br>\nWhat do you think of allowing arbitrary comparisons and arbitrary numbers of comparisons where <code>x &lt; y &gt; z</code> is legal? In contrast to having some limitations like:</p>\n<ul>\n<li>operators all have to point the same direction (or all be == or something)</li>\n<li>allowing max 4 (or even 3) operands</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157475833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549214105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/60ad8feea8094a0a855dac429748135184293d81?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think a number of choices are reasonable there.  Restricting the maximum number of operands seems a bit unfortunate, but both allowing all comparisons and restricting comparisons so they must all be in the same direction seem fine to me.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157664273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ddf1991@gmail.com",
            "sender_full_name": "Day Fisher (they/she) (W2'19)",
            "sender_id": 198445,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549427202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/60ad8feea8094a0a855dac429748135184293d81?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I don't think you need to specifically disallow something difficult to understand like <code>a &lt; b &lt; c &gt; d &lt; e</code>.  That expression is confusing, and if it e.g. came up in code review I'd probably suggest it be written differently, but I don't think it necessarily needs to be banned by the language definition.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157664360,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ddf1991@gmail.com",
            "sender_full_name": "Day Fisher (they/she) (W2'19)",
            "sender_id": 198445,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549427337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/60ad8feea8094a0a855dac429748135184293d81?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think for me it would come down to where leema was on the permissiveness vs enforced clarity/consistency spectrum.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157664511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ddf1991@gmail.com",
            "sender_full_name": "Day Fisher (they/she) (W2'19)",
            "sender_id": 198445,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549427545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>The expression should be legal to parse, at the very least. (You can forbid it in a further type / semantics checking pass)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157721588,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2696",
                    "emoji_name": "justice",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "a == b == 0",
            "submessages": [],
            "timestamp": 1549483831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>I've been rewriting the parser and semantic analysis in <a href=\"https://github.com/mdg/leema\" target=\"_blank\" title=\"https://github.com/mdg/leema\">Leema</a> and I'm mostly done. The next step is to make the corresponding changes in the code generation and probably then upgrade the VM interpreter b/c it's pretty slow. I'm wondering if I should just take this opportunity to switch to LLVM.</p>\n<p>I've considered this before, but each time I start looking at the docs I get overwhelmed by how much there is to read and understand. I'm struggling to jump the gap between a basic hello world example and creating something that would actually be useful for my project. I wonder if anyone who has made this jump can point me to resources that they found helpful.</p>\n<p>Or is this even a good idea? If understanding and switching to LLVM is going to take a really long time, sticking with the interpreter might be a better option for me right now.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172929479,
            "is_me_message": false,
            "last_edit_timestamp": 1565452490,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "actually using llvm?",
            "submessages": [],
            "timestamp": 1565452029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27de1e4796502970d91435bdb9f420aa?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't find good, up-to-date LLVM bindings for Rust when I looked a few months ago. So what I did was read the <a href=\"https://llvm.org/docs/LangRef.html\" target=\"_blank\" title=\"https://llvm.org/docs/LangRef.html\">LLVM Language Specification</a>, and then just output programs in that language (also known as the <em>LLVM Intermediate Representation</em>) directly. Really, you only need to read the first third of the spec, the rest revolves around fine details. I actually found that process quite enjoyable.</p>\n<p>This was for a tiny toy language, though, I don't know how much effort would be required to build a frontend for a real language! :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172932893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sebastian@morr.cc",
            "sender_full_name": "blinry (they) (SP2'19)",
            "sender_id": 215296,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "actually using llvm?",
            "submessages": [],
            "timestamp": 1565458437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"215296\">@Sebastian (blinry) Morr (they) (SP2'19)</span>, that's a very helpful tip. Were you compiling to a binary or JIT?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172977848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "actually using llvm?",
            "submessages": [],
            "timestamp": 1565546855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27de1e4796502970d91435bdb9f420aa?d=identicon&version=1",
            "client": "website",
            "content": "<p>Mostly to binaries, but if I remember correctly, LLVM's JIT engine (<code>lli</code>) worked flawlessly on the programs written in the IR! Performance was worse, though.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172984188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sebastian@morr.cc",
            "sender_full_name": "blinry (they) (SP2'19)",
            "sender_id": 215296,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "actually using llvm?",
            "submessages": [],
            "timestamp": 1565558884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215296\">@Sebastian (blinry) Morr (they) (SP2'19)</span> this is just the kind of experience I was hoping to hear about, thank you so much! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 172996367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "actually using llvm?",
            "submessages": [],
            "timestamp": 1565582830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Context: I\u2019ve been working through two books by Thorsten Ball, \u201cBuilding an Interpreter in Go\u201d and \u201cBuilding a Compiler in Go\u201d. The illustrations in the series have been very helpful but overall I wish there were more. </p>\n<p>I\u2019d love to create more visualizations / animations of these processes to help others better understand the subject. I have some initial ideas but want to get a survey of what already exists.</p>\n<p>Has anyone here come across good visualizations of interpreters and/or compilers for pedagogical purposes? I\u2019d love to hear about them / see em.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175167399,
            "is_me_message": false,
            "last_edit_timestamp": 1567952184,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567915012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100814\">@Nicole Orchard (SP2'17)</span> made this a while ago: <a href=\"https://nicoleorchard.com/blog/compilers\" target=\"_blank\" title=\"https://nicoleorchard.com/blog/compilers\">https://nicoleorchard.com/blog/compilers</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175167450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567915087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Thanks V! I\u2019ll check it out.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175167462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567915158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's also this <a href=\"https://projectultimatum.org/cgi-bin/lambda\" target=\"_blank\" title=\"https://projectultimatum.org/cgi-bin/lambda\">interactive reducer for the lambda calculus</a> that has had a fair bit of effort put into visualising each step nicely, the github repo for that is <a href=\"https://github.com/ninegua/reduxer\" target=\"_blank\" title=\"https://github.com/ninegua/reduxer\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175167530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567915280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>This visualization is great - I\u2019ll mess around with it more tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175167847,
            "is_me_message": false,
            "last_edit_timestamp": 1567952230,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567915948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure what level of detail of diagram you're looking for, but <a href=\"https://www.aosabook.org/en/ghc.html\" target=\"_blank\" title=\"https://www.aosabook.org/en/ghc.html\">this</a> is a really nice high-level overview of how GHC works and they've got a nice flowchart under \"Compiling Haskell Code\"</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175188475,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "evanercolano@gmail.com",
                        "full_name": "Evan Ercolano (he) (F1'19)",
                        "id": 234255
                    },
                    "user_id": 234255
                }
            ],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567956181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>My favorite non-helpful compiler diagram is <a href=\"https://gitlab.haskell.org/ghc/ghc/wikis/type-checker\" target=\"_blank\" title=\"https://gitlab.haskell.org/ghc/ghc/wikis/type-checker\">this</a> diagram on the GHC wiki explaining how the typechecker works... Illuminating.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175188617,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sory.rawyer@gmail.com",
                        "full_name": "Rory Sawyer (he) (SP2'18)",
                        "id": 111920
                    },
                    "user_id": 111920
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lindsey@composition.al",
                        "full_name": "Lindsey Kuper (she)",
                        "id": 2170
                    },
                    "user_id": 2170
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "evanercolano@gmail.com",
                        "full_name": "Evan Ercolano (he) (F1'19)",
                        "id": 234255
                    },
                    "user_id": 234255
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567956380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> The interactive lambda viewer is really cool!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175188697,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567956496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9502\">@Annie Cherkaev (she) (m4'18)</span> that typechecker diagram just says it all, doesn't it</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175188860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567956791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p><span aria-label=\"tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"tears\">:tears:</span> That type checker picture is amazing!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175202258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1567981397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234255\">@Evan Ercolano (he) (F1'19)</span> I also just saw this tool / website, <a href=\"https://cppinsights.io/\" target=\"_blank\" title=\"https://cppinsights.io/\">cppinsights</a> that looks like it shows you a high-level but desugared version of cpp code. It's not exactly a compiler visualization but kind of related-- in this vein of compilation visualization there's also the wonderful <a href=\"https://godbolt.org/\" target=\"_blank\" title=\"https://godbolt.org/\">godbolt compiler explorer</a> that does excellent and sometimes slightly incorrect highlighting to associate source level lines with assembly output.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175831679,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f329",
                    "emoji_name": "lightning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f329",
                    "emoji_name": "lightning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f329",
                    "emoji_name": "lightning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "evanercolano@gmail.com",
                        "full_name": "Evan Ercolano (he) (F1'19)",
                        "id": 234255
                    },
                    "user_id": 234255
                }
            ],
            "recipient_id": 22621,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1568653614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f40a7b8ecee48e051585750f7572f4b338cbc0a0?x=x&version=3",
            "client": "website",
            "content": "<p>Woah, Godbolt is super cool. Thanks for sharing this <span class=\"user-mention\" data-user-id=\"9502\">@Annie Cherkaev (she) (m4'18)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175834660,
            "is_me_message": false,
            "last_edit_timestamp": 1568656042,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "evanercolano@gmail.com",
            "sender_full_name": "Evan Ercolano (he) (F1'19)",
            "sender_id": 234255,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Existing visualizations of interpreters and compilers?",
            "submessages": [],
            "timestamp": 1568655711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9e7e344d63b503011913719ec6f54eaaad225c24?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>hi! i'm new to this stream, and have been building a bottom-up parser to determine the \"topology\" of nested patterns (strings) in the context of a (software-based) doesn't-exist-yet musical step sequencer<br>\n=&gt; would love to talk IRL (and here on zulip too!) with peeps about theoretical strategies and concerns of compilers if you're around RC this week(/end)! <br>\n=&gt; hmu here or in PMs</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189151885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ashlaeblume@gmail.com",
            "sender_full_name": "ashlae blume (they) (W2'20)",
            "sender_id": 257126,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "hi! bottom-up parser, &.c!?",
            "submessages": [],
            "timestamp": 1582746658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>I've been working on a <a href=\"http://github.com/jaseemabid/inc\" target=\"_blank\" title=\"http://github.com/jaseemabid/inc\">toy scheme compiler</a> for a while and it's starting to feel very lonely working on something alone in the evenings and weekends. I'm missing someone else I could bounce back ideas with.</p>\n<p><em>Is anyone be interested in working together on a tiny scheme -&gt; assembly compiler written in Rust?</em></p>\n<p>In the spirit of RC it is a completely useless project but I learned so much about low level systems by hacking on this. The code in the current form is quite readable with loads of docs and tests. I hope it won't be hard for someone new to join the project and make sense out of it now.</p>\n<p>Realistically it's going to take some time to learn enough about all the moving parts and be productive. I'm looking for someone who can commit to working on this for a few hours every week for at least the next couple of months. I'd be more than happy to pair on this and show how it works.</p>\n<p><em>What is in it for you?</em> I think this would be a good opportunity to learn C, Rust, Assembly, GDB, Scheme, some nuances about how hardware works, debugging gnarly generated code, understanding what compilers can and cannot do easily etc. Most importantly, it's going to be fun!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189818633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Looking for a project buddy to work on a scheme compiler!",
            "submessages": [],
            "timestamp": 1583430833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36716766e555f85a2c18cf8f358d6f63ccc077d9?x=x&version=2",
            "client": "website",
            "content": "<p>this looks really cool <span class=\"user-mention\" data-user-id=\"101128\">@Jaseem Abid (he) (S1'17)</span> ! I don't think I could commit to a few hours/week of dev right now, but I'd certainly be interested in reading more about and following along for whatever that's worth</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191019057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "mattg@leema.org",
            "sender_full_name": "Matthew Graham (he) (F1'18)",
            "sender_id": 125276,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Looking for a project buddy to work on a scheme compiler!",
            "submessages": [],
            "timestamp": 1584554371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://c9x.me/compile/bib/\">https://c9x.me/compile/bib/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199016030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1590669514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a presentation that is useful (if not immediately applicable): <a href=\"https://www.youtube.com/watch?v=wSdV1M7n4gQ\">https://www.youtube.com/watch?v=wSdV1M7n4gQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wSdV1M7n4gQ\" href=\"https://www.youtube.com/watch?v=wSdV1M7n4gQ\"><img src=\"https://i.ytimg.com/vi/wSdV1M7n4gQ/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199016390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Incremental Compilation",
            "submessages": [],
            "timestamp": 1590669722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>This looks pretty interesting, they build a compiler for a small language in OCaml that compiles to a subset of LLVM: <a href=\"https://www.cs.princeton.edu/courses/archive/spring19/cos320/\">https://www.cs.princeton.edu/courses/archive/spring19/cos320/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199016813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "princeton compiling techniques course",
            "submessages": [],
            "timestamp": 1590669973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "website",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199101545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1590711668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>chris lattner on compiler tests <a href=\"https://www.youtube.com/watch?v=hUQKaTH9TMo&amp;t=6440\">https://www.youtube.com/watch?v=hUQKaTH9TMo&amp;t=6440</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"hUQKaTH9TMo\" href=\"https://www.youtube.com/watch?v=hUQKaTH9TMo&amp;t=6440\"><img src=\"https://i.ytimg.com/vi/hUQKaTH9TMo/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201432106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "front end/sample programs",
            "submessages": [],
            "timestamp": 1592595550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"100041\">Vaibhav Sagar (he) (F1'16)</span> <a href=\"#narrow/stream/20273-compilers/topic/princeton.20compiling.20techniques.20course/near/199016813\">said</a>:</p>\n<blockquote>\n<p>This looks pretty interesting, they build a compiler for a small language in OCaml that compiles to a subset of LLVM: <a href=\"https://www.cs.princeton.edu/courses/archive/spring19/cos320/\">https://www.cs.princeton.edu/courses/archive/spring19/cos320/</a></p>\n</blockquote>\n<p>Just took this class this spring! It's a wonderful class, learned a lot and Zak Kincaid is a wonderful teacher. Note that this isn't the most up-to-date course webpage, the spring '20 version (<a href=\"https://www.cs.princeton.edu/courses/archive/spring20/cos320/\">https://www.cs.princeton.edu/courses/archive/spring20/cos320/</a>) contains web demos of LL/LR parsing, dominator tree construction, and dataflow analyses.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202332830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "princeton compiling techniques course",
            "submessages": [],
            "timestamp": 1593447396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, thanks for linking the latest course page!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202345352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "princeton compiling techniques course",
            "submessages": [],
            "timestamp": 1593453000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"100041\">Vaibhav Sagar (he) (F1'16)</span> <a href=\"#narrow/stream/20273-compilers/topic/princeton.20compiling.20techniques.20course/near/202345352\">said</a>:</p>\n<blockquote>\n<p>Awesome, thanks for linking the latest course page!</p>\n</blockquote>\n<p>There is also a course at UPenn that follows roughly the same material: <a href=\"https://www.seas.upenn.edu/~cis341/current/\">https://www.seas.upenn.edu/~cis341/current/</a> but afaik their exams are more practical whereas our exams are more of theoretical nature. Also the Princeton version covers more details about static analysis such as abstract interpretation (I think).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202355623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "princeton compiling techniques course",
            "submessages": [],
            "timestamp": 1593458066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>I wish the course videos were available.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202630998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "princeton compiling techniques course",
            "submessages": [],
            "timestamp": 1593642334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>This looks really useful! Thanks for sharing. I spent a lot of time thinking about register allocation recently and I wish I found these earlier. Gonna read them all!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202633081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593643981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, nice -- that's a good list (and not just because I helped put it together :P)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202635223,
            "is_me_message": false,
            "last_edit_timestamp": 1593645944,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593645901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span>! Looks like <span class=\"user-mention\" data-user-id=\"100048\">@Paul Biggar (he) (F1'16)</span> wrote a chapter for the SSA book? What a tiny world!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202636763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593647292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was just around when the author of that page was putting it together -- there were a few things on there that I remember lobbying for, but I don't remember what.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202636789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593647348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>came out of his implementation of qbe (<a href=\"https://c9x.me/compile/\">https://c9x.me/compile/</a>), which is used in a few places, like <a href=\"https://git.sr.ht/~mcf/cproc\">https://git.sr.ht/~mcf/cproc</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202636859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593647411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(and a couple of others I'm aware of, but don't think they're ready for announcement)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202636872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593647426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>My one opinion about compiler books is that the Dragon book sucks as newbies text and I think folks should use the Cooper Torczon book instead</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202640465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593651210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I remember trying to use the cooper torczon book as a newbie, and I didn't find it good -- there were lots of key points that I either didn't feel were explained well, or were kind of left out from the high level overview (sorry, long enough ago that I don't remember specifics)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202645348,
            "is_me_message": false,
            "last_edit_timestamp": 1593658235,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593658036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I preferred the dragon book, but Appel's book was probably the best.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202645358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593658060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I second --- Appel's books are clear and concise, with many good examples! Though I couldn't help but feel both Appel and dragon book are a bit outdated, especially in terms of mid-end optimizations.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202646569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593659800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kind of -- for those, just go to the papers. Muchnik is ok as a kind of survey/agglomeration of papers that are worth looking at.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202646661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593659972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Never been a fan of the dragon  <span aria-label=\"dragon\" class=\"emoji emoji-1f409\" role=\"img\" title=\"dragon\">:dragon:</span> and I ordered Appel last night. I'm hoping to go through the book and 2 courses that use this book over the next few weeks. <a href=\"#narrow/stream/20273-compilers/topic/princeton.20compiling.20techniques.20course\">https://recurse.zulipchat.com/#narrow/stream/20273-compilers/topic/princeton.20compiling.20techniques.20course</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202737106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "resources for amateur compiler writers",
            "submessages": [],
            "timestamp": 1593719336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://queue.acm.org/detail.cfm?id=3372264\">https://queue.acm.org/detail.cfm?id=3372264</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203827419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Optimizations in C++ Compilers",
            "submessages": [],
            "timestamp": 1594730110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>It even includes a short section about <code>POPCNT</code>, my favourite CPU instruction!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203827439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Optimizations in C++ Compilers",
            "submessages": [],
            "timestamp": 1594730131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0789f8732b00c0952a58c7e4de8ae016e1bfbe20?x=x&version=2",
            "client": "website",
            "content": "<p>I was watching this video: <a href=\"https://www.youtube.com/watch?v=9mWWNYRHAIQ\">https://www.youtube.com/watch?v=9mWWNYRHAIQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9mWWNYRHAIQ\" href=\"https://www.youtube.com/watch?v=9mWWNYRHAIQ\"><img src=\"https://i.ytimg.com/vi/9mWWNYRHAIQ/default.jpg\"></a></div><p>I recreated the assembly output in godbolt with annotations: <a href=\"https://godbolt.org/z/8Kj6ja\">https://godbolt.org/z/8Kj6ja</a>.</p>\n<p>What's the most interesting part to me is that gcc interprets the ternary operator and if-then differently. At the 7:29 mark, Jason describes this discrepancy as the compiler having no visibility into the length of the string. I can't find any additional information of it online but is there a reason to why this behavior exists? The primary stackoverflow addressing this: <a href=\"https://stackoverflow.com/questions/4192225/prettiness-of-ternary-operator-vs-if-statement\">https://stackoverflow.com/questions/4192225/prettiness-of-ternary-operator-vs-if-statement</a> actually seems to contradict the compiler results (but I agree with the accepted answer).</p>\n<p>My intuition is that the compiler should be able to identify both literals in the ternary as const and apply compile time initialization of a the string constructor, without me explicitly identifying it as a string obj.</p>\n<p>I also see that as long as I as I set one literal as a string object, the compiler is able to optimize the whole ternary.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205395859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "neil.liu16@gmail.com",
            "sender_full_name": "Neil Liu (he) (SP2'20)",
            "sender_id": 276158,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ternary versus if-else in assembly generation",
            "submessages": [],
            "timestamp": 1596047589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>So I don't know that much about gcc/clang internals but generally in order for a compiler to do the intuitive optimization of <code>a = foo(b ? x, y)</code> to <code>a = b ? foo(x) : foo(y)</code> where x and y are constexpr, <code>a</code> is only constexpr if foo is pure, and I guess C++ optimizers don't calculate function purity?</p>\n<p>So how I'd explain the behavior is the same as Jason's: \"no visibility into length\". To be more precise: the type of <code>(b ? \"Hello\" : \"World3\")</code> is <code>const char const *</code> with no length info ... by comparison, compiler's type for <code>(b ? \"Hello\" : \"World\")</code> is <code>const char[6]</code> and the resulting output would get optimized correctly. There is no unified expression to type in the <code>if</code> example, so this isn't an issue there.</p>\n<p>The \"one literal as a string object\" makes it more like the if-else example. <code>(b ? string { \"foo\" } : \"bar\")</code> has type <code>string</code> and so an implicit cast is inserted around \"bar\", so it should have the same effect as <code>(b ? string {\"foo\"} : string {\"bar\"})</code></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205403303,
            "is_me_message": false,
            "last_edit_timestamp": 1596051505,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ternary versus if-else in assembly generation",
            "submessages": [],
            "timestamp": 1596051355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0789f8732b00c0952a58c7e4de8ae016e1bfbe20?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for the explanation!</p>\n<p>This part makes a lot of sense now:<br>\nFor <code>b ? \"Hello\" : \"World3\"</code>, is that the compiler sees a <code>const char const *</code> object, then applies the string constructor.<br>\nFor <code>b ?  String{\"Hello\"}: \"World3\"</code>, World3 is deduced to be a string type so the constructor is applied to a <code>const char[7]</code>.</p>\n<p>I also found that dealing with runtime variables, the code generation is also different and if-else appears to be much faster: <a href=\"https://godbolt.org/z/8d86az\">https://godbolt.org/z/8d86az</a></p>\n<p>In the ternary operator, there's a call to <code>basic_string</code> whereas the compiler figures out how to inline everything in the if-else. Clang also fails to optimize it in the ternary.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205417838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "neil.liu16@gmail.com",
            "sender_full_name": "Neil Liu (he) (SP2'20)",
            "sender_id": 276158,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Ternary versus if-else in assembly generation",
            "submessages": [],
            "timestamp": 1596059402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<p>Are there any good introductory readings on implementations of exception handling (especially for C++) in modern compilers (and also how the semantics is handled on the IR-level)?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206487328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597079992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#cxx-throw\">https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#cxx-throw</a> &lt;-- yes, most unix uses the itanium ABI for c++....</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206502539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597087594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>not sure about IR docs, though</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206502545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597087599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't looked, but I imagine the format of the unwind tables would be in the dwarf spec.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206502635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597087672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have this URL filed away to read carefully later: <a href=\"https://monoinfinito.wordpress.com/series/exception-handling-in-c/\">https://monoinfinito.wordpress.com/series/exception-handling-in-c/</a> whose incremental nature might be helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206522787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597100117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I guess that IR-wise, it really depends if you're doing interprocedural analysis or not, and if exceptions are used not just for \"exceptional conditions\" but general non-local control flow.  I _think_ a pretty common thing in simple compilers is that you have a call to \"throw\" that never returns, and don't do much else with that path.  I know there's some research on doing good control-flow analysis in the presence of exceptions, but I haven't read any of it, and you'll probably find as much as I will by searching <a href=\"http://scholar.google.com\">scholar.google.com</a> for stuff like \"exception control-flow analysis\".</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206523545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597100652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>e.g. it looks like the description of how exceptions are handled in <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.224.353&amp;rep=rep1&amp;type=pdf\">Escape Analysis for Java</a>, and other papers like that, would probably be helpful in figuring out a good IR approach</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206523741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597100847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101992\">@Julian Squires (he) (F2'17)</span> <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> Thanks for the info. I've also found the article <a href=\"https://www.stroustrup.com/except89.pdf\">\"exception handling for C++\"</a> by Koenig and Stroustrup an especially good read, especially the part on how C++ \"throws an object but catches a class.\" In LLVM's implementation of exception handling, this boils down to doing type table lookups to determine which EH blocks can catch the thrown exception (<a href=\"https://llvm.org/docs/ExceptionHandling.html#exception-handling-intrinsics\">https://llvm.org/docs/ExceptionHandling.html#exception-handling-intrinsics</a>).</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206531237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Exception handling question",
            "submessages": [],
            "timestamp": 1597107967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Meeting this Friday (Aug 14 2020)  for chapter 1 of Engineering a Compiler</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206860101,
            "is_me_message": false,
            "last_edit_timestamp": 1597347521,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597347435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Chapter 2 meeting (scanning)  is on Tuesday Aug 18</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206952867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597424852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Living notes: <a href=\"https://github.com/recursecenter/wiki/wiki/Engineering-a-Compiler-study-group-notes\">https://github.com/recursecenter/wiki/wiki/Engineering-a-Compiler-study-group-notes</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206954048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597425517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I forgot how complex DFAs, NFAs, and e-closures get <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207183921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597690934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>A good definition i found of an \u03f5-closure is: The \u03f5-closure function takes a state and returns the set of states reachable from it based on (one or more) $\\varepsilon$-transitions. Note that this will always include the state itself. We should be able to get from a state to any state in its \u03f5-closure without consuming any input.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207184448,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "anthonyabeo@gmail.com",
                        "full_name": "Anthony Anabila Abeo (he) (SP2'20)",
                        "id": 276302
                    },
                    "user_id": 276302
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597691166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Re the question about Sigma vs. 2, I just read that bit of the book and agree that the Sigma is a mistake.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207194843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597696813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"328929\">@Roujia Wen (she) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (S2'20)</span> <span class=\"user-mention\" data-user-id=\"327456\">@Ezzeri Esa (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"314694\">@Jon Shao (he) (S2'20)</span> subscribing all folks that have RSVP'd for today's session.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207257135,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597756319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>We have a room overlap with the Zig Workshop today. Where should we meet instead? Or should we move our meeting to a different time?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282101,
            "is_me_message": false,
            "last_edit_timestamp": 1597768233,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh no we do</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Turing looks free</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://zoom.us/j/603851730\">https://zoom.us/j/603851730</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Alternatively if folks wanted to attend the Zig one, we can postpone</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>sorry it looks like we were moved to Djikstra - <span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> sorry about the confusion!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207282678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597768536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>RegExp machine course: <a href=\"https://dmitrysoshnikov.teachable.com/courses/\">https://dmitrysoshnikov.teachable.com/courses/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207284918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597769745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p>Sorry I had to drop because of internet troubles.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207285857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597770168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, that's too bad. Hope to see you next week!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207289709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597771927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Chapter 3 for Friday <span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207289989,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "15891",
                    "emoji_name": "thank-you",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597772058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also, if you want to post any exercise stuff for chapter 2 that would be awesome too. I think those are the only things we decided at the end.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207290059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597772101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confused about Ch 2, Ex 10: \"Show that the set of regular languages is closed under intersection.\" What does it mean to take the intersection of two regular languages? Is it the set of strings accepted by both languages?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207291541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597772862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ch 2, Ex 9a seems tricky.</p>\n<blockquote>\n<p>In some cases, two states connected by an \u03f5-move can be combined.<br>\na. Under what set of conditions can two states connected by an \u03f5-move be combined?<br>\n...</p>\n</blockquote>\n<p>I first guessed that that s1 and s2 can be combined exactly when:</p>\n<p>they behave identically for outgoing transitions, that is:</p>\n<p>(1) s1 and s2 have identical outgoing transitions for characters in the alphabet and (2) any state reachable via \u03f5-moves from s1 must likewise be reachable from s2 (except for s1 itself), that is:</p>\n<p>Let (S, \u03a3, \u03b4, s_0, S_A) be a nondeterministic finite automata.<br>\nLet s1 and s2 be connected by an \u03f5-move, that is, s2 \u2208 \u03b4(s1, \u03f5).<br>\n(1) for all c \u2208 \u03a3, \u03b4(s1, c) = \u03b4(s1, c) (as sets), and<br>\n(2) \u03f5-closure({s1}) \\ {s1} = \u03f5-closure({s2})</p>\n<p>But then, I feel like condition (1) should be relaxed in the case that there are other states that can be made equivalent. But then it feels like this turns into a \"global\" (?) problem and becomes much harder</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207295449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597774812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>For Ch 2 Ex 10, under the definition I guessed, I suppose it can be done by converting the REs to DFAs, constructing a \"product\" DFA that simulates both DFAs the same time, accepting a string exactly when both DFAs accept it, then converting back into a RE</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207295862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597775001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think for ch2ex10 it refers to the intersection of both <del>strings</del> sets, so S1 ^ S2, the overlap of <del>strings</del> sets. Not sure how to approach that though</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207296637,
            "is_me_message": false,
            "last_edit_timestamp": 1597775816,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597775378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not familiar with the overlap operator for strings -- what does it do?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207297390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597775711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>sorry, I was typing and eating - I meant sets <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207297530,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597775787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Given your assumptions, the NFA simulation makes sense - i need to try this out on paper</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207297617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597775844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ch 2 Ex 15:</p>\n<div class=\"codehilite\"><pre><span></span><code>15.\nTo reduce the size of the transition table, the scanner generator can use\na character classification scheme. Generating the classifier table,\nhowever, seems expensive. The obvious algorithm would require\nO(|\u03a3|^2 \u00b7 |states|) time. Derive an asymptotically faster algorithm for\nfinding identical columns in the transition table.\n</code></pre></div>\n\n\n<p>Using a trie to compare the state transitions for characters takes O(|\u03a3| \u00b7 |states|) time? And maybe that's a lower bound, since we have to examine the entire input (every combination of character and state) to be sure?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207298327,
            "is_me_message": false,
            "last_edit_timestamp": 1597776646,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597776188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Right off the bat in chapter 2 it explains why RE cannot handle parentheses lol</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207349491,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597789577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>If anyone wants videos on parsing algorithms, this is a WIP youtube <a href=\"https://www.youtube.com/playlist?list=PLGNbPb3dQJ_6aPNnlBvXGyNMlDtNTqN5I\">https://www.youtube.com/playlist?list=PLGNbPb3dQJ_6aPNnlBvXGyNMlDtNTqN5I</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207416679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597848204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>In the regexp article linked before, the struct state, why is there out &amp; out1 as inner recursive fields? Does this only allow for 2 seperate paths to be checked at once? I'm confused if there was situation like aaabbb | aaabbc | aaabbd</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207420528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597849969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>regex article: <a href=\"https://swtch.com/~rsc/regexp/regexp1.html\">https://swtch.com/~rsc/regexp/regexp1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207420561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597849989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> each '|' turns into a <code>struct state</code> instance with the <code>out</code> and <code>out1</code> linked to the NFAs built for the regex arguments to the '|'. So your example turns into one choice of paths at the top, but one of those paths is also a choice of two, for three choices altogether.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207432744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597855920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"902\">@Darius Bacon (W1'16)</span> ahhhh okay, so if it splits down like a tree almost?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207435501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597857242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>In the regexp article linked before, the struct state, why is there out &amp; out1 as inner recursive fields? Does this only allow for 2 seperate paths to be checked at once? I'm confused if there was situation like aaabbb | aaabbc | aaabbd</p>\n</blockquote>\n<p>a | b |c == a | (b | c)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207438594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597858789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, yeah -- it splits into a tree.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207438621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597858800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> Awesome, thanks. After reading the article, its quite surprising to see that not all regex matchers use this approach.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207441104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1597860094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll be a few minutes late today.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207649485,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598024550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Random cool article on a compiler optimization: <a href=\"https://pankajraghav.com/2020/08/16/RVO.html\">https://pankajraghav.com/2020/08/16/RVO.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207674193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598037939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's kinda wild how much more digestible this chapter is than chapter 3</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207881652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598295087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>or at least - I find the discussion of types conceptually to be easier to hold in in my head than the parsing algorithm math</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207881690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598295111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>OMG yes</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598297730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also, I think I'm just more interested in how type systems work generally</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886668,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598297742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Lectures 3-6 here: <a href=\"https://www.cs.rpi.edu/~milanova/csci4430_old/\">https://www.cs.rpi.edu/~milanova/csci4430_old/</a> really help me understand LL &amp; LR parsers much clearer. There is some good examples on the \"dot\" expansion for LR(1) parsers.</p>\n<p><em>Disclaimer</em> These are from a class I took in college so I might be biased</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207960805,
            "is_me_message": false,
            "last_edit_timestamp": 1598361332,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598361305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>In today's session, we decided that for the Friday session we would read to the end of Chapter 4, and also independently attempt some exercises from Chapter 3 to discuss as group</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207992216,
            "is_me_message": false,
            "last_edit_timestamp": 1598375990,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598375855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I took a look at the exercises, and the ones I like are:<br>\n4, 5: practice with the definition of LL(1) (we did 4 in the session)<br>\n9, 10: practice with the definition of LR(1)<br>\n12: an example of a grammar that is LR(1) but not LL(1)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207992411,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598375940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will try to tackle q5 and 9 at the least today</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207992705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598376068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>regarding \"what is a lookahead\"</p>\n<p>pg 97) The main portion of the parser consists of a loop that focuses on the left- most unmatched symbol on the partially-built parse tree\u2019s lower fringe. If the focus symbol is a nonterminal, it expands the parse tree downward; it chooses a production, builds the corresponding part of the parse tree, and moves the focus to the leftmost symbol on this new portion of the fringe. If the focus symbol is a terminal, it compares the focus against the next word in the input. A match moves both the focus to the next symbol on the fringe and advances the input stream.</p>\n<p>pg 103) For this grammar, the parser can avoid backtracking with a simple modification. When the parser goes to select the next rule, it can consider both the focus symbol and the next input symbol, called the lookahead symbol. Using a one symbol lookahead, the parser can disambiguate all of the choices that arise in parsing the right-recursive expression grammar. Thus, we say that the grammar is backtrack free with a lookahead of one symbol. A backtrack-free grammar is also called a predictive grammar.</p>\n<p>So the way I understand this is given</p>\n<p>E -&gt; bE<br>\n    |   bT</p>\n<p>Focus is b, the lookahead is E or T</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207995461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598377248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/yRxvlDG-1dovb2yPAKsNqrkN/Screenshot-2020-08-25-at-13.43.09.png\">Screenshot-2020-08-25-at-13.43.09.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/yRxvlDG-1dovb2yPAKsNqrkN/Screenshot-2020-08-25-at-13.43.09.png\" title=\"Screenshot-2020-08-25-at-13.43.09.png\"><img src=\"/user_uploads/13/yRxvlDG-1dovb2yPAKsNqrkN/Screenshot-2020-08-25-at-13.43.09.png\"></a></div><p>but then maybe I'm wrong</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207995904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598377406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>okay I now declare I'm wrong :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207996042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598377452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've worked on Q5 for what must be at least an hour, but I still can't rewrite the grammar into LL(1) form</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208044033,
            "is_me_message": false,
            "last_edit_timestamp": 1598406469,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598405101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I finally got it!! <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code>-- Original grammar\n\nA \u2192 B a\nB \u2192 dab\n  | C b\nC \u2192 c B\n  | A c\n\n-- Inline A into C\n\nA \u2192 B a\nB \u2192 dab\n  | C b\nC \u2192 c B\n  | B ac\n\n-- Inline B and C into _each other_ (left-recursive path only)\n\nA \u2192 B a\nB \u2192 dab\n  | c B b\n  | B acb\nC \u2192 c B\n  | dabac\n  | C bac\n\n-- Eliminate left recursion in B\n\nA \u2192 B a\nB \u2192 dab B_1\n  | c B b B_1\nB_1 \u2192 acb B_1\n    | epsilon\nC \u2192 c B\n  | dabac\n  | C bac\n\n-- Eliminate left recursion in C\n\nA \u2192 B a\nB \u2192 dab B_1\n  | c B b B_1\nB_1 \u2192 acb B_1\n    | epsilon\nC \u2192 c B C_1\n  | dabac C_1\nC_1 \u2192 bac C_1\n    | epsilon\n\n-- It is DONE!!\n</code></pre></div>\n\n\n</div></div>\n\n<p>Looking back at my mountain of failed attempts, I was too eager with my inlining -- I inlined more than I needed to. I think I could have avoided all this by closely following the algorithms in the book.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208044918,
            "is_me_message": false,
            "last_edit_timestamp": 1598406361,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598406251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>My guess for Exercise 9</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code>(a)\n\n[ Goal \u2192 \u2022ClockNoise, EOF ]\n[ Goal \u2192 ClockNoise\u2022, EOF ]\n\n[ ClockNoise \u2192 \u2022tick tock, EOF ]\n[ ClockNoise \u2192 tick\u2022tock, EOF ]\n[ ClockNoise \u2192 tick tock\u2022, EOF ]\n\n[ ClockNoise \u2192 \u2022ClockNoise tick tock, EOF ]\n[ ClockNoise \u2192 ClockNoise \u2022tick tock, EOF ]\n[ ClockNoise \u2192 ClockNoise tick\u2022tock, EOF ]\n[ ClockNoise \u2192 ClockNoise tick tock\u2022, EOF ]\n\n[ ClockNoise \u2192 \u2022tick tock, tick ]\n[ ClockNoise \u2192 tick\u2022tock, tick ]\n[ ClockNoise \u2192 tick tock\u2022, tick ]\n\n[ ClockNoise \u2192 \u2022ClockNoise tick tock, tick ]\n[ ClockNoise \u2192 ClockNoise \u2022tick tock, tick ]\n[ ClockNoise \u2192 ClockNoise tick\u2022tock, tick ]\n[ ClockNoise \u2192 ClockNoise tick tock\u2022, tick ]\n\n(b)\n\n{EOF}, {tick}\n\n(c)\n\n-- state 0: initial\n\n[ Goal \u2192 \u2022ClockNoise, EOF ]\n[ ClockNoise \u2192 \u2022tick tock, EOF ]\n[ ClockNoise \u2192 \u2022ClockNoise tick tock, EOF ]\n[ ClockNoise \u2192 \u2022tick tock, tick ]\n[ ClockNoise \u2192 \u2022ClockNoise tick tock, tick ]\n\n-- state 1: read &#39;tick&#39; from state 0\n\n[ ClockNoise \u2192 tick\u2022tock, EOF ]\n[ ClockNoise \u2192 tick\u2022tock, tick ]\n\n-- state 2: read &#39;tock&#39; from state 1\n\n[ ClockNoise \u2192 tick tock\u2022, EOF ]\n[ ClockNoise \u2192 tick tock\u2022, tick ]\n\n-- state 3: read &#39;ClockNoise&#39; from state 0\n\n[ Goal \u2192 ClockNoise\u2022, EOF ]\n[ ClockNoise \u2192 ClockNoise\u2022 tick tock, EOF ]\n[ ClockNoise \u2192 ClockNoise\u2022 tick tock, tick ]\n\n-- state 4: read &#39;tick&#39; from state 3\n\n[ ClockNoise \u2192 ClockNoise tick\u2022tock, EOF ]\n[ ClockNoise \u2192 ClockNoise tick\u2022tock, tick ]\n\n-- state 5: read &#39;tock&#39; from state 4\n\n[ ClockNoise \u2192 ClockNoise tick tock\u2022, EOF ]\n[ ClockNoise \u2192 ClockNoise tick tock\u2022, tick ]\n\n(d)\n\nr0: Goal \u2192 ClockNoise\nr1: ClockNoise \u2192 ClockNoise tick tock\nr2:            | tick tock\n\nstate|eof|tick|tock| ClockNoise\n-----|---|----|----|------------\n  0  |   | s1 |    | 3\n  1  |   |    | s2 |\n  2  |r2 | r2 |    |\n  3  |acc| s4 |    |\n  4  |   |    | s5 |\n  5  |r1 | r1 |    |\n</code></pre></div>\n\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208047202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598409032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now that I look more closely at exercise 10, it looks like too much work, especially since the grammar just reduces to</p>\n<div class=\"codehilite\"><pre><span></span><code>S \u2192 bca\n  | bcfa\n</code></pre></div>\n\n\n<p>I don't want to do this one.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208047319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598409212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm going to attempt the problems either tomorrow or the next day. I'll share when I complete them too.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208048190,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22621,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598410389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>My work for Exercise 12</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code>Start \u2192 A\n      | B\nA \u2192 ( A )\n  | a\nB \u2192 ( B &gt;\n  | b\n\nConstructing the canonical collection of sets of LR(1) items:\n\n-- State 0: initial\n\n[ Start \u2192 \u2022A, EOF ]\n[ Start \u2192 \u2022a, EOF ]\n[ Start \u2192 \u2022(A), EOF ]\n[ Start \u2192 \u2022B, EOF ]\n[ Start \u2192 \u2022b, EOF ]\n[ Start \u2192 \u2022(B&gt;, EOF ]\n\n-- State 1: read &#39;a&#39; from state 0\n\n[ Start \u2192 a\u2022, EOF ]\n\n-- State 2: read &#39;b&#39; from state 0\n\n[ Start \u2192 b\u2022, EOF ]\n\n-- State 3: read A from state 0\n\n[ Start \u2192 A\u2022, EOF ]\n\n-- State 4: read B from state 0\n\n[ Start \u2192 B\u2022, EOF ]\n\n-- State 5: read &#39;(&#39; from state 0\n\n[ Start \u2192 (\u2022A), EOF ]\n[ A \u2192 \u2022a, ) ]\n[ A \u2192 \u2022(A), ) ]\n[ Start \u2192 (\u2022B&gt;, EOF ]\n[ B \u2192 \u2022b, &gt; ]\n[ B \u2192 \u2022(B&gt;, &gt; ]\n\n-- State 6: read A from state 5\n\n[ Start \u2192 (A\u2022), EOF ]\n\n-- State 7: read &#39;)&#39; from state 6\n\n[ Start \u2192 (A)\u2022, EOF ]\n\n-- State 8: read B from state 5\n\n[ Start \u2192 (B\u2022&gt;, EOF ]\n\n-- State 9: read &#39;&gt;&#39; from state 8\n\n[ Start \u2192 (B&gt;\u2022, EOF ]\n\n-- State 10: read &#39;a&#39; from state 5\n\n[ A \u2192 a\u2022, ) ]\n\n-- State 11: read &#39;b&#39; from state 5\n\n[ B \u2192 b\u2022, &gt; ]\n\n-- State 12: read &#39;(&#39; from state 5\n\n[ A \u2192 (\u2022A), ) ]\n[ A \u2192 \u2022a, ) ]\n[ A \u2192 \u2022(A), ) ]\n[ B \u2192 (\u2022B&gt;, &gt; ]\n[ B \u2192 \u2022b, &gt; ]\n[ B \u2192 \u2022(B&gt;, &gt; ]\n\n-- Now take steps from state 12 analogous to those taken from state 5.\n-- We get analogues of states 6, 7, 8, and 9 but with &#39;EOF&#39; replaced by &#39;)&#39; or &#39;&gt;&#39;. From these we can take no further steps.\n-- We get states 10 and 11 by reading &#39;a&#39; and &#39;b&#39;.\n-- We get state 12 by reading &#39;(&#39;.\n-- There are no further states. (So we have 16 total)\n\n-- There don&#39;t appear to be any conflicts in the state transitions or reductions.\n-- The only possibilities for such conflicts occur at states with multiple LR(1) items,\n-- and ... well, I don&#39;t see any (I do not want to write out the tables).\n-- If there aren&#39;t any, this shows that the grammar is LR(1).\n\n\nP.S. Also, I don&#39;t see why we need the angle bracket in this example.\n\nIt seems to me that the following grammar is also in LR(1)\\LL(1)\nsince replacing all &#39;&gt;&#39;s with &#39;)&#39;s\n(1) is an injective function between the LR(1) items of the two grammars, and\n(2) introduces no conficts for state transitions or reductions in the previous work.\n\nStart \u2192 A\n      | B\nA \u2192 ( A )\n  | a\nB \u2192 ( B )\n  | b\n</code></pre></div>\n\n\n</div></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208050204,
            "is_me_message": false,
            "last_edit_timestamp": 1598413313,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598413264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>had some hectic interviews.. will be back to join you guys on Friday <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208208017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598530490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Interesting passage on page 175: An alternate view of structures, definitely worth reading if you (like myself) will skip the extra passages</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208231197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598541376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm going to miss today to take care of some other stuff - can someone let me know where the group gets up to / what we want to read by Tuesday?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208354503,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                }
            ],
            "recipient_id": 22621,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598627265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll be missing too. Decided to give a talk at presentations and want to finish up the slides.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208361752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598630479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It was only me &amp; Roujia in the meeting so we decided to skip &amp; just meet Tuesday. Would we like to keep the same reading and discuss it on Tuesday? That'll give people time to catch up + do problems</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208362962,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598631027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>That sounds good with me!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208364367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598631763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry I couldn't make it today, my ISP was/is having outages</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208367698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1598633436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I won't be able to make today's meeting, but if we decide to read next chapter for tuesday just lmk!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209111113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599235088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is anyone else planning on joining today? Currently me &amp; alex are in the zoom</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209408627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599581384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Daniel and I are planning to meet again today at 4pm ET in Hopper to discuss sections 5.4 and 5.5</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209412903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599583404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Review exercise #2 of section 5.4 (SSA form, phi-functions) in LLVM IR</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@fib</span><span class=\"p\">(</span><span class=\"k\">i32</span> <span class=\"nv\">%n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nl\">entry:</span>\n    <span class=\"nv\">%enterLoop</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">sgt</span> <span class=\"k\">i32</span> <span class=\"nv\">%n</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n    <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv\">%enterLoop</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%loop</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%funcReturn</span>\n\n  <span class=\"nl\">loop:</span>\n    <span class=\"nv\">%f0</span> <span class=\"p\">=</span> <span class=\"k\">phi</span> <span class=\"k\">i32</span> <span class=\"p\">[</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">%entry</span> <span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"nv\">%f0Next</span><span class=\"p\">,</span> <span class=\"nv\">%loop</span> <span class=\"p\">]</span>\n    <span class=\"nv\">%f1</span> <span class=\"p\">=</span> <span class=\"k\">phi</span> <span class=\"k\">i32</span> <span class=\"p\">[</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">%entry</span> <span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"nv\">%f1Next</span><span class=\"p\">,</span> <span class=\"nv\">%loop</span> <span class=\"p\">]</span>\n    <span class=\"nv\">%itersLeft</span> <span class=\"p\">=</span> <span class=\"k\">phi</span> <span class=\"k\">i32</span> <span class=\"p\">[</span> <span class=\"nv\">%n</span><span class=\"p\">,</span> <span class=\"nv\">%entry</span> <span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"nv\">%itersLeftNext</span><span class=\"p\">,</span> <span class=\"nv\">%loop</span> <span class=\"p\">]</span>\n\n    <span class=\"nv\">%f0Next</span> <span class=\"p\">=</span> <span class=\"k\">add</span> <span class=\"k\">i32</span> <span class=\"nv\">%f1</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n    <span class=\"nv\">%f1Next</span> <span class=\"p\">=</span> <span class=\"k\">add</span> <span class=\"k\">i32</span> <span class=\"nv\">%f0</span><span class=\"p\">,</span> <span class=\"nv\">%f1</span>\n\n    <span class=\"nv\">%itersLeftNext</span> <span class=\"p\">=</span> <span class=\"k\">sub</span> <span class=\"k\">i32</span> <span class=\"nv\">%itersLeft</span><span class=\"p\">,</span> <span class=\"m\">1</span>\n    <span class=\"nv\">%loopAgain</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">sgt</span> <span class=\"k\">i32</span> <span class=\"nv\">%itersLeftNext</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n    <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv\">%loopAgain</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%loop</span><span class=\"p\">,</span> <span class=\"k\">label</span> <span class=\"nv\">%funcReturn</span>\n\n  <span class=\"nl\">funcReturn:</span>\n    <span class=\"nv\">%returnVal</span> <span class=\"p\">=</span> <span class=\"k\">phi</span> <span class=\"k\">i32</span> <span class=\"p\">[</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">%entry</span> <span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"nv\">%f0Next</span><span class=\"p\">,</span> <span class=\"nv\">%loop</span> <span class=\"p\">]</span>\n    <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"nv\">%returnVal</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>We found that this was helpful for understanding the book's description of phi-functions.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209442402,
            "is_me_message": false,
            "last_edit_timestamp": 1599598295,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599598133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I should also drop these two links here: <a href=\"https://c9x.me/compile/\">https://c9x.me/compile/</a>, <a href=\"https://c9x.me/compile/bib/\">https://c9x.me/compile/bib/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209457880,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599609132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(put together by a friend)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209457884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1599609139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Interesting article: <a href=\"https://rust-analyzer.github.io/blog/2020/09/16/challeging-LR-parsing.html\">https://rust-analyzer.github.io/blog/2020/09/16/challeging-LR-parsing.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210287141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1600273835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342838\">@Paul Peng (he) (F2'20)</span> <a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211279598,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul1peng@gmail.com",
                        "full_name": "Paul Peng (he) (F2'20)",
                        "id": 342838
                    },
                    "user_id": 342838
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601050662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Found this for another option: <a href=\"https://www.stephendiehl.com/llvm/\">https://www.stephendiehl.com/llvm/</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211379951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601150158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is the best link for installing LLVM on Mac OS?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211616051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601384060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am planning to work through <a href=\"https://www.stephendiehl.com/llvm/\">www.stephendiehl.com/llvm</a> that Daniel mentioned above.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211644386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601395993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>Hello!<br>\nSo why use an AST, in compilers?<br>\nMy 'why' is more historically-speaking-theoretical-reasoning than practical purposes, since the practical purposes are quite clear for me at the moment - or so I like to believe.</p>\n<p>The longform questions:</p>\n<ul>\n<li>are there other data structures we could use instead of ASTs ? If so, is there a finite, or at least countable number of them?</li>\n<li>if yes to previous, then why AST and not another one ?</li>\n<li>are there potentially esoteric but also serious languages that have a semantic analysis phase but no AST ? which ones?</li>\n</ul>\n<p>I am still researching these questions, but so far I have yet to find the answer I am looking for... I agree that this is not the most obvious way to learn ASTs... what I am aiming for is a better understanding of the theory? Does this make sense?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211646541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601396878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>My response is gonna focus more on PL stuff in general than compiler stuff specifically, since I think this is about PLs in general.</p>\n<p>Using ASTs separates issues around parsing a language from issues around type-checking and running a language. In my experience, it's much easier to implement the latter two on a tree than a stream.</p>\n<p>From a theoretical perspective, ASTs give us a more \"true\" view of what a programming language looks like than a string of characters, much like how diagramming a sentence in a natural language gives us a \"truer\" view of how the grammar of that sentence's language constructs that sentence. For example: I could express a factorial program with a JS-like syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>function fact(n) {\n  switch (n) {\n    case 0: return 1;\n    default: return n * fact(n - 1);\n  }\n}\n</code></pre></div>\n\n\n<p>Or a Lisp-like syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>(define (fact n)\n  (cond\n    ((= n 0) 0)\n    (else (* n (fact (- n 1))))))\n</code></pre></div>\n\n\n<p>Or a Haskell-like syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>fact n = case n of\n    0 -&gt; 1\n    _ -&gt; n * fact (n - 1)\n</code></pre></div>\n\n\n<p>But these can all be viewed as different skins around the same skeleton, that skeleton being the program's representation as an AST. Issues of \"curly braces vs. intent blocks\", \"semicolons vs. newlines\", etc. are separate from issues of how we understand the behavior of a program, and ASTs realize that separation.</p>\n<p>Re: data structures we could use instead of ASTs. ASTs, as I understand them, are not a specific data structure but instead an abstract data type, much like vectors or priority queues, the can be implemented using a variety of different data structures. We could implement ASTs with a conventional tree data structure, or we could find a way that embeds that tree structure in a 1D array, and so on.</p>\n<p>I'd guess there's a countably infinite number of AST implementations since there's a countably infinite number of programs in general, and there's always a way of making a more complex implementation of an abstract data type from a simpler one.</p>\n<p>Putting it that way, we use trees to implement ASTs since that's the most straightforward way to do so. There's probably some way to formalize that notion of \"most straightforward\" using category theory or some other super abstract field of math, but I think intuition works fine for the scope of this response. (This answer, of course, skirts around languages that can't be represented with an AST, which I'm getting to in the next paragraph.)</p>\n<p>Re: langauges without ASTs. I believe there's a Perl program out there that evaluates to two different values depending on if a certain sub-expression halts or loops forever. This means that Perl can't be computationally parsed into an AST since doing so would solve the famously incomputable Halting problem. As a result, Perl's structure cannot be expressed as an AST. I believe folks just mash parsing and execution into the same step for Perl when reasoning about it, but I'm also not a Perl programmer, let alone a designer of the language, so I can't say for sure.</p>\n<p>I hope this response was helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211655861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601400715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>If you're interested in understanding ASTs rigorously, the first chapter of Robert Harper's <a href=\"https://www.cs.cmu.edu/~rwh/pfpl/2nded.pdf\">Practical Foundations for Programming Languages</a> has an almost unnecessarily detailed breakdown of how ASTs exist and operate as mathematical objects, and also goes over issues of how variables work in ASTs. It goes into way more math than I think one needs to get an intuitive understanding of ASTs, but if you're looking for a deep dive into the form of ASTs it's a solid read.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211656336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601400912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>My 'why' is more historically-speaking-theoretical-reasoning than practical purposes, since the practical purposes are quite clear for me at the moment - or so I like to believe.</p>\n</blockquote>\n<p>More or less, it seems like an obviously good idea, and if you've looked at grammars at all, it tends to pop out at you when you write down a formal grammar.</p>\n<p>Note that an AST isn't a specific data structure, and it's often used very loosely -- it's just \"write down the way the bits of your grammar relate\", so there are a wide variety of approaches to ASTs, different things you can shove into them, etc. Lots of them tend not to even strictly be trees -- either DAGs with common subexpressions eliminated, or even full on graphs with loops, if you have a function node that resolves the symbol and replaces it with the function node.</p>\n<blockquote>\n<p>are there other data structures we could use instead of ASTs ? If so, is there a finite, or at least countable number of them?</p>\n</blockquote>\n<p>You can transform directly into an intermediate representation or to compiled code, while materializing only small fragments of structure as needed. If you look back far enough in history, computers were tight enough on memory that this mattered, and a few hundreds of kilobtytes of AST was simply too expensive to keep around. The venerable Crenshaw tutorial follows this approach, as far as I remember:</p>\n<p><a href=\"https://compilers.iecc.com/crenshaw/\">https://compilers.iecc.com/crenshaw/</a></p>\n<p>There are also other representations that people tend to transform code into <em>from</em> the AST, like SSA or control flow graphs.</p>\n<blockquote>\n<p>if yes to previous, then why AST and not another one ?</p>\n</blockquote>\n<p>Because having an AST lets you do reasonable semantic analysis.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211657557,
            "is_me_message": false,
            "last_edit_timestamp": 1601401774,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601401493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>For the study group I'm leaning towards <a href=\"https://www.stephendiehl.com/llvm/\">www.stephendiehl.com/llvm/</a>. Crafting Interpreters has you build your own back-end, which is super cool but also outside of our concerns at the moment. Making an LLVM front-end seems more fitting for where we're at now <em>and</em> that particular tutorial seems like great practice for putting Haskell's abstraction tools to real-world use.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211679425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601411169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I'll just be observing so don't change choices/consideration on what to work on based on what I'm writing. I just find it a bit odd that Crafting Interpreters is framed as the back end since lox executes end-to-end i.e. starts with source code, ends up with execution</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211682224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601412579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not framing Crafting Interpreters as a back-end-focused tutorial as much as I'm saying that, because it's end-to-end, it entails building a back-end at some point. I think the current vibe of the group is that we want to focus on front-end stuff for now, and I think the LLVM tutorials fulfill that focus. Of course, if we want a more comprehensive view of compilers, Crafting Interpreters would probably be the better choice.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211683406,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601413211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello all! I'm trying to set things up so as to study <a href=\"https://www.stephendiehl.com/llvm/\">Stephen Diehl's Implementing a JIT Compiled Language</a> with Haskell and LLVM.</p>\n<p>Has anyone succeeded in (1) the brew install llvm-hs/homebrew-llvm/llvm-4.0 step followed by (2) stack build? I'm on the latest Mac OS. The first step fails. I have succeeded with brew install llvm-hs/llvm/llvm-9, but then there are failures with stack build ... and so on.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211684037,
            "is_me_message": false,
            "last_edit_timestamp": 1601414121,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601413504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Paul, I just noticed that you mentioned Stephen Diehl's \"book.\" Have you gotten it to build?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211684605,
            "is_me_message": false,
            "last_edit_timestamp": 1601413955,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601413789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>Tangentially: I am not sure of one important part of the argument that there are a countable number of programs... The part I am not sure about is that every program is finite. Is it impossible to write a program that updates itself ? This is a real question I have, although we are leaving the AST part of it aside.</p>\n<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> : thank you for linking to the Crenshaw tutorial, I had yet to see this and it speaks to me!</p>\n<p><span class=\"user-mention\" data-user-id=\"342838\">@Paul Peng (he) (F2'20)</span> thanks for the book! I will look into it.</p>\n<p>I feel I am still looking at this from the wrong perspective - I still feel like ASTs are mostly a pratical answer to a concrete problem, instead of being theoretically motivated? - hope that reading &amp; thinking &amp; coding will help!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211688220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601415614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>I feel I am still looking at this from the wrong perspective - I still feel like ASTs are mostly a pratical answer to a concrete problem, instead of being theoretically motivated?</p>\n</blockquote>\n<p>yeah, they're a solution to the problem of \"I typed some code, but it's full of all of these characters that don't actually matter to the meaning of the program, like comments and spaces and list separators, so what if I could drop them to make the rest of the work easier?\"</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>grammars naturally form tree-oid structures, and naturally have a lot of extraneous cruft if you map each bit of text to some data structure.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, an AST is just taking the structure of the grammar, and shoving it into something convenient to work with.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and because of the recursive structure of most grammars, that \"something convenient\" usually turns out to be a tree.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>ther's no real deep meaning or theory to the structure, because it's really just a fuzzy concept for \"I parsed the thing and kept the bits that were useful for analysis\"</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's not even really a structure.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's really a term used for any sort of linked, vaguely tree-like structure describing the essential bits of parsed source</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211689756,
            "is_me_message": false,
            "last_edit_timestamp": 1601416757,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601416500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>forth is a pretty neat example of a programming language with no AST - the fact that it's stack based and uses RPN allows it to compile token-by-token as it's parsing, with no need for lookback or lookahead.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211690677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601417005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>doesn't really have semantic analysis to speak of, though</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211690814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601417058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>nor is there really any parsing, for that matter</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211690988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601417165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>I have not worked on installing the software yet. I'll let you know what happens when I do!</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211698633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601422880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>Re: ASTs as a theory-motivated: IMO they are what a programming language \"really is\" behind the concrete text. When I'm designing and implementing a programming language, I start with the AST, and I usually don't deal with what the language looks like as text until after I've specified and even implemented the typechecker and interpreter. I'd argue that this approach implies that ASTs aren't a representation of a programming language but instead the inherent structure of the programming language itself (as a mathematical object).</p>\n<p>(This is, of course, my personal approach. I imagine most other folks start with the text representation of a programming language when designing/implementing them.)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211699299,
            "is_me_message": false,
            "last_edit_timestamp": 1601423404,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601423376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"341049\">@Edith Viau (she) (F2'20)</span>  a couple of thoughts on these questions.  </p>\n<ul>\n<li>\n<p>First, about countability.  A program consists of a finite set of symbols in some alphabet, which is a finite set (of at least two elements). Whether the alphabet has two or more than two elements does not affect the conclusions.  So a program is, in particular, a string in a finite alphabet.  The set of such strings is countable, that is, can be listed.  Here is a listing of the strings in the alphabet {0, 1}: 0, 1, 00, 01, 10, 11, ... .  Among the set of all strings in a given alphabet, there will be a subset which are valid programs in a given language L.  A subset of a countable set is countable, and so the set of all programs in L is countable.</p>\n</li>\n<li>\n<p>Your point about self-modifying programs is interesting.  I'll have to give it some thought.  But at any given step, the program tex is finite, as is its initial state.  And if it halts, its final state.</p>\n</li>\n<li>\n<p>Second, about AST's.  Let's look at something really simple, like the language of arithmetic expressions.  To us, an expression like (1 + 2) x (3 + 4) looks like a linear list of symbols.  But it has an internal structure, and this is what is expressed by the AST.  The AST may be, for example </p>\n</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>    Mul (Add (Num 1) (Num 2)) (Add (Num 3) (Num 4))\n</code></pre></div>\n\n\n<p>While this new expression can also be read \"linearly\" from left to right, It in fact defines a tree with the symbol <code>Mul</code> as its root.  Once the source text is transformed into an AST (and so its grammatical structures has been discovered), it is possible to do many things with it.  There is, for example, a function</p>\n<div class=\"codehilite\"><pre><span></span><code>     eval : AST -&gt; Integers\n</code></pre></div>\n\n\n<p>such that eval applied to the AST above  returns  the integer 21.  Or we could have a function</p>\n<div class=\"codehilite\"><pre><span></span><code>    compile : AST -&gt; Programs\n</code></pre></div>\n\n\n<p>where the programs are for a simple stack machine.  In the case at hand, compile applied to the AST produces the program</p>\n<div class=\"codehilite\"><pre><span></span><code>   Push 1,  Push 2, Add, Push 3, Push 4, Add, Mul\n</code></pre></div>\n\n\n<p>Reading this program from left to right,  we execute operations on the stack eventually leaving the stack with just a single element, 21.</p>\n<p>It is quite true that some languages, such as machine code, have no structure and therefore need no AST that has to be computed before the code can be run.  BTW, one of the insights of Chomsky, as I understand it, is that these tree-like structures underly human languages as well.  We humans seem to be able to do this kind of sophisticated analysis unconsciously, in parallel with all the other things we do.  Pretty amazing.</p>\n<p>See figure below.  My traversal of the tree is not very good, but you get the idea</p>\n<p><a href=\"/user_uploads/13/BqDRx1na32-G4WjXLmOQcsPm/IMG_2081.jpg\">IMG_2081.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/BqDRx1na32-G4WjXLmOQcsPm/IMG_2081.jpg\" title=\"IMG_2081.jpg\"><img src=\"/user_uploads/13/BqDRx1na32-G4WjXLmOQcsPm/IMG_2081.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211699920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601423821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>Thank you for your input. I feel like continuing the tangent on \"is the number of programs countable?\" a bit more...</p>\n<p>So I am probably wrong in thinking this but I want to see the end of the argument for myself....</p>\n<p>Let's say I write the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>def infinite_program():\n    print_in_a_file(&#39;x = 0&#39;)\n    while True:\n        print_in_a_file(&#39;x = x + 1&#39;)\n</code></pre></div>\n\n\n<p>Now the program printed by this program is infinite ? Although... it gives use all natural numbers... </p>\n<p>I guess the real question I have is: what is a (valid) program ? Does a program needs to halt to be considered a program, e.g. ? <br>\nWhat tells us that the cantor diagonal cannot be applied to programs ?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211701631,
            "is_me_message": false,
            "last_edit_timestamp": 1601425568,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601425184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>The cantor diagonal applies to strings of infinite length. If you try to apply it to strings of finite length, at some point the diagonal will run out of characters to flip. </p>\n<p>If you allow programs of infinite length, then the set of programs is uncountable.</p>\n<p>Also, a program of infinite length could solve the halting problem for all programs of finite length. Whether it could also solve the halting problem for all programs of infinite length is an interesting question - can you adapt the halting problem proof to make a self-referential infinite program? Is it possible to make an infinite quine?</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211724031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601450779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Would anyone like to have a short meeting today on what we'd like to pair on for this Friday? Paul has mentioned that he is interested in Stephen Diehl's LLVM guide, and Alex has mentioned an idea of building a c front end from scratch. Maybe we can combine these ideas somehow.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211757123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601471757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>If we have enough folks to have separate pairs for each tutorial that would be ideal. It does look like the only major difference between the two LLVM tutorials is choice of language (C vs. Haskell). I'm currently in more of a Haskell groove so I'd prefer the Diehl tutorial.</p>\n<p>What might happen is that the group will pair on the C-based tutorial with me shadowing, and I (and maybe a few others) would work on the Diehl tutorial on our own time.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211769304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601476624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think we are still all in consensus for writing it in Haskell. I think the suggestion was to write a C compiler front end in haskell. The tutorial Diehl wrote is for a language called kaleidoscope.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211773656,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 22621,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601478348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, I see! I'd prefer kaleidoscope since it's a simpler language.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211778496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601480065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>So ! I slept on this and I am feeling pretty sure that the Cantor diagonal argument cannot be applied here - because we are not in an interval.</p>\n<p>I think that the trick of Cantor is two parts: flipping bits, and building a number between [0,1] (adjust the parenthesis to fit your system of notation as needed). And the second part is missing here ? Does this make sense ?</p>\n<p>Although reading Wikpedia (which might not be the source we want), it is said that the set of all infinite sequences of natural numbers is uncountable - my question is: is a sequence of programs a program ?</p>\n<p><span class=\"user-mention\" data-user-id=\"863\">@Jamie Brandon (W2'15)</span> Oh I like the concept of quine! thanks for this - the question of a self-referential infinite program is interesting...</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211778552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601480102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>There's a notion of \"rational infinite trees\" which can be used to express programs. They're not 'really' infinite since you have to work with a finite representation, and I never looked into this enough to say if it's worth digging into, but here's a post talking about it: <a href=\"https://compilers.iecc.com/comparch/article/95-09-015\">https://compilers.iecc.com/comparch/article/95-09-015</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211787498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601483821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're intersted in exploring down that path, you can apply Godel numbering to programs too: <a href=\"https://en.wikipedia.org/wiki/G%C3%B6del_numbering\">https://en.wikipedia.org/wiki/G%C3%B6del_numbering</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211789972,
            "is_me_message": false,
            "last_edit_timestamp": 1601485688,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601485020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://blog.theincredibleholk.org/TarpitGazer/jot-visualization.pdf\">http://blog.theincredibleholk.org/TarpitGazer/jot-visualization.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211790046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601485055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be up for a short meeting today</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211792704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601486286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>From what I remember from my undergrad, this book was pretty good: <a href=\"https://www.amazon.com/dp/1848824335\">https://www.amazon.com/dp/1848824335</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211792714,
            "is_me_message": false,
            "last_edit_timestamp": 1601486500,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601486291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also ran into trouble building the Kaleidoscope repo. The code uses an old version of GHC, and my setup has trouble using older versions. I wonder if it's feasible to slowly rewrite the codebase using current versions of libraries/GHC as we go through it</p>\n<p>Edit: Nevermind, I should be able to get it to work</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211793099,
            "is_me_message": false,
            "last_edit_timestamp": 1601487622,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601486472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>This one seems to be the standard: <a href=\"https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X\">https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211793238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601486540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/636bcca5cd43d9ec96286f8e8235647745313ba8?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span>, what steps did you take to get it to work? I'm using a newer version of GHC and LLVM, so I'm pretty sure I'm going to have trouble with the code as-is as well.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211795832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "paul1peng@gmail.com",
            "sender_full_name": "Paul Peng (he) (F2'20)",
            "sender_id": 342838,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601487757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh I haven't solved anything yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> In the worst case I'm just planning on working within a VM -- someone in the Haskell stream said it worked for them on linux.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211796144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601487904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can use earlier versions of GHC by changing the <code>resolver: lts</code> entry in <code>stack.yaml</code>. For example, I have</p>\n<div class=\"codehilite\"><pre><span></span><code>resolver: lts-13.27\nresolver: lts-12.26\n</code></pre></div>\n\n\n<p>Here is one map from <code>lts</code> to <code>gch</code> version (from <a href=\"https://www.stackage.org/\">https://www.stackage.org/</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code>LTS 16.16 for ghc-8.8.4, published 4 days ago\nLTS 16.11 for ghc-8.8.3, published a month ago\nLTS 15.3 for ghc-8.8.2, published 7 months ago\nLTS 14.27 for ghc-8.6.5, published 8 months ago\nLTS 13.19 for ghc-8.6.4, published a year ago\nLTS 13.11 for ghc-8.6.3, published a year ago\nLTS 12.26 for ghc-8.4.4, published a year ago\nLTS 12.14 for ghc-8.4.3, published a year ago\nLTS 11.22 for ghc-8.2.2, published 2 years ago\nLTS 9.21 for ghc-8.0.2, published 3 years ago\nLTS 7.24 for ghc-8.0.1, published 3 years ago\nLTS 6.35 for ghc-7.10.3, published 3 years ago\nLTS 3.22 for ghc-7.10.2, published 5 years ago\nLTS 2.22 for ghc-7.8.4, published 5 years ago\nLTS 0.7 for ghc-7.8.3, published 6 years ago\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211800406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601490101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm really hoping to get Diehl's project set up. Looks really nice.  </p>\n<p>Some reasons for preferring Haskell as a compiler-writing language</p>\n<ul>\n<li>I'm studying FP and need to conserve energy and focus</li>\n<li>\n<p>More to the point, it seems to be a very good tool for this in light of some substantial projects where the compiler is written in Haskell:</p>\n<ul>\n<li>Elm</li>\n<li>Futhark</li>\n<li>Lamdera</li>\n<li>Pandoc</li>\n</ul>\n</li>\n</ul>\n<p>I am sure there are plenty more, and would love to know about them.  I am going to ping Stephen Diehl and see if I can get us some help/info.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211801047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601490419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found the below on the <a href=\"https://github.com/sdiehl/kaleidoscope/issues/19\">github repo for smdiehl's code</a> -- look at bottom of page.</p>\n<div class=\"codehilite\"><pre><span></span><code>brew tap homebrew/versions\nbrew install llvm35\nbrew install libffi  # the version provided in OS X El Cap is too outdated\ncabal sandbox init\ncabal configure  # or cabal configure --flags=tutorial, see README.md\nalias llvm-config=&#39;llvm-config-3.5&#39;  # see comment by @ayberkt\ncabal install llvm-general-3.5.1.2 --extra-lib-dirs /usr/local/opt/libffi/lib/  # more recent 3.5.*.* versions might work too\ncabal install --only-dependencies\n</code></pre></div>\n\n\n<p>I am going to try this (with stack ... )</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211802558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601491154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh crap! </p>\n<div class=\"codehilite\"><pre><span></span><code>$ brew tap homebrew/versions\nUpdating Homebrew...\nError: homebrew/versions was deprecated. This tap is now empty and all its contents were either deleted or migrated.\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211805416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601492552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing that we (or a subset thereof) might try is to fix the build process for <a href=\"https://www.stephendiehl.com/llvm/\">Stephen Diehl's JIT Compiler project</a>.  I have made a small start in this <a href=\"https://github.com/jxxcarlson/kaleidoscope-forked\">fork of his repo</a>.</p>\n<p>To see what I've done so far, you can look at the commit messages or the more detailed <code>LOG.md</code>.  Briefly, here is the progress and status.</p>\n<ul>\n<li>Use more modern llvm-hs: <code> brew install llvm-hs/llvm/llvm-9</code>, then modify <code>stack.yaml</code> accordingly. After this change, <code>stack build</code> gave sensible error messages:  problems with a type out of scope (IEEE), etc. in <code>Chapter4/Codegen.hs</code></li>\n<li>Addressed the error messages in <code>chapter4/Codegen.hs</code>, adding <code>bytestring</code> as a build  dependency in <code>kaleidoscope.cabal</code>.  Then added <code>import Data.ByteString.Builder</code> to <code>chapter4/Codegen.hs</code>.  This suppressed the chapter4 errors but revealed the same errors in chapter3.  I applied the same treatment to chapter3, but was unable to suppress the errors.  This is where the project now stands.</li>\n</ul>\n<p>I'd be happy to pair with someone on this -- best with someone more experienced in Haskell than am I.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211865079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601522078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>A possibly better approach. I found <a href=\"https://github.com/llvm-hs/llvm-hs-kaleidoscope\">llvm-hs-kaleidoscope</a> on Github.  It has only three files but they are much more recent than anything else I've looked at. One of the files is <code>Codegen.hs</code>. I replaced the content the chapter 3 and 4  <code>Codegen.hs</code> files by the content of the 'new\" \u00b4Codegen.hs, then inserted  <code>bytestring</code> version <code>&gt;= 0.10.8.2</code> in the build-depends section of kaleidoscope.cabal.  Errors in both chapter 3 and 4 Codgen.hs were suppressed, but there are new errors in <code>chapter3/Emit.hs</code>. </p>\n<p>Fixing things is likely to require a good deal of error-chasing.  It may be that most or all of the problems have to do with the LLVM interface.</p>\n<p>The code is in the <a href=\"https://github.com/jxxcarlson/kaleidoscope-forked/tree/IEEE\">IEEE branch of the repo</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211872684,
            "is_me_message": false,
            "last_edit_timestamp": 1601545205,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601533005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got the attached encouraging message re building the project on Linux.  I am in the process of installing Parallels on mac so that I can run Linux and test this for myself.</p>\n<hr>\n<p>Tobin Yehle (he) (SP1'20): I have set this up on linux, and remember needing only the llvm binaries, not any haskell bindings from my package manager</p>\n<p>Tobin Yehle (he) (SP1'20): I got all the HS stuff from stack</p>\n<p>Tobin Yehle (he) (SP1'20): Though idk if that is true on osx, but I feel like it would be</p>\n<p>Tobin Yehle (he) (SP1'20): Yep confirmed it works with llvm-9-dev and just stack using lts-16.0. If you want to post what sorts of errors you are getting I can try to make sense of them</p>\n<p>Tobin Yehle (he) (SP1'20): confirmed it works on my linux box that is :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211921158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Engineering a Compiler study group",
            "submessages": [],
            "timestamp": 1601563492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>For those interested, yet another C compiler: <a href=\"https://github.com/rui314/chibicc\">https://github.com/rui314/chibicc</a></p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211939372,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1601570943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Self hosting frontend, backend, code gen.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211939543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1601571004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1588fc084a150438206141abca2a434daa4c8fa5?x=x&version=2",
            "client": "website",
            "content": "<p>thank you for these references !! also Godel numbering really helps. :)</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211972902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "finartcialist@gmail.com",
            "sender_full_name": "Edith Viau (she) (F2'20)",
            "sender_id": 341049,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "Why an AST?",
            "submessages": [],
            "timestamp": 1601585449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I wanted to do exactly this (a book structured around Ghuloum, showing a C compiler incrementally).  That's one more item removed from my backlog I guess.  8cc is pretty rad, too.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212069788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1601643213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>re the compiler group meeting today.  Any chance that we could start at 1 pm?  I'm also in the math thinking group, which meets 12-1pm.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212070724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1601643667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't see a zoom link for the compiler stud y group</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212445115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1601998298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be absent today .. see you on Friday.</p>",
            "content_type": "text/html",
            "display_recipient": "compilers",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213930646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22621,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 20273,
            "subject": "chibicc",
            "submessages": [],
            "timestamp": 1603205557,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
