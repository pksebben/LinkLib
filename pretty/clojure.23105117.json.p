{
    "anchor": 23105117,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(the 1 second saved in loading the page is lost in the 7 seconds it takes to compile)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23104965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Cool. I seem to remember EvilTrout of Discourse doing something to make serving JS in rails in a dev environment. I'm not sure if it made it into rails yet, going to take a look.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Dave, I also had to set jvm opts to prevent an out of memory error last night. Not too sure what is up with that but </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>does discourse use CLJS?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>huh</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Sorry -- talking about two things.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(in general, the CLJS story with rails is pretty sucky)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Discourse uses Javascript but I think they've done some work with rails to make serving JS a bit faster in development mode. I need to look into it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, interesting</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'd like to see it if you find it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>In a totally unrelated issue, I've had some trouble getting up and running with the project and one thing I had to do was set jvm-opts in the <code>project.clj</code> file to allocate memory to the jvm. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23105243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402497855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Some scoping bug?</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"kd\">deftype </span><span class=\"nv\">Range</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">z</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"p\">(</span><span class=\"nf\">cljs.core/range</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\">;; cljs.core/Range</span>\n<span class=\"p\">(</span><span class=\"nf\">.-x</span> <span class=\"p\">(</span><span class=\"nf\">cljs.core/range</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\">;; 0</span>\n<span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"p\">(</span><span class=\"nf\">cljs.core/range</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\">;; error, not ISeqable</span>\n</pre></div>\n\n\n<p>It looks like instead of foo.Range the generated js contains cljs.core.Range</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23133812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402531177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>We're stuck at 0.0-2156 at the moment </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23133843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402531205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span>, I think that I went down the wrong path. It looks like what is causing the slow loading is the closure compiler requiring all of the separate files. <a href=\"https://github.com/rails/rails/issues/10291\" target=\"_blank\" title=\"https://github.com/rails/rails/issues/10291\">Here</a> is the issue I remember hearing about and I guess the one upside is that you all aren't serving 375 files yet? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23141711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "community",
            "submessages": [],
            "timestamp": 1402543826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> single segment namespaces are buggy. Can you repro if you use a multi-segment ns?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23162894,
            "is_me_message": false,
            "last_edit_timestamp": 1402585894,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402585673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>there's a page that describes where the old clojure contrib modules have all been moved to<br>\n<a href=\"http://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go\" target=\"_blank\" title=\"http://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go\">http://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go</a><br>\ni'm looking to use <code>map-utils</code> which has nothing under its bulletpoint ... do i assume that means it's still accessed using:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">your-namespace</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"nv\">clojure.contrib.map-utils</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23176366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402600525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\">@Patrick Redmond (W'14)</span> old contrib is deprecated - best not to use it at all.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23177616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402601825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> does that mean <code>map-utils</code> and consequently useful things like <code>safe-get</code> and <code>safe-get-in</code> are gone?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23179213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402603523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i'll fall back on prismatic's plumbing library</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23179310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402603636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://github.com/prismatic/plumbing\" target=\"_blank\" title=\"https://github.com/prismatic/plumbing\">https://github.com/prismatic/plumbing</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23179312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402603641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>since i need to start learning it anyway! :D</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23179321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure contrib depreciation",
            "submessages": [],
            "timestamp": 1402603649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, we originally hit it in aurora.btree</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23227570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402683858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23227579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402683866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> cannot repro at the REPL need a lot more info.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23227710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402683989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <a href=\"https://github.com/jamii/range-bug/blob/master/out/range/core.js\" target=\"_blank\" title=\"https://github.com/jamii/range-bug/blob/master/out/range/core.js\">https://github.com/jamii/range-bug/blob/master/out/range/core.js</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23228803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> from <a href=\"https://github.com/jamii/range-bug/blob/master/out/range/core.cljs\" target=\"_blank\" title=\"https://github.com/jamii/range-bug/blob/master/out/range/core.cljs\">https://github.com/jamii/range-bug/blob/master/out/range/core.cljs</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23228849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> completely devoid of explanation or context. What am I supposed to be looking at? :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23228912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>(ns range.core)\n(deftype Range [x y z])\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>produces</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"nx\">cljs</span><span class=\"p\">.</span><span class=\"nx\">core</span><span class=\"p\">.</span><span class=\"nx\">Range</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"nx\">y</span><span class=\"p\">,</span><span class=\"nx\">z</span><span class=\"p\">){</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"nx\">z</span><span class=\"p\">;</span>\n<span class=\"p\">})</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which is in the wrong ns</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> you cannot just define Range like that you should have gotten a warning about overriding but this is probably an edgecase and we only do that for functions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>you need an (:refer-clojure :exclude [Range]) for that to be valid</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>That confuses me - defining a deftype that matches something in scope overrides it instead of shadowing it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> no it's definitely a bug, but there should have been a warning you can't just redef core defs w/o getting a warning</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>sorry, you are right there is a bug. But there are several things going wrong at once.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I get </p>\n<div class=\"codehilite\"><pre>WARNING: -&gt;Range already refers to: /-&gt;Range being replaced by: range.core/-&gt;Range at line 3 src/range/core.cljs\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which is what I would expect even if this was safee</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> and do you get the same output if you exclude Range?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>No, it works correctly</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry about the poor initial report, btw. This is what I should have sent to begin with.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jamie@scattered-thoughts.net\">@Jamie Brandon (F'12)</span> can you please open a ticket with the details of this conversation? Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402685930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://dev.clojure.org/jira/browse/CLJS-815\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-815\">http://dev.clojure.org/jira/browse/CLJS-815</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23229902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure",
            "submessages": [],
            "timestamp": 1402686259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I want to use <code>source</code> in the repl to inspect the source of functions I define. <a href=\"http://clojuredocs.org/clojure_core/clojure.repl/source\" target=\"_blank\" title=\"http://clojuredocs.org/clojure_core/clojure.repl/source\">http://clojuredocs.org/clojure_core/clojure.repl/source</a> says</p>\n<blockquote>\n<p>Prints the source code for the given symbol, if it can find it.<br>\nThis requires that the symbol resolve to a Var defined in a<br>\nnamespace for which the .clj is in the classpath.</p>\n</blockquote>\n<p>What does this mean in the context of using lein/nrepl in a project? naively running <code>lein repl</code> in a project doesn't do what I want.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23347544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402936651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Did anyone see <a href=\"http://www.lispcast.com/core-async-code-style\" target=\"_blank\" title=\"http://www.lispcast.com/core-async-code-style\">http://www.lispcast.com/core-async-code-style</a>?  Do you agree with it?<br>\nI prefer to abstract away callbacks aggressively, even in cases where it seems to complicate the code, because you can then reason about your program entirely in CSP terms, which to me has value.  <br>\nI suppose I don't mind the idea of leading angle brackets, but the fact that the core.async api remains crystal clear without them gives me pause.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23349340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "async code style",
            "submessages": [],
            "timestamp": 1402939368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>do you want to print the source of your functions?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23349510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402939590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yes, I want to print the source of functions defined in a clojure file in a repl that loads that file</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23349884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402940149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>what namespace are you on?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23350579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402941036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Same one I'm working in</p>\n<div class=\"codehilite\"><pre><span class=\"nv\">emm-ess-pee.core&gt;</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">foo</span> <span class=\"p\">[]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;emm-ess-pee.core/foo</span>\n<span class=\"nv\">emm-ess-pee.core&gt;</span> <span class=\"p\">(</span><span class=\"nf\">source</span> <span class=\"nv\">emm-ess-pee.core/foo</span><span class=\"p\">)</span>\n<span class=\"nv\">Source</span> <span class=\"nb\">not </span><span class=\"nv\">found</span>\n<span class=\"nv\">nil</span>\n<span class=\"nv\">emm-ess-pee.core&gt;</span> \n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23350695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402941198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>you can't use source for functions defined in the repl (I think (correct me if I'm wrong)).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23351051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402941607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The same thing happens for functions defined in the clojure file I'm interacting with. I think I need to have a .class compiled for the file maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23351107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402941665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>do you have a project.clj?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23351193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "`source` function",
            "submessages": [],
            "timestamp": 1402941777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So it appears that <code>source</code> works fine inside a REPL I launch with <code>lein repl</code>, but doesn't work inside an emacs-run nREPL session. </p>\n<p>Weird.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23352035,
            "is_me_message": false,
            "last_edit_timestamp": 1402944463,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1402943031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> that's because <code>lein repl</code> automatically requires the <code>clojure.repl</code> namespace.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23352281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1402943298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I included clojure.repl in my namespace</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">emm-ess-pee.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:use</span> <span class=\"nv\">emm-ess-pee.binary-utils</span>\n        <span class=\"nv\">clojure.repl</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">clojure.pprint</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">pprint</span><span class=\"p\">]])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:gen-class</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>Inside the emacs repl, <code>source</code> can correctly give me the source of functions from clojure.core or something else I import, just not something defined in the namespace I'm in. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23352461,
            "is_me_message": false,
            "last_edit_timestamp": 1402943529,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1402943486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> yeah that may or may not work if you're eval'ing fns interactively in the file - should work if you compile the entire file. If not possibly a bug/issue with the nrepl mode in Emacs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23352646,
            "is_me_message": false,
            "last_edit_timestamp": 1402944436,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1402943690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Ah I think I understand why it wasn't working!</p>\n<p>I lose source definitions when I run <code>cider-load-current-buffer</code> in emacs. I was hitting <code>C-c C-k</code> compulsively right after I would start cider mode.</p>\n<p>I wonder,  does <code>source</code> stop working when I do <code>cider-load-current-buffer</code> because it evals all the definitions in the repl, and as <span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span> said you can't use source for functions defined in the repl? </p>\n<p>Or do you think this a bug in CIDER/nREPL?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23353157,
            "is_me_message": false,
            "last_edit_timestamp": 1402944405,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1402944226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Small CSS question. Let's say the app state is such that you'll need to draw several different versions of the UI. Do you keep the dom structure intact and hide irrelevant parts with CSS, or do draw completely different dom structures for the different states?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23448016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react + css",
            "submessages": [],
            "timestamp": 1403095807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My first inclination would have been to draw completely separate dom structures; that way the mapping from <code>some-version-of-the-state --&gt; UI</code> is more modular.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23448055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react + css",
            "submessages": [],
            "timestamp": 1403095866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But it seems like the hide with CSS approach is pretty common. (Not necessarily in Om, just in general.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23448066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react + css",
            "submessages": [],
            "timestamp": 1403095895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I assume the answer is \"it depends\"?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23448124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react + css",
            "submessages": [],
            "timestamp": 1403095940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> hiding with CSS is likely to be more efficient than removing or adding DOM.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23449188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react + css",
            "submessages": [],
            "timestamp": 1403097905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, another Om documentation question: the docs for <code>IRender</code> say <code>render</code> can return an Om component or a React component. What would it look like to return an Om component?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23501823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403183219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> like return the value of an <code>om/build</code> call,  etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23502129,
            "is_me_message": false,
            "last_edit_timestamp": 1403183994,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403183809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok. <code>om/build</code> ultimately returns a <code>pure</code> React component? (Edit: I guess you can pass in your own <code>ctor</code>.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23504198,
            "is_me_message": false,
            "last_edit_timestamp": 1403187519,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403187261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>At any rate, at the end of the day <code>render</code> needs to return  something that React can directly handle. Right? That's my sense from looking at where <code>render</code> actually gets called, inside the <code>pure-methods</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23504217,
            "is_me_message": false,
            "last_edit_timestamp": 1403187422,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403187306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> that's right</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23505697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403189434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hey everyone - I implemented a maze generation algorithm, and would very much like some code review on it. Here you go: <a href=\"https://gist.github.com/ptn/3c94f540b2e8d26bafce\" target=\"_blank\" title=\"https://gist.github.com/ptn/3c94f540b2e8d26bafce\">https://gist.github.com/ptn/3c94f540b2e8d26bafce</a></p>\n<p>There's a nice reading index as a comment at the top of the file, with links to the explanation of the algorithm and a page that runs a simulation of it; it then suggests an order in which to read the functions I wrote. I think one thing I didn't explain is that the final representation of a maze as an array of arrays indicates which walls actually exist, starting at the top one and going clockwise. So this:</p>\n<p>[T T T T] corresponds to a square<br>\n[T F T F] corresponds to a block with only the top and bottom walls <br>\n[F T F T] corresponds to this: |   |</p>\n<p>and so on. I should add this as a comment.</p>\n<p>I'm mostly interested in comments on idiomatic Clojure and the best way to implement this in a functional way, although every comment is welcome of course!</p>\n<p>maybe you are interested, <span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span> <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23554702,
            "is_me_message": false,
            "last_edit_timestamp": 1403267146,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403267100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>if someone wants to read it, it might be helpful to print the result of (tunnel X) to console. it returns a sequence of pairs, in which each pair A B tells you that the wall between cell A and cell B should be teared down. cells are represented as 2-coordinate points.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23554866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403267448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>what haps when you forget to <code>carve</code> out the wall on one cell and not the other? What does that represent? I feel like your representation of the cells is a bit janky.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23557106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403271232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>that shouldn't ever happen, it'd be inconsistent state. did it happen to you? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23557783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403272328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>the gist of it is the tunnel function, the maze is there just so that it is printable </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23557826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403272414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>no didn't run the code. Just wondering if that's the correct encoding of the walls of a maze</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23559412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403274879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah I'm not sure. it's redundanat info and it'd be bad if it got out of sync. the algo itself is tunnel, I wrote the rest just to be able to see it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23559921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maze generation",
            "submessages": [],
            "timestamp": 1403275648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thinking about this some more, I think the documentation is a little confusing. The om tutorial describes an Om component as \"a model of the <code>om/IRender</code> interface, like <code>om.core/component</code> generates\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23561267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403277250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <code>om.core/component</code> is just sugar over reify <code>IRender</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23561632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403277779,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My confusion was that the docs say <code>render</code> can return an Om component, but it needs to return a React component. (Unless I'm missing how <code>render</code> could return another reified IRender.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23561799,
            "is_me_message": false,
            "last_edit_timestamp": 1403278031,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403277985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heh, in terms of pseudo-types, <code>render : IRender -&gt; ReactComponent</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23561896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403278098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> an Om component is a React component.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23568900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> but the docs make it sound like Om component = reified IRender, which is not a React component.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23568938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's how I read the quote from the Om tutorial.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23568944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> there's no such thing as returning an Om component w/o a call to <code>om.core/build</code> which returns a React component.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569018,
            "is_me_message": false,
            "last_edit_timestamp": 1403287478,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha that's kind of what I'm saying though--it's unclear how you define \"Om component\" in the docs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The tutorial says Om component = reified IRender.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But you can't return a reified IRender from someone else's <code>render</code> function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> the docs should be clear and say \"instance\" of a component. If it doesn't that should be amended.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It totally makes sense for Om component to mean a React component constructed with Om (e.g. a <code>pure</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok cool--I'm no longer confused, it's thankfully really easy to read the source.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23569456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "IRender",
            "submessages": [],
            "timestamp": 1403287876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>what are they? I'm reading a book by O'Reilly and it's been a couple of times that they've mentioned them already, but haven't seen them explained. anyone have a good blog post or other resources I could refer to?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23587367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403312726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>this feels like an important part of the book :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23587483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403312944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>From googling, looks like a Hibernate (Java ORM) term.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23587655,
            "is_me_message": false,
            "last_edit_timestamp": 1403313405,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403313356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I now understand they meant that value objects are identified by precisely their value, as opposed to objects, which need a label to tell them apart. Roughly, values are identified by the arrangement of bits, whereas objects are identified by their location in memory.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23589219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403316584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Oh, cool. What book is this, out of curiosity? Sounds similar to the ideas Rich Hickey puts forth in his talk, \"The Value of Values\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23596910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403334736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yes, that's exactly it. that values are identified by themselves and do not need an extra something attached to them for identity (like objects do)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23605915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it's Clojure Programming by Chas Emerick, Brian Carper and Christophe Grand, published by O'Reilly</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23605956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358404,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it's a bit old maybe? it's from 2012</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23605957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>the chapter I was reading turned very abstract all of a sudden</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23605960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I need to watch that talk by Rich - or, you know, any of his talks :) I think I'm gonna watch simple made easy today</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>oh boy simple made easy is sooooooo good</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've been meaning to watch it for soooo long, but laziness</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>^ heh</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>even if no pun was intended that was funny <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oooh I didn't even get it myself, lol</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23606152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403358932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm watching it now </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23607757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "natural identifiers",
            "submessages": [],
            "timestamp": 1403362951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Any thoughts on Prismatic's Om library? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23642214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403444240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Prismatic/om-tools\" target=\"_blank\" title=\"https://github.com/Prismatic/om-tools\">https://github.com/Prismatic/om-tools</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23642215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403444241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>At first blush, the dom tools look great and cover exactly the same complaints when I first started using Om.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23646768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403455895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't feel like I know enough about react/components/mixins to judge the rest though. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23646808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403455931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>The syntax looks similar to other Prismatic libraries</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23651915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403467994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>The mixin example is pretty cool because I see myself writing some of the same code several times.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23651929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403468044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't used fnk or schema but have taken a look at them in CLJ</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23652014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om-Tools",
            "submessages": [],
            "timestamp": 1403468219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey all, I know I'm pretty active on this channel. <span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> and I were having a discussion about what a junior Clojure programmer looks like, in terms of skills. In Ruby or JS it seems a bit more defined. I know I've talked to a few folks(<span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> &amp; <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> ) on here about it but any additions would be super welcome. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23652115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403468458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, I'm trying to start learning Clojure, mostly reading \"Clojure for the Brave and True\", but I'm having trouble getting CIDER set up. In particular, cider-jack-in seems to be hanging. Is anybody experienced with clojure &amp; emacs willing to give me a hand in figuring out what's going wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"daekharel@gmail.com\">@Michael Robert Arntzenius (S'14)</span> How long has it been hanging? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>nrepl takes a while for me to setup but I have had problems with it before.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>It takes about 15 seconds and then says \"error in process filter: quit\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>... hm, it seems to be trying to start it again</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>this seems like very silly behavior. It shouldn't take a long time to start anything (okay, I guess maybe to start a jvm, but 15 seconds?), and if it fails it should give a useful error message, not futilely try again...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Compiling CLJS for the first time is sometimes a 30-40 second operation followed by sub-1 second recompiles.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>But yep. Michael, that book introduced me to emacs and so I just downloaded the init.el. I think that Zach is the resident emacs expert </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23684983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, hm. compilation. right.<br>\n\"CLJS\" is?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23685000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> You have any ideas what might be going wrong here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23685020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"daekharel@gmail.com\">@Michael Robert Arntzenius (S'14)</span> I'll come find you and we can try to figure it out :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23685092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trouble getting started",
            "submessages": [],
            "timestamp": 1403538400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Do you have any thoughts/posts/examples you'd be willing to share regarding composable om components? E.g. let's say that I have two components that wrap a textarea, both providing unreleated behavior, but both needing access to the actual textarea DOM node. I'd like to be able to compose these arbitrarily, but I'm having trouble coming up with good patterns for it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23692940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403548304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> there's too little context for me to understand the problem you are having. Can you elaborate?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23693151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403548551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Sure, sorry about that.</p>\n<p>I have two components, <code>resizing-textarea</code> and <code>autocompleting-textarea</code>. The first automatically resizes a textarea depending on its value, which requires accessing the underlying DOM node to get the scroll height after it's been rendered. The second depends on the current cursor position, which also requires the underlying DOM node. These are both meant to be reusable. A third component is responsible for composing them and ultimately rendering a resizable, autocompleting textarea.</p>\n<p>I guess what I'm asking is how these can be composed arbitrarily with minimal fuss. Presumably this means that each gets some kind of <code>textarea-component</code> passed in to build when rendered, but I also encountered trouble accessing refs and such that are defined in other components. (Which makes sense, as you don't want refs to just be global names.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23694004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403549567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>If this isn't enough to go on, please let me know and I'll continue to refine my question :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23694018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403549587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Curious if you have any thoughts as well ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23694024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403549601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> it seems a bit strange to me that you have components with attributes like that. autocompleting and resizing should probably be functionality that you parameterize a component with.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23696492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403552557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That's good feedback. There's definitely a chance I'm abstracting incorrectly.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23696597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "composable om components",
            "submessages": [],
            "timestamp": 1403552672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> <br>\nhere's an article by Martin Odersky that talks about different skill levels in scala; might be helpful.<br>\n<a href=\"http://www.scala-lang.org/old/node/8610\" target=\"_blank\" title=\"http://www.scala-lang.org/old/node/8610\">http://www.scala-lang.org/old/node/8610</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23701822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403558070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks brian </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23702803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403559102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm taking a looksee at it now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23702806,
            "is_me_message": false,
            "last_edit_timestamp": 1403559121,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403559105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>woah scala has xml literals</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23703214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403559580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I meant to bump this topic, too... it definitely feels like right now, for whatever reason,  I haven't been exposed to much between \"Hi! I'm learning clojure!\" and \"Hi! I'm contributing directly to the language/authoring libraries!\" ... I'd like to see more examples of \"Hi! I'm using a cool language at an intermediate level to build and accomplish cool things!\"  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23703215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403559585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>+1 so much, <span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23703447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403559866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>bump. interested in this :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23709923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403569168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> I agree, but I think that that's actually because there's often a *scarily small* distance between those things.  I was learning Rust and working on Rust at the same time.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23710351,
            "is_me_message": false,
            "last_edit_timestamp": 1403569928,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403569825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> oof just realized I can't reply to jira issues by email.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23713183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "contributing",
            "submessages": [],
            "timestamp": 1403574870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://dev.clojure.org/jira/browse/CLJS-816\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-816\">http://dev.clojure.org/jira/browse/CLJS-816</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23713186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "contributing",
            "submessages": [],
            "timestamp": 1403574872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>Do you want me to port the entire clojure.set tests to clojurescript?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23713194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "contributing",
            "submessages": [],
            "timestamp": 1403574890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span> no just the same test that appears in the Clojure patch</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23713253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "contributing",
            "submessages": [],
            "timestamp": 1403574970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> and there comes Brian with the dunk. But I still think that <span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> has a good point.  I wonder if ClojureScript lends it more to the \"Hi! I'm using a cool language at an intermediate level to build and accomplish cool things!\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23733263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403616770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> told me to look at the clojuescript compiler to learn more about clojure. Like, it seems like it is easier to understand things generally about the clojure jvm by reading the clojurescript compiler than by trying to understand jvm clojure. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23733689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403617473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Clojurescript is written in clojure and implements roughly the same language it is written in and so it's much easier to understand than the actual java compiler. I've tried to look at the jvm compiler before and it isn't that accessible at first glance. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23733714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403617552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>But yeah, in terms of skills, I have no idea what a junior clojure programmer looks like. I've not seen too many folks in industry who are openly hiring clojure engineers and also looking for junior folks. If people are looking for folks to use clojure, they seem to be looking for folks who already know clojure (i.e. <a href=\"http://factual.com/jobs/clojure\" target=\"_blank\" title=\"http://factual.com/jobs/clojure\">http://factual.com/jobs/clojure</a> , <a href=\"http://factual.com/jobs/oQR1Vfwn/Software-Engineer--Infrastructure----Los-Angeles\" target=\"_blank\" title=\"http://factual.com/jobs/oQR1Vfwn/Software-Engineer--Infrastructure----Los-Angeles\">http://factual.com/jobs/oQR1Vfwn/Software-Engineer--Infrastructure----Los-Angeles</a>) </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23733905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403617828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://careers.stackoverflow.com/jobs?searchTerm=clojure\" target=\"_blank\" title=\"http://careers.stackoverflow.com/jobs?searchTerm=clojure\">http://careers.stackoverflow.com/jobs?searchTerm=clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23733924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403617882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> I wonder about how much of that effect is due to the age of the language / stage of its lifecycle (what's the lifecycle of an average (successful) language look like, anyway? 20-40 years? Will fortran ever die?) and how much is due to the language itself... one of the things that I like about clojure is that I feel like that scarily small distance is traversable... ruby's github repo has 36 thousand commits and 35 contributers,  clojure's 2600 and 93. It's clear that by whatever measure there is bound to be more opportunity to contribute to a growing newer language, via low or mid hanging library fruit or whatever. Should we expect clojure to become more calcified as it becomes more robust?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23738736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403624717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also, I've been avoiding clojurescript because of the vague and unsubstantial feeling that I should learn a lot more clojure first. I've been thinking about revising this opinion lately though...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23738805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403624795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> ClojureScript is not a good introduction to Clojure. It's a good introduction if and only if you really want to understand the design decisions behind the Clojure language and how it might be implemented. ClojureScript is still only really useful/enjoyable if you already have some significant Clojure experience.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23740027,
            "is_me_message": false,
            "last_edit_timestamp": 1403626186,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403626163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure \"junior\" Clojure programmer means much at this venture - I think professional Clojure programmers generally have one programming language that they have had significant amounts of experience with - generally Java, Ruby or Python if the surveys are to be believed.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23740226,
            "is_me_message": false,
            "last_edit_timestamp": 1403626376,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403626344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> both of these things are congruent with what I had been thinking. I'm curious to know about if and when \"junior\" clojure programmer will mean anything at all, and if so, what.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23740444,
            "is_me_message": false,
            "last_edit_timestamp": 1403626605,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403626587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>though in the mean time, I'm happy to be hacking away with it as a relative noob <img alt=\":cookie:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/cookie.png\" title=\":cookie:\"> <img alt=\":sunglasses:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sunglasses.png\" title=\":sunglasses:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23740533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1403626734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I'm trying to use some stuff from goog.labs (specifically, goog.labs.html.Sanitizer) and am having trouble getting to it. I'm using Stuart Sierra's newer google-closure-library release (<code>[org.clojure/google-closure-library \"0.0-20140226-71326067\"]</code>) but labs isn't being included in the output.</p>\n<p>Has anyone had to figure this out before? <span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23850439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "goog.labs",
            "submessages": [],
            "timestamp": 1403793713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>Anyone else at EC? From what I can tell there isn't, but maybe there's a new face I haven't seen before :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23855995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "euroclojure?",
            "submessages": [],
            "timestamp": 1403800124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Zach, have you figured it out? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23881962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "goog.labs",
            "submessages": [],
            "timestamp": 1403835438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> I haven't figured it out. I might try to just include the relevant files/dirs myself\u2026</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23899305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "goog.labs",
            "submessages": [],
            "timestamp": 1403871888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Ok. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23904927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "goog.labs",
            "submessages": [],
            "timestamp": 1403881387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey ya'll, I found a little feature I'd like in one of Prismatic's libraries. Anyone up for a code review in a few hours?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23905540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Patch Review",
            "submessages": [],
            "timestamp": 1403882138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I have what seem to be a perfect application for core.async pub/sub, but it seems to exhibit some blocking behavior that I don't understand.<br>\nHere's a setup, with channels listening on two topics, cleverly named 1 and 2.  The difference is that 2 will be drained continually, while I've only set up one pull from c1:</p>\n<div class=\"codehilite\"><pre> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">source</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">))</span>\n <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">pu</span> <span class=\"p\">(</span><span class=\"nf\">async/pub</span> <span class=\"nv\">source</span> <span class=\"nv\">first</span><span class=\"p\">))</span>\n <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">c1</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">))</span>\n <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">c2</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">))</span>\n <span class=\"p\">(</span><span class=\"nf\">async/sub</span> <span class=\"nv\">pu</span> <span class=\"mi\">1</span> <span class=\"nv\">c1</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"nf\">async/sub</span> <span class=\"nv\">pu</span> <span class=\"mi\">2</span> <span class=\"nv\">c2</span><span class=\"p\">)</span>\n <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;hello from c1&quot;</span> <span class=\"p\">(</span><span class=\"nf\">&lt;!</span> <span class=\"nv\">c1</span><span class=\"p\">)))</span>\n <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"nv\">true</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;hello from c2&quot;</span> <span class=\"p\">(</span><span class=\"nf\">&lt;!</span> <span class=\"nv\">c2</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p>As expected, this works great:</p>\n<div class=\"codehilite\"><pre><span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nb\">dotimes </span><span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">]))</span>\n<span class=\"nv\">hello</span> <span class=\"nv\">from</span> <span class=\"nv\">c2</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"nv\">hi</span><span class=\"p\">]</span>\n<span class=\"nv\">....</span> <span class=\"nv\">x</span> <span class=\"mi\">10</span>\n<span class=\"nv\">Also</span> <span class=\"nv\">as</span> <span class=\"nv\">expected</span>, <span class=\"nv\">repeated</span> <span class=\"nv\">writes</span> <span class=\"nv\">to</span> <span class=\"nv\">topic</span> <span class=\"mi\">1</span> <span class=\"nv\">eventually</span> <span class=\"nv\">block</span><span class=\"err\">:</span>\n<span class=\"o\">~~~</span><span class=\"nv\">.clj</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;wrote to 1&quot;</span><span class=\"p\">))</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"nv\">wrote</span> <span class=\"nv\">to</span> <span class=\"mi\">1</span>\n<span class=\"nv\">hello</span> <span class=\"nv\">from</span> <span class=\"nv\">c1</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"nv\">hi</span><span class=\"p\">]</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;wrote to 1&quot;</span><span class=\"p\">))</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"nv\">wrote</span> <span class=\"nv\">to</span> <span class=\"mi\">1</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;wrote to 1&quot;</span><span class=\"p\">))</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"nv\">wrote</span> <span class=\"nv\">to</span> <span class=\"mi\">1</span>\n<span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;wrote to 1&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>and then nothing happens, i.e. the last <code>&gt;!</code> is parked.</p>\n<p>What I <strong>didn't</strong> expect is that writes to topic 2 would also block:</p>\n<div class=\"codehilite\"><pre><span class=\"nv\">girder.grid&gt;</span> <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">source</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;wrote to 2&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>If I'm a good boy and <code>(async/unsub pu 1 c1)</code>, then everything flows smoothly, i.e. publications to 1 get properly dropped on the floor, and publications to 2 go unimpeded to their infinitely looping recipient.   However, this can't be done while c1 is still blocking.<br>\nThis seems fragile, since if any subscriber fails to drain its channel or forgets to unsubscribe, then every other subscriber to every topic will also get blocked.</p>\n<p>To work around this, I wrote my own thingamy with an atom holding a map of topics to sets of channels.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23953268,
            "is_me_message": false,
            "last_edit_timestamp": 1403972726,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403971898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Apparently one can't edit subjects.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23953316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliance",
            "submessages": [],
            "timestamp": 1403972004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> From the docs for <code>pub</code>:</p>\n<blockquote>\n<p>Each topic will be handled by an internal mult on a<br>\ndedicated channel. By default these internal channels are<br>\nunbuffered, but a buf-fn can be supplied which, given a topic,<br>\ncreates a buffer with desired properties.</p>\n<p>Each item is distributed to all subs in parallel and synchronously,<br>\ni.e. each sub must accept before the next item is distributed. Use<br>\nbuffering/windowing to prevent slow subs from holding up the pub.</p>\n</blockquote>\n<p>This suggests that you should include a buf-fn that returns a non-blocking channel, e.g.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">pu</span> <span class=\"p\">(</span><span class=\"nf\">async/pub</span> <span class=\"nv\">source</span> <span class=\"nb\">first </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">async/chan</span> <span class=\"p\">(</span><span class=\"nf\">async/dropping-buffer</span> <span class=\"mi\">10</span><span class=\"p\">))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23954036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403973802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>(I'm not in a position to test this at the moment.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23954038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403973820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Nor am I unfortunately.  But the way I read it  was that it applied to buffering of subscription traffic for a each topic individually, but that subscriptions for each topic where independent. Bolstering that interpretation is that there's an implicit form  of drop buffering in that messages to topics without subscribers are dropped. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23954261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403974377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>I may stick with the thingamy approach regardless, since it's easier to instrument. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23954309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403974530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Speaking of instrumentation, I've played with the obvious solution of implementing a Buffer that timbres passersby and sends then on their way to a wrapped buffer, but this has limitations.<br>\nI was wondering how feasible it would be to construct a state-of-everything scope to map out complex channel topologies. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23954698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async pub/sub resiliane",
            "submessages": [],
            "timestamp": 1403975421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Is there a better way to iterate with 0-based indices than this?</p>\n<div class=\"codehilite\"><pre><span class=\"c1\">; without indices</span>\n<span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[</span><span class=\"nv\">thing</span> <span class=\"nv\">things</span><span class=\"p\">]</span>\n  <span class=\"nv\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\">; with indices</span>\n<span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[[</span><span class=\"nv\">thing</span> <span class=\"nv\">idx</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">map vector </span><span class=\"nv\">things</span> <span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">))]</span>\n  <span class=\"nv\">...</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>This seems clumsy when written repeatedly.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23976559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404026007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Context is: providing a 'key' property to React.js (via Om). Elements will never be reordered, added or removed, and have no natural identifier other than their index.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23976596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404026051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> I end up using <code>map-indexed</code>, which I feel is a bit more obvious.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[[</span><span class=\"nv\">idx</span> <span class=\"nv\">thing</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">map-indexed</span> <span class=\"nb\">vector </span><span class=\"nv\">things</span><span class=\"p\">)]</span>\n  <span class=\"nv\">...</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Still not a perfect solution. I might start defining a <code>with-index</code> utility in my projects that require this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23981399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404039004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> I usually end up doing it your way.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23987497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404054767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> What are you working on?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23987633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404055097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://toxicsli.me/sojoban/\" target=\"_blank\" title=\"http://toxicsli.me/sojoban/\">this Sokoban game</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "iterate with index",
            "submessages": [],
            "timestamp": 1404071067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>How are people dealing with error propagation in core.async? <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <a href=\"http://swannodette.github.io/2013/08/31/asynchronous-error-handling/\" target=\"_blank\" title=\"http://swannodette.github.io/2013/08/31/asynchronous-error-handling/\">proposed a &lt;? macro</a>, but didn't give its definition. A person named Martin Trojer <a href=\"http://martintrojer.github.io/clojure/2014/03/09/working-with-coreasync-exceptions-in-go-blocks/\" target=\"_blank\" title=\"http://martintrojer.github.io/clojure/2014/03/09/working-with-coreasync-exceptions-in-go-blocks/\">builds on David's blog post and provides a reasonable definition</a>. However, Martin's way still seems to require try/catch boilerplate in every asynchronous routine, as in this example:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">get-data</span> <span class=\"p\">[</span><span class=\"nv\">s</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">async/go</span> <span class=\"p\">(</span><span class=\"nf\">try</span>\n              <span class=\"p\">(</span><span class=\"nf\">client/get</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;http://some.query?q=s&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"ss\">:throw-exceptions</span> <span class=\"nv\">true</span><span class=\"p\">})</span>\n              <span class=\"c1\">;; catch and put exception on the channel</span>\n              <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span>\n                <span class=\"nv\">e</span><span class=\"p\">))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404071325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994600,
            "is_me_message": false,
            "last_edit_timestamp": 1404071460,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404071434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I may just be confused and need to think more.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404071494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Let's say <code>get-foo</code> takes an <code>a</code> and a <code>b</code> and yields a <code>foo</code>. And <code>get-bar</code> takes a <code>foo</code> and yields a <code>bar</code>. By \"yields\" I mean \"puts on the channel they return\", and in case of error, <code>get-foo</code> or <code>get-bar</code> puts an Exception on that same channel. And now I want to compose them.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">get-foo-and-bar</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">ch</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">go</span>\n      <span class=\"p\">(</span><span class=\"nf\">try</span>\n        <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nf\">&lt;?</span> <span class=\"p\">(</span><span class=\"nf\">get-foo</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n              <span class=\"nv\">bar</span> <span class=\"p\">(</span><span class=\"nf\">&lt;?</span> <span class=\"p\">(</span><span class=\"nf\">get-bar</span> <span class=\"nv\">foo</span><span class=\"p\">))]</span>\n          <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">ch</span> <span class=\"p\">[</span><span class=\"nv\">foo</span> <span class=\"nv\">bar</span><span class=\"p\">]))</span>\n        <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span>\n          <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">ch</span> <span class=\"nv\">e</span><span class=\"p\">))))</span>\n    <span class=\"nv\">ch</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>This seems like a lot of boilerplate. Can it be simplified?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span>  I haven't looked at this but check out community</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/hackerschool/community/blob/master/client/src/community/util.clj\" target=\"_blank\" title=\"https://github.com/hackerschool/community/blob/master/client/src/community/util.clj\">https://github.com/hackerschool/community/blob/master/client/src/community/util.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23994992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/hackerschool/community/blob/master/client/src/community/components/app.cljs#L150-L162\" target=\"_blank\" title=\"https://github.com/hackerschool/community/blob/master/client/src/community/components/app.cljs#L150-L162\">https://github.com/hackerschool/community/blob/master/client/src/community/components/app.cljs#L150-L162</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23995026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks. <a href=\"https://github.com/hackerschool/community/blob/master/client/src/community/api.cljs#L87-97\" target=\"_blank\" title=\"https://github.com/hackerschool/community/blob/master/client/src/community/api.cljs#L87-97\">This function in community</a> looks pretty similar to <code>get-foo-and-bar</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23995098,
            "is_me_message": false,
            "last_edit_timestamp": 1404072606,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>That feels heavyweight for composing or wrapping async routines but maybe as I use it more it won't seem like a big deal.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23995177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'll take a look at it in a bit. Tryign to implement a drag/drop for my trello clone =)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23995260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404072926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> <span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> I'm not entirely satisfied with <code>&lt;?</code> but I was more interested at the time in something that was Good Enough\u2122 than something that was perfect. I don't have the itch to revisit it yet, but I expect I will eventually.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 23995453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async error handling",
            "submessages": [],
            "timestamp": 1404073224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> / <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span>   I'm wondering if you came across this problem or know a solution.  I have some data that is deeply nested in my app-state. I'd like to render this data in a new div from different root when clicked. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24025098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404137257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I know that the path on the cursor should allow me to get to it but I'm just not sure how to do it. =\\</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24025106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404137278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> I'm not sure I understand the problem.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24025161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404137320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> let me make a gist after this call. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24025546,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404137954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span>  are you looking for something like <code>get-in</code>? <a href=\"http://clojuredocs.org/clojure_core/clojure.core/get-in\" target=\"_blank\" title=\"http://clojuredocs.org/clojure_core/clojure.core/get-in\">http://clojuredocs.org/clojure_core/clojure.core/get-in</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24026676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404139513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Zack, this might sound daft but I didn't realize that get-in worked on vectors as well as maps.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24036585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404152460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> here's an appstate, let's say that I would like to render one of the cards</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24037344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404153302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>perhaps <code>{:task \"Make it look pretty\"\n                                                        :id 3}</code> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24037350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404153306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>but from a new call to Om root</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24037380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404153354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Rather, using multiple roots.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24037382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404153362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Would I just have to get the <code>path</code> off of the cursor and then save it to the <code>app-state</code> some place and then use the path in concert with <code>get-in</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24037430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404153396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> There's so many useful things in core I forget about all the time, I try and make a point of reading up on all the functions every once in a while</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24038100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404154336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm writing up a small project to do what I described above</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24038109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404154359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24038112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404154364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just wait until you realize you actually need tree-seq some day</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24038114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404154368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>=)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24039153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404155711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I used it for a few 4clojure problems and was like \"holy crap this is crazy\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24039161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404155728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><code>get-in</code>, <code>update-in</code> et al. are such pretty functions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24040047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404156778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey Zack and Zach, here's a quick example I threw together. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24041282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404158322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Will-Sommers/om-modal-example/blob/master/src/modal_ex/core.cljs#L55-L60\" target=\"_blank\" title=\"https://github.com/Will-Sommers/om-modal-example/blob/master/src/modal_ex/core.cljs#L55-L60\">https://github.com/Will-Sommers/om-modal-example/blob/master/src/modal_ex/core.cljs#L55-L60</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24041292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404158337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> Can't you just use the cursor interface here instead of digging into the <code>path</code>? e.g.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">card-component</span> <span class=\"p\">[</span><span class=\"nv\">data</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">reify</span>\n    <span class=\"nv\">om/IRenderState</span>\n    <span class=\"p\">(</span><span class=\"nf\">render-state</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"p\">{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">c-click</span><span class=\"p\">]}]</span>\n      <span class=\"c1\">;; put the entire cursor on the channel</span>\n      <span class=\"p\">(</span><span class=\"nf\">dom/div</span> <span class=\"o\">#</span><span class=\"nv\">js</span> <span class=\"p\">{</span><span class=\"ss\">:onClick</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">put!</span> <span class=\"nv\">c-click</span> <span class=\"nv\">data</span><span class=\"p\">)}</span> <span class=\"p\">(</span><span class=\"ss\">:task</span> <span class=\"nv\">data</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">main-component</span> <span class=\"p\">[</span><span class=\"nv\">data</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">reify</span>\n    <span class=\"nv\">om/IInitState</span>\n    <span class=\"p\">(</span><span class=\"nf\">init-state</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span>\n      <span class=\"p\">{</span><span class=\"ss\">:c-click</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">)})</span>\n\n    <span class=\"nv\">om/IWillMount</span>\n    <span class=\"p\">(</span><span class=\"nf\">will-mount</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">c-click</span> <span class=\"p\">(</span><span class=\"nf\">om/get-state</span> <span class=\"nv\">owner</span> <span class=\"ss\">:c-click</span><span class=\"p\">)]</span>\n        <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"nv\">true</span>\n              <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">card</span> <span class=\"p\">(</span><span class=\"nf\">&lt;!</span> <span class=\"nv\">c-click</span><span class=\"p\">)]</span>\n                <span class=\"c1\">;; instead of keeping track of the path, just keep track of the cursor</span>\n                <span class=\"p\">(</span><span class=\"nf\">om/update!</span> <span class=\"nv\">data</span> <span class=\"ss\">:modal</span> <span class=\"p\">{</span><span class=\"ss\">:display</span> <span class=\"nv\">true</span>\n                                         <span class=\"ss\">:data</span> <span class=\"nv\">card</span><span class=\"p\">})</span>\n                <span class=\"p\">)))))</span>\n\n    <span class=\"nv\">om/IRenderState</span>\n    <span class=\"p\">(</span><span class=\"nf\">render-state</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"p\">{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">c-click</span><span class=\"p\">]}]</span>\n      <span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">dom/div</span> <span class=\"nv\">nil</span>\n        <span class=\"p\">(</span><span class=\"nf\">map</span>\n          <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">dom/div</span> <span class=\"nv\">nil</span>\n             <span class=\"p\">(</span><span class=\"nf\">om/build-all</span> <span class=\"nv\">card-component</span> <span class=\"p\">(</span><span class=\"ss\">:cards</span> <span class=\"nv\">%</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"ss\">:state</span> <span class=\"p\">{</span><span class=\"ss\">:c-click</span> <span class=\"nv\">c-click</span><span class=\"p\">}}))</span>\n          <span class=\"p\">(</span><span class=\"ss\">:columns</span> <span class=\"nv\">data</span><span class=\"p\">))))))</span>\n\n<span class=\"nv\">...</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">modal-component</span> <span class=\"p\">[</span><span class=\"nv\">data</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">reify</span>\n    <span class=\"nv\">om/IRender</span>\n    <span class=\"p\">(</span><span class=\"nf\">render</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">modal</span> <span class=\"p\">(</span><span class=\"ss\">:modal</span> <span class=\"nv\">data</span><span class=\"p\">)]</span>\n        <span class=\"p\">(</span><span class=\"nf\">dom/div</span> <span class=\"o\">#</span><span class=\"nv\">js</span> <span class=\"p\">{</span><span class=\"ss\">:style</span> <span class=\"p\">(</span><span class=\"nf\">display-modal?</span> <span class=\"nv\">modal</span><span class=\"p\">)}</span>\n          <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"ss\">:display</span> <span class=\"nv\">modal</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">dom/div</span> <span class=\"nv\">nil</span>\n              <span class=\"p\">(</span><span class=\"nf\">dom/div</span> <span class=\"o\">#</span><span class=\"nv\">js</span> <span class=\"p\">{</span><span class=\"ss\">:className</span> <span class=\"s\">&quot;overlay&quot;</span>\n                            <span class=\"ss\">:style</span> <span class=\"o\">#</span><span class=\"nv\">js</span> <span class=\"p\">{</span><span class=\"ss\">:width</span> <span class=\"s\">&quot;100%&quot;</span>\n                                        <span class=\"ss\">:height</span> <span class=\"s\">&quot;100%&quot;</span>\n                                        <span class=\"ss\">:background-color</span> <span class=\"s\">&quot;#ccc&quot;</span>\n                                        <span class=\"ss\">:position</span> <span class=\"s\">&quot;fixed&quot;</span>\n                                        <span class=\"ss\">:top</span> <span class=\"mi\">0</span>\n                                        <span class=\"ss\">:left</span> <span class=\"mi\">0</span>\n                                        <span class=\"ss\">:opacity</span> <span class=\"s\">&quot;0.7&quot;</span><span class=\"p\">}</span>\n                            <span class=\"ss\">:onClick</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">om/update!</span> <span class=\"nv\">data</span> <span class=\"ss\">:modal</span> <span class=\"p\">{</span><span class=\"ss\">:display</span> <span class=\"nv\">false</span>\n                                                               <span class=\"ss\">:data</span> <span class=\"nv\">nil</span><span class=\"p\">})})</span>\n              <span class=\"p\">(</span><span class=\"nf\">dom/div</span> <span class=\"nv\">nil</span>\n                <span class=\"p\">(</span><span class=\"nf\">om/build</span> <span class=\"nv\">modal-text</span> <span class=\"p\">(</span><span class=\"ss\">:data</span> <span class=\"nv\">modal</span><span class=\"p\">))))))))))</span>\n</pre></div>\n\n\n<p>(I didn't test any of this\u2013 maybe there's something I'm missing.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24043670,
            "is_me_message": false,
            "last_edit_timestamp": 1404160729,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404160710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> Thanks for that. I ran it and yup, it works. I knew that when you passed a cursor down that you generate a new cursor and pick up the path, I didn't put two and two together that you could pass a cursor into the app-state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24045232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404162415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>:D I'm glad it worked</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24045246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404162437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>me too, now to write a bit about it. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24046778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404164167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>As evidenced in the above chat I need to get better at communicating about code via writing...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24046793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404164195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>(cc <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>)</p>\n<p>I'm having trouble using namespaces defined in google-closure-library-third-party. I've stated it as an explicit dependency, but I have no clue if I need to somehow require it in another way to have it included with my build.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24048222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs goog closure third party",
            "submessages": [],
            "timestamp": 1404166208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> you shouldn't have to declare it as a dependency. Do you have an example of something that isn't working? Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24054997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs goog closure third party",
            "submessages": [],
            "timestamp": 1404177448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Possible false alarm. :/</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24080775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs goog closure third party",
            "submessages": [],
            "timestamp": 1404228149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> I'm going to look into edge cases for this to see if we get extra re-renders </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24085920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404235284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Let me know what you come up with!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24085933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404235311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hrm. Not optimal. Each one of the solutions I wrote about is causing full re-renders...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24093725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404244655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Ie. updating the deeply nested cursor is forcing causing render to get fired for all of its adjacent deeply nested components</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24093784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404244701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Well that's a bummer.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24093876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404244806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm still looking at it...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24094158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404245192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> any thoughts about saving cursors within the app-state cursor and passing it around?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404247991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>just curious, how do you profile re-renders?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404247991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> sounds like a bad idea :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096407,
            "is_me_message": false,
            "last_edit_timestamp": 1404248031,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/Rdn5Qu3wOgVWQq9xujovsz-3/bat_signal.jpg\" target=\"_blank\" title=\"bat_signal.jpg\">bat_signal.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/Rdn5Qu3wOgVWQq9xujovsz-3/bat_signal.jpg\" target=\"_blank\" title=\"bat_signal.jpg\"><img src=\"/user_uploads/13/Rdn5Qu3wOgVWQq9xujovsz-3/bat_signal.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> React has some rendering profiling tools, haven't tried them yet though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> I think that you can place as function within <code>render</code> or <code>render-state</code> and see when they are called.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> What about passing a cursor's path around? I want to access a piece of deeply nested data from a second root for a modal.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>  Oh are the React chrome developer tools compatible with Om? Nothing ever shows up for me in the React pane so I assumed it didn't work with Om...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> also not really recommended, such details should be hidden from components, if a component doesn't know about it and it's happening behind the scenes ... then \"maybe\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> React tools work with Om as far as I know, I've done some basic stuff with them. But you may need to use a specific version of React tools.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> I use React tools.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Sorry for being daft but I'm trying to think about how I would structure my state atom to know how pass deeply nested data up to a modal component nearer to the top level elements of my page. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Fair enough. I didn't mean to hijack this thread, next time I see you <span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span>  can I take a look at your React tools setup?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404248513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Max, let's try to debug this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm using Chrome and it says that the version is <code>React Developer Tools 0.8.1</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>for the plugin</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>What version of Om/React are you using?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24096981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I have the same version. Okay let's try to find a common case, do you see anything in the React pane when you go to the om example here <a href=\"https://swannodette.github.io/todomvc/labs/architecture-examples/om/\" target=\"_blank\" title=\"https://swannodette.github.io/todomvc/labs/architecture-examples/om/\">https://swannodette.github.io/todomvc/labs/architecture-examples/om/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/YlV53O2UuNpn9y95ZKAO8-Jn/screen-shot-2014-07-01-at-50850-pm.png\" target=\"_blank\" title=\"screen-shot-2014-07-01-at-50850-pm.png\">screen-shot-2014-07-01-at-50850-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/YlV53O2UuNpn9y95ZKAO8-Jn/screen-shot-2014-07-01-at-50850-pm.png\" target=\"_blank\" title=\"screen-shot-2014-07-01-at-50850-pm.png\"><img src=\"/user_uploads/13/YlV53O2UuNpn9y95ZKAO8-Jn/screen-shot-2014-07-01-at-50850-pm.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404248825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hmm, I just tried it in a different chrome profile and it worked. I have a bunch of security settings turned on in my profile, so it was something like that that was messing with React tools</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404249194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>cool</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404249240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I cant seem to isolate what it is though, weird</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404249389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>Is there a way you can save a cursor to component-local state?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404249435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>hrm =\\</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24097834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React Tools",
            "submessages": [],
            "timestamp": 1404249554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'm going to play around with this a bit more. I am still trying to think about how to access deeply nested data from second root. If anyone has any suggestions, please forward them.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24098111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404249887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span>, go one?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24101821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404254889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>just to clarify <span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span> was not getting extra renders by passing around a cursor</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24102650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "accessing deeply nested data",
            "submessages": [],
            "timestamp": 1404256286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>The story so far:</p>\n<p>1) I want to investigate timing attacks in clojure. I clone this repo <a href=\"https://github.com/weavejester/crypto-equality\" target=\"_blank\" title=\"https://github.com/weavejester/crypto-equality\">https://github.com/weavejester/crypto-equality</a> </p>\n<div class=\"codehilite\"><pre>A very small Clojure library for protecting against timing attacks when comparing strings or sequences of bytes.\n\nThis is useful for comparing user-supplied values against secrets held by the application, such as tokens or keys.\n</pre></div>\n\n\n<p>2) </p>\n<div class=\"codehilite\"><pre>sartre:crypto-equality $ lein test\n\nlein test crypto.equality-test\n\nlein test :only crypto.equality-test/eq?-test\n\nFAIL in (eq?-test) (equality_test.clj:29)\ntiming\nexpected: (approx-eq (time-expr (dotimes [_ 1000] (eq? xs ys))) (time-expr (dotimes [_ 1000] (eq? xs zs))) 0.2)\n  actual: (not (approx-eq 1330028000 1002390000 0.2))\n\nRan 1 tests containing 8 assertions.\n1 failures, 0 errors.\nTests failed.\n</pre></div>\n\n\n<p>3) HOLY SHIT this is a timing attack in the library designed to prevent timing attacks in clojure. THE WORLD IS ON FIRE<br>\n4) Okay let's try a repl</p>\n<div class=\"codehilite\"><pre>sartre:crypto-equality $ lein repl\nError loading cider.nrepl.middleware.classpath: java.lang.Exception: Unable to resolve symbol: response-for in this context (classpath.clj:12)\n# A ton of errors related to cider.nrepl\n</pre></div>\n\n\n<p>5) Okay, so something is wrong with the cider/nrepl stuff I have for emacs integration. I load in in <code>~/.lein/profiles.clj</code></p>\n<div class=\"codehilite\"><pre>sartre:crypto-equality $ cat ~/.lein/profiles.clj\n{:user {:plugins [[cider/cider-nrepl &quot;0.7.0-SNAPSHOT&quot;]]}}\nsartre:crypto-equality $ mv ~/.lein/profiles.clj ~/.lein/profiles.clj.old\n</pre></div>\n\n\n<p>6) Let's run the tests again</p>\n<div class=\"codehilite\"><pre>sartre:crypto-equality $ lein test\n\nlein test crypto.equality-test\n\nRan 1 tests containing 8 assertions.\n0 failures, 0 errors.\n</pre></div>\n\n\n<p>TL;DR: If I have the cider-nrepl middleware turned on, the tests in crypto-equality fail indicating that there is a timing attack against the crypto-equality library. I've repeated this sequence more then 5 times and get the same results.</p>\n<p>My only theory was that maybe somehow the middleware was clobbering the namespace and redifining <code>eq?</code>, but when printing <code>eq?</code> during the tests I get <code>#&lt;equality$eq_QMARK_ crypto.equality$eq_QMARK_@1e6a3214&gt;</code> which indicates that its the <code>eq?</code> in the crypto.equality namespace.</p>\n<p>So I'm at a complete loss here. Can someone reproduce the behaviour I'm describing above? Am I crazy?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24134450,
            "is_me_message": false,
            "last_edit_timestamp": 1404315451,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404315405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> for serious testing like this you should not use lein. You need to use a plain Clojure REPL. As awesome as lein is for convenience it does a lot of goofy things and in general is not suitable for production testing. Other than that I can't offer much insight other than this looks like interesting stuff :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24134552,
            "is_me_message": false,
            "last_edit_timestamp": 1404315598,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404315539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Thanks, I just watched the test fail in a bare repl, but I can't seem to reproduce that.</p>\n<p>Something weird is going on here indeed :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24135734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404317135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I really want to look into this, but I'm having some trouble figuring out where to start. I think this is something weird that lein is doing here, but I don't know what sort of weirdness it could be doing and how to isolate its effects.</p>\n<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> do you possibly have any free time later to chat about how to approach debugging something like this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141007,
            "is_me_message": false,
            "last_edit_timestamp": 1404324204,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> digging into the weird things that lein does is not going to be for the faint of heart :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Is it common (even if \"incorrect\") to use stuff from lein during deployment? If lein is doing something to make crypto.equality not work correctly, that can be a big deal in production applications that use crypto-password for instance</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141209,
            "is_me_message": false,
            "last_edit_timestamp": 1404324492,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>but if lein isn't touching any deployed code, this may not be as big of a deal...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> real production stuff generally doesn't use lein. You generate an AOTed .jar that the JVM runs as if it was produced by Java.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>  hmmm.. it's generated with lein though right? </p>\n<p>For context: the reason I started looking into this is because I wanted to explore if there is a timing attack when comparing persistent vectors \"the right way\" because of copy-on-write. And now I'm yak shaving by looking into lein :S</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> AOT compilation doesn't really have anything to do with lein.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24141607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404324938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> <span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> I've reached out to some folks via twitter and other channels and am currently writing an email asking \"What is a junior clojure programmer?\" </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24146352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1404330259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24146492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1404330385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I look forward to some responses, and whether any will differ substantially from what we talked about before </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24146528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1404330424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Let me know if you have any specific questions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24146530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what is a clojure programmer?",
            "submessages": [],
            "timestamp": 1404330425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey ya'll, got bit by an edge case in React's \"pooled\" event system. The code is up <a href=\"https://github.com/Will-Sommers/om-synthetic-event-loss-ex/blob/master/src/synthetic_event_test/core.cljs\" target=\"_blank\" title=\"https://github.com/Will-Sommers/om-synthetic-event-loss-ex/blob/master/src/synthetic_event_test/core.cljs\">here</a>. The basic idea is that you can't pass React's synthetic events around, callbacks or core.async unless you call <code>persisted()</code> on them first, otherwise the event gets \"GC\"'d and returned back to the pool. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24184379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404396744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/facebook/react/blob/8a47813baabcb200f5e0a496dd959cb0ef3adcf3/src/browser/syntheticEvents/SyntheticEvent.js#L109-L116\" target=\"_blank\" title=\"https://github.com/facebook/react/blob/8a47813baabcb200f5e0a496dd959cb0ef3adcf3/src/browser/syntheticEvents/SyntheticEvent.js#L109-L116\">here</a> is the relevant FB code</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24186349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404399608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, I might update the Om docs to add something about this as it is not super intuitive or documented in React even.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24187055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404400547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> please do, I've been bitten by that one before too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24187108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404400600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Cool, should it go under om.dom, I guess? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24187119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404400626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> hmm, it's very core.async specific which Om has nothing to do with. I'd rather it go somewhere else.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24187552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404401185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I wanted to write a macro that expands into a closure created at compile time. according to this link, that's not possible: <a href=\"https://stackoverflow.com/questions/19427303/inconsistency-in-clojure-functions-in-macros-and-illegalargumentexception\" target=\"_blank\" title=\"https://stackoverflow.com/questions/19427303/inconsistency-in-clojure-functions-in-macros-and-illegalargumentexception\">https://stackoverflow.com/questions/19427303/inconsistency-in-clojure-functions-in-macros-and-illegalargumentexception</a></p>\n<p>is that actually true? if it is, is it a design decision or is it because there are implementation issues?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24188354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro expanding into a closure",
            "submessages": [],
            "timestamp": 1404402061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I'll put it under trouble shooting then. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24188498,
            "is_me_message": false,
            "last_edit_timestamp": 1404402235,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404402227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24188901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404402711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>cool, updated. It looks like from React PRs that they are trying to make this more transparent </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24191185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404405445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> the SyntheticEvent is probably also relevant to beginners to Om/CLJS because you cannot use console.log with them unless they are persisted</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24195551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404411637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> we generally don't replicate information that React documentation already covers</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24195581,
            "is_me_message": false,
            "last_edit_timestamp": 1404411694,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404411685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>It isn't documented yet in React, but I understand your position.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24195684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om events and core.async",
            "submessages": [],
            "timestamp": 1404411821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have experience using d3 with Om? Are there any gotchas I should be aware of before I try it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24281608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1404593744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> I have experience with this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24290668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1404614091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>You have to give d3 control over the dom. This is fine, it is okay. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24290677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1404614145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>You create a component that doesn't depend on internal state (don't try to be clever). Just create the div element and use d3 as you normally would inside of did-mount </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24290723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1404614203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hey <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> , remember that blog post you sent me a while ago that compares records to types to maps etc.? when to use which, difference in performance, memory footprint... Could you send me the link again please?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24371485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "records vs types",
            "submessages": [],
            "timestamp": 1404771909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Prismatic/eng-practices/blob/master/clojure/20130926-data-representation.md\" target=\"_blank\" title=\"https://github.com/Prismatic/eng-practices/blob/master/clojure/20130926-data-representation.md\">https://github.com/Prismatic/eng-practices/blob/master/clojure/20130926-data-representation.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24371968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "records vs types",
            "submessages": [],
            "timestamp": 1404772490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24371976,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "records vs types",
            "submessages": [],
            "timestamp": 1404772496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yes! thanks :-)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24373418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "records vs types",
            "submessages": [],
            "timestamp": 1404774561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just read this in a book and I don't understand it:<br>\nThe Clojure sequence library is particularly suited for large (or even infinite) sequences. Most Clojure sequences are lazy: they generate elements only when they are actually needed.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24471003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404864298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>What does it mean by \"generate elements\" when does this generation occur?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24471014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404864316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It's like the concept of a stream found in many other languages.<br>\nThe elements are calculated ('generated') when you first try to use them</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24471256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404864682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>so if i do this</p>\n<div class=\"codehilite\"><pre>(first &#39;(1 2 3))\n</pre></div>\n\n\n<p>Then only the 1 value is \"generated\"?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24471349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404864815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'd guess the answer is no, clojure keeps the full list '(1 2 3) in memory<br>\nA real clojurist will hopefully provide a more complete answer :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24471786,
            "is_me_message": false,
            "last_edit_timestamp": 1404865287,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404864992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I don't know if / where there's a point where a finite sequence is considered 'large' and the clojure compiler treats it differently</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24472062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404865038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see what you mean. Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24472590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404865132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> <code>'(1 2 3)</code> is a list, not a lazy sequence.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>You can think of a lazy sequence as a list, plus code to generate the rest of the list.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>And you can actually create a lazy sequence from scratch using <a href=\"http://clojuredocs.org/clojure_core/clojure.core/lazy-seq\" target=\"_blank\" title=\"http://clojuredocs.org/clojure_core/clojure.core/lazy-seq\">lazy-seq</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Functions like <code>map</code>, <code>filter</code> and <code>range</code> return lazy sequences. This way you can do stuff like</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nb\">take </span><span class=\"mi\">5</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"nv\">odd?</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">1000000000</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>And it returns instantly. In many languages, this sort of thing would generate a list of a billion elements, filter that list of a billion elements, and then finally throw most of that work away, but due to laziness, Clojure handles this efficiently.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Is (range 500) a list or lazy seq ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473354,
            "is_me_message": false,
            "last_edit_timestamp": 1404866359,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Lazy seq.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>user=&gt; (class (range 500))\nclojure.lang.LazySeq\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Versus:</p>\n<div class=\"codehilite\"><pre>user=&gt; (class &#39;(1 2 3))\nclojure.lang.PersistentList\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>(Note that <code>class</code> is mostly for pedagogical purposes/debugging... in real world code, you normally don't want to tell these two things apart. Treating them as the same is a feature. And to that end, <code>seq?</code> returns true for both.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473434,
            "is_me_message": false,
            "last_edit_timestamp": 1404866492,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>A fun way to play with lazy seqs is, at the REPL, create a lazy-seq where realizing the seq will have side effects, e.g.:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">silly-seq</span> <span class=\"p\">(</span><span class=\"nb\">map println </span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>What happens when you <code>(take 10 silly-seq)</code>? <code>take 50</code>? <code>take 10</code> again?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I don't understand the results</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404866994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>What did you see?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>The first returns a list of 42 elements</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>So, note that the output of println will be interspersed with the actual elements of the list.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>The actual elements of the list are all <code>nil</code>, because println returns nil.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>OK</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe this would be clearer?</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">silly-seq</span>\n  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">n</span><span class=\"p\">]</span>\n         <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">&quot;Realizing&quot;</span> <span class=\"nv\">n</span><span class=\"p\">)</span>\n         <span class=\"nv\">n</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473891,
            "is_me_message": false,
            "last_edit_timestamp": 1404867249,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Why does it print 32 elements</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>and then start with <code>(first silly-seq)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Pardon me.<br>\nWhy does it realise 32 elements</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24473945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>So, I don't mean to be difficult, but I also don't want to deny you the joy of figuring it out on your own. :) Why do you think it might work that way? Any advantages to batching elements?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24474072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Sure, sorry, I'll look into it tomorrow morning, it's 2am</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24474130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404867673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> You should assemble a gaggle of clojerks and ask <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> to live-code an implementation of lazy sequences. It really helped me understand this part of clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24481830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404874590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"clojurors\", please.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24481844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404874638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>a clojury of clojurors.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24481848,
            "is_me_message": false,
            "last_edit_timestamp": 1404874656,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404874645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lindsey@composition.al\">@Lindsey Kuper</span> ooh that's great. Really highlights the hammock-driven, pensive nature of clojure programmers.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24482180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404874816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>an advanced degree in Clojure is a Clojuris Doctor</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24482754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404874889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>I much prefer clojurors. Although being an Aussie I am gravitating towards this spelling \"Clojurours\". We might have to see if we can coerce (clojerce?) <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> to do just that....</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24483076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404875017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>wait why isn't it just \"clojurist\"?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24483120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404875052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>because we're being silly?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24483167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404875142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> I'd be happy to go over this some time today or tomorrow :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24502941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Sequences",
            "submessages": [],
            "timestamp": 1404907525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>That's a very nice summary.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24512194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "records vs types",
            "submessages": [],
            "timestamp": 1404921908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>What are you actually trying to do?  I didn't find the SO post very satisfying, but I also couldn't think of any real examples of why you would want to do the various <code>does-not-work</code> examples.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24513105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro expanding into a closure",
            "submessages": [],
            "timestamp": 1404923139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I got it to work <a href=\"https://github.com/ptn/router\" target=\"_blank\" title=\"https://github.com/ptn/router\">https://github.com/ptn/router</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24515300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro expanding into a closure",
            "submessages": [],
            "timestamp": 1404925875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I had to expand my macro into an unevaluated fn form, not the actual closure itself, which won't exist at run time</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24515312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro expanding into a closure",
            "submessages": [],
            "timestamp": 1404925899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Follow-up time!</p>\n<p>It turns out that there were actually two issues at play.</p>\n<p>1) The lein plugin i had installed was incompatbile with the default version of clojure (1.2.1) loaded by crypto-password. This caused the string of errors I saw when trying to run <code>lein repl</code>. Running <code>lein with-profile +1.6 repl</code> fixes that problem. (I also contributed the worlds most trivial <a href=\"https://github.com/weavejester/crypto-equality/commit/e723f9bc1ce7f5c4e0ea9b5ae448a012462f3429\" target=\"_blank\" title=\"https://github.com/weavejester/crypto-equality/commit/e723f9bc1ce7f5c4e0ea9b5ae448a012462f3429\">patch</a> <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> )</p>\n<p>2) The timing issue in the tests was <a href=\"https://github.com/weavejester/crypto-equality/issues/2#issuecomment-48375186\" target=\"_blank\" title=\"https://github.com/weavejester/crypto-equality/issues/2#issuecomment-48375186\">known</a> to the author. It has something to do with JIT. The author observed the same pattern that I did:</p>\n<blockquote>\n<p>Try swapping around <code>(eq? xs yz)</code> and <code>(eq? xs zs)</code>. If your machine is anything like mine, you'll find that no matter which way round the expressions are tested, it's the first expression that takes longer.</p>\n</blockquote>\n<p>He also <a href=\"https://github.com/weavejester/crypto-equality/commit/7ad52eecef52e912f0e6cab0804630be052ceefd\" target=\"_blank\" title=\"https://github.com/weavejester/crypto-equality/commit/7ad52eecef52e912f0e6cab0804630be052ceefd\">fixed</a> the issue (at least for me).</p>\n<p>Conclusion: Yay open source!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24515738,
            "is_me_message": false,
            "last_edit_timestamp": 1404926497,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404926436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>awesome! </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24516216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "I think I'm going crazy",
            "submessages": [],
            "timestamp": 1404926935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> et al.</p>\n<p>I'll be live-coding lazy sequences in Hopper starting in 7 minutes or so :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24519410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404930212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>(excitement '(\"georgi\" \"et al\"))</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24519477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404930250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> - that was really good!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24524127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404934850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24524184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404934926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9d374f524cb3a4cba9f2fa9922dc79dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>I finally got how macros work when explained in human language! hope someone explains monads, functors and combinator as simple and well as you did with macros :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24524953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "vbaybekov@gmail.com",
            "sender_full_name": "Victor Baybekov (S1'14)",
            "sender_id": 5876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404935653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Awesome! I'm glad that I could be helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24525126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lazy sequences!",
            "submessages": [],
            "timestamp": 1404935793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>Just noticed that the docs are now saying that all the combinator functions (e.g. <code>map&lt;</code>, <code>filter&gt;</code>)  are being deprecated for something called <code>transformers</code>. <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Do you know much about this? This is all I could find.<br>\n<a href=\"https://github.com/clojure/core.async/commit/4b06327455d993930a121db7ecfadc6359a23e95#comments\" target=\"_blank\" title=\"https://github.com/clojure/core.async/commit/4b06327455d993930a121db7ecfadc6359a23e95#comments\">https://github.com/clojure/core.async/commit/4b06327455d993930a121db7ecfadc6359a23e95#comments</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24529676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1404940644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span> I do know something about it, but everyone will have to wait ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24529699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1404940667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":open_mouth:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/open_mouth.png\" title=\":open_mouth:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24530151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1404941174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>oh wow didn't notice how recent this development is.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24530177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1404941226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all. Im working through <span class=\"user-mention\" data-user-email=\"maryrosecook@hackerschool.com\">@Mary Rose Cook</span> 's latest blog post. This function returns the average height of the given input people vector. Are there any improvements you would suggest for this code?</p>\n<div class=\"codehilite\"><pre>(def people [{:name &quot;Mary&quot; :height 160 }\n             {:name &quot;Isla&quot; :height 80}\n             {:name &quot;Sam&quot;}])\n\n (defn average-height [coll]\n   [let filtered-by-height (filter :height coll)\n    (double (/ (-&gt;&gt; filtered-by-height\n                    (map :height)\n                    (apply +)) \n               (count filtered-by-height)))])\n\n (average-height people)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24571620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405013416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>oops i pasted a broken version of that function :( hold up...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24571678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405013485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">average-height</span> <span class=\"p\">[</span><span class=\"nv\">coll</span><span class=\"p\">]</span>\n   <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">filtered-by-height</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"ss\">:height</span> <span class=\"nv\">coll</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">double </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">filtered-by-height</span>\n                    <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"ss\">:height</span><span class=\"p\">)</span>\n                    <span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">+</span><span class=\"p\">))</span> \n               <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">filtered-by-height</span><span class=\"p\">)))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24571885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405013714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>what haps when none of the elements of the coll have a <code>:height</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24572116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405013926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>good question. it throws an exception :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24572164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405013999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>even still, this fn seems pretty friggin solid if this is like your first or second week of clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24572328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405014138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>ha. can't take credit at all. <span class=\"user-mention\" data-user-email=\"maryrosecook@hackerschool.com\">@Mary Rose Cook</span>  helped me. You should have seen my first attempt <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24572400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405014235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7ac9c36b540d4490571ad5cd1f4313c682cf2e78?x=x&version=1",
            "client": "website",
            "content": "<p>looks great!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24572499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mary@maryrosecook.com",
            "sender_full_name": "Mary Rose Cook (she) (S'12)",
            "sender_id": 949,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405014355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> <span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> do ya'll ahve any code up that you could point me toward.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24617776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1405089511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> Just gave you access to the private project I have where I did some of this stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24617944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1405089724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>No documentation, unsure if it will still even work. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24617974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1405089732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like this should be useful to see though: <a href=\"https://github.com/zmaril/expertsnyu/blob/master/src/experts_nyu/skills.cljs#L13\" target=\"_blank\" title=\"https://github.com/zmaril/expertsnyu/blob/master/src/experts_nyu/skills.cljs#L13\">https://github.com/zmaril/expertsnyu/blob/master/src/experts_nyu/skills.cljs#L13</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24617993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1405089761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>rad</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24618044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "d3",
            "submessages": [],
            "timestamp": 1405089832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>id like to start a small clojure project - what's a good web framework I can use? Luminous?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24666783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405179613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Perhaps just using Compojure would be enough for you, does anyone know what Luminus offers on top of it? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24666943,
            "is_me_message": false,
            "last_edit_timestamp": 1405180335,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405180035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>perhaps compojure + hiccup would do the trick.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24667035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405180255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Hey Georgi, that's what I think most people use as well. It is my understanding that a lot of Clojure projects aren't actually full web frameworks but a bunch of APIs that are queried via AJAX/sockets. I think that is what prismatic's fnhouse is.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24667234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405180780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>great thanks <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span>  and <span class=\"user-mention\" data-user-email=\"will.sommers@gmail.com\">@Will Sommers (W'14)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24667352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405181018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Yes, it looks like you want HTML templates, so along with compojure you can use clostache, hiccup, enlive or other things for this. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24667962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405182581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p>Luminus is by the same guy that wrote the bulletproof web dev with clojure book.  Near the back of the text he refers to it simply as a curated set of libraries useful for a typical web project.  Luminus makes it easy to start a new project and require whichever of those libraries you'd like with some boilerplate ready to go.  I remember checking it out to see what his best in breed recommendations were for different parts of the app.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24679327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405210445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p>The GH readme has some info on the luminus template along with some flags for adding various functionality: <a href=\"https://github.com/yogthos/luminus-template\" target=\"_blank\" title=\"https://github.com/yogthos/luminus-template\">https://github.com/yogthos/luminus-template</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24679354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405210525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p>and this is the link I found useful when I was trying to figure out which libraries I might want to check out:<br>\n<a href=\"http://www.luminusweb.net/docs/useful_libraries.md\" target=\"_blank\" title=\"http://www.luminusweb.net/docs/useful_libraries.md\">http://www.luminusweb.net/docs/useful_libraries.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24679394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405210581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>This is good info - thanks! </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24680052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "web framework",
            "submessages": [],
            "timestamp": 1405212217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi, anyone have any experience implementing ajax calls with clojurescript? I'm trying to use cljs-ajax but keep getting errors and im not sure if this is even the best approach.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24758925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405371617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I'm a contributor to cljs-ajax :) what's going on?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405371985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>sweet so im trying to make  a GET request </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">GET</span> <span class=\"s\">&quot;/drone-take-off&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>but i keep getting this error on compile: Parameter declaration GET should be a vector</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> I can't help you with the clojure but .... who are you droning?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> im writing a clojurescript app that connects to a drone.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>That's..... really cool!</p>\n<p>Let me know if that's something you'd want to pair on?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>That's a really weird error. What's the context? Is it possible there's an unclosed parenthesis above it or something?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>i am probably doing something incredibly silly as im so new to clojure:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">drone-remote-cljs.main</span>\n<span class=\"c1\">;;   (:use [drone-remote-cljs.remote :as remote])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">domina</span> <span class=\"ss\">:as</span> <span class=\"nv\">dom</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">domina.events</span> <span class=\"ss\">:as</span> <span class=\"nv\">ev</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">ajax.core</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">GET</span> <span class=\"nv\">POST</span><span class=\"p\">]]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">take-off</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"nf\">.log</span> <span class=\"nv\">js/console</span> <span class=\"s\">&quot;in here&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">GET</span> <span class=\"s\">&quot;/drone-take-off&quot;</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>but all the brackets look good!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Did you directly paste your program ? Looks correct to me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>so, that exact program, with <a href=\"https://gist.github.com/graue/5e553bc2abf43270d4fc\" target=\"_blank\" title=\"https://gist.github.com/graue/5e553bc2abf43270d4fc\">this project.clj</a>, compiles just fine for me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24759900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405372811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>in fact, if I add an <code>^:export</code> declaration to <code>take-off</code>, I can even run <code>drone_remote_cljs.main.take_off()</code> in the JavaScript console and it works. Is it possible it's failing to compile the other file, drone_remote_cljs/remote.cljs?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>sometimes it's useful to try a <code>lein cljsbuild clean</code> and then rebuild, too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>as far as I can see, everything in the pasted code itself should work fine</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760145,
            "is_me_message": false,
            "last_edit_timestamp": 1405373111,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span>  we figured out the issue, there was a <code>(defn foo (GET bar)</code> in another file, and that cryptic error is clojure for \"you forgot to put a [] in a  <code>defn</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760172,
            "is_me_message": false,
            "last_edit_timestamp": 1405373173,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>ah nice.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>oh man. It really should give the file and line number of where the error happened, huh?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>If either of you gets to a point where you feel like contributing to the ClojureScript compiler, I understand that patches to improve error messages are very welcome :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>:D thanks guys I knew it would be something silly !</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24760735,
            "is_me_message": false,
            "last_edit_timestamp": 1405373885,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405373810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> <span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> yeah the error could be a whee bit more informative if it showed a suggestion?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761195,
            "is_me_message": false,
            "last_edit_timestamp": 1405374450,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> It appears that Clojure itself has the same error message. See this issue (from 1.2) <a href=\"http://dev.clojure.org/jira/browse/CLJ-365\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJ-365\">http://dev.clojure.org/jira/browse/CLJ-365</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761243,
            "is_me_message": false,
            "last_edit_timestamp": 1405374530,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Defn errors",
            "submessages": [],
            "timestamp": 1405374499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I guess it was even worse before :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Defn errors",
            "submessages": [],
            "timestamp": 1405374524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> improving error messages is low hanging fruit for sure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Defn errors",
            "submessages": [],
            "timestamp": 1405374540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'd be up for giving it a shot!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Defn errors",
            "submessages": [],
            "timestamp": 1405374552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> the high-order bit would be to say what file it was in. There's nothing provided about where the error occurred! We were looking in the wrong file completely.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> that seems weird. With ClojureScript 0.0-2268? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>yup</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Oh I stand corrected. It does say what file (but easy to miss because followed by ~50 lines of internal compiler stack trace), but not what line.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>clojure.lang.ExceptionInfo: failed compiling file:src/drone-remote-cljs/remote.cljs\n                 core.clj:4403 clojure.core/ex-info\n             compiler.clj:1017 cljs.compiler/compile-file\n             compiler.clj:1070 cljs.compiler/compile-root\n               closure.clj:341 cljs.closure/compile-dir\n               closure.clj:381 cljs.closure/eval2976[fn]\n               closure.clj:292 cljs.closure/eval2913[fn]\n               closure.clj:395 cljs.closure/eval2963[fn]\n               closure.clj:292 cljs.closure/eval2913[fn]\n               compiler.clj:44 cljsbuild.compiler.SourcePaths/fn\n                 core.clj:2557 clojure.core/map[fn]\n               LazySeq.java:40 clojure.lang.LazySeq.sval\n               LazySeq.java:49 clojure.lang.LazySeq.seq\n                   RT.java:484 clojure.lang.RT.seq\n                  core.clj:133 clojure.core/seq\n                  core.clj:624 clojure.core/apply\n                 core.clj:2586 clojure.core/mapcat\n               RestFn.java:423 clojure.lang.RestFn.invoke\n               compiler.clj:44 cljsbuild.compiler/cljsbuild.compiler.SourcePaths\n               closure.clj:955 cljs.closure/build\n               closure.clj:923 cljs.closure/build\n               compiler.clj:58 cljsbuild.compiler/compile-cljs[fn]\n               compiler.clj:57 cljsbuild.compiler/compile-cljs\n              compiler.clj:159 cljsbuild.compiler/run-compiler\nform-init6442796523988174529.clj:1 user/eval3309[fn]\nform-init6442796523988174529.clj:1 user/eval3309[fn]\n               LazySeq.java:40 clojure.lang.LazySeq.sval\n               LazySeq.java:49 clojure.lang.LazySeq.seq\n                   RT.java:484 clojure.lang.RT.seq\n                  core.clj:133 clojure.core/seq\n                 core.clj:2855 clojure.core/dorun\n                 core.clj:2871 clojure.core/doall\nform-init6442796523988174529.clj:1 user/eval3309\n            Compiler.java:6703 clojure.lang.Compiler.eval\n            Compiler.java:6693 clojure.lang.Compiler.eval\n            Compiler.java:7130 clojure.lang.Compiler.load\n            Compiler.java:7086 clojure.lang.Compiler.loadFile\n                  main.clj:274 clojure.main/load-script\n                  main.clj:279 clojure.main/init-opt\n                  main.clj:307 clojure.main/initialize\n                  main.clj:342 clojure.main/null-opt\n                  main.clj:420 clojure.main/main\n               RestFn.java:421 clojure.lang.RestFn.invoke\n                  Var.java:383 clojure.lang.Var.invoke\n                  AFn.java:156 clojure.lang.AFn.applyToHelper\n                  Var.java:700 clojure.lang.Var.applyTo\n                  main.java:37 clojure.main.main\nCaused by: clojure.lang.ExceptionInfo: Parameter declaration GET should be a vector\n                 core.clj:4403 clojure.core/ex-info\n              analyzer.clj:268 cljs.analyzer/error\n             analyzer.clj:1522 cljs.analyzer/analyze\n             analyzer.clj:1519 cljs.analyzer/analyze\n              compiler.clj:896 cljs.compiler/compile-file*\n             compiler.clj:1010 cljs.compiler/compile-file\nCaused by: java.lang.IllegalArgumentException: Parameter declaration GET should be a vector\n                 core.clj:6842 clojure.core/assert-valid-fdecl\n                  core.clj:223 clojure.core/sigs\n                  core.clj:301 clojure.core/defn\n               RestFn.java:146 clojure.lang.RestFn.applyTo\n             AFunction.java:29 clojure.lang.AFunction$1.doInvoke\n               RestFn.java:137 clojure.lang.RestFn.applyTo\n                  core.clj:628 clojure.core/apply\n             analyzer.clj:1403 cljs.analyzer/macroexpand-1\n             analyzer.clj:1439 cljs.analyzer/analyze-seq\n             analyzer.clj:1531 cljs.analyzer/analyze[fn]\n             analyzer.clj:1524 cljs.analyzer/analyze\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes and because I wasn't requiring that file anywhere I didn't think cljsbuild would worry about compiling it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I also think the message itself is very unhelpful, <code>Parameter declaration 123 should be a vector {:tag :cljs/analysis-error}</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> oh, this might be because we defer to Clojure for the <code>defn</code> macro and we're not extracting file/line information in that case. Would be a big fix if we did this. When errors originate from CLJS analysis/compilation we emit accurate error location.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761480,
            "is_me_message": false,
            "last_edit_timestamp": 1405374889,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the place to fix it in the macro case <a href=\"https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396\">https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This is where the error comes from in Clojure: <a href=\"https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4160-L4165\" target=\"_blank\" title=\"https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4160-L4165\">https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L4160-L4165</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah we should wrap the <code>(apply mac ...)</code> in a try/catch</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405374977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>This is a really general case, are there other kinds of errors that come from clojure that could be improved here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://dev.clojure.org/jira/browse/CLJS-827\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-827\">http://dev.clojure.org/jira/browse/CLJS-827</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> it's a general case for macros only.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>/me signs the clojurescript CA</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761742,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Any Hacker Schoolers want to pair on this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I\u2019d be up for it. After the talk? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24761969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> sounds good! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24762029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ajax",
            "submessages": [],
            "timestamp": 1405375469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a way to assign a function to a key in a map?<br>\neg:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">my-map</span> <span class=\"p\">{</span><span class=\"ss\">:my-key1</span> <span class=\"p\">[</span><span class=\"nv\">my-function</span><span class=\"p\">]})</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24825984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405471623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> yes functions are values too. It's usually discouraged to put functions in maps but sometimes it's useful.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">my-map</span> <span class=\"p\">{</span><span class=\"ss\">:my-key1</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[]</span> <span class=\"nv\">...</span><span class=\"p\">)})</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24826879,
            "is_me_message": false,
            "last_edit_timestamp": 1405473084,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405473019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span>  You can apparently assign functions to be keys in maps as well, but that is probably discouraged as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24846934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405515689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>(def a {clojure.string/replace &quot;hello&quot;})\n(get a clojure.string/replace)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24846937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405515701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>first class citizensssssssssss</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24850131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405520865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>yarrrr</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24850191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405520920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>sweet next question, how do I actually RUN the function after I get it out of the map eg:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"ss\">:my-key1</span> <span class=\"nv\">my-map</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">my-fun</span> <span class=\"p\">(</span><span class=\"ss\">:some-key</span> <span class=\"nv\">some-map</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">my-fun</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or even <code>((:some-key some-map))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh nice!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>so the second set of parens executes it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g. <code>((:foo {:foo +}) 1 2)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24854903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "functions assigned to keys in maps",
            "submessages": [],
            "timestamp": 1405526775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would love a code review on my clojure/clojurescript app - its my first one.... :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24859967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "code review",
            "submessages": [],
            "timestamp": 1405533128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to write a macro that executes a random item from a list of expressions passed to it, and retains this behavior when you use it inside a function definition.  The example I'm basing this off of loses the randomness after expansion, so putting it in a function call just returns the same item every time. Here's what I've got thusfar:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">random</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">exprs</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">len</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">exprs</span><span class=\"p\">)]</span>\n    <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">r#</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">rand-int </span><span class=\"o\">~</span><span class=\"nv\">len</span><span class=\"p\">)]</span>\n       <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">cond </span><span class=\"o\">~@</span><span class=\"p\">(</span><span class=\"nb\">interleave </span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"ss\">&#39;=</span> <span class=\"nv\">r#</span> <span class=\"nv\">%</span><span class=\"p\">)</span>\n                                 <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"o\">~</span><span class=\"nv\">len</span><span class=\"p\">))</span>\n                            <span class=\"o\">~</span><span class=\"nv\">exprs</span><span class=\"p\">)))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863168,
            "is_me_message": false,
            "last_edit_timestamp": 1405536867,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405536703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>(defmacro random [&amp; exprs] (rand-nth exprs))</code> ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>As far as putting it into a function, you will need to not use a macro for this. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like it seems like overkill. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm learning macros, it's not a real world example, just seeing what's possible</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, like that function is going to be the same everytime. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>(defn result [] (random 1 2 3))\n(result)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Will always be a constant thing. Which it sounds like you get. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I was trying to see if you could use let or something like that to retain the randomness after macro expansion</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Wait a sec, why doesn't this work?</p>\n<div class=\"codehilite\"><pre>user=&gt; (defmacro rand-expr [&amp; exprs] `(rand-nth ~exprs))\n#&#39;user/rand-expr\nuser=&gt; (macroexpand-1 &#39;(rand-expr (fn [] 1) (fn [] 2) (fn [] 3)))\n(clojure.core/rand-nth ((fn [] 1) (fn [] 2) (fn [] 3)))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Where's the extra set of parentheses in the expansion coming from?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24863956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, this works:</p>\n<div class=\"codehilite\"><pre>user=&gt; (defmacro rand-expr [&amp; exprs] `(rand-nth [~@exprs]))\n#&#39;user/rand-expr\nuser=&gt; (rand-expr 1 2 3 4 5)\n1\nuser=&gt; (rand-expr 1 2 3 4 5)\n4\nuser=&gt; (rand-expr 1 2 3 4 5)\n3\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>So you can do it. There's absolutely no reason to use a macro rather than a function for this, but you can do it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>(rand-expr (println 1) (println 2))</code> side-effects</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>(defmacro random [&amp; exprs]\n  (let [len# (count exprs)\n        conds# (interleave (range len#) exprs)]\n    `(condp = (rand-int ~len#)   ~@conds#)))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>(random (println 1) (println 2))</code> shouldn't have the side effects now. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Alas, I have been out-macro'd.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, but can it send email yet?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, so even being the wrong way to do it, it is still possible</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405537996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Zack's version does something a function can't do \u2014 only runs the side effects from the chosen expr</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405538023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Though you could also <code>((rand-expr (fn [] (println 1)) (fn [] (println 2))))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405538063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.youtube.com/watch?v=o1tj2zJ2Wvg&amp;feature=kp\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=o1tj2zJ2Wvg&amp;feature=kp\">Welcome to the tar pit</a></p>\n<div class=\"message_inline_image\"><a href=\"http://www.youtube.com/watch?v=o1tj2zJ2Wvg&amp;feature=kp\" target=\"_blank\" title=\"http://www.youtube.com/watch?v=o1tj2zJ2Wvg&amp;feature=kp\"><img src=\"https://i.ytimg.com/vi/o1tj2zJ2Wvg/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24864476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "random macro",
            "submessages": [],
            "timestamp": 1405538070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sometimes clojure can be annoying.</p>\n<p>This is my dock right now <a href=\"/user_uploads/13/0FM6_GMMZGzCcHe-DWfRvmES/screen-shot-2014-07-16-at-105606-pm.png\" target=\"_blank\" title=\"screen-shot-2014-07-16-at-105606-pm.png\">screen-shot-2014-07-16-at-105606-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/0FM6_GMMZGzCcHe-DWfRvmES/screen-shot-2014-07-16-at-105606-pm.png\" target=\"_blank\" title=\"screen-shot-2014-07-16-at-105606-pm.png\"><img src=\"/user_uploads/13/0FM6_GMMZGzCcHe-DWfRvmES/screen-shot-2014-07-16-at-105606-pm.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24884706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "my dock right now",
            "submessages": [],
            "timestamp": 1405565834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's one ugly dock</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24884890,
            "is_me_message": false,
            "last_edit_timestamp": 1405566208,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "my dock right now",
            "submessages": [],
            "timestamp": 1405566200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>but a beautiful swan</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24887049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "my dock right now",
            "submessages": [],
            "timestamp": 1405570371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> <a href=\"http://swannodette.github.io/2013/07/12/communicating-sequential-processes/\" target=\"_blank\" title=\"http://swannodette.github.io/2013/07/12/communicating-sequential-processes/\">http://swannodette.github.io/2013/07/12/communicating-sequential-processes/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24905709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1405609438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is the most idiomatic way to write this map function? </p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial * </span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nf\">fn</span><span class=\"p\">[</span><span class=\"nv\">n</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">n</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24906718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1405610655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Probably the second one.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24906728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1405610678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>How do I add this library that isn't in Clojars/Maven? <a href=\"https://github.com/ohpauleez/clojure-leap\" target=\"_blank\" title=\"https://github.com/ohpauleez/clojure-leap\">https://github.com/ohpauleez/clojure-leap</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25099969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405980627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can do it locally </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>git clone https://github.com/ohpauleez/clojure-leap.git</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>And then <code>lein install local</code> I think?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Will try it out thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>It should just be <code>lein install</code> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>uhm after that I don't need to specify the dependency in project.clj?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>You do. Do you know much about how maven works?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>leiningen is a really nice wrapper around maven that hides away a ton of really gross java stuff. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Not really, I went straight into Leiningen</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay! Do you know what a jar is?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yep</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great. So maven looks at your dependencies and goes and gets all the jars it needs from the internet.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>It then puts those jars in a special directory in your system somewhere.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can only remember it being in <code>~/.m2</code> but it might depend.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now that the jars are copied locally, they can then be included inside the classpath supplied to the jvm when it starts up. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>leiningen looks at your dependencies declared, makes sure they are installed locally and then supplies the correct classpath to the jvm on startup. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yup, now it makes sense!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>lein install</code> puts the compiled jar for the project into m2 </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>And by having the right namespaces on the classpath (via the declared dependencies) you get access to it from within clojure,</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you really want to dive into this some more, <a href=\"http://www.flyingmachinestudios.com/programming/how-clojure-babies-are-made-what-leiningen-is/\" target=\"_blank\" title=\"http://www.flyingmachinestudios.com/programming/how-clojure-babies-are-made-what-leiningen-is/\">read this</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25100787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1405981678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> thanks for the explanation of the relationship between lein and maven!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25136133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "libraries",
            "submessages": [],
            "timestamp": 1406048088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a way to map a test in clojure? I'm trying to test a random sequence and I want to ensure that every value falls between the lower and upper bounds, but it doesn't seem to run the tests being mapped to values:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">deftest</span> <span class=\"nv\">test-random-sequence</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">s</span> <span class=\"p\">(</span><span class=\"nf\">random-sequence</span> <span class=\"mi\">100</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">s</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">&gt;= </span><span class=\"nv\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">&lt;= </span><span class=\"nv\">%</span> <span class=\"mi\">20</span><span class=\"p\">)))</span> <span class=\"nv\">s</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25146607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406059347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think the problem is that map is lazy, so it won't actually run until you use its return value. try changing that to a loop or doseq.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406059913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(I had this problem the other day)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406059929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I figured a couple of solutions to this in the interim, this runs it as a single assertion:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">deftest</span> <span class=\"nv\">test-random-sequence</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">s</span> <span class=\"p\">(</span><span class=\"nf\">random-sequence</span> <span class=\"mi\">20</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"mi\">20</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">s</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">true</span> <span class=\"p\">(</span><span class=\"nb\">every? true? </span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">&gt;= </span><span class=\"nv\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">&lt;= </span><span class=\"nv\">%</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"nv\">s</span><span class=\"p\">))))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>aah, good thinking!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also had it running as 100 separate assertions, which isn't what I wanted, but is apparently possible</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>trying to undo back to that version of the code</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can't 100% get the multiple assertion version back, it's possible it wasn't working like I thought it did anyway, but yes, the above version does what I wanted</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>excellent! do you in fact need to say <code>(is (= true blablabla)</code>? that reads a little weird... does <code>(is blablabla)</code> work?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good call, you can get rid of the <code>(is (= true ...</code> and it runs the same</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>well, the <code>(= true ...</code> part</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147797,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><img alt=\":+1:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/+1.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>doseq</code> might be worthwhile here</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25147877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>not hundred percent on what you're trying to do but maybe <a href=\"https://clojure.github.io/clojure/clojure.test-api.html#clojure.test/are\" target=\"_blank\" title=\"https://clojure.github.io/clojure/clojure.test-api.html#clojure.test/are\"><code>are</code></a> is helpful?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25148185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406060868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>doseq</code> is actually precisely what I was thinking of originally, I either forgot about that or haven't learned about that one yet. Good to know</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25148430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406061092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>are</code> is also one for the toolbelt</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25148491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406061137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>are is a thing?!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25149424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406062012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> <a href=\"https://github.com/clojure/test.check\" target=\"_blank\" title=\"https://github.com/clojure/test.check\">test.check</a> may be a good fit for this situation where you have a property you want to ensure holds for arbitrary random sequences</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25151168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "testing",
            "submessages": [],
            "timestamp": 1406063636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>does anyone have a nice config integrating debugging capabilities in emacs?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I used someone's public emacs config, so I don't really know how to install or anything, but cider is all you need :D <a href=\"https://github.com/clojure-emacs/cider\" target=\"_blank\" title=\"https://github.com/clojure-emacs/cider\">https://github.com/clojure-emacs/cider</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>but cider is just for executing regions in the REPL, what I found was a debugger called <code>ritz</code>, but it has not been updated (it uses an older version of CIDER when it was called nREPL).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>oooh sorry I totally missed the \"debugging\" bit :/ I thought you wanted general configuration. my bad!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I don't know of any debuggers :/</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The only post I found about it is this one <a href=\"http://ianeslick.com/2013/05/17/clojure-debugging-13-emacs-nrepl-and-ritz/\" target=\"_blank\" title=\"http://ianeslick.com/2013/05/17/clojure-debugging-13-emacs-nrepl-and-ritz/\">http://ianeslick.com/2013/05/17/clojure-debugging-13-emacs-nrepl-and-ritz/</a>, but he mentioned that most of that article is deprecated</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25187998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah I've been looking for a debugger for while and haven't found a good one. <code>ritz</code> was supposed to be nice but I don't want to risk/waste time trying to get it to play with cider.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25188005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've heard Intellj and Cursive might have debuggers</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25188018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>and that he would post an update on '14 but he stopped posting on October :|</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25188024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>But, yeah, I would prefer an emacs one as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25188026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yea I think Cursive has one... but Emacs ;_;!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25188028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs",
            "submessages": [],
            "timestamp": 1406127575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> <a href=\"https://github.com/flatland/ordered\" target=\"_blank\" title=\"https://github.com/flatland/ordered\">https://github.com/flatland/ordered</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25193801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ordered map",
            "submessages": [],
            "timestamp": 1406133525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Is it safe to close over <code>owner</code> in <code>init-state</code>? e.g.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">my-component</span> <span class=\"p\">[</span><span class=\"nv\">data</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">reify</span>\n    <span class=\"nv\">om/IInitState</span>\n    <span class=\"p\">(</span><span class=\"nf\">init-state</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span>\n      <span class=\"p\">{</span><span class=\"ss\">:some-callback</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[]</span> <span class=\"p\">(</span><span class=\"nf\">do-something-to</span> <span class=\"nv\">owner</span><span class=\"p\">))})</span>\n    <span class=\"nv\">...</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25197206,
            "is_me_message": false,
            "last_edit_timestamp": 1406137582,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1406137571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> no</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25197218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1406137593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Ok, thanks\u2013\u00a0I'll find a different solution :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25197229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1406137617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>haha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25210660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1406150959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>i just found out clojure doesn't have string interpolation. SAD!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25271231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406243242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>you can use <code>(str \"value of x: \" x)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25271363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406243412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>hmm is there any reason you can't write a macro for it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25276830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406252526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><code>(tmpstr \"#{name} is #{age} years old\")</code> could expand to <code>(str name \" is \" age \" years old\")</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25276856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406252597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hmmmm interesting. yeah I think that's possible.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25277110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406253157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Are abstracts for past Clojure/conj's online anywhere? Inspired by <span class=\"user-mention\" data-user-email=\"dsucher@gmail.com\">@Danielle E. Sucher (W'12)</span>, I'm thinking of submitting a talk, and it would be useful to see abstracts of past, approved talks... but nothing appears to be online from past years.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25278247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1406255067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc9f215c22985887d9929b85b02c49ef?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure, but the organizers are actually doing a hangout tomorrow (friday 7/24) at 3pm est, and you could always show up and ask them what sort of talks they get most excited about.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25280446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dsucher@gmail.com",
            "sender_full_name": "Danielle E. Sucher (W'12)",
            "sender_id": 879,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1406259098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> that's a good mini project for me! nice</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25295838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406293066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> if you decide to do it, please post the code when you are done! I'd love to take a look :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25298609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406298096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Clojuredocs alternative :) <a href=\"http://grimoire.arrdem.com/\" target=\"_blank\" title=\"http://grimoire.arrdem.com/\">http://grimoire.arrdem.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25307723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "documentation",
            "submessages": [],
            "timestamp": 1406309484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0f54d6b36e7d83288a5f02d33bafa014?d=identicon&version=1",
            "client": "website",
            "content": "<p>One could always pull cl-format from clojure.pprint <a href=\"https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/cl-format\" target=\"_blank\" title=\"https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/cl-format\">https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/cl-format</a> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25326287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pirata@gmail.com",
            "sender_full_name": "Javier Ernesto Olaechea (S'13)",
            "sender_id": 2157,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406333394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>My 2\u00a2: The semantics of <code>str</code> are already close enough to interpolation that adding another layer  just to get rid of a few quotation marks, while increasing the likelihood of obscure error messages, seems to be unclojurey.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25347971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406383799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>oh yeah, Clojure probably doesn't *need*it, it just sounds like a fun program to write to me </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25348935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406386260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> <a href=\"http://clojure.github.io/clojure-contrib/strint-api.html\" target=\"_blank\" title=\"http://clojure.github.io/clojure-contrib/strint-api.html\">http://clojure.github.io/clojure-contrib/strint-api.html</a>. Very few people every used it and it's now deprecated.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25349077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406386675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>yeah, probably because str already gives you like 95% of what you want </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25349120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406386793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>I think I wouldn't use the macro, I just wanna write it :) been studying macros lately </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25349220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406386935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>Im having trouble getting light table to recognise a new dependency I added into my project.clj. It says it can't find it, yet when i run lein run the dependency is picked up no problems. Can anyone help?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25352007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "light table",
            "submessages": [],
            "timestamp": 1406393732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>restart light table perhaps?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25352483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "light table",
            "submessages": [],
            "timestamp": 1406394823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> Typically when I hear about this sort of thing it means that a JVM somewhere is still running that doesn't have the new dep on the classpath.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25352520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "light table",
            "submessages": [],
            "timestamp": 1406394856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> . Thanks i think it was a rogue JVM process! Much appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25361827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "light table",
            "submessages": [],
            "timestamp": 1406416879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>killall java</code> for life</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25368313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "light table",
            "submessages": [],
            "timestamp": 1406431720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0f54d6b36e7d83288a5f02d33bafa014?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that format isn't lispy at all but it comes handy when you need to print numbers in an specific way or items on a list. Btw <span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span>  if you are looking for macros to study you should checkout Timothy Baldridge awesome go macro internal's video series. A bit dense but very thorough: <a href=\"https://www.youtube.com/watch?v=R3PZMIwXN_g\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=R3PZMIwXN_g\">https://www.youtube.com/watch?v=R3PZMIwXN_g</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=R3PZMIwXN_g\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=R3PZMIwXN_g\"><img src=\"https://i.ytimg.com/vi/R3PZMIwXN_g/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25378981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pirata@gmail.com",
            "sender_full_name": "Javier Ernesto Olaechea (S'13)",
            "sender_id": 2157,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406458886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "Android",
            "content": "<p>aaah yes, Zach recommended I watch that but I totally forgot. thanks! </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25383879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406472209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>If you want to print out numbers in a specific way, there's always <code>format</code>.<br>\nBut yeah, <span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> , I also like to write macros that I don't actually use just for practice.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25384286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406473318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've been working my way through On Lisp and now I see macros everywhere</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25384383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "string interpolation",
            "submessages": [],
            "timestamp": 1406473523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Suppose I have a function inside a <code>(go ...)</code> block. Will it be garbage collected when every channel that it's listening/writing to is closed? Or never?</p>\n<p>Am I even asking the right question, or am I misunderstanding the problem?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25470246,
            "is_me_message": false,
            "last_edit_timestamp": 1406639522,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core/async garbage collection",
            "submessages": [],
            "timestamp": 1406639501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> ping</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25473404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core/async garbage collection",
            "submessages": [],
            "timestamp": 1406644786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's a good question to a core async/clojure gc person like me but I don't know if it would be \"well formed\"  to somebody who knows more about clojure. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25473466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core/async garbage collection",
            "submessages": [],
            "timestamp": 1406644858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> more or less, the important thing is the go block is up for collection when it exits. If you're not in a loop then yes closing all channels it's waiting on or writing to will cause it to exit.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25474196,
            "is_me_message": false,
            "last_edit_timestamp": 1406646003,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core/async garbage collection",
            "submessages": [],
            "timestamp": 1406645989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p>Has anybody spent time looking into the architecture facebook is referring to as flux?  Do you have an understanding of the pain points that are relevant / irrelevant to someone using react via om?  </p>\n<p>I started looking at flux last night.  I'm working my way through this, but thought I would ask at the same time.  Please correct without worry of well actually since I don't think I get it yet.</p>\n<p>My understanding of the reason for flux was basically they got tired of having updates to their models which might trigger more updates elsewhere.  It created a high cognitive load because they couldn't predict *what* was going to change given any particular update.</p>\n<p>flux is supposed to address this by being \"unidirectional\" data flow.  It goes action -&gt; dispatcher -&gt; store -&gt; views -&gt; action.  An action (which is really just a helper function that creates a payload object for the dispatcher) gets sent to a dispatcher.  The dispatcher maintains a list of all the stores(akin to models), the order in which they have to be updated, and what callbacks to use to do the updating.  It will accept a payload from an action, and then use all those registered callbacks to correctly update all the stores.  Once everything is done processing and the stores are totally up to date, they emit a change event.  The parent react element then listens for this, and forces a rerender of all its children.</p>\n<p>Sounds a like most of that is already handled in om, which feels pretty unidirectional already.  Our store is the atom.  We have controlled state transitions via transact! update!.  om/root also automatically listens to changes and rerenders when necessary.  </p>\n<p>What I don't get is if there are issues that I'm just not seeing because I haven't been bitten by them yet.  Seems like much of their headache was coordinating multiple stores.  Is that irrelevant if you're only working with a single atom?  Any guidance as to what I'm missing or need to think about?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25480757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1406654206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>I've been implementing a version of flux at work, simply because I'm running into problems coordinating the state between multiple react components on the same page.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1406657320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>Really wish I just had a clojure atom.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25483559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1406657330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"briankimpossible@gmail.com\">@Brian Kim (W'14)</span>  So what does flux do that having an atom doesn't already accomplish?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25485920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1406659847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25489158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core/async garbage collection",
            "submessages": [],
            "timestamp": 1406663513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It took me a bit of time to figure out how to build the  <strong>Clojure Cookbook</strong> from source to both epub and mobi, I thought I'd dump the steps I ended up taking here.  It's all on mac, and obviously you might have some things installed already:</p>\n<div class=\"codehilite\"><pre>brew install asciidoc <span class=\"nb\">source</span>-highlight\nbrew link boost\nbrew install <span class=\"nb\">source</span>-highlight\ngit clone https://github.com/clojure-cookbook/clojure-cookbook.git\n<span class=\"nb\">cd </span>clojure-cookbook\n./script/asciidoc/bootstrap_osx.sh\nasciidoc -b html5 conventions.asciidoc\n<span class=\"c\"># the -L suppresses the xmllint error</span>\na2x -L -fepub -dbook book.asciidoc \n</pre></div>\n\n\n<p>At this point, you should have an the epub, suitable for a variety of readers.  There's no cover image, and the first page shows a conversion error that I didn't bother to chase down, but other than that, it seems complete.  <br>\nTo get the mobi (kindle) format, I tried a bunch of things but ended up giving in and downloading Calibre, from which opening the epub and pressing convert proceeded without issue.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25527772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cookbook cookbook",
            "submessages": [],
            "timestamp": 1406733339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> Cool! Would you mind x-posting this to <a href=\"https://community.hackerschool.com/f/general/4\" target=\"_blank\" title=\"https://community.hackerschool.com/f/general/4\">Community</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25530627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cookbook cookbook",
            "submessages": [],
            "timestamp": 1406736503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Ok.  Should I just put it in Programming/General?  Maybe I haven't been paying attention, but I'm not really sure how to \"use\" Community.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25531829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cookbook cookbook",
            "submessages": [],
            "timestamp": 1406737949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, just put it in Programming &gt; General for now. We'll eventually have better categorization for programming things, but we're still figuring out what we want.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25531921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cookbook cookbook",
            "submessages": [],
            "timestamp": 1406738053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25531931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cookbook cookbook",
            "submessages": [],
            "timestamp": 1406738061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Walmart labs is a thing, and they hire Clojure developers. ?!</p>\n<p>Discuss.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406924802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Walmart Labs comes from an acquisition of Kosmix, which was founded by Anand Rajuraman. He is famous primarily from having previously founded a company called Junglee, of which Peter Norvig was either an early employee, or a co-founder, and which was later acquired by Amazon. The Kosmix team was reputedly *excellent*, before they mostly left.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406924986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648740,
            "is_me_message": false,
            "last_edit_timestamp": 1406925024,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Walmart is one of the most difficult operational challenges in the world. The vision of WalmartLabs was to see if they could use scale data analysis to dramatically affect the ops problems they faced.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(To answer your deleted question, sorry.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I realized I could google it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>it seems like it started as some kind of search engine</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It is thought to be a talent acquisition.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> they bought Runa which was a Clojure shop, so they have quite bit of Clojure talent in-house now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25648858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Staples bought runa</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25649028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the very first large projects I did that involved computers was analyzing walmart point of sale data.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25649046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> oops! huh for some reason I thought there was a Clojure acquisition related to Walmart :P thanks for setting me straight.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25649057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.reddit.com/r/programming/comments/16k1x4/just_found_out_that_walmart_has_a_github_account/c7xfaqx\" target=\"_blank\" title=\"http://www.reddit.com/r/programming/comments/16k1x4/just_found_out_that_walmart_has_a_github_account/c7xfaqx\">http://www.reddit.com/r/programming/comments/16k1x4/just_found_out_that_walmart_has_a_github_account/c7xfaqx</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25649106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406925504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Wonder what fraction of their developers are on foodstamps.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25651855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406928792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>... damnnnnn</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25651921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "walmart",
            "submessages": [],
            "timestamp": 1406928895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>That's the error you get by accidentally leaving in the <code>defn</code> when refactoring a function into a protocol implementation.<br>\nFor extra fun, it's attributed to an apparently random line number.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25765500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407176566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>yayyyy error messages</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25765872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407176975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> If you have time, it might be gratifying to track down the protocol code in the compiler and submit a patch to give better errors. <span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> managed to make a similar contribution to ClojureScript the other day.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25776656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407188845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I did indeed fix a very similar error message issue in clojurescript.</p>\n<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> do you have a failing test case? I'd be down to pair on submitting a patch to improve the error if you're interested.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25787361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407205792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defprotocol </span><span class=\"nv\">Kablooey</span> <span class=\"p\">(</span><span class=\"nf\">boffo</span> <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Bloink</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">]</span> <span class=\"nv\">Kablooey</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">boffo</span> <span class=\"p\">[</span><span class=\"nv\">this</span> <span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>works fine without the interloping <code>defn</code>. <br>\n<span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> Also down.  I'd really like to learn how to track something like this down.  I have a hunch that it has something to do with line 49 of <code>core_deftypes.clj</code>, which seems to make the assumption that the second thing in a method declaration is going to be a sequence,  but I don't have any kind of workflow for testing this,</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25819508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407261724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>boffo</code> is absolutely going in my repository of placeholder symbols</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25819906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I'd love to participate in this as well. I sort of feel like this could be a great blog post that could get folks excited in contributing the clj.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25819989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> I knew I should have copyrighted it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"wforzo@gmail.com\">@Will Orzo (W'14)</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> do you guys want to co-ordinate sometime next week?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>not going to have a lot of free time this week alas</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah.  This week isn't so good for me, but I'm hopeful about next week.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> are you perchance based in NYC?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>In general, it feels like macros are dangerously limited in the error messages they emit.  I'm not sure yet whether this is a fundamental limitation and hope that it isn't.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25820144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407262398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> not much to do w/ macros fundamentally, just depends on how much validation work you want to put into the macro, little different from the amount of validation you want to put into a parser or compiler.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25821855,
            "is_me_message": false,
            "last_edit_timestamp": 1407263913,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407263899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That's what I'm gathering, but the fact that some pretty fundamental macros still lack minimal validation says something either about how easy it is to add it or how important it is considered.  This is definitely in the category of deficits that make it harder for me to crow about how everyone should be using Clojure.  For me, it's only an inconvenience, as I can slip into a semi-conscious bisection search and generally narrow down my problem quickly, but it makes the sell harder.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25822406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407264440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> no argument there, macro validation is not a super high priority. but really the error isn't horrible, i.e misplaced delimiters sucks in many languages - it's only coupling w/ bad source location that's an issue in my opinion. Not sure why that didn't happen for you - that's what I would dig into if I was digging into anything. FWIW that's something we changed in ClojureScript macro expansion errors, alway pass source info.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25822711,
            "is_me_message": false,
            "last_edit_timestamp": 1407264743,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407264682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Any pointers on where to learn about how/where location attribution is done?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25822826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407264777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> it just needs to be captured during macro expansion so if you get an error you can communicate where. <code>macroexpand</code> or <code>macroexpand-1</code> are the places to look.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25822938,
            "is_me_message": false,
            "last_edit_timestamp": 1407265463,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407264852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9f7964db6b994ddd8c669d6c97389a48?d=identicon&version=1",
            "client": "website",
            "content": "<p>This made it's way on to Hacker News.  <a href=\"https://justin.harmonize.fm/development/2014/08/05/om-and-flux.html\" target=\"_blank\" title=\"https://justin.harmonize.fm/development/2014/08/05/om-and-flux.html\">https://justin.harmonize.fm/development/2014/08/05/om-and-flux.html</a> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25848352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "fred.antell@gmail.com",
            "sender_full_name": "Fredrik Antell (W'14)",
            "sender_id": 5058,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1407302028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"fred.antell@gmail.com\">@Fredrik Antell (W'14)</span> I saw that. Seems interesting, but I'm not really convinced by this. In particular, I don't know if I care about the pub/sub bit of it\u2013 I think I just want a single controller that handles all messages. I don't really want a ton of little async loops listening for all the various messages I send. I rather have a single loop that calls a multimethod or something.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25875960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "flux architecture / om",
            "submessages": [],
            "timestamp": 1407348572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"georgiknox@gmail.com\">@Georgi Knox (S'14)</span> <a href=\"https://gist.github.com/happy4crazy/41f391e1be258d2bfa97\" target=\"_blank\" title=\"https://gist.github.com/happy4crazy/41f391e1be258d2bfa97\">https://gist.github.com/happy4crazy/41f391e1be258d2bfa97</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25881997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407354671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>this was so awesome!! thanks <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> !!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25882064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407354731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span>  can you think of some good tasks that I can do to extend this script so I can understand it better? using nio for example?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25883016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407355708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Using <code>nio</code> could be cool, although tbh I found <code>nio</code> quite difficult to use the last time I looked at it. You could also add error handling.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25883038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407355735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g. if you hand me a pair of channels representing a socket, how do I close the socket?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25883054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407355750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4374e96a4fe9337a0d110b869f5b61?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25883086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "georgiknox@gmail.com",
            "sender_full_name": "Georgi Knox (S1'14)",
            "sender_id": 5858,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async socket stuff",
            "submessages": [],
            "timestamp": 1407355794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> In this case, the error is actually occurring in the macro code itself, so you get the error just running <code>macroexpand</code>.<br>\nI'm pretty sure I know what line in the macro code is bombing, but I don't know how to turn that into a line number in my source code.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25886608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407359503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>See how we handle this in ClojureScript <a href=\"https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396\">https://github.com/clojure/clojurescript/blob/master/src/clj/cljs/analyzer.clj#L1396</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25886670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407359552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Why is <code>macroexpand</code> different in Clojure and ClojureScript?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25886776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407359688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> because macros are written in Clojure and the ClojureScript compiler isn't the Clojure compiler. Also by implementing macroexpand we can do lots of additional nice things specifically for ClojureScript.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25887134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Don't know how to create ISeq from: clojure.lang.Symbol",
            "submessages": [],
            "timestamp": 1407360123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Great to see some transducer implementations. Is a post on the contracts a transducer must adhere to forthcoming?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25895212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407371166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> pretty sure Rich will be doing a lot more explaining. It's not hard to glean the contract from the existing code in Clojure if you spend some time with it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25928685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407432628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>\"Because the reducers library intends to deliver an API with the same 'shape' as existing sequence function APIs, these transformers were never exposed a la carte, instead being encapsulated by the macrology of reducers.\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407435907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>gif me :3</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407435924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0507a8de466d3310f1160062afbe222a?d=identicon&version=1",
            "client": "API: Python",
            "content": "<p><a href=\"http://media2.giphy.com/media/3ZU5TLd37x2da/200w.gif\" target=\"_blank\" title=\"http://media2.giphy.com/media/3ZU5TLd37x2da/200w.gif\">http://media2.giphy.com/media/3ZU5TLd37x2da/200w.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"http://media2.giphy.com/media/3ZU5TLd37x2da/200w.gif\" target=\"_blank\" title=\"http://media2.giphy.com/media/3ZU5TLd37x2da/200w.gif\"><img src=\"https://external-content.zulipcdn.net/7cab5c76f1b0bf531376e275e520647a4e38b789/687474703a2f2f6d65646961322e67697068792e636f6d2f6d656469612f335a5535544c643337783264612f323030772e676966\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gif-bot@students.hackerschool.com",
            "sender_full_name": "gif bot",
            "sender_id": 5951,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407435927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>oh boy woops sorry</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407435938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p>first and last time I use this bot</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407435968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ffbae1bce3720e05537f5ff9e9b5887d?d=identicon&version=1",
            "client": "website",
            "content": "<p>So a transducer is basically a partial applied sequence function? Oh but... that would care about the source, so they must be slightly more magic.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pepijndevos@gmail.com",
            "sender_full_name": "Pepijn de Vos (he) (S'12)",
            "sender_id": 906,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Per <a href=\"https://twitter.com/richhickey/status/497098126709506049\" target=\"_blank\" title=\"https://twitter.com/richhickey/status/497098126709506049\">Rich Hickey</a>, a transducer is <code>(x-&gt;b-&gt;x) -&gt; (x-&gt;a-&gt;x)</code></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/richhickey/status/497098126709506049\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/2694242404/5b0619220a92d391534b0cd89bf5adc1_normal.jpeg\"></a><p>Transducers are not currying or partial! Clojure's (map f) returns a transducer, (x-&gt;b-&gt;x)-&gt;(x-&gt;a-&gt;x), not [a]-&gt;[b]. No lists involved.</p><span>- Rich Hickey (@richhickey)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Further evidence that every well-documented Lisp program contains an ML/Haskell program in its comments :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>So the one-argument version of <code>map</code> takes a function from <code>a</code> to <code>b</code>, and returns a function that converts a reducer of <code>b</code>s to a reducer of <code>a</code>s.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ffbae1bce3720e05537f5ff9e9b5887d?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha, nice</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25931705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pepijndevos@gmail.com",
            "sender_full_name": "Pepijn de Vos (he) (S'12)",
            "sender_id": 906,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407436267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Ha ha this gifbot thing could really get out of control.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25935675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407440570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>All of the Clojure transducers work has now been ported to ClojureScript master</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25936408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407441434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Nice work <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>. Sounds like a new release will be coming soon :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25939500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1407445146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm experimenting with injecting recompiled namespaces directly into a running cljs/om application via websockets + js <code>eval</code>. Does anyone know if there's a clever way to invalidate all of React components so that everything re-renders?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25945226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om livereloading",
            "submessages": [],
            "timestamp": 1407452163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> ^^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25945256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om livereloading",
            "submessages": [],
            "timestamp": 1407452170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> <code>om.core/root</code> is idempotent. If you call it on the same HTML element everything will invalidate.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25945314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om livereloading",
            "submessages": [],
            "timestamp": 1407452271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Confirmed, that works perfectly. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25945452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om livereloading",
            "submessages": [],
            "timestamp": 1407452415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've got a function that accepts arbitrary user input and can potentially blow up in terms of running time. I'd like to make it so that if the function takes longer than a second to run, the function logs the input for review and then returns back a default argument, interrupting function evaluation.  How should I go about this? Futures seem like vaguely the right answer but I'm unsure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25983641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maximum running time of a function",
            "submessages": [],
            "timestamp": 1407521626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh, that was easy. <code>deref</code> can take a timeout limit and value. Who knew? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25984100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "maximum running time of a function",
            "submessages": [],
            "timestamp": 1407522139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>1) exists: <a href=\"http://grimoire.arrdem.com/\" target=\"_blank\" title=\"http://grimoire.arrdem.com/\">http://grimoire.arrdem.com/</a><br>\n2) is sort of like hoogle for Clojure, but not (yet) as exhaustive and cooperatively authored via pull requests (which means more examples)<br>\n3) doesn't seem to have been  mentioned on Zulip before<br>\n4) is accessible in Cider &gt;= 7.0 via <code>C-c C-d g</code> in the same situations where you would <code>C-c C-d d</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26022509,
            "is_me_message": false,
            "last_edit_timestamp": 1407605960,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Grimoire",
            "submessages": [],
            "timestamp": 1407599458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26028761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Grimoire",
            "submessages": [],
            "timestamp": 1407615209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks for the cider tip!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26039045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Grimoire",
            "submessages": [],
            "timestamp": 1407640164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>So many times everything is broken until I quit and <code>lein cljsbuild clean</code>. <span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> You're totally fixing this, right? ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26098480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407774852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> still curious about these issues you've been having with long running <code>cljsbuild</code> it's not something I hear reports about elsewhere (which doesn't mean much of course).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26098933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407775537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Yeah, I sort of put finding a minimal reproducible case on the backburner when we realized that a fresh run generally did the trick. The errors I see in the JS console seem to be rather random \u2013 sometimes it's something from React breaking, sometimes it's something in my code breaking, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26099069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407775693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> what optimization settings? <code>:none</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26099082,
            "is_me_message": false,
            "last_edit_timestamp": 1407775725,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407775721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>No, this is always with advanced optimizations</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26099087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407775732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> ah OK that narrows it greatly - probably a dependency ordering problem under advanced during multiple builds.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26099102,
            "is_me_message": false,
            "last_edit_timestamp": 1407775781,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407775767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> Been sketching around here: <a href=\"https://github.com/lynaghk/clojurescript-compiler-proposal/blob/master/src/com/keminglabs/cljs_proposal/easy.clj\" target=\"_blank\" title=\"https://github.com/lynaghk/clojurescript-compiler-proposal/blob/master/src/com/keminglabs/cljs_proposal/easy.clj\">https://github.com/lynaghk/clojurescript-compiler-proposal/blob/master/src/com/keminglabs/cljs_proposal/easy.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26101075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407778446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> It shouldn't be too hard to use a content-addressing to build a cache on disk with precompiled stuff. The tricky part is enumerating all of the dependencies that goes into the compilation of a single cljs string (cljs compiler version, clojure version, any macros on the classpath, &amp;c.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26101132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljsbuild",
            "submessages": [],
            "timestamp": 1407778536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have three components: user-view, input-view and foobar-view. input-view has an input box where you enter an API-key and when you press enter it send a request for some faraway resource. This faraway resource returns a user (if successful), and sends this over an event channel. The user-view then takes (&lt;!) this from the event-channel, stores it and displays it. So far so good. Now I have a third view foobar-view, which is logically separate from user-view and its cursor. However, it needs the API-key which is communicated on the event channel. How should I access / communicate this key from the foobar-view component?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26150847,
            "is_me_message": false,
            "last_edit_timestamp": 1407861587,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407861429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> What do you mean that the foobar-view is logically separate? If it needs the API-key, it should probably get it from the app state. I'm not a huge fan of communicating things like AJAX results directly to components via a channel \u2013\u00a0I think they should just update app state. That way components are much more like pure functions from some state to some render tree, and less like processes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I used to communicate results directly to components in Community, but I recently refactored it to use a centralized controller. When a component needs a request to be made, it asks the controller to make it. Once the request is done, the controller updates the app state appropriately.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> I mean that the only thing it needs is the key to make fetch data, the actual data there has nothing to do with user-view. Sorry, the AJAX result does update the app state, that's how the components get updated, but it happens in IWillMount of user-view, so that's the cursor it is using</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe that's the problem? that the will-mount for it should be in the global app-view, and then traverse down to both :user and :apikey key?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, exactly</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151603,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>a central controller knows about user-view and foobar-view</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>and can put the right state in the right place</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah I see, so it's not a problem that the bulk of the state gets to the \"wrong\" level initially?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess there's no reason why it would be if the cursor is well-specified. Will try, thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26151683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407862597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Sure thing! Let me know how it goes :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26152327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1407863517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> it worked well btw, I have a will-mount in app-view with a  (condp keyword-identitical? (:tag t) to dispatch requests, and then in requests I deref the relevant app state and have a handler which updates the app-state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26245432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1408012275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>stole the condp thing from community, but otherwise pretty flat structure so far</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26245441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1408012304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Cool, glad to hear <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26252298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om and core.async - state in multiple logical places?",
            "submessages": [],
            "timestamp": 1408026067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Cross-posting self-promotion from blogging stream <a href=\"http://podsnap.com/girder.html\" target=\"_blank\" title=\"http://podsnap.com/girder.html\">http://podsnap.com/girder.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26423301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "purely functional distributed programming clojure",
            "submessages": [],
            "timestamp": 1408368515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a clojure idiom for prepending an element to a vector while also returning a vector?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26595603,
            "is_me_message": false,
            "last_edit_timestamp": 1408648221,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408645843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>right now we have (vec (concat [el] my-vector)). is that the best we can do? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26595751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408646008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> there's no fast operation to prepend. If you find yourself needing that then a plain vector may not be what you want.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26595927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408646201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Darn. We're generating 'hiccup-like' markup, and for whatever reason, the API doesn't work if we give it a seq :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26596060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408646339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26596083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408646382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I also still have that gripe ;_;</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26596309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408646613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3ca10e3279a7e8160f7617fe8b8cdcbb8f29d3f?x=x&version=1",
            "client": "website",
            "content": "<p><code>(vec (cons elem my-vector))</code> also works.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26598004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "briankimpossible@gmail.com",
            "sender_full_name": "Brian Kim (W'14)",
            "sender_id": 4991,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408648386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> for that use case <code>(vec (cons el some-vec))</code> works, I can't imagine perf mattering in this case.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26598906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1408649467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Perhaps you can benefit from 2 hours of my stupidity:<br>\n<a href=\"http://blog.podsnap.com/clj-deps.html\" target=\"_blank\" title=\"http://blog.podsnap.com/clj-deps.html\">http://blog.podsnap.com/clj-deps.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26715761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging lein dependency problems",
            "submessages": [],
            "timestamp": 1408892075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is anyone familiar with a scheme for conveying graph data structures from a Clojure backend to ClojureScript frontend?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>JSON doesn't have built-in references, so it needs some additional semantics to convey a graph data structure that can be traversed easily (like Datomic entities)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The unofficial Datomic-in-ClojureScript is the closest I can find (<a href=\"https://github.com/tonsky/datascript/\" target=\"_blank\" title=\"https://github.com/tonsky/datascript/\">https://github.com/tonsky/datascript/</a>), but I was wondering if folks are familiar with other, lighter schemes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> last I looked DataScript was pretty lightweight, what's the problem you see?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> One big problem was that it didn't have lazy entity support, which was why I started writing out this question. Apparently sometime last night he pushed that up though =P</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Perf-wise, it takes about 300--500 ms to transact just 1000 datoms, which is too long for my use case</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Mostly that's an issue with startup speed for my JS, though---I only want to use DataScript for the entity-graph traversal. So it may be possible to \"bake in\" the entities I need at compile time or something</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408981899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> ok not sure I really understand your requirements. Not aware of anything else though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26754997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> What do JS-folks do when they need to convey over the wire data structures with cyclic references?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> if that's because you want to serialize a object graph I would say \"Don't do that\". If you're actually attempting something reasonable I don't think many JS people are thinking at the Datomic level of abstraction.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> David, you know I'm always a reasonable person!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> = P I'm trying to convey a statechart (something like a finate state machine; <a href=\"http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf\" target=\"_blank\" title=\"http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf\">http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway, now that DataScript has lazy entity support I'll move forward with it and then see if I can work on the perf to meet my app's requirements.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408982382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> let me know how it goes. I was interested in DataScript at one point but I gave up trying to push the project towards better design decisions. It's possible to make something very fast out of DataScript not sure if it will actually get there. I may get back to my private DataScript thing-y when I have time (who knows when that'll be).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26755871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic-like datastructures in cljs",
            "submessages": [],
            "timestamp": 1408983107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm building templates for Om using Sablono (Hiccup for Om, basically: <a href=\"https://github.com/r0man/sablono\" target=\"_blank\" title=\"https://github.com/r0man/sablono\">https://github.com/r0man/sablono</a>). I'm not sure if I should be building most of my templates out as fns that return hiccup or as Om components.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409088771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The former feels much simpler and more natural to me, but I'm not sure if that will lead to performance issues or other \"not using Om properly\" gotchas down the line</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409088800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example: I want a generic rendering function: if an object has a :template key, use that template to render it. Otherwise, use a default template.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409088891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>With hiccup, I can write this generic render function with a simple <code>if</code>. With Om, I'm not sure if I should be doing that or doing a component with an <code>if</code> contained inside of that component's render method.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409088937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I do a mix of both (though I'm not a fan of Hiccup). Fns that return React DOM and fns that return Om components. The only downside with React DOM is they don't let you hook into subtree pruning the way Om components do.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823212,
            "is_me_message": false,
            "last_edit_timestamp": 1409088982,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409088956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I am interested in knowing about the different approaches there are, with their pros and cons, this is the  only article I found about that <a href=\"http://cemerick.com/2011/10/17/a-la-carte-configuration-in-clojure-apis/\" target=\"_blank\" title=\"http://cemerick.com/2011/10/17/a-la-carte-configuration-in-clojure-apis/\">http://cemerick.com/2011/10/17/a-la-carte-configuration-in-clojure-apis/</a>. Are there any others?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "API with configuration",
            "submessages": [],
            "timestamp": 1409089059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Yeah, that was the biggest issue I was wondering about. Though if my functions are returning hiccup (rather than React DOM), isn't the toplevel component (where sablono.core/html is being called) going to do a tree diff?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> yep.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Actually, why doesn't React DOM do tree diffs? I thought that was the whole point</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Or does it just miss out on fast pruning via equality check, because React DOM is built on JS instead of CLJS data structures?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> React DOM doesn't do pruning. You hit the leaves of your render tree. And yes no pruning because JavaScript.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823468,
            "is_me_message": false,
            "last_edit_timestamp": 1409089290,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which is a strong case for a pure CLJS React thing one day.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Okay, got it. Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26823530,
            "is_me_message": false,
            "last_edit_timestamp": 1409089425,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om / sablono component composition",
            "submessages": [],
            "timestamp": 1409089341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>not really since it's an <code>O(n)</code> operation</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26856923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409154792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>i usually use <code>into</code> though; e.g., <code>(into [el] my-vector)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26856995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409154871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> do you know if there is a plan to add RRB-trees to clojure (<a href=\"http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf\" target=\"_blank\" title=\"http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf\">http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf</a>)? or if anyone tried it as an experiment and benchmarked it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26857039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409154940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah weird -- i didn't see anything past the question until now!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26857081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409154974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>you at least get O(log n) insertions at / splits at</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26857088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409154981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jose.valim@gmail.com\">@Jos\u00e9 Valim</span> already exists <a href=\"https://github.com/clojure/core.rrb-vector\" target=\"_blank\" title=\"https://github.com/clojure/core.rrb-vector\">https://github.com/clojure/core.rrb-vector</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26857287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409155240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>awesome! thanks for the link</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26857295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prepending to vector",
            "submessages": [],
            "timestamp": 1409155258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone planning on going?  They rejected by admittedly boring talk proposal, but I think I'll go anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26929132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409264574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I want an excuse to go but my proposal was also rejected and not sure if I can get the time off so soon after starting my new gig.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26931606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409268883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was only going to go if my talk on <a href=\"https://github.com/sunlightlabs/echelon\" target=\"_blank\" title=\"https://github.com/sunlightlabs/echelon\">ECHELON</a> was accepted. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26931617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409268929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which doesn't make sense I suppose cause it would be way more work to give a talk than to just attend and I should probably have the money to attend.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26931663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409268981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>So maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26931666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409268984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be there! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26931884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409269444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> You should go!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26956435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409322899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Using my rigorous scientific training,  I figured out that the reason my talk was rejected is that I jinxed myself by not buying a ticket before the announcement date, just in case.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26956510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409323000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> from what I heard we received more proposals than ever and many of extremely high quality - the decision making process was quite tough from what I gathered</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26957094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409323984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>and agreed <span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> you should go! Just a train ride away.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26957155,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409324052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That's what I gathered, and, maybe taking the logic a bit too far, if I actually do think my talk would have been good, and I know that all the accepted talks are even better, then it would be stupid not to go hear them.  By contrast, if my talk had been accepted, I would have no calibration.  Anyway, I'm going.  Amtrak was far more reasonable than I thought it would be; perhaps Washington shuts down as Thanksgiving approaches.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26957434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409324421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I'll be in Texas finishing up college, which is a bit more than a train ride away ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26958138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409325367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I'll definitely consider it. Depends on the speaker list. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26958164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409325402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> ah sorry thought you were still in NYC :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26966827,
            "is_me_message": false,
            "last_edit_timestamp": 1409337663,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409337599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> yeah I was thinking about training it down as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26966895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409337652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wish! And I was just in DC working for the summer, so I really would like a reason to visit again. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26966907,
            "is_me_message": false,
            "last_edit_timestamp": 1409337686,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1409337673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://clojurecup.com/\" target=\"_blank\" title=\"https://clojurecup.com/\">https://clojurecup.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27123620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1409688670,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ooh that looks cool!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27123961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1409689140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it has pretty much the same structure as NodeKnockout</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27124052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1409689256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>How much JavaScript would you need to know before doing non-trivial work in ClojureScript?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27174211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1409773300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> production ClojureScript generally involves non-trivial amounts of interop so you need to be familiar with basic JavaScript.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27174283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1409773386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Good to know, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27174375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1409773467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm writing my first clojure macro - a way to print the docstrings of functions as they run (&amp; eventually it will let you interpolate the arguments the function was called with into the docstring). I have a rough version working &amp; would appreciate code review if anyone has a few minutes: <a href=\"https://gist.github.com/mhuebert/c03c131ca0f43f034f0c\" target=\"_blank\" title=\"https://gist.github.com/mhuebert/c03c131ca0f43f034f0c\">https://gist.github.com/mhuebert/c03c131ca0f43f034f0c</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27401996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410208123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Updated version now successfully prints interpolated docstrings: <a href=\"https://gist.github.com/mhuebert/c03c131ca0f43f034f0c\" target=\"_blank\" title=\"https://gist.github.com/mhuebert/c03c131ca0f43f034f0c\">https://gist.github.com/mhuebert/c03c131ca0f43f034f0c</a>. It uses a decorator pattern now, which some advise against, but I haven't heard any better ideas. All feedback is welcome, I'm still just getting the hang of this language.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27458322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410297759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40f77a8113dc6fa593aed6954966c014c1b92ec2?x=x&version=1",
            "client": "website",
            "content": "<p>A DECORATOR? HAH!? You must be such an inferior human specimen.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27459163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "himerzi@gmail.com",
            "sender_full_name": "Michael Detmold (S2'14)",
            "sender_id": 6186,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410298917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"matt@sparkboard.com\">@Matthew Huebert (S'14)</span> Perhaps another way to implement this is to use higher order functions instead of macros. Much in the same way that you can pass in a function to <a href=\"http://clojuredocs.org/clojure_core/clojure.core/memoize\" target=\"_blank\" title=\"http://clojuredocs.org/clojure_core/clojure.core/memoize\"><code>memoize</code> and get a memoized function back</a>, it should be possible to produce a function that takes in a docstring and a function and returns a function that prints out what you what it to print out whenever it is called.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27475471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410327697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>(defn docprintter [d f] (fn [&amp; args] (println d) (apply f args)))</code> is one simplified example. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27475961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410327923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>This takes in a string and a function and returns anew  function that will print out the original string and the result of the original function applied to the arguments passed to the new function. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27476008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410327965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>This way you don't have to mess with the docstrings of the actual functions and split up the information about all the neat stuff you are doing. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27476111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410328000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hey Zack, thanks for the pointer. That approach would definitely work. For debugging / dev purposes, I like the macro approach because it means I don't have to modify my application code at all (except the docstring) and can dis/enable docstring printing at will. But if I end up wanting this in application code I will likely do something like you suggest, or write a custom defn function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27506411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410376122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm still trying to wrap my head around all of this, especially how vars/symbols work. my current understanding is that for this approach, the macro is necessary for two steps: (1) to get the metadata associated with the var,  because when a function is passed into another function, it is passed in as a value rather than a var, so you lose the metadata associated with the var, and (2) because I want to re-define the var with the wrapped function, rather than returning a new, differently-named function - so again, I need access to the var. (using a higher-order function sidesteps this by requiring the docstring to be explicitly passed in, and not trying to read/redefine the var)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27506942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "docprint",
            "submessages": [],
            "timestamp": 1410376714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40f77a8113dc6fa593aed6954966c014c1b92ec2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"matt@sparkboard.com\">@Matthew Huebert (S'14)</span>  you might find this interesting: <a href=\"https://groups.google.com/forum/#!topic/huntfunc/4gkTjxJVRbA\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/huntfunc/4gkTjxJVRbA\">https://groups.google.com/forum/#!topic/huntfunc/4gkTjxJVRbA</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27553046,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "himerzi@gmail.com",
            "sender_full_name": "Michael Detmold (S2'14)",
            "sender_id": 6186,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "How Clojure is made",
            "submessages": [],
            "timestamp": 1410456367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>At prismatic we make these topic things with ML to build a feed of (hopefully) interesting articles.<br>\neg. Here's the best of clojure articles: <a href=\"http://getprismatic.com/topic-top/Clojure\" target=\"_blank\" title=\"http://getprismatic.com/topic-top/Clojure\">http://getprismatic.com/topic-top/Clojure</a></p>\n<p>When we suggest topics to users we sometimes use these \"topic cards\". These are images chosen by our relevancy engine overlayed with the text of a topic. Understandably, the ML sometimes juxtaposes things which are total non sequiturs.</p>\n<p>I made a twitter of these mess ups, because they're fun. If you find some, send them to @pritopicardz :D :D</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27607025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic topic cards",
            "submessages": [],
            "timestamp": 1410546393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://twitter.com/pritopicardz\" target=\"_blank\" title=\"https://twitter.com/pritopicardz\">https://twitter.com/pritopicardz</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27607029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic topic cards",
            "submessages": [],
            "timestamp": 1410546403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The Haskell one is awesome</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27621279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic topic cards",
            "submessages": [],
            "timestamp": 1410568127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>(cc <span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span>) I just responded to a comment on <a href=\"http://blog.podsnap.com/ducers.html\" target=\"_blank\" title=\"http://blog.podsnap.com/ducers.html\">my post</a> asking me to look at his <a href=\"https://gist.github.com/runexec/06b56a9dbd15e43145b9\" target=\"_blank\" title=\"https://gist.github.com/runexec/06b56a9dbd15e43145b9\">gist</a>, where I added a very long comment.   In summary, I'm a bit confused by a couple things in the 1.70 HEAD:<br>\nFirst, it seems like <code>reducers</code> aren't inherently eager, except that some of them are actually <code>folders</code>, which, when <code>fold</code>ed are.  Second, for no reason that I can imagine <code>core/transduce</code> differs from both <code>core/reduce</code> and <code>reducers/reduce</code> in making use of Java implementations of <code>.reduce</code> via the <code>IReduce</code> interface.   I can't think of why this might be.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27715172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "ducer internals",
            "submessages": [],
            "timestamp": 1410789568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to use a DataScript DB as the source of state for my Om application, but I don't want it or its entities to turn into cursors. Is there a simple way to tell Om that I'm never going to use <code>transact!</code> on certain keys and thus to never turn those values into cursors?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27786958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've tried simply extending <code>om/ICursor</code> to the types in question (with no method implementations) but that leads to rendering cache problems</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27786984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>^^ /cc <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27786988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> you only get cursors on things that support cursors</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> if you never create cursor you will never get subcursors</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>then you're only problem is how to determine when to update</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm using a map as the toplevel state, with a key for the DB: <code>(type (:db app))</code> is <code>om.core/MapCursor</code>, which doesn't place nicely with some of the DataScript API functions---thus I need to call <code>om/value</code> first.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm wondering if there's a way to avoid that latter step.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410893924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Re: updates, for the time being I'm fine if the entire render tree re-runs and creates a full new virtual DOM on every change. Later on I can go back and manually implement IShouldUpdate for components with expensive render methods</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27787406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410894066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, so the DB was getting converted to a cursor because <code>(map? DB)</code> returns true. Implementing empty methods for <code>om/ICursor</code> keeps it from getting changed.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410894639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So...how do I get all of the components to update? Each component is getting the same application map, which includes a :db value that is <code>not=</code>. The render methods are getting called, but components are not updating.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> <code>refresh!</code> can be used to schedule a re-render of a component</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> that won't start from the root but this probably doesn't matter for your case</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> where should that be called from?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> from whoever mutated the \"db\" and needs to re-render</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I'm worried that I'm missing something. I already have a listener that swaps the latest DB into the atom backing the Om application</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That DB and the entities derived from it are <code>not=</code> (to their counterparts at the previous time instant), so shouldn't that mean that Om will mark the components that use 'em as dirty?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788802,
            "is_me_message": false,
            "last_edit_timestamp": 1410895450,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> yes but only if the change is waterfalling from the root</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>if <code>shouldCompontentUpdate</code> is getting called then this should just all work</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788897,
            "is_me_message": false,
            "last_edit_timestamp": 1410895522,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> It is getting called, but the re-render isn't working unless I implement my own method for <code>IShouldUpdate</code> that returns true.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27788982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>sounds like something strange is happening then - values are <code>=</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Gist here: <a href=\"https://gist.github.com/lynaghk/c6b726d024320b9a3b53\" target=\"_blank\" title=\"https://gist.github.com/lynaghk/c6b726d024320b9a3b53\">https://gist.github.com/lynaghk/c6b726d024320b9a3b53</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> there's no context - is that or isn't that gist working?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So that works properly, and is in line with my conceptual understanding</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>but if I take out my implementation of <code>IShouldUpdate</code>, then it stops updating</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I just made an edit to the gist so that the method is using <code>not=</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> that works because that's just always returning true - <code>app</code> and <code>next-state</code> are not what you think they are.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is on Om 0.7.3</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>app</code> is whatever is driving your application, <code>next-state</code> is like React's local component <code>state</code> field</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, okay.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>state is the local state on the component? I.e., what's set with <code>om/set-state!</code> ? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> so for some reason, all your entities are <code>=</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes that's right wrt. to local state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410895989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Okay, that's a great help. I'll check and make sure that DataScript doesn't define equality based soley on entity ID or something.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410896007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep, that's exactly what it does: <a href=\"https://github.com/tonsky/datascript/blob/3a6f2b1939556e11cf3b90f775d09df6f2451428/src/datascript/impl/entity.cljs#L91\" target=\"_blank\" title=\"https://github.com/tonsky/datascript/blob/3a6f2b1939556e11cf3b90f775d09df6f2451428/src/datascript/impl/entity.cljs#L91\">https://github.com/tonsky/datascript/blob/3a6f2b1939556e11cf3b90f775d09df6f2451428/src/datascript/impl/entity.cljs#L91</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410896107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay, yep. I fixed the issue I was having now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410896311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Thanks a ton for your help!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410896319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> np</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27789678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410896327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> curious to see how that goes I haven't had time to pursue this myself but it's cool to see someone try to leverage different model w/ Om.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27791519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410898060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> If you're going to be at Strange Loop I can give you a lil' demo. Otherwise ping me towards December and I will probably have plenty to talk about. We're building a rich Android app for a client. Will probably also have done a full rewrite of The Weathertron by then as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27799561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410907320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> rad, sadly won't be at StrangeLoop - sounds like you're working on exciting stuff.  say hello to everyone for me. Tims &amp; Ramsey are gonna show some mind blowing stuff I think w/ Clojure Unity :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27799611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410907376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Will do = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27799684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om without cursors",
            "submessages": [],
            "timestamp": 1410907467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>What is huntfunc <span class=\"user-mention\" data-user-email=\"himerzi@gmail.com\">@Michael Detmold (S'14)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27913449,
            "is_me_message": false,
            "last_edit_timestamp": 1411093088,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "How Clojure is made",
            "submessages": [],
            "timestamp": 1411093081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I see that <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> <span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span>  <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> <span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> did this last year. How did you find it? Would you do something like this again?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27913615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411093354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>^ also interested</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27921783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411107930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> I believe we set up a team but didn't actually follow through. (Or I know that at least I didn't follow through.) However I did do Node Knockout (submitted a CLJS project) and it was a ton of fun.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27935195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411137080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> It was fun! I did it solo after our plans fell through. Planning on doing it again this year but not 100% sure yet. Definitely recommend it!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27940030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411143508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>hmm we'll i'd be interested in doing it this year. <span class=\"user-mention\" data-user-email=\"giorgio.m.leveroni@gmail.com\">@Giorgio Leveroni (S'14)</span> I won't be in NYC, but would you be up for a remote team?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27942127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411146530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>anyone else also welcome to join</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27942129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411146535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> sure that would be awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27965953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411187418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Some folks from my batch have got a team up but full at 4. Should be in the space working on it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28054417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure cup",
            "submessages": [],
            "timestamp": 1411396013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40f77a8113dc6fa593aed6954966c014c1b92ec2?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span>  I don't know.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28061323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "himerzi@gmail.com",
            "sender_full_name": "Michael Detmold (S2'14)",
            "sender_id": 6186,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "How Clojure is made",
            "submessages": [],
            "timestamp": 1411405300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adamwatters11@gmail.com\">@Adam Watters (F1'14)</span> pretty sick talk on functional reactive programming. dat rich hickey doe.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411585494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "Android",
            "content": "<p>Wait, Rich did a talk on FRP? When?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>^ Same question.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p>you have to do that thing where you add the link or the post doesnt make the sense. <a href=\"http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\" target=\"_blank\" title=\"http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey\">http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Umm also sick or slick? :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i intended to write 'sick'. it is also 'slick', however.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28178957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>woah, rich hickey on frp?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>aaah. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah geez, i really hope i used the term frp correctly. </p>\n<p>It's a philosophical talk on why OOP systems fail to abstract many concepts correctly, chiefly time. </p>\n<p>scholars of frp might disagree that its about frp, i'm not a scholar myself.</p>\n<p>The talk is friggin fascinating. he basically says we program things incorrectly because we use the wrong philosophical abstractions in life.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411586592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I remember watching this talk a while back and having my mind blown as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28182605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411590424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Alfred North Whitehead is invoked at several points</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28182613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411590440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, heraclitus, the dopest pre-socratic philosopher/unwitting programmer</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28185123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk on functional reactive programming",
            "submessages": [],
            "timestamp": 1411593654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Howdy Clojurians, I'm making my first real foray into the language, making a little clojurescript app. It's been pretty magical so far. I'm running into a problem that I'm guessing is pretty well trod: my application state is basically a graph, what's the best way to represent this?</p>\n<p>My app is for keeping track of the state of a game (magic the gathering) and I need to keep track of each player, and how much damage each player has done to all the others. The most obvious way to do it is something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">{</span><span class=\"ss\">:players</span> \n <span class=\"p\">{</span><span class=\"ss\">:name</span> <span class=\"s\">&quot;James&quot;</span>\n  <span class=\"ss\">:life</span> <span class=\"mi\">15</span>\n  <span class=\"c1\">;; James has taken 5 damage from Rachel and none from anyone else</span>\n  <span class=\"ss\">:damage</span> <span class=\"p\">{</span><span class=\"s\">&quot;James&quot;</span> <span class=\"mi\">0</span> <span class=\"s\">&quot;Rachel&quot;</span> <span class=\"mi\">5</span> <span class=\"s\">&quot;John&quot;</span> <span class=\"mi\">0</span><span class=\"p\">}}</span>\n <span class=\"p\">{</span><span class=\"ss\">:name</span> <span class=\"s\">&quot;Rachel&quot;</span>\n  <span class=\"ss\">:life</span> <span class=\"mi\">20</span>\n  <span class=\"c1\">;; Rachel has taken no damage</span>\n  <span class=\"ss\">:damage</span> <span class=\"p\">{</span><span class=\"s\">&quot;Rachel&quot;</span> <span class=\"mi\">0</span> <span class=\"s\">&quot;James&quot;</span> <span class=\"mi\">0</span> <span class=\"s\">&quot;John&quot;</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"ss\">:name</span> <span class=\"s\">&quot;John&quot;</span>\n   <span class=\"ss\">:life</span> <span class=\"mi\">17</span>\n   <span class=\"c1\">;; John has taken 1 from James, 2 from Rachel, and none from himself</span>\n   <span class=\"ss\">:damage</span> <span class=\"p\">{</span><span class=\"s\">&quot;John&quot;</span> <span class=\"mi\">0</span> <span class=\"s\">&quot;James&quot;</span> <span class=\"mi\">1</span> <span class=\"s\">&quot;Rachel&quot;</span> <span class=\"mi\">2</span><span class=\"p\">}}}</span>\n</pre></div>\n\n\n<p>My only qualm about this is that I need to add and remove players dynamically, and making sure everything is consistent could be kind of a headache, but I can't really see a better way to do it than this. Thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28358869,
            "is_me_message": false,
            "last_edit_timestamp": 1411927098,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411926906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Also, on a totally unrelated note, does anyone know how I can set a breakpoint in cljs code and then interact with it using a clojurescript repl? I have the browser repl set up and I can evaluate things in it but I can't seem to get it to be in the environment of the running app.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28359306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411927710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> What if you have a separate hashmap that maps <code>[player1 player2]</code> pairs to the amount of damage 2 has taken from 1?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28360674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411930524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> hmmm that would work, what would be the advantage of doing it that way?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28360842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411930885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>it would require a bit more cursor juggling</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28360854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411930935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> that sounds a bit like the relational database model. I wonder if it would be convenient to expose a relational-style API, even if you're not backing the app state with an actual database?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28361540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411934390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could abstract away the cursor juggling behind some kind of query-like interface...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28361565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411934428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> Yeah, I'm not sure if my way is any better. It seemed to me that it made it slightly more obvious if you remove a player, then you must remove any entries they have in the player damages map. The existence of information about \"Rachel\" deep within the map that represents \"James\" on the other hand is somewhat hidden in your version.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28361752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "representing graphs",
            "submessages": [],
            "timestamp": 1411935108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>After watching Ambrose's <a href=\"https://www.youtube.com/watch?v=a0gT0syAXsY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=a0gT0syAXsY\">strangeloop talk</a>, I felt guilty/enthusiastic again and rewrote my lens stuff using macros,  so it can be type-checked: <a href=\"http://blog.podsnap.com/tinhole.html\" target=\"_blank\" title=\"http://blog.podsnap.com/tinhole.html\">http://blog.podsnap.com/tinhole.html</a><br>\nIt's not rocket science, but I'm kind of pleased with the result.  Anyway, I strongly recommend the talk:  <code>core.typed</code> has come a long way.</p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=a0gT0syAXsY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=a0gT0syAXsY\"><img src=\"https://i.ytimg.com/vi/a0gT0syAXsY/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28389354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1411996530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "Android",
            "content": "<p>Ah, tinhole for \"typed pinhole\"!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28431149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412052107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>\"Well, actually,\"  I started converting to macros by <code>C-x C-w</code>ing <code>pinhole.clj</code> into a new file and blanked on a good name for it.  Eventually, I took perverse pleasure in keeping the stupid name.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28444897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412081833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Some guy (who turns out to have an interesting <a href=\"http://jspha.com/\" target=\"_blank\" title=\"http://jspha.com/\">blog</a>) wrote in the <a href=\"https://news.ycombinator.com/item?id=8381463\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=8381463\">HN Thread</a> that</p>\n<div class=\"codehilite\"><pre>    Using macros to pre-compile the lenses  feels like a hack around typed-clojure instead of being aligned to it.\n    All of the  information needed to determine a lens&#39; action is available at compile time even prior to expansion.\n    Can a van Laarhoven  representation be made in typed-clojure that recovers this information?\n</pre></div>\n\n\n<p>Attempting to understand this, I'm struggling through <a href=\"https://www.fpcomplete.com/user/bartosz/lenses-stores-and-yoneda\" target=\"_blank\" title=\"https://www.fpcomplete.com/user/bartosz/lenses-stores-and-yoneda\">an fpcomplete</a> post, but it still isn't making much sense.  Anyone have a shortcut to enlightenment?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28445194,
            "is_me_message": false,
            "last_edit_timestamp": 1412083671,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412082349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> we should chat on Thursday.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28449236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412088825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I recall this post being pretty good: <a href=\"http://blog.jakubarnold.cz/2014/07/14/lens-tutorial-introduction-part-1.html\" target=\"_blank\" title=\"http://blog.jakubarnold.cz/2014/07/14/lens-tutorial-introduction-part-1.html\">http://blog.jakubarnold.cz/2014/07/14/lens-tutorial-introduction-part-1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28449304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412088880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Cool. With overlapping batches, I can never keep track of which Thursdays are not alumni Thursdays...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28450772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412090682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone know the best way to get React on the page when using quiescent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28456324,
            "is_me_message": false,
            "last_edit_timestamp": 1412098694,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "a",
            "submessages": [],
            "timestamp": 1412098664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>am i supposed to get it there myself or am i supposed to use leiningen or should it be there and i already messed up</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28456391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "a",
            "submessages": [],
            "timestamp": 1412098743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>figured it out</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28458624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "a",
            "submessages": [],
            "timestamp": 1412101612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> That post really was good.  Thanks!   I still didn't quite get it until I walked myself through the execution of <code>over</code> et al for the <code>_1</code> example.  I struggled for an hour to cram van Laarhoven into <code>core.typed</code> before concluding that it wouldn't be possible to do so without bespoke documentation from Ambrose Bonnaire Seargent, and the result would be so far from idiomatic Clojure as to be nothing but a curiosity.  I'm still somewhat sceptical of  the idea that masses of coders will avail themselves of this formulation in any language.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28507563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412185714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nearly all of my programming experience has been in garbage collected languages.<br>\nClojure/ClojureScript and JavaScript have been my primary languages for the past few years.</p>\n<p>After seeing a slide deck (<a href=\"http://apenwarr.ca/diary/2011-10-pycodeconf-apenwarr.pdf\" target=\"_blank\" title=\"http://apenwarr.ca/diary/2011-10-pycodeconf-apenwarr.pdf\">http://apenwarr.ca/diary/2011-10-pycodeconf-apenwarr.pdf</a>) extolling the joys of Python's fast, predictable reference-counting behavior, I've been wondering what a \"Clojure without garbage collection\" would look like.<br>\n(There's at least one lisp that doesn't use GC, newLISP: <a href=\"http://www.newlisp.org/MemoryManagement.html\" target=\"_blank\" title=\"http://www.newlisp.org/MemoryManagement.html\">http://www.newlisp.org/MemoryManagement.html</a>)</p>\n<p>Ya'll know of any blog posts, papers, or implementations that might help me shed light on this question?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28658063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412462140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "ZulipiOS",
            "content": "<p>the linked presentation rails against JITs, but I would personally be super psyched if any of the clojure on LLVM efforts were to get some real stream behind them.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28660974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412469650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "ZulipiOS",
            "content": "<p>honestly whats important to me than GC vs not is the language making it straightforward to reduce the amount of allocation going on in the first place</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28661010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412469726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> What are the benefits/tradeoffs of Clojure on LLVM that you're most psyched about?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28662328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412473092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "ZulipiOS",
            "content": "<p>i mostly just could care less about the jvm and dont like dealing with the hassles it involves (slow startup, terrible stacktraces, figuring out how to manage / keep java up to date, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28664097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412477533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "ZulipiOS",
            "content": "<p>easy native library interop could be kinda neat though also</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28664102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412477577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> that's at least the second time I've come across the NewLISP ORO page, and every time  I read it I come away feeling suspicious. They say that they use pass-by-value/copy to achieve \"one reference only\" and thus avoid garbage collection, but then go on to note all the exceptions to that rule that they've taken to make it run fast. It seems like one would need pretty deep knowledge of the implementation to reason about time/space complexity.</p>\n<p>Regarding GC vs RC, I am actively working on a lisp-inspired language (ploy - there is a zulip channel!) that uses reference counting only. The main challenge I have encountered is that I frequently have ideas for language constructs that prove to be cyclical in their implementation. The first issue that came up was mutually recursive functions: how do two functions refer to each other without creating a cycle? Another recent example: ploy has a type system, and I want to make types callable so that you can define polymorphic constructors. The type references a generic function that serves as the constructor; the function has methods; the methods must refer to the type in order to construct something; hence a cycle.</p>\n<p>So far, my two cheap ways of dealing with this are: pass what would be cycle-creating back-references as parameters to the function, which is clunky but in my mind tolerable for large mutually recursive familes like parsers; treat objects defined at the top level as having global lifetimes, and dissolve all such objects at exit time in debug builds to make sure the ref-counts are all zero in debug builds. Both of these approaches are questionable, and would not fly in a traditional lisp context where there are a lot of preexisting expectations.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28682408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412529846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>A few other thoughts: Apple has also railed against GC for many years. They added a boehm collector to obj-c, and then deprecated it a few years later in favor of automated reference counting (ARC). My interest in building an RC system mostly stems from my background there, so it's partly experiential bias. The main appeal from an industry perspective is that it's very easy to make an RC system interoperate with other code.</p>\n<p>If you haven't seen the bacon's paper 'unified theory of garbage collection' (presented earlier this year michael bernstein @mrb) I highly recommend it: <a href=\"http://www.cs.virginia.edu/~cs415/reading/bacon-garbage.pdf\" target=\"_blank\" title=\"http://www.cs.virginia.edu/~cs415/reading/bacon-garbage.pdf\">http://www.cs.virginia.edu/~cs415/reading/bacon-garbage.pdf</a>. It talks about the history of  GC and RC, and how they look more and more alike as optimizations get added to either approach.</p>\n<p>I wonder if the NewLISP ORO thing qualifies as a linear type system? <a href=\"http://en.wikipedia.org/wiki/Substructural_type_system#Linear_type_systems\" target=\"_blank\" title=\"http://en.wikipedia.org/wiki/Substructural_type_system#Linear_type_systems\">http://en.wikipedia.org/wiki/Substructural_type_system#Linear_type_systems</a>. Rust seems to be making advances on this front.</p>\n<p>Also, <span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> to your point there is a very good post by <span class=\"user-mention\" data-user-email=\"al3x@al3x.net\">@Alex Payne</span> <a href=\"https://al3x.net/2014/09/16/thoughts-on-five-years-of-emerging-languages.html\" target=\"_blank\" title=\"https://al3x.net/2014/09/16/thoughts-on-five-years-of-emerging-languages.html\">https://al3x.net/2014/09/16/thoughts-on-five-years-of-emerging-languages.html</a>. He suggests that the big emerging languages are moving away from VMs for exactly these reasons.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28682777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412530860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> The few discussions I've seen of ORO also seem skeptical. Reading that article, I still don't know exactly how ORO's \"next higher evaluation level\" is different (if at all) from a C return statement.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28684444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412535048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>w.r.t., linear types, Alan Dipert pointed me to this paper on the implementation of a linear lisp: <a href=\"http://home.pipeline.com/~hbaker1/LinearLisp.html\" target=\"_blank\" title=\"http://home.pipeline.com/~hbaker1/LinearLisp.html\">http://home.pipeline.com/~hbaker1/LinearLisp.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28684448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412535082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll check out ploy. My main interest is what a language looks like if some of the cyclic issues you mentioned (mutually recursive functions, types) are simply disallowed. I.e., I've written plenty of applications in Clojure but have only used forward references a handful of times. I'm not convinced the tradeoff to allow such cycles (i.e., GC) is worth the benefits.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28684498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412535242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is <a href=\"http://clojure-doc.org/articles/tutorials/emacs.html\" target=\"_blank\" title=\"http://clojure-doc.org/articles/tutorials/emacs.html\">http://clojure-doc.org/articles/tutorials/emacs.html</a> a reasonable guide for getting set up with Clojure on Emacs, or other suggestions?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28720890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "n%b setup",
            "submessages": [],
            "timestamp": 1412614229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Can you turn off GC in the JVM? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like it's a dumb idea, but running Clojure inside a JVM with GC turned off seems like the easiest way to get Clojure without GC. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested in seeing what happens.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> That looks reasonable enough. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "n%b setup",
            "submessages": [],
            "timestamp": 1412704421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>My expectation will be that it'll explode in mildly interesting ways on sufficiently large programs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> Right? That's what I'm wondering about. Like what happens to a clojure program if you just turn off GC.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>In theory it would be a fun way of showing why transducers are useful. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Try it and see. What are transducers?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming\" target=\"_blank\" title=\"http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming\">Transducers are sort of like higher order loop fusion</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't tried them yet honestly so I don't know much beyond what I've read. My understanding is that they provide an abstraction that lets you reuse transformations with various collections (more so than already exists) while providing better performance due to a lack of intermediate values. A well thought and optimized <code>-&gt;&gt;</code> as it were.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks a lot like various Haskell idioms. Interesting.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, it looks like the flags <code>noasyncgc</code> and <code>noclassgc</code> will turn off GC maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah it is very haskelly. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>To be clear transducers don't really have anything to do w/ Clojure really. They work in any language even if you don't have first class functions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412704948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> Thanks! Following that worked out pretty well, except for version a warning and C-c C-d c and M-. not working. tl;dr I'd ended up with cider 0.8.0-SNAPSHOT from MELPA, but cider-nrepl 0.7.0 from copy-pasta. Eventually I figured out how to create a <code>~/lein/profiles.clj</code> and set it to  <code>{:user {:plugins [[cider/cider-nrepl \"0.8.0-SNAPSHOT\"]]}}</code>. Now all seems well. Overall the guide really helped me understand the pieces.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28782390,
            "is_me_message": false,
            "last_edit_timestamp": 1412714279,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "n%b setup",
            "submessages": [],
            "timestamp": 1412714226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It is my understanding that you cannot implement persistent data structures without GC; this is why the original LISP paper included a GC.</p>\n<blockquote>\n<p>However, because it rapidly becomes infeasible to determine how many previous versions share which parts of the structure, and because it is often desirable to discard old versions, this necessitates an environment with garbage collection. -- <a href=\"http://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" title=\"http://en.wikipedia.org/wiki/Persistent_data_structure\">http://en.wikipedia.org/wiki/Persistent_data_structure</a></p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28789056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412722323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28789092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412722373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> Glad to hear it! If you have the time I'm sure the authors would love to know it helped someone out. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28789644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "n%b setup",
            "submessages": [],
            "timestamp": 1412723441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> That makes sense. In theory you could use a bunch of transients in your code to get around using the default persistent data structures, though I'm not sure if it fits within the idea of \"no gc\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28789786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412723722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28791511,
            "is_me_message": false,
            "last_edit_timestamp": 1412728682,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412726064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I can see how they are agnostic to Clojure, but I can't imagine transducers without first class functions. Could you please provide an example of a transducer without first class functions?  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28798882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412740439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> There are some ways to get around GC. The linear lisp paper suggests using references only once, which means you can never actually share = ) Another thing you could do is not allow a separate thread of control to refer to a data structure---then you can simply free it as soon as your (single) thread exits the lexical scope in which the data structure was defined.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28806195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412758087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a nice overview of memory management in Rust: <a href=\"http://pcwalton.github.io/blog/2013/03/18/an-overview-of-memory-management-in-rust/\" target=\"_blank\" title=\"http://pcwalton.github.io/blog/2013/03/18/an-overview-of-memory-management-in-rust/\">http://pcwalton.github.io/blog/2013/03/18/an-overview-of-memory-management-in-rust/</a> Some of these ideas could be applied to make a GC-free Clojure-like lang.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28806205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412758165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> a good exercise is to write a version of transducers in JavaScript that doesn't rely on first class functions - only objects and methods. Then it's a hop skip and jump to transducers for Python, Ruby, Java, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28810596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412768022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> Although it's buried in my braindump of a blog post, thanks here: <a href=\"http://www.greghendershott.com/2014/10/hands-on-with-clojure.html\" target=\"_blank\" title=\"http://www.greghendershott.com/2014/10/hands-on-with-clojure.html\">http://www.greghendershott.com/2014/10/hands-on-with-clojure.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28821606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "n%b setup",
            "submessages": [],
            "timestamp": 1412785883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's <a href=\"http://blog.podsnap.com/vanhole.html\" target=\"_blank\" title=\"http://blog.podsnap.com/vanhole.html\">not pretty</a>,  but I finally got var Laarhoven to work in typed Clojure! <br>\nAnd transducers, notwithstanding <a href=\"https://twitter.com/pchiusano/status/519589855072763905\" target=\"_blank\" title=\"https://twitter.com/pchiusano/status/519589855072763905\">complaints</a>  from Paul Chiusano.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pchiusano/status/519589855072763905\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/435591982371454976/MSup8Ycj_normal.jpeg\"></a><p>Watching <a href=\"https://twitter.com/richhickey\" target=\"_blank\" title=\"https://twitter.com/richhickey\">@richhickey</a> try to explain transducers lib w/out type sigs (!) reminds me of excellent <a href=\"https://twitter.com/existentialtype\" target=\"_blank\" title=\"https://twitter.com/existentialtype\">@existentialtype</a> post <a href=\"http://t.co/Rx1j6mT4vT\" target=\"_blank\" title=\"http://t.co/Rx1j6mT4vT\">http://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/</a></p><span>- Paul Chiusano (@pchiusano)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28836660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412805977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> Actually. This is pretty cool.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28851788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412833931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>If a little obsessive.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28862449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1412858381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://zulip.com/#narrow/stream/help/subject/emergency.20lein.20stuff/near/28871168\" target=\"_blank\" title=\"https://zulip.com/#narrow/stream/help/subject/emergency.20lein.20stuff/near/28871168\">https://zulip.com/#narrow/stream/help/subject/emergency.20lein.20stuff/near/28871168</a><br>\nI need to load a file in a lein repl. I know nothing about java or classpaths. Can this be easily done?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28871234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emergency lein stuff",
            "submessages": [],
            "timestamp": 1412871015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's not the most rigorous argument, but the intractability of immutable data structures without a garbage collector  is probably reflected in the fact that (compiled) Haskell still needs one.<br>\nIn general, minimizing GC and minimizing mutability seem to be competing goals.  Memory intensive Java programs trying to avoid GC always end up doing it the same way - by creating a pool of fixed size, mutable structures and explicitly overwriting them; in the extreme, you end up doing nothing but manipulating the contents of off-heap buffers.<br>\nSomewhat disturbingly, it's not unheard of  to buy huge amounts of RAM, set the GC threshold to 100%, and bounce when it looks like you're getting close to the edge (which is really the ultimate in stop-the-world).  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28877148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure without garbage collection",
            "submessages": [],
            "timestamp": 1412878279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I managed to convince a client to let me write a production app in clojure (!!) </p>\n<p>So my immediate question is: how do people usually deploy clojure/ring apps in production? Tomcat? Jetty? Nginx? </p>\n<p>What are the choices and the advantages and disadvantages? I've never deployed a JVM app before</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28877723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412879122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>BTW production = internal app with ~5 users.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28877812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412879281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>From what little I've heard, Tomcat and Jboss seem like the most common.  The clojure IRC on freenode would be a good place to ask about that as well though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28878561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412880273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I run several Clojure apps in product. My process is to cut an uberjar, then run \"java -jar thingy.jar\" using DJB's daemontools.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28879930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412882033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The Weathertron (with somewhere like 30k regular users) is running on a $5/mo Digital Ocean VPS using embedded jetty7</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28879983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412882078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>When we need HTTPS I use Nginx as a reverse proxy to terminate the SSL. If you're on AWS, you can use the elastic load balancer to handle SSL. (this is what we do with <a href=\"https://getdenizen.com\" target=\"_blank\" title=\"https://getdenizen.com\">https://getdenizen.com</a>, also a Clojure app).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28880028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412882147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://fitacular.com/blog/clojure/2014/07/14/deploy-clojure-tomcat-nginx/\" target=\"_blank\" title=\"https://fitacular.com/blog/clojure/2014/07/14/deploy-clojure-tomcat-nginx/\">https://fitacular.com/blog/clojure/2014/07/14/deploy-clojure-tomcat-nginx/</a><br>\nthough you may want to set up nginx for https.  This is what I did for more of a toy app: <a href=\"http://blog.podsnap.com/slackbot.html\" target=\"_blank\" title=\"http://blog.podsnap.com/slackbot.html\">http://blog.podsnap.com/slackbot.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28880073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412882171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you don't want to deal with uberjars and Daemontools and all of this fanciness (and your collegues can just email you if stuff breaks) you can also run <code>lein trampoline run</code> within a screen or tmux session.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28880128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412882260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> thanks! When I do <code>lein uberjar</code> on a ring app, is it packaging jetty or something?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28881276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412883853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> If you have ring-jetty-adaptor in your project.clj, yeah. Uberjar just shoves all of your dependencies into a single JAR file so you can run \"java -jar foo.jar\" and not have to fiddle with any classpath stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28883669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Production Deployment",
            "submessages": [],
            "timestamp": 1412887152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span> <code>(eval (slurp \"file.clj\"))</code> maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28893129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emergency lein stuff",
            "submessages": [],
            "timestamp": 1412900585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> I ended up giving up on the standalone repl and just made a new lein project.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28894350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emergency lein stuff",
            "submessages": [],
            "timestamp": 1412902677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span> So it goes</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28894880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emergency lein stuff",
            "submessages": [],
            "timestamp": 1412903818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>If you really want to appreciate core.typed, try implementing van L lenses in Java. Bloody nightmare. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28998928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.type beckons again",
            "submessages": [],
            "timestamp": 1413129427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, I have what is either a) an incredible misunderstanding on my part as to how macros should work or b) a bug in clojure 1.6.</p>\n<p>Anybody want to pair on delving into that tomorrow? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29126383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413346158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>My blog post describing my adventures so far <a href=\"http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros/\" target=\"_blank\" title=\"http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros/\">http://www.zephyrizing.net/blog/2014/10/14/adventures-with-clojure-macros/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29126665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413346824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>TL;DR if you scroll to the end there's a code sample containing the weirdness that I'm interested in looking into.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29126669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413346850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> I'm not sure if you want to track this down yourself (for the adventure) or if you're just looking for an explanation. I can give you the latter. Hint: Macros don't evaluate their arguments.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Doh.  Of course.  I guess what I didn't expect is that applying a symbol directly as a function would work.  So what my macro is evaluating  is equivalent to <code>(apply '+ [1 2])</code>  Which does in fact exhibit the exact behavior I'm seeing.  So do I <code>(eval op)</code> to make that work?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I guess so... Is there a more preferred way than just calling eval though?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep! That's exactly it. I had to dig into the source to figure out what was going on <a href=\"https://github.com/clojure/clojure/blob/eccff113e7d68411d60f7204711ab71027dc5356/src/jvm/clojure/lang/Symbol.java#L129\" target=\"_blank\" title=\"https://github.com/clojure/clojure/blob/eccff113e7d68411d60f7204711ab71027dc5356/src/jvm/clojure/lang/Symbol.java#L129\">https://github.com/clojure/clojure/blob/eccff113e7d68411d60f7204711ab71027dc5356/src/jvm/clojure/lang/Symbol.java#L129</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the hint though!!  TIpped me over the edge.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>A symbol is behaving in the same way as a keyword, and trying to look itself up in the passed thingy</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've never seen anyone use that functionality, though = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>re: eval, nah, I don't think that's what you want</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh!!  That... is an interesting behavior.  Me neither.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a reason you're writing this as a macro, btw?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just skimmed your post (and I'm a few drinks in) but from what I saw it seems like you should be able to get the concision you want using plain functions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Macro fever.  As my blog post sort of attempts to explain, I just got so excited about writing two working macros...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, macros are hard! I try to avoid them as much as possible. (Especially ones that start with <code>def</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah.  So I am learning :)  Ok, sleep time now.  thanks for the help!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, if you just want to write a macro for kicks thats fine. I think what you need to do is resolve the symbol in the calling scope and pass in the value it refers to. I can't really remember how to do that, though, since I never write 'em</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think you might just want to unquote <code>op</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>e.g., <code>op-result</code> should have a value of  <code>`(vector (apply ~op (reverse ~test-args)))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway, good night and good luck!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29128420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413350952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll check it out.  I'm also going to look at using just a function for that piece of code.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29144129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413384062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ya, macros are pretty awesome (tho my experience is with Racket and Scheme; macros are a to-do for me in Clojure) but the rule of thumb I've heard is: Don't use a macro when a function could do the job. Another rule of thumb is try to move most of the work out to a helper function, limiting the macro to the part that truly has to happen at compile-time instead of run-time.</p>\n<p>However like most advice, it's more fun to experiment and get burned sufficiently, and only then can you appreciate the advice. :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29145994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413386284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heh, indeed.  Experimenting is much more fun</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29149028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macro issues",
            "submessages": [],
            "timestamp": 1413389502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a bit long. Maybe it should go on StackOverflow, but I figured I'd try Zulip, first.</p>\n<p>Needing something like Racket's <code>splitf-at</code>, I wrote a quick and dirty toy version in Clojure:</p>\n<div class=\"codehilite\"><pre>(defn split\n  &quot;FIXME: This is the conceptual, inefficient implementation. Should\n  reimplement like Racket&#39;s splitf-at.&quot;\n  [pred coll]\n  [(take-while pred coll)\n   (drop-while pred coll)])\n</pre></div>\n\n\n<p>This isn't great because it traverses the first portion of the collection twice.</p>\n<p>Someone pointed out that Clojure already provides this. It's called <code>split-with</code>. Nice. But when I &lt;kbd&gt;M-.&lt;/kbd&gt;, I see that its definition is my conceptual one, not the efficient one.</p>\n<p>Racket defines <code>splitf-at</code> like so:</p>\n<div class=\"codehilite\"><pre>(define (splitf-at list pred)\n  (unless (procedure? pred)\n    (raise-argument-error &#39;splitf-at &quot;procedure?&quot; 1 list pred))\n  (let loop ([list list] [pfx &#39;()])\n    (if (and (pair? list) (pred (car list)))\n      (loop (cdr list) (cons (car list) pfx))\n      (values (reverse pfx) list))))\n</pre></div>\n\n\n<p>I \"ported\" this to Clojure like so:</p>\n<div class=\"codehilite\"><pre>(defn efficient-split-with\n  [pred coll]\n  (loop [ps [], coll coll]\n    (if (and (seq coll) (pred (first coll)))\n      (recur (conj ps (first coll)) (rest coll))\n      [ps coll])))\n</pre></div>\n\n\n<p>One neat thing is the use of <code>conj</code> with a <code>vector</code> means we don't have to do the <code>reverse</code> above, which should be even more efficient.</p>\n<p># A few questions:</p>\n<p>1. Does that seem like a reasonable implementation?</p>\n<p>2. Am I using <code>rest</code> correctly or should it be <code>next</code> here?</p>\n<p>3. More generally, I'm unclear what the policy is about modifying collections and types. My implementation takes a generic collection, and returns a vector of two things: a vector, and whatever the original <code>coll</code> was. Is this OK?? Part of me is guessing the answer is \"Yes, it's OK, generic collections means that it shouldn't matter.\" But part of me is suspicious it might not be that simple?</p>\n<p>Again, sorry this is so long, and thanks in advance for any guidance.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29157145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413398835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> <code>split-with</code> in Clojure is lazy - while your implementation is more efficient it is also eager - it won't be demand driven the way that the core <code>split-with</code> is. That is you pay for the items that pass <code>pred</code> up front, not true for <code>split-with</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29157876,
            "is_me_message": false,
            "last_edit_timestamp": 1413399968,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413399725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Regarding #3, if you wanted to have your function return the same thing as the original <code>coll</code> you could use the function <a href=\"http://clojuredocs.org/clojure.core/empty\" target=\"_blank\" title=\"http://clojuredocs.org/clojure.core/empty\">empty</a> which returns an empty collection of the same type as it's arg.  Then you can use generic collection ops on it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29158214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413400106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Ah, good point. I'll need to keep reminding myself about that. I'm accustomed to lazy being an option, not the default policy. Thank you.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29159905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> Thanks for telling me how to do that. Do you have a sense of whether I _ought_ to do that? Is it generally considered good practice or doesn't matter? (Or is there no general answer and it's case-specific?)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> yes its makes things quite a bit different than Scheme or the popular CLs - laziness is pervasive because transducers hadn't been invented yet and you have no tail call optimization on the JVM (if you want interop anyway).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> just depends, but making it do so would not be idiomatic in Clojure core as it stands today.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also it's basically <code>(map #(into (empty coll) %) (split-with pred coll))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160261,
            "is_me_message": false,
            "last_edit_timestamp": 1413402440,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> Good question.  I don't really know.  I think in general, because of the sequence abstraction it matters less what you actually return, though it might be more idiomatic in some ways to return two seqs, rather than a vector and a seq.  You can use a vector to build up the result because that gives you the efficiency of building it in the order that is desired.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> that makes sense.  I was just commenting on the possibility of it.  I wouldn't say I'm an experienced enough Clojurian to offer informed commentary on idiom.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29160360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "An efficient `split-with`, and questions",
            "submessages": [],
            "timestamp": 1413402508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Do you know if React.js or Om gives up the execution thread during a render? We've run into a situation with an Om app we're building that shows a single frame with intermediate state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The render method gets called only once, as expected. The issue is that it results in two separate paints (according to the chrome timeline tool)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> rendering is synchronous as far as I know</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>haven't heard of that changing in React and Om doesn't change anything around it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>*however* queued component local state changes render after the main render</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay, that was my mental model as well. We only notice this because we're recording a video and can see a few frames of weird state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>if this is a source of bugs we could change the order</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, we're only using primary app state. Even then---wouldn't the main render fn get called again to do the local state changes?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29216157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413490372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> the main render fn does two things - the first pass rerenders - but that might not trigger a full render all the way down to the leaves where some components live - so there's a second part to render - forceUpdate the components w/ state changes</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217034,
            "is_me_message": false,
            "last_edit_timestamp": 1413491531,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413491507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> This is the React or the Om render function?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413491753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Om, React doesn't have a render loop of any kind</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217210,
            "is_me_message": false,
            "last_edit_timestamp": 1413491791,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413491762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I disabled the Om queue mechanism by clobbering the watches on <code>om/refresh-set</code> but the problem persisted</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413491836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure if removing all the watches is a sufficient way to disable that mechanism, though. In our application the root application state changes on all renders so everything should be getting re-rendered.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413491899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway, I'll see if I can put together a minimal example later today</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413492084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> you need to formulate a theory of what is happening here. I'm still at loss how you could even see something in an inconsistent state even given the rendering strategy.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413492097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Yep, me too = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413492121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>every prop change will be fully rendered, every state change will be fully rendered up until the point that rAF fires</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217481,
            "is_me_message": false,
            "last_edit_timestamp": 1413492151,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413492127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> an obvious nono would be some piece of code or third party thing that mucks w/ the DOM outside of the Om render loop (that your code doesn't account for)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29217538,
            "is_me_message": false,
            "last_edit_timestamp": 1413492238,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413492221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I found the underlying cause of our issue: The app was reloading style.css on every Om render, which would cause the browser to repaint even though React was still in the middle of doin' its thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413497962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> ok good was this because you were writing out a link tag or something?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, exactly. We're using a custom-built Om/CSS/ClojureScript compiler toolchain that has livereloading</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway, thanks for your help on this. Sorry for the noise.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> no problem glad to hear it was not an Om issue ... this time anyway :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221968,
            "is_me_message": false,
            "last_edit_timestamp": 1413498504,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>= )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you know if there's any tooling to hook into React's render cycle for logging?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g., some way to get a list of timestamps and paths that were updated</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29221998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413498557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> there is some way to do this but I haven't looked into it, I know that people often write simple custom things for this themselves - I know CircleCI did</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29224662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om/react render cycle",
            "submessages": [],
            "timestamp": 1413503235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been messing around with generating strings <a href=\"https://github.com/Engelberg/instaparse/issues/82\" target=\"_blank\" title=\"https://github.com/Engelberg/instaparse/issues/82\">based on Instaparse grammars</a>. One of Engelbergs jumped on this early on and produced an <a href=\"https://github.com/aengelberg/instagenerate\" target=\"_blank\" title=\"https://github.com/aengelberg/instagenerate\">interesting core.logic implementation</a>. So I've been messing with core.logic lately trying to understand what's going on.   </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413568541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the big issues I've run into is that there is an infinite number of strings that can be produced by some grammars. I'm trying to implement something akin to iterative deepening where strings are generated sorted by length. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413568657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>(h/o trying to figure out what problems exactly I'm having)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413568834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can get it to produce all strings of a certain length without a problem and if it can't produce any strings it is fine. But when I try to get it to produce various lengths with <code>map</code> and a range of integers, I get a stack overflow. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413568943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Figured out what the problem is. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>The implementation builds up strings via concatenation, so strings can only ever get longer. The iterative deepening approach is just a <code>project</code> around the possible string and the desired length. Once an infinite generator shows up, then core.logic just keeps going on way after it should stop, generating strings of huge lengths. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>How can I tell core.logic to give up on a string once it has reached a certain length? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>\\cc <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> entering tricky advanced territory. You could probably write a constraint for this. But how is another question entirely.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm experimenting with <code>nafc</code> now. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29261999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmmm it feels like I need to put a <code>project</code> inside a <code>nfc</code> which is messing with the macroness of <code>project</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> <code>project</code> is very problematic btw. I would probably make a simple constraint like <code>bounded-string</code> or something.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262222,
            "is_me_message": false,
            "last_edit_timestamp": 1413569786,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha great. Is there a better way to ensure that the length of a string is equal to a certain number? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> you need to write a constraint,  don't really have time to explain all the details for how to do this but if you can understand <code>nafc</code> implementation that's all you really need.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay thank you. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> fair warning it's very advanced core.logic with zero documentation. You could spend a whole day on figuring it out easily if not more.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413569955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> thanks for the warning. I'd like to see this happen as it would mean we could use generative testing pretty easily. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> *maybe* - remember that core.logic is not random the way generative or property based testing is.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right. We'll still be generating randomness in another way somehow and using core.logic to \"enhance\" the randomness for testing. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's the sort of thing where we generate a random name like \"XXYZ\" and then core.logic and instaparse takes that name and gives us back \"XXYZ Inc.\" \"XXYZ Company\" \"XXYZ INCORPORATED\" for using during testing our entity resolution code. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> ah ok, nice yes that sounds like a good pairing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah there are a billion edge cases with stuff like this and I want core.logic to take care of it all for me. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29262887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> gimme a second I'll show you an example of <code>strlenc</code>. Note it still may not work if the part that generate strings is written in regular core.logic style.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29263048,
            "is_me_message": false,
            "last_edit_timestamp": 1413570784,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>In fact can you show me how string generation is done?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29263079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413570824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> don't have too much time to explain this code - maybe it will work in your program, again not sure depending on how strings are being generated <a href=\"https://gist.github.com/swannodette/26e4bf19a15ca28f9ba3\" target=\"_blank\" title=\"https://gist.github.com/swannodette/26e4bf19a15ca28f9ba3\">https://gist.github.com/swannodette/26e4bf19a15ca28f9ba3</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29264265,
            "is_me_message": false,
            "last_edit_timestamp": 1413572410,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413572400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Thanks! I'll try this out. I'm still trying to understand how instagenerate actually generates strings. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29266924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413575699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like instagenerate is just regular core.logic code. Strings are introduced by constraining an LVar (I think that's the right term?) to be a certain string. For concatenation I believe that happens here: <a href=\"https://github.com/aengelberg/instagenerate/blob/master/src/instagenerate/core.clj#L68\" target=\"_blank\" title=\"https://github.com/aengelberg/instagenerate/blob/master/src/instagenerate/core.clj#L68\">https://github.com/aengelberg/instagenerate/blob/master/src/instagenerate/core.clj#L68</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29267027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413575845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>It recursively splits the parsers up with the first/rest pattern and creates new LVars (?still getting terminology down) that indicate that the results of the first should be concated with the results of the rest. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29267118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413575964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> yeah you may want to ask the maintainer if the constraint doesn't help</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29267202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1413576045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> I think I'm going to go to <a href=\"http://www.meetup.com/ClojureScript-NYC/events/214211302/\" target=\"_blank\" title=\"http://www.meetup.com/ClojureScript-NYC/events/214211302/\">this new meetup</a> \u2013\u00a0care to join? <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> speaking</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29338781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413734604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I'm in! thanks for sharing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29338833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413734716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>=)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29338875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413734769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah looking forward to this! I'll probably give a short talk on reference cursors.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29339189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413735546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> i am probably going to that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29391048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413835751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Cool\u2013 looking forward to talking more about this stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29394164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs/om",
            "submessages": [],
            "timestamp": 1413839669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>In Racket if I need to raise some generic error I use a function named <code>error</code>.</p>\n<p>For example <code>my-function</code> might do:</p>\n<div class=\"codehilite\"><pre>(error &#39;my-function &quot;My error message.&quot;)\n</pre></div>\n\n\n<p>Which in Racket raises <code>exn:fail</code> -- which by default prints the error message and terminates.</p>\n<p>In Clojure what's the idiomatic equivalent?</p>\n<p>For the time being I made this helper function:</p>\n<div class=\"codehilite\"><pre>(defn- error\n  &quot;Until I understand the idiomatic way to do this, here&#39;s an\n  equivalent of what I would do in Racket (or a Scheme).&quot;\n  [who what]\n  (throw (Exception. (str who &quot;: &quot; what))))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29396332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Generic error function?",
            "submessages": [],
            "timestamp": 1413842655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> I recently found out about <code>ex-info</code>http://clojuredocs.org/clojure.core/ex-info which might be a more idiomatic way to write it than the explicit call to Exception.  I don't tend to write code that throws exceptions much in clojure though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29397697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Generic error function?",
            "submessages": [],
            "timestamp": 1413844924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29404085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Generic error function?",
            "submessages": [],
            "timestamp": 1413855965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>[Can you cross-post in Zulip?  If so I'd post this under all of Lisp, Racket, Clojure.]</p>\n<p>Yesterday a couple people like <span class=\"user-mention\" data-user-email=\"tsinha@gmail.com\">@Tanoy Sinha (F1'14)</span> and <span class=\"user-mention\" data-user-email=\"juliatufts@gmail.com\">@Julia Lynn Claire Tufts (F2'14)</span>  asked me, \"how/why do you use macros in a Lisp like Racket or Clojure?\".</p>\n<p>I gave answers like: The compiler can do a search-and-replace on your<br>\nstructured code, you can make DSLs, it's an \"API for the compiler\",<br>\netc. But I didn't feel like they were great answers?</p>\n<p>Worse, one time  <span class=\"user-mention\" data-user-email=\"peter.seibel@gmail.com\">@Peter Seibel</span> was within earshot; I imagined him<br>\nbiting his tongue and politely remembering the \"well, actually\" rule. :)</p>\n<p>Later I remembered Matthias Felleisen boiling down macros into three<br>\nmain categories:</p>\n<p>1. *Binding forms*. You can make your own syntax for binding values to<br>\nvariables, including function definition forms. You may hear people<br>\nsay, you don't have to wait for the language designers to add a<br>\nfeature (like <code>lambda</code> for Java?). Using macros you can add it<br>\nyourself. Binding forms is one example.</p>\n<p>2. *Delaying evaluation*. Something like <code>or</code> or <code>if</code> can't really be a<br>\nfunction, because you want it to \"short-circuit\" -- if the first test<br>\nevaluates to true, don't evaluate the other part at all. (This is<br>\nanother language DIY example.)</p>\n<p>3. *Abstractions like domain specific langagues (DSLs)*. You want to<br>\nprovide a special language, which is simpler and/or more task-specific<br>\nthan the full/raw Lisp you're using. This DSL might be for users of<br>\nyour software, and/or it might be something that you use to help<br>\nimplement parts of your own program.</p>\n<p>So there you go. I'm afraid that's probably still not the best way to<br>\nget people up to speed. Hopefully some other people can chime in with<br>\nexplanations or links.</p>\n<p>p.s. Although I wrote a tutorial called \"Fear of Macros\",<br>\n<a href=\"http://www.greghendershott.com/fear-of-macros/\" target=\"_blank\" title=\"http://www.greghendershott.com/fear-of-macros/\">http://www.greghendershott.com/fear-of-macros/</a>, it's (a) specific to<br>\nRacket macros and (b) much more about the \"how\" than the \"why\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29422926,
            "is_me_message": false,
            "last_edit_timestamp": 1413894346,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why macros?",
            "submessages": [],
            "timestamp": 1413894298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, duh. I forgot that <span class=\"user-mention\" data-user-email=\"peter.seibel@gmail.com\">@Peter Seibel</span> has a pretty awesome story/metaphor about macros: <a href=\"http://www.gigamonkeys.com/book/macros-defining-your-own.html\" target=\"_blank\" title=\"http://www.gigamonkeys.com/book/macros-defining-your-own.html\">http://www.gigamonkeys.com/book/macros-defining-your-own.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29478700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why macros?",
            "submessages": [],
            "timestamp": 1413987748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Another reason that hit me recently: allow idiomatic functional programming while making life easier for the type checker (in Clojure and Racket at least).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29545237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why macros?",
            "submessages": [],
            "timestamp": 1414087923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>My manager: \"Hey, have you heard of React?\"<br>\nMe: \"!!!!!!!!!\" </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29560448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React",
            "submessages": [],
            "timestamp": 1414107562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>Much excite.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29560451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React",
            "submessages": [],
            "timestamp": 1414107569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha &lt;3</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29560594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React",
            "submessages": [],
            "timestamp": 1414107827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I didn't understand <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> 's post on \"microtuning\" backbone until I took at look at some heavy backbone code. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29561190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "React",
            "submessages": [],
            "timestamp": 1414108742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I've finally found time to experiment more with the gist you provided. My main question is what does <code>l/remcg</code> do? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29596273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1414171864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>The way instagenerate works requires a function that can count <code>LCons</code> and it took me a bit to figure that out properly.  Now it seems to be working somewhat,  but it still hangs for some reason when I ask it to give all the strings of length n for a parser that contains a infinite generator. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29596442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.logic",
            "submessages": [],
            "timestamp": 1414172096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>is it problematic to allocate a channel in a parent component and then explicitly pass it into child components that will communicate over it? this is a pattern that makes a lot of sense to me but I don't see anyone else doing it on the internet.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29878225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1414621252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>also should I expect sequence ops (map, filter, etc.) on cursors to also return cursors?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29882281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1414625892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p><code>select-in</code> is returning a plain old map</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29882295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om",
            "submessages": [],
            "timestamp": 1414625911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> This is an interesting blog post I found about how to structure clojure projects so you don't need to reload your repl to get a clean application state. <a href=\"http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded\" target=\"_blank\" title=\"http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded\">http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29989785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure patterns",
            "submessages": [],
            "timestamp": 1414782975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29993189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure patterns",
            "submessages": [],
            "timestamp": 1414787206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Doing get-in on indices that don't have valid values for on cljs vectors returns nil, but on vectors that are actually IndexedCursors, it throws an error. <br>\nLike <code>(get-in myvec [-1 -1])</code> gives <code>nil</code> if myvec is of type <code>PersistentVector</code> but not if it's an <code>IndexedCursor</code>. Is there a reason why, or a way to avoid this?<br>\ncc: <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30200394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415137563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>is there something in Clojure that formats the code for you?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30210409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415150880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span>  Using <code>clojure-mode</code> in Emacs, it should indent automatically if you press &lt;kbd&gt;C-j&lt;/kbd&gt; instead of &lt;kbd&gt;enter&lt;/kbd&gt;. Also you can mark a region and use &lt;kbd&gt;C-M-\\&lt;/kbd&gt; a.k.a. <code>indent-region</code> to do so after the fact.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30210597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415151153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, Zulip doesn't handle <code>&lt;kbd&gt;</code>. Booo.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30210605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415151179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is &lt;kbd&gt;?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30210810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415151485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.w3schools.com/tags/tag_kbd.asp\" target=\"_blank\" title=\"http://www.w3schools.com/tags/tag_kbd.asp\">http://www.w3schools.com/tags/tag_kbd.asp</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30211646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415152661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I guess in zulipland it would be <code>C-M &lt;</code> ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30211701,
            "is_me_message": false,
            "last_edit_timestamp": 1415152969,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415152716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>oh, booo indeed</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30211708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415152724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> , I guess I could run emacs in batch mode to indent the file, that should be good enough :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30211735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415152790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>my problem is that after tangling the org-babel code blocks the indentation of the resulting file is usually a mess, so I rely on another tool to handle the formatting for me, in ruby there is <code>rubybeautifier</code>, for python the <code>pep8</code> things , for go <code>gofmt</code>, etc...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30211817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415152869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi (F'12)</span> Sites like GitHub and StackOverflow that use markdown let you use HTML <code>&lt;kbd&gt; some keystrokes &lt;/kbd&gt;</code> and their CSS will display it in some style that suggests \"press these keys\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30212023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415153158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>in case someone ever needs to indent a file through emacs...</p>\n<div class=\"codehilite\"><pre><span class=\"nv\">EMACS</span><span class=\"o\">=</span><span class=\"s2\">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs&quot;</span>\n<span class=\"nv\">SRCDIR</span><span class=\"o\">=</span><span class=\"s2\">&quot;./src&quot;</span>\n<span class=\"k\">for </span>f in <span class=\"sb\">`</span>find <span class=\"nv\">$SRCDIR</span> -name *.clj<span class=\"sb\">`</span>; <span class=\"k\">do </span>\n<span class=\"k\">  </span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;Visiting $f&quot;</span>\n  <span class=\"nv\">$EMACS</span> --batch --eval <span class=\"s2\">&quot;</span>\n<span class=\"s2\">  (progn</span>\n<span class=\"s2\">    (load \\&quot;~/.emacs\\&quot;)</span>\n<span class=\"s2\">    (message \\&quot;=========== INDENTING FILE: $f ===========\\&quot;)</span>\n<span class=\"s2\">    (find-file \\&quot;$f\\&quot;)</span>\n<span class=\"s2\">    (indent-region (point-min) (point-max) nil)</span>\n<span class=\"s2\">    (save-buffer)</span>\n<span class=\"s2\">  )&quot;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30213214,
            "is_me_message": false,
            "last_edit_timestamp": 1415155082,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415155069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"madhuvishy@gmail.com\">@Madhumitha Viswanathan (F1'14)</span> hm, seems like a bug?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30231294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415189658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Seems like it. This is how my stacktrace looks like: <a href=\"/user_uploads/13/hTuWNBR10Vo5nwztOljcseHr/screen-shot-2014-11-05-at-104202-am.png\" target=\"_blank\" title=\"screen-shot-2014-11-05-at-104202-am.png\">screen-shot-2014-11-05-at-104202-am.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/hTuWNBR10Vo5nwztOljcseHr/screen-shot-2014-11-05-at-104202-am.png\" target=\"_blank\" title=\"screen-shot-2014-11-05-at-104202-am.png\"><img src=\"/user_uploads/13/hTuWNBR10Vo5nwztOljcseHr/screen-shot-2014-11-05-at-104202-am.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30239139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415202198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>And when you get upset that some forms indent nicely</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">bleh</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">]</span>\n   <span class=\"p\">(</span><span class=\"nf\">body-of-bleh</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>while others align everything with the first argument</p>\n<div class=\"codehilite\"><pre>(my-defn bleh [x y]\n         (ick-this-is-ugly))\n</pre></div>\n\n\n<p>check out the <code>put-clojure-indent</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30239604,
            "is_me_message": false,
            "last_edit_timestamp": 1415202901,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415202805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30240270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415203610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>thanks for the tip :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30240555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415203986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"madhuvishy@gmail.com\">@Madhumitha Viswanathan (F1'14)</span> open a GitHub issue w/ description and example, thanks! I'll take a look.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30243619,
            "is_me_message": false,
            "last_edit_timestamp": 1415207566,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415207557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"waldemar.quevedo@gmail.com\">@Waldemar Quevedo (F2'14)</span> Nice.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30245882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure-fmt",
            "submessages": [],
            "timestamp": 1415210642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Okay will do :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30246086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415210911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> Didn't realize until now but the CLJS meetup tonight is like a block away from Hacker School</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>they moved it to tomorrow :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>and I can't make it tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>oh</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>bummer</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>huh</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I just got a confirmation from <a href=\"http://meetup.com\" target=\"_blank\" title=\"http://meetup.com\">meetup.com</a> about it being tonight</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I'm glad I posted something then lol</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah I got back from my trip last night, tonight was a bit too soon for me, sorry!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(<span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>welcome back <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>No need to apologize =). Welcome back!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415213977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30248694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs meetup",
            "submessages": [],
            "timestamp": 1415214050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Done :) <a href=\"https://github.com/swannodette/om/issues/274\" target=\"_blank\" title=\"https://github.com/swannodette/om/issues/274\">https://github.com/swannodette/om/issues/274</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30251865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "get-in om cursor",
            "submessages": [],
            "timestamp": 1415217434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>finally testing out my little cljs app in firefox and man is the perf disappointing compared to chrome  <img alt=\":crying_cat_face:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/crying_cat_face.png\" title=\":crying_cat_face:\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30332260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs perf chrome vs FF",
            "submessages": [],
            "timestamp": 1415328735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>TIL learned about <code>lein new chestnut hello</code> =&gt; <a href=\"https://github.com/plexus/chestnut\" target=\"_blank\" title=\"https://github.com/plexus/chestnut\">https://github.com/plexus/chestnut</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30334219,
            "is_me_message": false,
            "last_edit_timestamp": 1415331738,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om-lein-chestnut",
            "submessages": [],
            "timestamp": 1415331728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Firefox is definitely the slowest of the bunch. Still this probably means you have some straightforward optimization opportunities.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30351690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs perf chrome vs FF",
            "submessages": [],
            "timestamp": 1415362947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> yeah, it was something weird, I refreshed and FF perf was like and order of magnitude better, no idea what was going on.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30412548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs perf chrome vs FF",
            "submessages": [],
            "timestamp": 1415460492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a co-worker who is interested in algorithmic music and also lisps, so I mentioned that Overtone might be a fun thing for him to look into. I know I've seen a blurb for a talk on Clojure/Overtone -- someone posted it here and many people spoke positively of it -- but now I can't find it. I thought it might be Joseph Wilk's <a href=\"http://www.infoq.com/presentations/ai-machine-creativity\" target=\"_blank\" title=\"http://www.infoq.com/presentations/ai-machine-creativity\">Creative Machines</a>, but I thought the talk in question was  pretty Clojure-specific. Does anyone know which talk I might be thinking of?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30536053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/overtone talk?",
            "submessages": [],
            "timestamp": 1415679309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just kidding. Found it. Thanks six-months-ago-@<strong>Alan O'Donnell</strong> . It was <a href=\"http://www.infoq.com/presentations/music-functional-language\" target=\"_blank\" title=\"http://www.infoq.com/presentations/music-functional-language\">Functional Composition</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30536183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/overtone talk?",
            "submessages": [],
            "timestamp": 1415679488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Who's going? It's this week, in Washington, DC.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30917545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416298516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"http://clojure-conj.org/\" target=\"_blank\" title=\"http://clojure-conj.org/\">http://clojure-conj.org/</a> - I'll be there with three other people from Prismatic. :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30917558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416298562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am going, and looking for a job</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30931635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416323911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be there!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30931813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416324128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>I wish I were. have fun!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30932134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416324571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\">@Patrick Redmond (W'14)</span> , Have you guys tried to make prismatic/schema serializable with transit? So you could define a schema on the service and send it over the wire to the client and still use native prismatic/schema types</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30934488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416327294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see <a href=\"https://github.com/outpace/schema-transit\" target=\"_blank\" title=\"https://github.com/outpace/schema-transit\">https://github.com/outpace/schema-transit</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30934553,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416327365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'll be there too!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30937157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416330238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>So jealous. Wish I could be there. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30969951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416370326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey Dustin,</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30973718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416376940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm still new around here so I forwarded your question to my tech-lead, Jason</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30973725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416376961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<blockquote>\n<p>From here:</p>\n<p><a href=\"https://groups.google.com/forum/#!topic/prismatic-plumbing/2FTdO9WOuHI\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/prismatic-plumbing/2FTdO9WOuHI\">https://groups.google.com/forum/#!topic/prismatic-plumbing/2FTdO9WOuHI</a></p>\n<blockquote>\n<p>Just today we (my employer Outpace) have open sourced a library that glues together Schema and Transit. We've been using it to transmit schemas between Clojure processes.</p>\n<p>It is still early, and doesn't yet have a ClojureScript implementation, but we welcome feedback and contributions.</p>\n<p><a href=\"https://github.com/outpace/schema-transit/\" target=\"_blank\" title=\"https://github.com/outpace/schema-transit/\">https://github.com/outpace/schema-transit/</a></p>\n</blockquote>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30973729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416376982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> sounds like somebody's working on that problem!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30973731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416377003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>We should totally have a hacker-schooler meetup!  :D</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31049496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416489576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ping me if you're down to meet!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31049592,
            "is_me_message": false,
            "last_edit_timestamp": 1416861728,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1416489727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e9d86a1292e632cee716a5baa8e672b9e926a75?x=x&version=2",
            "client": "website",
            "content": "<p>I'm working in Clojure for the first time ever, and I'm wondering some stuff about naming conventions. Specifically variable names. I know functions <code>take-this-form</code> but what about variables? Should they <code>be-like-this</code> or <code>likethis</code> or something completely different?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31055965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cerekh@gmail.com",
            "sender_full_name": "Cerek Hillen (he) (W2'20)",
            "sender_id": 6670,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416499553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Usually in lisps, everything uses hyphens for word separation. (Occasionally you might want to use other characters, such as <code>+</code>.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416499647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e9d86a1292e632cee716a5baa8e672b9e926a75?x=x&version=2",
            "client": "website",
            "content": "<p>Alright, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cerekh@gmail.com",
            "sender_full_name": "Cerek Hillen (he) (W2'20)",
            "sender_id": 6670,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416499662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cerekh@gmail.com\">@Cerek Hillen (F2'14)</span>   I've seen the hyphenated style called \"snake-case\".<br>\nAs <span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span>  mentioned, there are hardly any reserved characters for identifiers. For instance a common convention for predicates in Scheme/Racket/Clojure is to append <code>?</code>, e.g. <code>boolean?</code>.<br>\nOne of the few things you can't use is <code>'</code> because that's reader syntax for <code>quote</code>. So whereas in Haskell you'd use that as a suffix to mean a variant, in these Lisps the convention would be <code>*</code>.<br>\nAlso be aware than in Clojure <code>/</code> is reserved to \"namespace prefix\" identifiers.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056445,
            "is_me_message": false,
            "last_edit_timestamp": 1416500137,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lisp's lexical rules are so fun. Snake case (thanks for the word, <span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span>) is so much better than either underscores or camel case :D<br>\n<a href=\"http://factorcode.org/\" target=\"_blank\" title=\"http://factorcode.org/\">Factor</a> and <a href=\"http://wiki.portal.chalmers.se/agda/pmwiki.php\" target=\"_blank\" title=\"http://wiki.portal.chalmers.se/agda/pmwiki.php\">Agda</a> have even more liberal identifier policies than lisps, though. Agda even lets you define identifiers that denote new kinds of brackets! (with so-called \"mixfix operators\")</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think Factor's identifiers are just \"anything that doesn't contain a space\", including brackets and even parentheses.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, using snake-case has saved me so much money replacing worn-out shift keys over the years. :P  Seriously it's a lot faster to type. It does look weird intially if you're accustomed to langs where <code>-</code> is an infix operator.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also love using <code>-&gt;</code> in the names of functions that do conversions -- <code>string-&gt;int</code> and so on. Sadly Common Lisp, currently the lisp I'm most familiar with, doesn't do much of this at all. (Common Lisp doesn't even usually use <code>?</code> for predicates, instead mostly going with the <code>-p</code> suffix.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31056976,
            "is_me_message": false,
            "last_edit_timestamp": 1416500775,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span> do you know if the <code>-&gt;</code> naming convention is also used for maps to denote what keys they are mapping to what values? Say, <code>id-&gt;fullname</code>, or <code>hackerschooler-&gt;batch</code> or something similar</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> hmmm, I don't know if that's a convention in wide use, but it makes a lot of sense. It's even pretty similar to the \"convert one to another\" sense I mentioned above -- a map can be imagined as a particular way of converting keys to values.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416500969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, I think it makes things very clear and concise. I like it a lot. I remember I started using it because I had seen it in some code in the wild, but it confused people, so I'm not sure if it's actually a convention or not. maybe I got confused for that same reason you mention (a map can kinda be thought of as a function)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416501157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>I'm glad I'm not the only one who thinks it makes sense though!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057363,
            "is_me_message": false,
            "last_edit_timestamp": 1416501185,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416501175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>In Clojure maps are functions of keys to values, so I've occasionally used <code>foo-&gt;bar</code> as the name for a map of foos to bars, calling it like this</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">foo-&gt;bar</span> <span class=\"nv\">my-foo</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057566,
            "is_me_message": false,
            "last_edit_timestamp": 1416501418,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416501403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Which is to say, I also really like the <code>-&gt;</code> convention =)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31057596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416501445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>One more addition would be using a bang like <code>reset!</code> or  <code>swap!</code> when you are mutating or changing state of something, like atoms.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31079039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416528022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "Android",
            "content": "<p>I thought snake_case meant underscores and got its name from being the preferred convention in Python? I've seen the dashes convention called lisp case.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31089869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416544522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wikipedia agrees that <a href=\"http://en.wikipedia.org/wiki/Snake_case\" target=\"_blank\" title=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case means underscores</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31090029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416544787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh. I thought I saw _some_ name like camelCase for the hyphenated Lisp style. If it's not \"snake case\", I wonder what it is?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31115949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416589956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh. kebab-case  :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31115972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416590011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>And here's a Clojure lib to convert among all three: <a href=\"https://github.com/qerub/camel-snake-kebab\" target=\"_blank\" title=\"https://github.com/qerub/camel-snake-kebab\">https://github.com/qerub/camel-snake-kebab</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31116039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416590057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>I remember snake case by thinking of it as \"roadkill_case\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31116263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416590395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>/me quietly pushes <a href=\"https://github.com/greghendershott/clojure-wffi/commit/399c60c1632785a70a123fb2ae60e1a56c9e720d\" target=\"_blank\" title=\"https://github.com/greghendershott/clojure-wffi/commit/399c60c1632785a70a123fb2ae60e1a56c9e720d\">https://github.com/greghendershott/clojure-wffi/commit/399c60c1632785a70a123fb2ae60e1a56c9e720d</a> <img alt=\":sweat_smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sweat_smile.png\" title=\":sweat_smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31116333,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Naming Conventions",
            "submessages": [],
            "timestamp": 1416590477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Hot off the presses: RH semi-publicly disses Schema.  The new thing is <a href=\"https://github.com/miner/herbert\" target=\"_blank\" title=\"https://github.com/miner/herbert\">https://github.com/miner/herbert</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31172526,
            "is_me_message": false,
            "last_edit_timestamp": 1416692653,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416692558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> What are the reasons to prefer this library to schema? The README doesn't explicitly address that question.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31192252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416731264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>The author isn't making that claim, but the main argument in its favor is an appealing compact and more general grammar, going beyond type to, as per the conj talk, a specification for generative testing. On the other hand, it's missing many of the niceties of schema, such as useful error messages. I like the idea of using Herbert to generate prismatic schemas and, while we're at it, core.typed annotations at the same time, but one shouldn't mention type in Rich's presence, I have learned. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31202320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416752954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> link to Rich's comments please?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31307802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416928904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> I wasn't wearing a wire.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31308045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416929181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31308060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416929196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>do you remember what he said specifically?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31308064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416929207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It was in the context of Herbert, whose author gave a fairly entertaining talk the day before on its use in specifying generators for generative testing.  Rich was very enthusiastic and opined that it was very promising, not just for testing but for validation in general.  (The original purpose was to specify and validate EDN.)  I made the comment that, if you could specify generators, you could specify schemas as well, thereby levering the structure and error messages that prismatic provides.  He made a kind of face and said it would make more sense and be very easy to add these to EDN directly.   I was a bit flummoxed at being shot down so quickly, and then I made matters worse by saying you could also specify core.typed annotations, and at this point he wandered away.</p>\n<p>Personally, I think that the Clojure community underestimates both the challenge and the value of error messages, as illustrated by our ongoing tolerance of ludicrous stack traces.   At the same time, I'm not a huge schema fan, because I don't believe that the majority of type-related bugs occur at interfaces between the developer's own functions but generally within the functions.   That said, I wouldn't wish core.typed error messages on my worst enemy. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31308815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416930163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>(Though I have a surprisingly high tolerance for them myself.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31308826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416930181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>thank you</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31309032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416930457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, I from my other conversation with Rich about this, he just thinks Schema is an example of a tool that does too many things. I don't think his disinterest in Schema has anything to do w/ not wanting accurate matching messages.</p>\n<p>Also you are doing a switcharoo here wrt error messages in general in Clojure. It's my experience that most complaints come from people who haven't used the language considerably in anger (i.e. production). Nearly anyone that does eventually comes to dislike tools that modify or suppress the stack trace.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31312649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1416934834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Clojure/conj 2014 videos are up! <a href=\"https://www.youtube.com/playlist?list=PLZdCLR02grLoc322bYirANEso3mmzvCiI\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PLZdCLR02grLoc322bYirANEso3mmzvCiI\">https://www.youtube.com/playlist?list=PLZdCLR02grLoc322bYirANEso3mmzvCiI</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31389206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojuretv",
            "submessages": [],
            "timestamp": 1417039777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>As I said, I don't particularly like Schema either.  I'd go a little further than Rich by saying that it not only does too much but it still doesn't do enough.  It's a box of bandages that one shop found expedient to assemble and was decent enough to package for others to use. </p>\n<p>I don't think Rich, or anybody, is silly enough to actively prefer confusing error messages, but I still hold that Clojure could stand a little help in this area.  I'm also not surprised that production users of Clojure are more comfortable with its peculiarities than those who were put off and thus didn't become production users.  More importantly, I agree that suppressing the stack trace is the wrong thing to do; once you get to the point, essentially, of dumping core, the last thing you want is to throw away clues.  </p>\n<p>The perspective from which I'm coming at this is perhaps over-informed by management experiences.  I tend to discount my own preference for textual information overload, having had to wrangle too many projects staffed by people who didn't share it.   At some point I had to admit that, at least by proxy, squiggly red underlines were my best friend.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31474040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "prismatic schema + transit",
            "submessages": [],
            "timestamp": 1417183756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I have somehow both agreed and been permitted to talk at <a href=\"http://www.meetup.com/Clojure-NYC/events/218768134/\" target=\"_blank\" title=\"http://www.meetup.com/Clojure-NYC/events/218768134/\">Monday's Clojure meetup</a> about lenses and static typing.   I guarantee that I will be less interesting than whoever is giving the HS talk on Monday, but if anybody is willing to listen, I'd really like to practice before then, possibly during tomorrow's alumni Thursday.  <br>\nLet me know if you have any interest.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31794036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417633001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested certainly. Alumni thursday sounds like a good idea!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31795458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417634932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Cool.  I'll be on premises after about 10.   We can figure out a room sometime over the next 6 hours.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31796399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417636008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da92771d88932b2b7b8741204b6846979c588a18?x=x&version=1",
            "client": "website",
            "content": "<p>I hope you don't get savaged by the folks at the meetup</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31796774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "will.sommers@gmail.com",
            "sender_full_name": "William Lewis Sommers (W'14)",
            "sender_id": 5001,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417636438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31797910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417637804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>2pm Lovelace</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31844254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417717963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks to everyone who listened.  It did not have the intended effect of making me less nervous, but it will make the talk better!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31854597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417729775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I'm glad if we were helpful. I think for me the challenge was that you had enough material for 5 or 6 very interesting 1-hour talks! So I hope you don't feel nervous; on the contrary feel good that you can pick a small subset and it will go really well.<br>\nAlso the Clojure meetup probably won't consist of people in a small room with a hot projector and no ventilation, where the temperature gradually increases to 95F by the end? ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31895320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "practice talk",
            "submessages": [],
            "timestamp": 1417801867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested in doing *some action* every time a transaction is committed to datomic. This means watching the datomic tx report queue. I'm trying to write tests right now and having a rough time with the concurrency aspect of listening to the queue and putting things in the datomic at the same time. I tried using futures and while-trues and my jvm would randomly crap out during the tests (I imagine because I was using quick-check and a ton of while-true futures were being created that never exit). The only other example I've seen of <a href=\"https://github.com/Datomic/datomic-java-examples/blob/master/src/java/datomic/samples/TxReportWatcher.java\" target=\"_blank\" title=\"https://github.com/Datomic/datomic-java-examples/blob/master/src/java/datomic/samples/TxReportWatcher.java\">listening to the queue uses threads</a> which seems workable, but also not something I see recommended often when using Clojure. Has anybody done this before? I'd be happy to use core.async but I can't think of how to convert the queue into a channel. \\cc <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>   </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32088214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418165292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>(I'm on the ios client, so this will be telegraphic and not rigorously fact checked.) <br>\nThe queue listening code seems fine. There's only one thread, which unavoidably  blocks on the take, but you could use this loop to transfer control onto a channel and deal with it however asynchronously you like. That's not particularly non-Clojurey. I can't tell exactly what you're doing on the \"putting things in side,\" so I'll give only the most general advice, which is that you want to batch up writes to datomic, as there's overhead to each commit. <br>\nIf you want to talk about this in more detail, I'm around. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32097438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418179962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I like the idea of making a blocking thread that then pushes everything on a channel. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32120017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418223610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> Good.  I was just in the middle of typing up code-like text in case that wasn't clear...<br>\nI think this is a pretty common paradigm for corraling  synchronous behavior into as small a part of the code as possible.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32120135,
            "is_me_message": false,
            "last_edit_timestamp": 1418223813,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418223787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm building an entity resolution system on top of datomic and I'm trying to make it as easy to use as possible. I'd like to make it so that users just have to provide a schema (which has special properties about how to resolve entities), upload their data and then set up a way to listen for changes to the resolved entity ids. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32120547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418224421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>tx-report-queue seemed like the easiest way to respond to new data coming in.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32120605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418224458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Do you have latency or scale  requirements?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32121171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418225384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not in particular. This is for government disclosure data, which means there is a big bulk download a few times a year with a trickle in between. If it finishes processing bulk within a day, that would be a massive improvement. Scale is hardly a requirement at all sadly. People just don't disclose that much data about the government. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Checked with the sys admin and the amount of information we have to work with is about a terabyte. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>We wish we had more, but we just don't. People don't tell us that much. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Plus, blobs don't really help with entity resolution. Names, addresses, identifiers of various sorts, flags, properties, really only metadata helps. The actual text of a disclosure or comment on regulation is effectively useless for resolution. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is at the federal level at least, states can be pretty hit or miss. As I understand it, Oregon has great campaign finance laws coupled with disclosure while West Virginia has, as one of the reporters put it, an oral tradition of laws regarding campaign finance. So, an extremely generous estimate is 50 tbs of data total to work deal with.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Mostly write once and then infinitely cacheable reads as well. Displaying documents isn't that hard and resolutions are read heavy with a minimal number of writes. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32122835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic tx-report-queue",
            "submessages": [],
            "timestamp": 1418227638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>For about 15 days, emacs flycheck mode has provided a hook for adding custom checkers: <a href=\"http://www.lunaryorn.com/2014/12/03/generic-syntax-checkers-in-flycheck.html\" target=\"_blank\" title=\"http://www.lunaryorn.com/2014/12/03/generic-syntax-checkers-in-flycheck.html\">http://www.lunaryorn.com/2014/12/03/generic-syntax-checkers-in-flycheck.html</a></p>\n<p>I hacked up one for Clojure, which for the moment just invokes eastwood via cider, which is sort of an alpha feature of eastwood:<br>\n<a href=\"https://gist.github.com/pnf/b7ea96c610e2b808423d\" target=\"_blank\" title=\"https://gist.github.com/pnf/b7ea96c610e2b808423d\">https://gist.github.com/pnf/b7ea96c610e2b808423d</a></p>\n<p>To take this further, I need to devise strategies for narrowing the scope of checking in order to keep overhead to a minimum.  I'd like to get it to report core.typed errors.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32174111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418312081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Very cool!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32174683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418312789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>A more complete write-up: <a href=\"http://blog.podsnap.com/squiggly.html\" target=\"_blank\" title=\"http://blog.podsnap.com/squiggly.html\">http://blog.podsnap.com/squiggly.html</a><br>\nAnd a repo: <a href=\"https://github.com/pnf/squiggly-clojure\" target=\"_blank\" title=\"https://github.com/pnf/squiggly-clojure\">https://github.com/pnf/squiggly-clojure</a><br>\nI noticed that Bozhidar has a fork of flycheck (apparently unmodified though), so maybe he has a more professional implementation in mind.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32246962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418422913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Oh yes.  It does <code>core.typed</code> now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32247029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418422995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32247515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418423718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> I think in the \"What it looks like\" section you accidentally referenced the third picture for the first error.  Because they both talk about \"called + with one argument\", rather than the first error being try to call <code>inc</code> on a string.  Great post though!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32250741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418428987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I'm really excited about this flycheck feature because it enables Julia syntax checking too :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32250896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418429261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, it seems like a big win for syntax checking in emacs in general</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32250942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418429296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I'm somewhat worried that process oriented checkers will be really flaky but time will tell I suppose</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32250958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418429333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>(that suspicion due to many attempts to use tools like robe/rope/etc. that rely on IPC and often break if you, e.g. let you laptop go to sleep)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32250977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418429375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> Thanks!  I fixed it.  It always amazes me what I miss when proofreading my own stuff.<br>\n<span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> Well, both cider and flycheck have proved robust enough by themselves, so maybe the combination will be ok.  One thing I want to do is to put the linting into a different JVM, to facilitate restarts should something terrible happen.  BTW, when I was trying to figure out why my closures didn't work, I stumbled across <a href=\"http://jamesporter.me/2013/06/14/emacs-lisp-closures-exposed.html\" target=\"_blank\" title=\"http://jamesporter.me/2013/06/14/emacs-lisp-closures-exposed.html\">your post</a>, which helped a lot.  So thank you.  But I'm still worried about your comment at the end....</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32252051,
            "is_me_message": false,
            "last_edit_timestamp": 1418431277,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418431248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>unfortunately I cannot offer you solace, byte compiling is a twisted hell of compatibility issues</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32252469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418432078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>closures still work when byte compiling of course, the implementation is just different, so if you're trying to do something weird like i do in that post it probably wont work</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32252486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418432122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>but yeah I think pretty much all of the issues that are actually bugs opened up against my emacs package have been due to differences between byte compiling and interpreting.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32252536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418432195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>also <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> showed me everything in that post, so he deserves credit also :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32252542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418432221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Doing anything in elisp that is heftier than tweaking <code>init.el</code> is a good way to reinforce one's appreciation of Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32276635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418493075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>what's your favorite blog post/talk/whatever about transducers? i tried understanding them before but kind of didn't</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281173,
            "is_me_message": false,
            "last_edit_timestamp": 1418504028,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418504001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>something that isn't the original rich hickey blog post</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418504013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I have written an enormous number of posts on transducers, starting with a sort of glossary at <a href=\"http://blog.podsnap.com/ducers.html\" target=\"_blank\" title=\"http://blog.podsnap.com/ducers.html\">http://blog.podsnap.com/ducers.html</a>.  All have them have the string \"duc\" in their title.</p>\n<p>The strangeloop talk is of course somewhat more authoritative.  Plus it involves burritos and luggage.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281553,
            "is_me_message": false,
            "last_edit_timestamp": 1418504980,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418504907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Have you seen Rich Hickey's talk about transducers?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418504913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>From Strange Loop?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418504920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>i was there! i should have mentioned that i'm currently watching that one again too (i got a little lost during the talk and in general i like to pause and repeat fragments of videos)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281566,
            "is_me_message": false,
            "last_edit_timestamp": 1418505048,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418505001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>If strangeloop doesn't do it for you, my cantankerations may in fact be of use.  Whatever you do, don't start with Rich's blog posts, and if you do start with Rich's blog posts, read them in reverse order, as the nomenclature went through a bit of flux.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418505219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>I watched like 5-7 times the original talk from StrangeLoop, then read some of the implementations that they released in other runtimes: <a href=\"http://cognitect-labs.github.io/\" target=\"_blank\" title=\"http://cognitect-labs.github.io/\">http://cognitect-labs.github.io/</a><br>\nAlso at the latest talk from Clojure/conj he explains the concept much more concisely (in my opinion...): <a href=\"https://www.youtube.com/watch?v=4KqUvG8HPYo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4KqUvG8HPYo\">https://www.youtube.com/watch?v=4KqUvG8HPYo</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=4KqUvG8HPYo\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4KqUvG8HPYo\"><img src=\"https://i.ytimg.com/vi/4KqUvG8HPYo/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418505312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>also tried to make sense of it by doing a quick exercise in Ruby: <a href=\"http://literateinfrastructure.org/posts/2014/10/11/transducers-in-ruby/\" target=\"_blank\" title=\"http://literateinfrastructure.org/posts/2014/10/11/transducers-in-ruby/\">http://literateinfrastructure.org/posts/2014/10/11/transducers-in-ruby/</a><br>\n(honestly not sure I really got it, but I think the original talk is still awesome: \"Transducers. (pause)\")</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418505456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>what about <a href=\"https://github.com/ianrumford/clojure-transducer-examples/blob/master/doc/2014-08-08-Some-trivial-examples-of-using-Clojure-Transducers.org\" target=\"_blank\" title=\"https://github.com/ianrumford/clojure-transducer-examples/blob/master/doc/2014-08-08-Some-trivial-examples-of-using-Clojure-Transducers.org\">https://github.com/ianrumford/clojure-transducer-examples/blob/master/doc/2014-08-08-Some-trivial-examples-of-using-Clojure-Transducers.org</a> and <a href=\"http://clj-me.cgrand.net/2014/09/11/the-rules-of-transducer-club/\" target=\"_blank\" title=\"http://clj-me.cgrand.net/2014/09/11/the-rules-of-transducer-club/\">http://clj-me.cgrand.net/2014/09/11/the-rules-of-transducer-club/</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32281816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418505581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you can read JavaScript I think the Transducers implementation I wrote for Cognitect is relatively straightforward - <a href=\"https://github.com/cognitect-labs/transducers-js\" target=\"_blank\" title=\"https://github.com/cognitect-labs/transducers-js\">https://github.com/cognitect-labs/transducers-js</a>. Happy to answers questions for readers of the source.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32351205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418661439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>thanks for the suggestions everyone!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32352999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers",
            "submessages": [],
            "timestamp": 1418664099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>woah <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> you got a pull request from magnars on this</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32421516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418770524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>/me swoons</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32421518,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418770530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>magnars is my emacs hero</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32421519,
            "is_me_message": false,
            "last_edit_timestamp": 1418770544,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418770535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>This is almost as good as the time I was berated by rms. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32421999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418771139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>And the eastwood guys are making api changes for me.  After flailing around for decades, I'm finally making a name for myself with 20 lines of sloppy elisp. Or possibly I'm being pranked. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32422575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418771882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>punk'd</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32456804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418835891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Quoth Magnar: </p>\n<blockquote>\n<p>I've now walked through a rather big project, running eastwood on each namespace via squiggly, and it's working nicely. :-)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32464403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1418845859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>This looks great <span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>, and I'm excited to check it out.</p>\n<p>The github repo says it's available on MELPA, but I can't find it here: <a href=\"http://melpa.org/\" target=\"_blank\" title=\"http://melpa.org/\">http://melpa.org/</a>. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32602302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1419099664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I just learned that.  I merged a PR for the README without actually checking, and it turns out that the corresponding PR for melpa isn't approved yet.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32603878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1419103237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>ah, well I'm waiting for it to be merged with bated breath :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32604799,
            "is_me_message": false,
            "last_edit_timestamp": 1419105526,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1419105512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You might as well just copy the <code>.el</code>,  as there's only one.</p>\n<p>The packaging discussions have descended to the realm of mild bickering, as the Cider people prefer an everything's-in-the-box approach, while Flycheck culture favors maximal subdivision.  So we may end up in the bizarre situation where there are n+1 melpa packages for the clojure/flycheck core and each of the checkers, all connecting to Clojure via Cider, which depends on all of them, rendering the package splitting silly and moot.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32668805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1419257325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"*\">@all</span> I'm new to the functional paradigm but I found this set of materials to work through, anyone want to do this with me? We could start later this week or whenever: <a href=\"http://mooc.cs.helsinki.fi/clojure\" target=\"_blank\" title=\"http://mooc.cs.helsinki.fi/clojure\">http://mooc.cs.helsinki.fi/clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33222916,
            "is_me_message": false,
            "last_edit_timestamp": 1420483100,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Intro to Clojure MOOC",
            "submessages": [],
            "timestamp": 1420481253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is the easiest way to load code that I'm currently editing into a cider repl session?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33319844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420647035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Under nrepl, I use C-x C-e to evaluate an expression (usually a defn) in the editor.<br>\n(I assume cider has the same shortcut)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33321507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420649260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I remember Cider's command being <code>C-c C-c</code>. There's also <code>C-c C-k</code> to eval the entire buffer into your repl.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33321834,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420649736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Yep, I tend to eval whole files to avoid inconsistencies, but if I'm doing something line-by-line I'll use <code>C-x C-e</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33321884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420649801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>For completeness: there's also <code>C-c C-r</code>, bound to <code>cider-eval-region</code>, but I'm with Zach.   If you eval the entire buffer, you're also forced to write reloadable code, which is probably a good thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33321985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420649988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Minor point of warning, though: evaling an entire file doesn't necessarily avoid inconsistencies. Usually you'll be fine, but re-evaluating a buffer doesn't clear the old definitions, and if you have definition macros that aren't idempotent you'll need to restart the entire repl if you want to reevaluate properly. (I've run into both of these issues at Prismatic...)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33321986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420649992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Good point.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Indeed <img alt=\":+1:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/+1.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's usually easy to avoid this, but it's also nice to be aware of the possibility if you ever notice that reevaluating the buffer isn't working the way you want!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For this kind of situation, do people just keep calm and carry on mutating their repl state?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I usually buy a new computer or reinstall my operating system</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>/s</p>\n<p>but yeah, it helps to be aware of what might go wrong</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>like, what part of your code is building up state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've always found this odd: we're all about how immutability is nice, and yet use repls that are balls of yucky state.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322279,
            "is_me_message": false,
            "last_edit_timestamp": 1420650395,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>That's my complaint about reactivity too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a library for this problem from Stuart Sierra - <a href=\"https://github.com/clojure/tools.namespace\" target=\"_blank\" title=\"https://github.com/clojure/tools.namespace\">https://github.com/clojure/tools.namespace</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>With <code>c.t.n</code> you need to be even more careful about reloadable code, since it climbs the whole dependency tree. But I've used and like it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33322664,
            "is_me_message": false,
            "last_edit_timestamp": 1420651009,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420650969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>There's been some progress:<br>\n1. The repo now lives in Cider-land: <a href=\"https://github.com/clojure-emacs/squiggly-clojure\" target=\"_blank\" title=\"https://github.com/clojure-emacs/squiggly-clojure\">https://github.com/clojure-emacs/squiggly-clojure</a><br>\n2. The distributions now live on melpa (for the elisp part) and clojars (for the jar).<br>\n3. A refactoring and general beautification of the elisp by Sebastian Wiesner, the maintainer of flycheck.<br>\n4. Configuration options to select among kibit, core.typed and eastwood, and set other options for the latter.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33323828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "emacs flycheck",
            "submessages": [],
            "timestamp": 1420652537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> Exactly. In my time so far with Clojure, although I love a lot about it, <a href=\"http://www.greghendershott.com/2014/10/hands-on-with-clojure-day-5.html#load-vs-modules\" target=\"_blank\" title=\"http://www.greghendershott.com/2014/10/hands-on-with-clojure-day-5.html#load-vs-modules\">this is the aspect I like the least</a>. (And I mean, I program a fair amount in Elisp, so I think I get the dynamic env paradigm. At least in Elisp I don't have to forward <code>declare</code> everything if I want to write functions in a \"top-down\" order.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420662279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> That looks awesome. I'll have to try that next time I'm Clojure-ing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420662405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Admittedly I'm biased. Racket's GUI IDE (and my Racket mode for Emacs) do have what could be called a \"purely functional REPL\". You can explore interactively in the REPL... but return to a known state with one keypress. It's a workflow I find sane. But I recognize it's not the only or best way to work.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420662518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"greghendershott@gmail.com\">@Greg Hendershott (F2'14)</span> this is actually precisely what I don't like about Racket, that modules not individual functions are the compilation unit. Definitely a tradeoff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332267,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420662551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>One benefit of first class namespaces in Clojure is that you can surgically monkey-patch a single function in some namespace you don't control - ends up being very useful in practice. I could never sort out how to do this with Racket modules (probably possible).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332394,
            "is_me_message": false,
            "last_edit_timestamp": 1420662706,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420662692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right, I don't think monkey-patching <strong>arbitrary</strong> code is compatible with Racket's compilation (to bytecode, and runtime JIT to native code). At least I've never heard of/seen it done. If you expect you might need to tweak X, you can <code>dynamic-require</code> specific functions at runtime, and set it up to be patchable. But not arbitrary AFAIK.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420663015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also set up things as fixed and reloadable parts, e.g. <a href=\"https://github.com/tonyg/racket-reloadable\" target=\"_blank\" title=\"https://github.com/tonyg/racket-reloadable\">https://github.com/tonyg/racket-reloadable</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33332665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420663030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>deleted</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33335261,
            "is_me_message": false,
            "last_edit_timestamp": 1420674782,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "macros and symbols question",
            "submessages": [],
            "timestamp": 1420666253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>p.s. <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I was catching on Hacker News just now and noticed <a href=\"https://news.ycombinator.com/item?id=8852928\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=8852928\">this</a> posted from around the time of our Zulip chat. :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33346518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cider",
            "submessages": [],
            "timestamp": 1420683328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, when I try to run my local copy of the cljs compiler (inside bin/cljsc), it looks like the compiler crashes right away:</p>\n<div class=\"codehilite\"><pre>Exception in thread <span class=\"s2\">&quot;main&quot;</span> java.lang.Exception: Unsupported binding form: :as, compiling:<span class=\"o\">(</span>cljs/closure.clj:1079:1<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyzeSeq<span class=\"o\">(</span>Compiler.java:6567<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6361<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6322<span class=\"o\">)</span>\n    at clojure.lang.Compiler<span class=\"nv\">$BodyExpr$Parser</span>.parse<span class=\"o\">(</span>Compiler.java:5708<span class=\"o\">)</span>\n    at clojure.lang.Compiler<span class=\"nv\">$FnMethod</span>.parse<span class=\"o\">(</span>Compiler.java:5139<span class=\"o\">)</span>\n    at clojure.lang.Compiler<span class=\"nv\">$FnExpr</span>.parse<span class=\"o\">(</span>Compiler.java:3751<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyzeSeq<span class=\"o\">(</span>Compiler.java:6558<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6361<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyzeSeq<span class=\"o\">(</span>Compiler.java:6548<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6361<span class=\"o\">)</span>\n    at clojure.lang.Compiler.access<span class=\"nv\">$100</span><span class=\"o\">(</span>Compiler.java:37<span class=\"o\">)</span>\n    at clojure.lang.Compiler<span class=\"nv\">$DefExpr$Parser</span>.parse<span class=\"o\">(</span>Compiler.java:529<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyzeSeq<span class=\"o\">(</span>Compiler.java:6560<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6361<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyze<span class=\"o\">(</span>Compiler.java:6322<span class=\"o\">)</span>\n    at clojure.lang.Compiler.eval<span class=\"o\">(</span>Compiler.java:6623<span class=\"o\">)</span>\n    at clojure.lang.Compiler.load<span class=\"o\">(</span>Compiler.java:7064<span class=\"o\">)</span>\n    at clojure.lang.RT.loadResourceScript<span class=\"o\">(</span>RT.java:370<span class=\"o\">)</span>\n    at clojure.lang.RT.loadResourceScript<span class=\"o\">(</span>RT.java:361<span class=\"o\">)</span>\n    at clojure.lang.RT.load<span class=\"o\">(</span>RT.java:440<span class=\"o\">)</span>\n    at clojure.lang.RT.load<span class=\"o\">(</span>RT.java:411<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load$fn__5018</span>.invoke<span class=\"o\">(</span>core.clj:5530<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load</span>.doInvoke<span class=\"o\">(</span>core.clj:5529<span class=\"o\">)</span>\n    at clojure.lang.RestFn.invoke<span class=\"o\">(</span>RestFn.java:408<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load_one</span>.invoke<span class=\"o\">(</span>core.clj:5336<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load_lib$fn__4967</span>.invoke<span class=\"o\">(</span>core.clj:5375<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load_lib</span>.doInvoke<span class=\"o\">(</span>core.clj:5374<span class=\"o\">)</span>\n    at clojure.lang.RestFn.applyTo<span class=\"o\">(</span>RestFn.java:142<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$apply</span>.invoke<span class=\"o\">(</span>core.clj:619<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$load_libs</span>.doInvoke<span class=\"o\">(</span>core.clj:5413<span class=\"o\">)</span>\n    at clojure.lang.RestFn.applyTo<span class=\"o\">(</span>RestFn.java:137<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$apply</span>.invoke<span class=\"o\">(</span>core.clj:619<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$require</span>.doInvoke<span class=\"o\">(</span>core.clj:5496<span class=\"o\">)</span>\n    at clojure.lang.RestFn.invoke<span class=\"o\">(</span>RestFn.java:408<span class=\"o\">)</span>\n    at user<span class=\"nv\">$eval1</span>.invoke<span class=\"o\">(</span>cljsc.clj:9<span class=\"o\">)</span>\n    at clojure.lang.Compiler.eval<span class=\"o\">(</span>Compiler.java:6619<span class=\"o\">)</span>\n    at clojure.lang.Compiler.load<span class=\"o\">(</span>Compiler.java:7064<span class=\"o\">)</span>\n    at clojure.lang.Compiler.loadFile<span class=\"o\">(</span>Compiler.java:7020<span class=\"o\">)</span>\n    at clojure.main<span class=\"nv\">$load_script</span>.invoke<span class=\"o\">(</span>main.clj:294<span class=\"o\">)</span>\n    at clojure.main<span class=\"nv\">$script_opt</span>.invoke<span class=\"o\">(</span>main.clj:356<span class=\"o\">)</span>\n    at clojure.main<span class=\"nv\">$main</span>.doInvoke<span class=\"o\">(</span>main.clj:440<span class=\"o\">)</span>\n    at clojure.lang.RestFn.invoke<span class=\"o\">(</span>RestFn.java:421<span class=\"o\">)</span>\n    at clojure.lang.Var.invoke<span class=\"o\">(</span>Var.java:419<span class=\"o\">)</span>\n    at clojure.lang.AFn.applyToHelper<span class=\"o\">(</span>AFn.java:163<span class=\"o\">)</span>\n    at clojure.lang.Var.applyTo<span class=\"o\">(</span>Var.java:532<span class=\"o\">)</span>\n    at clojure.main.main<span class=\"o\">(</span>main.java:37<span class=\"o\">)</span>\nCaused by: java.lang.Exception: Unsupported binding form: :as\n    at clojure.core<span class=\"nv\">$destructure$pb__4541</span>.invoke<span class=\"o\">(</span>core.clj:4029<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$destructure$pb__4541$pmap__4544</span>.invoke<span class=\"o\">(</span>core.clj:4022<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$destructure$pb__4541</span>.invoke<span class=\"o\">(</span>core.clj:4028<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$destructure$process_entry__4557</span>.invoke<span class=\"o\">(</span>core.clj:4030<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$reduce1</span>.invoke<span class=\"o\">(</span>core.clj:896<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$destructure</span>.invoke<span class=\"o\">(</span>core.clj:4033<span class=\"o\">)</span>\n    at clojure.core<span class=\"nv\">$let</span>.doInvoke<span class=\"o\">(</span>core.clj:4046<span class=\"o\">)</span>\n    at clojure.lang.RestFn.invoke<span class=\"o\">(</span>RestFn.java:467<span class=\"o\">)</span>\n    at clojure.lang.Var.invoke<span class=\"o\">(</span>Var.java:427<span class=\"o\">)</span>\n    at clojure.lang.AFn.applyToHelper<span class=\"o\">(</span>AFn.java:172<span class=\"o\">)</span>\n    at clojure.lang.Var.applyTo<span class=\"o\">(</span>Var.java:532<span class=\"o\">)</span>\n    at clojure.lang.Compiler.macroexpand1<span class=\"o\">(</span>Compiler.java:6468<span class=\"o\">)</span>\n    at clojure.lang.Compiler.analyzeSeq<span class=\"o\">(</span>Compiler.java:6546<span class=\"o\">)</span>\n    ... 45 more\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Am I doing something wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>All I've done in the cljs repo so far is run <code>script/build</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> is this a fresh checkout?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> and you ran bootstrap script?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess not <img alt=\":sheep:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sheep.png\" title=\":sheep:\"> I think I've only run build.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will try that, haha.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33377409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "script compiler",
            "submessages": [],
            "timestamp": 1420739983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>are there any clojuristas that would like to pair this evening before Fat Cat and/or tomorrow? i have been stuck on <a href=\"http://cryptopals.com/sets/1/challenges/6/\" target=\"_blank\" title=\"http://cryptopals.com/sets/1/challenges/6/\">http://cryptopals.com/sets/1/challenges/6/</a> and would love another set of eyes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33394077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1420759481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Could someone with Clojure skillz tell me why this is giving an error?<br>\n((or (not (true)) (false)))</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33565868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>woops, should be this: (or (not true) (false))</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33565978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>you are wrapping everything inside a set of parenthesis, so its basically calling (true), which gives the error</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33565981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kpishdadian@gmail.com\">@Keyan Pishdadian (W2'15)</span> <code>false</code> is not a function</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33565988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Ah okay, you can only wrap with parens if it is a fxn...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33566032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33566035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>(or true false) returns true, as does (or false true). Because without the parens, they're values not functions. And Clojure can return the values, but you haven't assigned (true) to a function. (I'm not a True Clojurian but it's the same in Racket)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33566160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "error",
            "submessages": [],
            "timestamp": 1421094595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Are you still working through this? I've been doing Clojure for the Brave and True and feel braver already.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33569590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Intro to Clojure MOOC",
            "submessages": [],
            "timestamp": 1421098850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I just installed Leiningen and Clojure the other day. In Terminal, I can do \"lein repl\", and get a REPL. In Emacs, this only works if I am in the lein app directory. If I'm not, I get a long error message, \"illegal name,\" and it times out. </p>\n<p>Anyone have any ideas on making Emacs and Clojure play together more nicely?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33569722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421099014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> people that use Emacs + Clojure normally use Cider. Having used that combo for 7 years I honestly can't recommend CursiveClojure enough these days. Cider is pretty good, but CursiveClojure does the same stuff and much more w/o manually fiddling w/ your Emacs config. You may of course enjoy Emacs fiddling - then Cider is a good choice :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33570323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421099748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone have thoughts on boot vs leiningen?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33571007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "boot",
            "submessages": [],
            "timestamp": 1421100494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I'm curious as well. Been meaning to try out boot but haven't.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33571131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "boot",
            "submessages": [],
            "timestamp": 1421100626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> As in the IntelliJ plugin?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33571559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421101161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/508dd2e25655046eb1c036c661cb0bac63ec303f?x=x&version=3",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I just finished the second part, I never really did any of it last week. Still not sure how much of it I'll end up doing. I've been switching back and forth between Brave and True and this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33571614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kpishdadian@gmail.com",
            "sender_full_name": "Keyan Pishdadian (he) (W2'15)",
            "sender_id": 7079,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Intro to Clojure MOOC",
            "submessages": [],
            "timestamp": 1421101230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kpishdadian@gmail.com\">@Keyan Pishdadian (W2'15)</span> yes</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33573225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421103454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> I use emacs prelude and things pretty much just work</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33575697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421107269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>How can i inspect the type of a cljs value, like <code>(class o)</code> on the jvm?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><code>(type ...)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I believe it returns the constructor</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>how come I can extend-type on cljs.core.PersistentHashSet, but not on cljs.core.ISet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>my values came out of transit-cljs, which specifically says sets are cljs.core.ISet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33577536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421109645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>hmm, good question. I'm not sure off the top of my head. cc <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33578993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421111960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> <code>(type o)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33579005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421111999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I have a set straight out of transit-cljs, why must I extend-type on cljs.core.PersistentHashSet, why cannot I extend-type cljs.core.ISet which is what the transit-cljs docs indicate sets are?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33606763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421163835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also had trouble finding the relevant bits in the cljs source to answer my question, can you point me to where in the source my question is answered?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33606829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421163892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> there is not such thing as interfaces in JavaScript as there is in Java.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33608845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421166158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>then what is cljs.core.ISet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33609865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421167290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now i see it's just a protocol, i understand why I can't extend-type a protocol. I don't understand why the transit-cljs docs say the \"default type mapping\" for set is ISet... if you can't extend-type it, why is it called a type?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33611452,
            "is_me_message": false,
            "last_edit_timestamp": 1421169501,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421168960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the recommendations, guys! I'm a little reluctant to switch from my Emacs config, but it seems I might have to, if I can only run Leiningen apps but not individually-created Clojure files. I'll check out CursiveClojure and Prelude.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33613547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421171334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> according to <a href=\"http://www.braveclojure.com/using-emacs-with-clojure/\" target=\"_blank\" title=\"http://www.braveclojure.com/using-emacs-with-clojure/\">http://www.braveclojure.com/using-emacs-with-clojure/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33613618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421171418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>it may be as easy as <code>M-x package-install cider</code>, followed by <code>M-x cider-jack-in</code> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33613631,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421171442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>to get your repl worked out. But you'll need a project.clj for that, which even for individual clojure files, you need anyway to specify your dependencies</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33613644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421171471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Suppose I have (fn foo [x y &amp; z]), within which I want to call (fn bar [x y &amp; z]. But bar will crash if it receives empty z. Is there any way to call something like (bar x y (if-not (empty? z) z))? This won't work because it returns nil. I'm not sure anything work satisfy this, in fact, as all functions need to return *something*. I suppose my only options are better error checking in bar or having an if statement govern the call to bar. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421171921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Probably the reason <code>M-x cider-jack-in</code> isn't working for me is this <code>project.clj</code> part! I'll research how to specify dependencies for individual files. Right now I'm trying to do some SICP exercises in Clojure, which is really the wrong scale for Clojure, as I understand it. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614170,
            "is_me_message": false,
            "last_edit_timestamp": 1421172799,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can use a nearly empty project.clj generated by <code>lein new myfoo</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you can jack in to the empty project (without a source file, even)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you can open some random .clj file anywhere on the filesystem and start evaluating forms and they will be sent to the jacked-in repl</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> My solution is to keep a <code>scratch</code> clj project around, and I just jack in and compile only the file I'm working with</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I've never had any issues doing things like small exercises or examples using this method</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the minimal project.clj generated by lein new:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defproject </span><span class=\"nv\">foobar</span> <span class=\"s\">&quot;0.1.0-SNAPSHOT&quot;</span>\n  <span class=\"ss\">:description</span> <span class=\"s\">&quot;FIXME: write description&quot;</span>\n  <span class=\"ss\">:url</span> <span class=\"s\">&quot;http://example.com/FIXME&quot;</span>\n  <span class=\"ss\">:license</span> <span class=\"p\">{</span><span class=\"ss\">:name</span> <span class=\"s\">&quot;Eclipse Public License&quot;</span>\n            <span class=\"ss\">:url</span> <span class=\"s\">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class=\"p\">}</span>\n  <span class=\"ss\">:dependencies</span> <span class=\"p\">[[</span><span class=\"nv\">org.clojure/clojure</span> <span class=\"s\">&quot;1.6.0&quot;</span><span class=\"p\">]])</span>\n</pre></div>\n\n\n<p>So you also have to specify a clojure version too which you need</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did SICP in clojure when i was at hackerschool, it worked fine</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421172601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> I don't know what transit-cljs docs have to do with <code>extend-type</code>. It just means you're going to get something that implements <code>ISet</code> no promise about what concrete type.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614584,
            "is_me_message": false,
            "last_edit_timestamp": 1421172675,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421172662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> Would something like the following work? </p>\n<div class=\"codehilite\"><pre>(fn foo \n  ([x y] (+ x y))\n  ([x y z] (+ x y z)))\n</pre></div>\n\n\n<p>You can have multiple arity functions in Clojure, which sounds like what you want?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421172883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">foo</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"o\">&amp;</span> <span class=\"p\">[</span><span class=\"nv\">z</span><span class=\"p\">]]</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">y</span> <span class=\"nv\">z</span><span class=\"p\">])</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;user/foo</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"nf\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"nv\">nil</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> <span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421172976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>So, for dummies: I create a <code>lein new scratch</code> project (say inside my SICP folder), and then create any small exercise .clj files in this project. Then, to run the repl and work with these exercises, I just run <code>lein repl</code>inside that project?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421173073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>My workflow would be: <code>lein new scratch</code>, open project.clj in emacs, run <code>M-x cider-jack-in</code>, then create a new exercise file and run <code>C-c C-k</code> to compile that file when I make changes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421173195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>or <code>C-x C-e</code> to evaluate individual forms</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33614998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421173210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>1. lein new scratch<br>\n2. cd scratch<br>\n3. C-x C-f project.clj<br>\n4. M-x cider-jack-in (C-c M-j)<br>\n5. touch myfile.clj<br>\n6. C-x C-f myfile.clj<br>\n7. start evaling forms</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421173238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> something is wrong with <code>bar</code> if it's going to crash with empty <code>z</code>.  Your problem needs more context. What is <code>bar</code> here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421173851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>So how can I guarantee that my custom protocol gets implemeted for whatever concrete type transit-cljs returns? Right now I'm hardcoded to cljs.core.PersistentHashSet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421173925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> you can look at how this is done in transit-cljs (there's really very little code there), you just have to cover all the concrete types. It must be done this way in library code. For application code you can implement <code>default</code> and capture anything that satisfies a protocol.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421174178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah it just says (into #{}) for sets, i'm just wondering if cljs will someday swap in some other optimized set impl under certain circumstances and break my code</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33615858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421174259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> like I said for application code you have an acceptable workaround. For libraries there's really nothing we can do. JavaScript doesn't let us sensibly and efficiently identify families of types, unlike Java interfaces which can be combined, with JS you can only have single inheritance prototype chain.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616037,
            "is_me_message": false,
            "last_edit_timestamp": 1421174513,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421174495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks guys, that's super helpful! I still have an issue but it's in the Bermuda Triangle of Leiningen/Emacs/Mac PATH, I think. </p>\n<p>1. lein new scratch<br>\n2. cd scratch<br>\n3. open project.clj in emacs<br>\n4. <code>M-x cider-jack-in</code> and <code>C-c M-j</code> both produce \"Could not start nREPL server: /bin/bash: lein: command not found\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>lein is on my path:</p>\n<div class=\"codehilite\"><pre>bash-3.2$ which -a lein\n/usr/local/bin/lein\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>is it on yours?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> Ah! Did you install <code>lein</code> through homebrew?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>regardless, try adding this line to your emacs config: <code>(add-to-list 'exec-path \"/usr/local/bin\")</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i use homebrew lein</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I had to add this when I upgraded cider recently</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>this basically teaches emacs about all of the programs in <code>/usr/local/bin</code>, which is everything installed via homebrew</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> it might be solvable with some kind of fast protocol hash table in the protocol dispatch fn but no one has sat down to think it through and write acceptably fast code for this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421174934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i dont have that line</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe prelude knows</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421174972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I understand now, thanks for the explanations</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "(class o) in cljs",
            "submessages": [],
            "timestamp": 1421175044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I did install <code>lein</code> through homebrew! However, that line (of which I seem to have several versions in my Emacs config) doesn't fix it. I'll try uninstalling leiningen through brew and reinstalling it via the recommended method.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>brew lein is the best way i thought. Every now and then something breaks and i need to update lein</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> foo would be <code>get-byte</code> and bar would be <code>create-table</code> <a href=\"https://www.refheap.com/96062\" target=\"_blank\" title=\"https://www.refheap.com/96062\">https://www.refheap.com/96062</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421175142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>multi-variadic functions seems like a good solution, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421175236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I do however have this in my .bash_profile: <code>[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>according to this <a href=\"http://stackoverflow.com/questions/14774323/error-while-using-nrepl-jack-in\" target=\"_blank\" title=\"http://stackoverflow.com/questions/14774323/error-while-using-nrepl-jack-in\">http://stackoverflow.com/questions/14774323/error-while-using-nrepl-jack-in</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>mac Applications dont load .bashrc</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>so if you launch emacs as an application,  if your lines to put /usr/local/bin on your path are in .bashrc, emacs can't see it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33616735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421175310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I tried what Dustin said but it didn't do the trick for me. Then, I did:</p>\n<div class=\"codehilite\"><pre>cd ~/bin\nwget https://raw.github.com/technomancy/leiningen/preview/bin/lein\nchmod 755 lein\n</pre></div>\n\n\n<p>to overwrite my brew version of <code>lein</code>. This worked, in the sense that now I get a new and more interesting error message!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>ar eyou launching emacs as an application?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>you may need to type <code>source .bash_profile</code> for your changes to take effect</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Emacs shows a fragment: \"to turn off certificate checks: <br>\n     export HTTP_CLIENT =\"wget --no-check-certificate -0\" # or....\"</p>\n<p>Followed by a Clojure error message.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>the lein executable you placed there is not actually lein</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's a lein self-install script</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i would undo that change</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Try this in emacs: <code>M-x shell</code> to launch a bash shell inside emacs, then <code>echo $PATH$</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>paste output here</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>/usr/local/lib:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin:/usr/local/MacGPG2/bin:/usr/local/smlnj-110.75/bin$</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>can you run <code>lein</code> from there</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>After confirming (I'm pretty sure you can run lein from inside shell), kill the shell and then do <code>M-x eshell</code> (with an 'e'), then check your path again</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>When I run <code>lein</code>, I get a sort of 'into to lein' output.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33617942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>The output in <code>eshell</code> is really long</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618001,
            "is_me_message": false,
            "last_edit_timestamp": 1421176758,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>/usr/local/bin/octave:/usr/local/bin/usr/local/smlnj/bin:</p>\n<p>repeated like a dozen times. Down the rabbit hole!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>can you run <code>lein</code> from eshell</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's what i should have asked</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Ha, good call, it now shows the entire error message!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>what error message</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Downloading Leiningen to /Users/timothyroy/.lein/self-installs/leiningen-2.1.2-standalone.jar now...<br>\n/bin/lein: line 203: wget: command not found<br>\nFailed to download <a href=\"https://leiningen.s3.amazonaws.com/downloads/leiningen-2.1.2-standalone.jar\" target=\"_blank\" title=\"https://leiningen.s3.amazonaws.com/downloads/leiningen-2.1.2-standalone.jar\">https://leiningen.s3.amazonaws.com/downloads/leiningen-2.1.2-standalone.jar</a><br>\nIt's possible your HTTP client's certificate store does not have the<br>\ncorrect certificate authority needed. This is often caused by an<br>\nout-of-date version of libssl. Either upgrade it or set HTTP_CLIENT<br>\nto turn off certificate checks:<br>\n  export HTTP_CLIENT=\"wget --no-check-certificate -O\" # or<br>\n  export HTTP_CLIENT=\"curl --insecure -f -L -o\"<br>\nIt's also possible that you're behind a firewall haven't yet<br>\nset HTTP_PROXY and HTTPS_PROXY.<br>\nException in thread \"main\" java.lang.NoClassDefFoundError: clojure/main<br>\nCaused by: java.lang.ClassNotFoundException: clojure.main<br>\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:202)<br>\n    at java.security.AccessController.doPrivileged(Native Method)<br>\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)<br>\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)<br>\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)<br>\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>This looks attackable.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421176968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>so that error is due to you replacing brew's lein with a lein self-installer script</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Dang it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did not expect eshell to be able to see lein</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I probably can't help further without being there (I am not at hackerschool)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>That's cool, I'm about to sit down with <span class=\"user-mention\" data-user-email=\"vise890@gmail.com\">@Martino Visintin (W2'15)</span>, who has better PATH-fu, etc., than I do</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks a ton for your help - just getting to this stage is a relief, as it's less inscrutable</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>yup</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33618551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421177180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">create-table</span> <span class=\"nv\">ecb-oracle</span> <span class=\"nv\">padding-byte</span> <span class=\"nv\">found-bytes</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Because <code>found-bytes</code> is a sequence within <code>get-byte</code>,  but <code>create-table</code> is expecting extra discrete arguments.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33621045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421179268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>One other question for you guys. What's the easiest way to loop/recur where each loop stashes a byte in a byte array? Can I use byte-array or should I use (vector-of :byte)? I am running into errors either way.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33621298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421179549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ultimately was able to get vector-of :byte working properly, so I went that route.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33622031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421180338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>To close this loop, when I started Emacs from Terminal, instead of from my GUI toolbar, All the Problems Went Away. So it was an OS problem with my path. <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> explained more about how paths work. Now I'll just try to figure out how to make the Terminal-Emacs path equal the Spotlight-Emacs path. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33623671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421182113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> Try copying the below code to your init.el and then restarting. </p>\n<div class=\"codehilite\"><pre>(if (string-equal system-type &quot;darwin&quot;)\n    (progn\n      (menu-bar-mode -1) \n      (toggle-scroll-bar -1) \n      (tool-bar-mode -1)\n      (add-to-list &#39;exec-path &quot;/usr/local/bin&quot;)\n      (setenv &quot;PATH&quot; (concat &quot;/usr/local/bin:&quot; (getenv &quot;PATH&quot;)))))\n</pre></div>\n\n\n<p>Then I think you can just move the Cocoa Emacs binary to your /Applications folder and everything should be good.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33624002,
            "is_me_message": false,
            "last_edit_timestamp": 1421182438,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421182397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> I would not use <code>vector-of</code> it's kind of an experimental feature with few benefits. Using a loop with primitive arrays is fine.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33624244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Passing optional variables to new functions",
            "submessages": [],
            "timestamp": 1421182639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, Chris. That doesn't seem to have affected the behaviour of the Emacs app, but Terminal Emacs still works fine. I'm going to try to write an executable script to easily start GUI Emacs from Terminal. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421183999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> <code>alias emacs='open -a /Applications/Emacs.app $1'</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>perhaps that is why my path works and yours doesn't!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span>  OK well if it matters, I worked on the terminal version for a while but switched when I got my new laptop. I much prefer the GUI version. The terminal one had too many things that were difficult to get working properly (colors, certain key bindings, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>GUI emacs gets keybindings better</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>and fullscreen</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Make sure you rebind caps lock as control :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I should clarify that I'm launching the GUI Emacs from Terminal, and that fixes the path problems. I hate Terminal Emacs too!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't understand, why are you launching it from terminal?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>As I've just learned, programs inherit paths from their environments. So starting a program from Spotlight (aka toolbar, aka Applications folder) means it will have a different path than if you start it from Terminal. Emacs launched from Applications has an eshell that doesn't recognize the leiningen I just installed.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33625938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> I put the alias in my .bashrc, but it doesn't seem to have changed the behaviour of Application Emacs. No worries, at least I can make Emacs work by starting it from Terminal!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33626112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha that's the bit i didn't figure out, i was very confused when eshell saw lein!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33626161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>So you have your repl?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33626179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Yes I do! I'll have to keep starting GUI Emacs from Terminal, but I have my repl. Now to learn all the Clojure...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33626215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421184706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> If you're interested in trying out my flycheck extension for cider, you get the HS support package, in which I feel so guilty about bugs that I get back to you within minutes.  Basically, it give you eclipse-style indication of stylistic complaints from various linters that other people wrote.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421185931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> link?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421185982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/clojure-emacs/squiggly-clojure\" target=\"_blank\" title=\"https://github.com/clojure-emacs/squiggly-clojure\">https://github.com/clojure-emacs/squiggly-clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>are you pnf?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>For my sins.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>It's also suppose to make <code>core.typed</code> easier to use by highlighting type errors (and optionally displaying inferred types), but you don't have to use this part.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a quickstart somewhere that will get me trying this out quickly without reading that whole blog post</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>nevermind i see it now</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>This might be helpful too.  It hasn't been quite PR'd into the <code>clojure-emacs</code> sample config due to someone's struggles with an earlier version of emacs:</p>\n<div class=\"codehilite\"><pre>(require-package &#39;flycheck)\n(require-package &#39;flycheck-clojure)\n(require-package &#39;flycheck-pos-typ)\n(require &#39;flycheck)\n(eval-after-load &#39;flycheck &#39;(flycheck-clojure-setup))\n(add-hook &#39;after-init-hook #&#39;global-flycheck-mode)\n(eval-after-load &#39;flycheck\n  &#39;(setq flycheck-display-errors-function #&#39;flycheck-pos-tip-error-messages))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33627841,
            "is_me_message": false,
            "last_edit_timestamp": 1421186667,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>ooh shiny</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33628149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421186815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> point of interest, the lein self-install script IS actually lein itself.  you continue to use the same executable to run lein.  It's just a crazy gnarly shell script that does lots of stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33631782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Emacs oddness",
            "submessages": [],
            "timestamp": 1421190930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p>Hi all, I have a project that i'd like to deploy. The cljs frontend needs to know the address of the API endpoint which is localhost for development and something else for production. What's a good way to do this? right now i'm just commenting in and out a def.... :S</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421268407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like environ <a href=\"https://github.com/weavejester/environ\" target=\"_blank\" title=\"https://github.com/weavejester/environ\">https://github.com/weavejester/environ</a> might be a good solution for this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421268525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span>  does it work with clojurescript? i thought it was a clojure only thing.. i'll look into it a bit more</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421268854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry I don't know the answer to that. I've only worked with clojure proper.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421268876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p>yea me too. i didn't write the cljs myself, i just wrote the endpoint</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vise890@gmail.com\">@Martino Visintin (W2'15)</span> do you have a dev build and a production build? you could put that endpoint in a <code>myproject.config</code> namespace, and have a different config.cljs for development and production. Notice what we do to define the <code>:test</code> build here: <a href=\"https://github.com/hackerschool/community/blob/master/client/project.clj\" target=\"_blank\" title=\"https://github.com/hackerschool/community/blob/master/client/project.clj\">https://github.com/hackerschool/community/blob/master/client/project.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>you could do the same thing with <code>dev</code> and <code>prod</code> folders</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33680993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269153,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"ss\">:builds</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"ss\">:id</span> <span class=\"s\">&quot;dev&quot;</span>\n   <span class=\"ss\">:source-paths</span> <span class=\"p\">[</span><span class=\"s\">&quot;src&quot;</span> <span class=\"s\">&quot;dev&quot;</span><span class=\"p\">]</span>\n   <span class=\"nv\">...</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"ss\">:id</span> <span class=\"s\">&quot;prod&quot;</span>\n   <span class=\"ss\">:source-paths</span> <span class=\"p\">[</span><span class=\"s\">&quot;src&quot;</span> <span class=\"s\">&quot;prod&quot;</span><span class=\"p\">]</span>\n   <span class=\"nv\">...</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33681017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure if this is the most elegant solution, but it's a solution =)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33681069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vise890@gmail.com\">@Martino Visintin (W2'15)</span> lein-figwheel uses environ.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33681164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p>i'm investigating the environ route now. Thanks all, I will let you know. Lein figwheel is still mainly clojure tho isn't it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33681385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421269593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p>ok. i don't think environ works. I'll just stick it in the project.clj</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33681983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421270400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/044f065fc6b6c5ccafe1f8b30a865aea4db45def?x=x&version=4",
            "client": "website",
            "content": "<p>the 12 factor gods will not be impressed tho</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33682032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "martino@visint.in",
            "sender_full_name": "Martino Visintin (he) (W2'15)",
            "sender_id": 7088,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421270421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Could you do this with a cljs macro? <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> can cljs macros query the filesystem etc.? I guess they can, since they're just clojure right?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33682458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421270903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>good point, sure\u2013\u00a0I bet you could</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33682466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421270921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> yes macros can see anything the Clojure environment can. People actually use this trick to recompile kioo (Elive style) templates from disk when CLJS source files change.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33684701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs environment variables",
            "submessages": [],
            "timestamp": 1421273680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm building a list representing a path traversed through a graph. The returned answer has a bunch of nils included with the correct answer. How should I rewrite this to get rid of the nils included when it returns? <a href=\"https://www.refheap.com/96208\" target=\"_blank\" title=\"https://www.refheap.com/96208\">https://www.refheap.com/96208</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> What is the exact output you're looking for?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>the same structure but without nils?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>e.g. <code>(() (([1 2 5 6])))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>[1 2 5 6]</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> and this is meant to be the shortest path from 1 to 10?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>or just any path?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> the exercise is specifically 1 to 10. i haven't tested the function on other inputs though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33776970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>this seems to be something i run into somewhat often, so i imagine there's a pattern i'm missing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421431817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> I think the problem here is that you're not returning something of the same shape in every case</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>can we chat really quick so that I can explain what I mean in person?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure, is that you in babbage?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>yep!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>come on in</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>k</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33777253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421432079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>so here's something odd, when i use (first (filter identity (..))) i get a different answer on a cyclic graph than when i leave that code out. i don't see where the additional nodes in the answer are coming from</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33780989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "recursion question",
            "submessages": [],
            "timestamp": 1421436996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can someone please take a look at this code briefly?</p>\n<div class=\"codehilite\"><pre>(thread\n  (loop []\n    (let [register-chan (zulip/register conn [&quot;message&quot;])\n          {:keys [:queue_id :max_message_id :last_event_id]} (&lt;!! register-chan)\n          message-chan (zulip/events conn queue_id last_event_id)]\n      (when-let [messages (&lt;!! message-chan)]\n        (process messages)\n        (recur)))))\n</pre></div>\n\n\n<p>I am writing a zulip bot that uses an unofficial api that relies on core.async. I'm attempting to write a loop that continually looks for messages and, when they are encountered, passes them to a processor function. </p>\n<p>For some reason my code stops processing after the first attempt, although it seems like the threads are still alive afterwards. Does anyone have any thoughts on what might be the matter?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33788025,
            "is_me_message": false,
            "last_edit_timestamp": 1421445700,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1421445542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>edit to use <code>~~~</code> instead of backticks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33788062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1421445601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>and make sure you add a newline after the first set of <code>~~~</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33788112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1421445613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Turns out my code was throwing an exception in <code>process</code> and because it was in a thread I wasn't seeing it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33790106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1421447888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>!clj (+ 2 2)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33791884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>!clj (+ 2 2)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33791979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/93d9c2976b743a249f2355919ebf7f7e?d=identicon&version=1",
            "client": "Apache-HttpClient",
            "content": "<p>4</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33791980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "toast-bot@students.hackerschool.com",
            "sender_full_name": "toastbot",
            "sender_id": 7153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>!clj (reduce + [1 2 3 4 5])</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33791986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/93d9c2976b743a249f2355919ebf7f7e?d=identicon&version=1",
            "client": "Apache-HttpClient",
            "content": "<p>15</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33791987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "toast-bot@students.hackerschool.com",
            "sender_full_name": "toastbot",
            "sender_id": 7153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>!clj (map + 1 2 3 4)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792016,
            "is_me_message": false,
            "last_edit_timestamp": 1421450532,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>need a space between !clj and the command. i think bad commands still make it crash also.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, gotcha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>!clj (* 2 3 4)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>!clj (reduce + [1 2 3 4 5])</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/93d9c2976b743a249f2355919ebf7f7e?d=identicon&version=1",
            "client": "Apache-HttpClient",
            "content": "<p>15</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "toast-bot@students.hackerschool.com",
            "sender_full_name": "toastbot",
            "sender_id": 7153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>!clj (clojure.java.shell/sh \"uname\" \"-a\")</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/93d9c2976b743a249f2355919ebf7f7e?d=identicon&version=1",
            "client": "Apache-HttpClient",
            "content": "<p>caught exception: java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"&lt;&lt;ALL FILES&gt;&gt;\" \"execute\")</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "toast-bot@students.hackerschool.com",
            "sender_full_name": "toastbot",
            "sender_id": 7153,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>NICE!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>There we go</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>lol nice</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33792104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421450635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>!(file-seq (<a href=\"http://clojure.java.io/file\" target=\"_blank\" title=\"http://clojure.java.io/file\">clojure.java.io/file</a> \".\"))</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33892216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test",
            "submessages": [],
            "timestamp": 1421684082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>is there anyone at 455 who can take a look at why phantomjs is failing to find any variables when doing CLJS unit testing? this is preventing me from continuing with the CLJS tutorial</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33947444,
            "is_me_message": false,
            "last_edit_timestamp": 1421786640,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phantomjs",
            "submessages": [],
            "timestamp": 1421786629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Which is also a nice overview of what Om is:</p>\n<p><a href=\"http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/\" target=\"_blank\" title=\"http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/\">http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Brief article on Om",
            "submessages": [],
            "timestamp": 1421787293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vise890@gmail.com\">@Martino Visintin (W2'15)</span> and I need some help with getting a macro to work:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">generate-coursera-endpoint-fns</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">base-url</span> <span class=\"s\">&quot;https://api.coursera.org/api/sessions/v1/&quot;</span>\n        <span class=\"nv\">endpoints</span> <span class=\"p\">{</span><span class=\"ss\">:enrollments</span> <span class=\"s\">&quot;me/enrollments&quot;</span>\n                   <span class=\"c1\">;; GET https://api.coursera.org/api/sessions/v1/974416/sections</span>\n                   <span class=\"ss\">:sections</span> <span class=\"s\">&quot;:session-id/sections&quot;</span>\n                   <span class=\"c1\">;; GET https://api.coursera.org/api/sessions/v1/974416/sections/1/items</span>\n                   <span class=\"ss\">:items</span> <span class=\"s\">&quot;:session-id/sections/:section-id/items&quot;</span><span class=\"p\">}]</span>\n    <span class=\"p\">(</span><span class=\"nb\">map eval </span><span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[[</span><span class=\"nv\">endpoint</span> <span class=\"nv\">url</span><span class=\"p\">]</span> <span class=\"nv\">endpoints</span><span class=\"p\">]</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">url-placeholders</span> <span class=\"p\">(</span><span class=\"nb\">re-seq </span><span class=\"o\">#</span><span class=\"s\">&quot;:[^\\/]+&quot;</span> <span class=\"nv\">url</span><span class=\"p\">)</span>\n            <span class=\"nv\">url-params</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">url-placeholders</span>\n                            <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">.replaceAll</span> <span class=\"nv\">%</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">))</span>\n                            <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">symbol</span><span class=\"p\">))]</span>\n\n        <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">symbol </span><span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;coursera-&quot;</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">name </span><span class=\"nv\">endpoint</span><span class=\"p\">)</span> <span class=\"s\">&quot;-url&quot;</span><span class=\"p\">))</span>\n           <span class=\"p\">[</span><span class=\"o\">~@</span><span class=\"nv\">url-params</span><span class=\"p\">]</span>\n\n           <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">parametrized-endpoint-url#</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">.replaceAll</span> <span class=\"o\">~</span><span class=\"nv\">url</span> <span class=\"nv\">%1</span> <span class=\"nv\">%2</span><span class=\"p\">)</span> <span class=\"o\">~@</span><span class=\"nv\">url-placeholders</span> <span class=\"o\">~@</span><span class=\"nv\">url-params</span><span class=\"p\">)]</span>\n             <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"nv\">base-url</span> <span class=\"nv\">parametrized-endpoint-url</span><span class=\"p\">))))))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948087,
            "is_me_message": false,
            "last_edit_timestamp": 1421787431,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421787345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>what it basically does, it gets a map of endpoint names and urls with placeholders, and creates a function which accepts all placeholders as parameters and, for now, it just returns the built url</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421787548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>why are you using a macro instead of a function?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421787668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>because we may have hundreds of endpoints</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421787721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>and, in my newbie opinion, would be cooler to use a macro to write functions from a map</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421787755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>the macro will generate more complex functions, we just wanted to start by just outputting the built url</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33948848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421788083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>the destructuring that you're trying to do with the <code>for</code> statement doesn't look valid to me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33949172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421788430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a very strong reason to minimize use of macros: Functions are values, you can pass them around and make higher order functions. Macros are not values, so you lose all the abstraction power of higher order fns</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33951869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421791555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>they're also harder to debug and give inferior stack traces</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33952225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421791971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>Alright, would it be better if I use <code>letfn</code> and  <code>intern</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>or the best thing would be to write a function for each element?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>what if you have a function returns a set of maps corresponding to each class a person is enrolled in? and then you could have additional functions that act on those maps. i don't think each class needs its own function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>its not a function per class, but a function per action that you can do on their API. Such as get a list of enrolled classes, get a list of videos from a specific class, etc</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953392,
            "is_me_message": false,
            "last_edit_timestamp": 1421793500,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think you can just <code>defn</code> each of those functions on their own. each one would take a course map and do whatever</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, but the thing is that there are lots of endpoints that could be mapped, and all of those functions would be very similar to eachother, so I thought making a macro would be a neat solution</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'll come over, where are you?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>probably you are right, macros are an overkill. I was just excited to use them because I just learnt about them :P</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>turing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33953518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421793635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>Ok, we got this macro to work. These <code>~</code> are a crazy thing to deal with. Gotta read <a href=\"https://dl.dropboxusercontent.com/u/102045887/mastering-clojure-macros_p1_0.pdf\" target=\"_blank\" title=\"https://dl.dropboxusercontent.com/u/102045887/mastering-clojure-macros_p1_0.pdf\">this book</a> <span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> shared </p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">generate-coursera-endpoint-fns</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">base-url</span> <span class=\"s\">&quot;https://api.coursera.org/api/sessions/v1/&quot;</span>\n        <span class=\"nv\">endpoints</span> <span class=\"p\">{</span><span class=\"ss\">:enrollments</span> <span class=\"s\">&quot;me/enrollments&quot;</span>\n                   <span class=\"c1\">;; GET https://api.coursera.org/api/sessions/v1/974416/sections</span>\n                   <span class=\"ss\">:sections</span> <span class=\"s\">&quot;:session-id/sections&quot;</span>\n                   <span class=\"c1\">;; GET https://api.coursera.org/api/sessions/v1/974416/sections/1/items</span>\n                   <span class=\"ss\">:items</span> <span class=\"s\">&quot;:session-id/sections/:section-id/items&quot;</span><span class=\"p\">}]</span>\n    <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"o\">`</span><span class=\"nv\">do</span>\n          <span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[[</span><span class=\"nv\">endpoint</span> <span class=\"nv\">url</span><span class=\"p\">]</span> <span class=\"nv\">endpoints</span><span class=\"p\">]</span>\n            <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">url-placeholders</span> <span class=\"p\">(</span><span class=\"nb\">re-seq </span><span class=\"o\">#</span><span class=\"s\">&quot;:[^\\/]+&quot;</span> <span class=\"nv\">url</span><span class=\"p\">)</span>\n                  <span class=\"nv\">url-params</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">url-placeholders</span>\n                                  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">.replaceAll</span> <span class=\"nv\">%</span> <span class=\"s\">&quot;:&quot;</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">))</span>\n                                  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">symbol</span><span class=\"p\">))</span>\n                  <span class=\"nv\">fn-name</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;coursera-&quot;</span> <span class=\"p\">(</span><span class=\"nb\">name </span><span class=\"nv\">endpoint</span><span class=\"p\">)</span> <span class=\"s\">&quot;-url&quot;</span><span class=\"p\">)]</span>\n\n              <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">symbol </span><span class=\"nv\">fn-name</span><span class=\"p\">)</span>\n                 <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"nv\">fn-name</span> <span class=\"s\">&quot; returns the endpoint for &quot;</span> <span class=\"nv\">endpoint</span> <span class=\"s\">&quot; given: &quot;</span> <span class=\"p\">(</span><span class=\"nf\">string/join</span> <span class=\"s\">&quot; and &quot;</span> <span class=\"nv\">url-params</span><span class=\"p\">))</span>\n                 <span class=\"p\">[</span><span class=\"o\">~@</span><span class=\"nv\">url-params</span><span class=\"p\">]</span>\n                 <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">substitutions#</span> <span class=\"p\">(</span><span class=\"nb\">map vector </span><span class=\"p\">[</span><span class=\"o\">~@</span><span class=\"nv\">url-placeholders</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">~@</span><span class=\"nv\">url-params</span><span class=\"p\">])</span>\n                       <span class=\"nv\">parametrized-endpoint-url#</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">url#</span> <span class=\"p\">[</span><span class=\"nv\">placeholder#</span> <span class=\"nv\">value#</span><span class=\"p\">]]</span>\n                                                                <span class=\"p\">(</span><span class=\"nf\">.replaceAll</span> <span class=\"nv\">url#</span> <span class=\"nv\">placeholder#</span> <span class=\"nv\">value#</span><span class=\"p\">))</span>\n                                                          <span class=\"o\">~</span><span class=\"nv\">url</span>\n                                                          <span class=\"nv\">substitutions#</span><span class=\"p\">)]</span>\n                   <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"o\">~</span><span class=\"nv\">base-url</span> <span class=\"nv\">parametrized-endpoint-url#</span><span class=\"p\">))))))))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">coursera-items-url</span> <span class=\"s\">&quot;12345&quot;</span> <span class=\"s\">&quot;67890&quot;</span><span class=\"p\">)</span> \n<span class=\"c1\">; =&gt; &quot;https://api.coursera.org/api/sessions/v1/12345/sections/67890/items&quot;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33960445,
            "is_me_message": false,
            "last_edit_timestamp": 1421805269,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421805162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Nice job figuring this out! Thanks to you and Chris for the book. If you could explain to me your macro at some point that would be great.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33960528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421805336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> - To be honest I think I won't be able to fully explain it, because <span class=\"user-mention\" data-user-email=\"vise890@gmail.com\">@Martino Visintin (W2'15)</span> did some clojure magic. But I'd be really excited about rubberducking this macro and trying to figure out exactly what it does.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33960634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421805542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>That'd be great, I don't really get macros.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33960940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421806025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"davoclavo@gmail.com\">@David Gomez Urquiza (W2'15)</span> what was wrong with it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33961335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with macros",
            "submessages": [],
            "timestamp": 1421806762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would a kind sole please take pity on me and hand-hold how I can set up CLJS to work with emacs? I'd like both REPL and autocomplete (company mode) integration. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34004414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421878783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> my experience with CLJS tooling and Emacs has not been positive. It's definitely doable but doesn't seem worth the effort to me. I just use Emacs w/ clojure-mode as text editor - REPLs I just run at the command line. At most I use inferior-lisp nothing more.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34005095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421879577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Things may have improved since I last tried, but I'm happy with the simplest setup possible. I'm looking forward to Cursive improving in this area and then I'll probably switch to that.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34005120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421879614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> I use lein figwheel for cljs and am pretty happy. There is a sample project, and a blog post, on the lein fighweel site</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34019042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421903585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It isn't as good as JVM clojure but it gets me pretty far. I also worked with a traditional cljs browser repl before figwheel was a thing, it was alright but not the same as jvm clojure. I would try both and see which works best for your project</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34019128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421903755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I used these posts to get started with a clojurescript repl (not figwheel): <a href=\"http://will-sommers.github.io/drafts/why-om-one.html\" target=\"_blank\" title=\"http://will-sommers.github.io/drafts/why-om-one.html\">http://will-sommers.github.io/drafts/why-om-one.html</a> <a href=\"http://will-sommers.github.io/drafts/why-om-two.html\" target=\"_blank\" title=\"http://will-sommers.github.io/drafts/why-om-two.html\">http://will-sommers.github.io/drafts/why-om-two.html</a> <a href=\"http://will-sommers.github.io/drafts/why-om-three.html\" target=\"_blank\" title=\"http://will-sommers.github.io/drafts/why-om-three.html\">http://will-sommers.github.io/drafts/why-om-three.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34019235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421903897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>will sommers is a hs alum you can probably ping him here for support</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34019242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1421903914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Has anyone else done, or (even better) is anyone currently doing, \"Clojure for the Brave and True\"? I'm going through it now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34044695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Brave Clojure",
            "submessages": [],
            "timestamp": 1421950888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.row+disabled@protonmail.ch\">@Timothy Roy (W2 '14)</span> haven't done it but read bits of it, awesome resource</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34044786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Brave Clojure",
            "submessages": [],
            "timestamp": 1421951008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Good to hear! In the next couple of weeks I hope to start \"Modern ClojureScript\" as well, which ports your tutorial to Emacs. LEARN ALL THE CLOJURES.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34046540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Brave Clojure",
            "submessages": [],
            "timestamp": 1421953246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>I'm having trouble understanding how to use <code>let</code> within a <code>binding</code></p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"o\">^</span><span class=\"ss\">:dynamic</span> <span class=\"nv\">*coursera-headers*</span> <span class=\"p\">{</span>\n  <span class=\"s\">&quot;User-Agent&quot;</span> <span class=\"s\">&quot;Coursera/1277 (iPad; iOS 7.0.4; Scale/1.00)&quot;</span>\n  <span class=\"s\">&quot;Authorization&quot;</span> <span class=\"nv\">nil</span><span class=\"p\">})</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">with-coursera-credentials</span>\n  <span class=\"s\">&quot;Set the credentials to be used for all contained Coursera requests.&quot;</span>\n  <span class=\"p\">[</span><span class=\"nv\">username</span> <span class=\"nv\">password</span> <span class=\"o\">&amp;</span> <span class=\"nv\">body</span><span class=\"p\">]</span>\n  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">binding </span><span class=\"p\">[</span><span class=\"nv\">*coursera-headers*</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">*coursera-headers*</span> <span class=\"s\">&quot;Authorization&quot;</span> <span class=\"p\">(</span><span class=\"nf\">auth-token</span> <span class=\"nv\">username</span> <span class=\"nv\">password</span><span class=\"p\">))]</span>\n     <span class=\"p\">(</span><span class=\"nf\">do</span>\n       <span class=\"o\">~@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">with-coursera-credentials</span> <span class=\"s\">&quot;martinolantino@suremail.info&quot;</span> <span class=\"s\">&quot;password&quot;</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">enrollments</span> <span class=\"p\">(</span><span class=\"ss\">:enrollments</span> <span class=\"p\">(</span><span class=\"nf\">coursera-enrollments</span><span class=\"p\">))</span>\n        <span class=\"nv\">enrolled-sessions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">enrollment-&gt;session</span> <span class=\"nv\">enrollments</span><span class=\"p\">)</span>\n        <span class=\"nv\">enrolled-sections</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">session-&gt;sections</span> <span class=\"nv\">enrolled-sessions</span><span class=\"p\">)]</span>\n    <span class=\"nv\">enrolled-sections</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>On the last section, the first let alias <code>enrollments</code> has the proper <code>*coursera-headers*</code> (\"Authorization\" \"a-valid-auth-token\") but the following aliases: <code>enrolled-sessions</code> and <code>enrolled-sections</code> have the unbound <code>*coursera-headers*</code>(\"Authorization\" nil)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34049050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421956085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>can you paste the <code>enrollment-&gt;session</code> and <code>session-&gt;sections</code> functions?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34049873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421957043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>also, using a global var is very common lisp-y but not very clojure-y, at least in my experience. I assume that it is <code>coursera-enrollments</code> that needs that info, right? maybe you could try passing that info in as another parameter instead of reading it from a global var</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34050005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421957186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>I'm cleaning the code and will post it in a gist asap.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34050330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421957601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> <a href=\"https://gist.github.com/davoclavo/70a01df2159d72f412bd\" target=\"_blank\" title=\"https://gist.github.com/davoclavo/70a01df2159d72f412bd\">https://gist.github.com/davoclavo/70a01df2159d72f412bd</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34051442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421959048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>(Sorry if is a bit messy)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34051515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421959129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>So I have pinpointed the problem a little bit more.</p>\n<p>If I call a function by itself, it works:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">with-coursera-credentials</span> <span class=\"s\">&quot;martinolantino@suremail.info&quot;</span> <span class=\"s\">&quot;password&quot;</span>\n  <span class=\"p\">(</span><span class=\"nf\">coursera-sections</span> <span class=\"mi\">278</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>If I call it within a map the dynamic bindings are not working:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">with-coursera-credentials</span> <span class=\"s\">&quot;martinolantino@suremail.info&quot;</span> <span class=\"s\">&quot;password&quot;</span>\n  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">coursera-sections</span> <span class=\"p\">[</span><span class=\"mi\">278</span><span class=\"p\">]))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34054506,
            "is_me_message": false,
            "last_edit_timestamp": 1421962442,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421962400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I'm working through a function in \"Clojure for the Brave and True,\" but finding it a little impenetrable, though it's very well explained. Is any kind soul willing to go through it with me?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34055502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function pairing",
            "submessages": [],
            "timestamp": 1421963465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm more than glad to explain to you concepts that you're having trouble with.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34055609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function pairing",
            "submessages": [],
            "timestamp": 1421963633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p>Here is a brief script that replicates the weird binding behavior</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"o\">^</span><span class=\"ss\">:dynamic</span> <span class=\"nv\">*world*</span> <span class=\"s\">&quot;mars&quot;</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">world-is-earth</span>\n  <span class=\"p\">[</span><span class=\"nv\">body</span><span class=\"p\">]</span>\n  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">binding </span><span class=\"p\">[</span><span class=\"nv\">*world*</span> <span class=\"s\">&quot;earth&quot;</span><span class=\"p\">]</span>\n     <span class=\"p\">(</span><span class=\"nf\">do</span>\n       <span class=\"o\">~@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">hello</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;Hello &quot;</span> <span class=\"nv\">*world*</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Prints &quot;Hello mars&quot;</span>\n<span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Prints &quot;Hello earth&quot;</span>\n<span class=\"p\">(</span><span class=\"nf\">world-is-earth</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">;; Prints (&quot;Hello mars&quot;)</span>\n<span class=\"c1\">;; Shouldnt it print (&quot;Hello earth&quot;) ??</span>\n<span class=\"p\">(</span><span class=\"nf\">world-is-earth</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)))</span> <span class=\"p\">[</span><span class=\"s\">&quot;_&quot;</span><span class=\"p\">])))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34055666,
            "is_me_message": false,
            "last_edit_timestamp": 1421963709,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421963667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Fantastic, when works for you?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34055675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function pairing",
            "submessages": [],
            "timestamp": 1421963680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Unfortunately, I can't claim to understand exactly how binding works in Clojure, but  your problem was perhaps investigated here :<br>\n<a href=\"http://cemerick.com/2009/11/03/be-mindful-of-clojures-binding/\" target=\"_blank\" title=\"http://cemerick.com/2009/11/03/be-mindful-of-clojures-binding/\">http://cemerick.com/2009/11/03/be-mindful-of-clojures-binding/</a><br>\nUnder the heading \"Lazy seqs often escape the scope of binding forms...\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34056145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421964205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Looks like Clojure does not like mutating global vars :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34056241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421964283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>assuming you're here tomorrow, pretty much whenever should be fine I imagine, depending upon what the activities scheduled are</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34056509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function pairing",
            "submessages": [],
            "timestamp": 1421964703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks! I'll try to hit you up at a slow time.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34056647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function pairing",
            "submessages": [],
            "timestamp": 1421964866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span>  Thanks! I will check that out</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34057212,
            "is_me_message": false,
            "last_edit_timestamp": 1421965539,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1421965517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"davoclavo@gmail.com\">@David Gomez Urquiza (W2'15)</span> sorry I left you hanging yesterday :( did you figure it out? I think the problem is related to map being lazy, have you tried forcing the sequence to realize and then using it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34089822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1422028338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tn.pablo@gmail.com\">@Pablo Torres (W'14)</span> It works now, thanks! also thanks <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> for the link, cleared things out.<br>\nBasically just changed <code>do</code> to <code>doall</code> in the macro.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"o\">^</span><span class=\"ss\">:dynamic</span> <span class=\"nv\">*world*</span> <span class=\"s\">&quot;mars&quot;</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">world-is-earth</span>\n  <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">body</span><span class=\"p\">]</span>\n  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">binding </span><span class=\"p\">[</span><span class=\"nv\">*world*</span> <span class=\"s\">&quot;earth&quot;</span><span class=\"p\">]</span>\n     <span class=\"p\">(</span><span class=\"nf\">doall</span>\n       <span class=\"o\">~@</span><span class=\"nv\">body</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">hello</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;Hello &quot;</span> <span class=\"nv\">*world*</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Prints &quot;Hello mars&quot;</span>\n<span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Prints &quot;Hello earth&quot;</span>\n<span class=\"p\">(</span><span class=\"nf\">world-is-earth</span> <span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Prints (&quot;Hello earth&quot;)</span>\n<span class=\"p\">(</span><span class=\"nf\">world-is-earth</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)))</span> <span class=\"p\">[</span><span class=\"s\">&quot;_&quot;</span><span class=\"p\">]))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34092087,
            "is_me_message": false,
            "last_edit_timestamp": 1422031443,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1422031425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>aaah interesting, didn't know about <code>doall</code>. cool!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34092190,
            "is_me_message": false,
            "last_edit_timestamp": 1422031555,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1422031547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Glad you found your answer !</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34092964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1422032465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another note is that usually you want to do side-effecting calls with <code>doseq</code> rather than <code>map</code>. <code>doseq</code> runs a body of code repeatedly over a list (or other sequence), with the side effects occurring immediately; <code>map</code> produces a lazy list that has side effects the first time it gets processed.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34093116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "help with binding + let",
            "submessages": [],
            "timestamp": 1422032717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So it seems that there are many ways to read a file, from the basic slurp to clojure.java.io.Reader, RandomAccessFile and nio; in my case I want to read ints, floats, booleans instead of byte-by-byte, should I go all the way with nio or am I missing something?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34275361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422393409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It will probably be easiest for you to use <code>slurp</code>. You'll just need to cast from string to int/float/whatever. I would imagine this to be the case for any method you choose to read in.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34275575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422393655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I forgot to mention that I am trying to parse a binary file by following an specification (<a href=\"http://www.kreativekorp.com/swdownload/wildfire/HC%20FILE%20FORMAT%202010.TXT\" target=\"_blank\" title=\"http://www.kreativekorp.com/swdownload/wildfire/HC%20FILE%20FORMAT%202010.TXT\">http://www.kreativekorp.com/swdownload/wildfire/HC%20FILE%20FORMAT%202010.TXT</a>), I don't know if reading the content as a string first will get to be problematic</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34275753,
            "is_me_message": false,
            "last_edit_timestamp": 1422394499,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422393907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think something like this should work for you</p>\n<div class=\"codehilite\"><pre>(defn slurp-bytes [path]\n  &quot;Reads file at path and returns Java byte array.&quot;\n  (let [f (java.io.File. path)\n        ary (byte-array (.length f))\n        is (java.io.FileInputStream. f)]\n    (.read is ary)\n    (.close is)\n    ary))\n\n(String. (slurp-bytes &lt;file&gt;))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34281289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422401591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"giorgio.m.leveroni@gmail.com\">@Giorgio Leveroni (S'14)</span> I'm not sure how useful it is out of the box, but if you want to dive deeper into this problem you could take a look at <a href=\"https://github.com/ztellman/gloss\" target=\"_blank\" title=\"https://github.com/ztellman/gloss\">https://github.com/ztellman/gloss</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34289653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422416876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"giorgio.m.leveroni@gmail.com\">@Giorgio Leveroni (S'14)</span> +1 for gloss in parsing binary files with a spec.  But it's got a bit of a learning curve for sure.  I have some projects where I was originally going to use gloss but it turned out to be too much of a learning curve for the simplicity of what I was doing.  Instead I just ended up using nio ByteBuffers <a href=\"https://github.com/RadicalZephyr/sensitivity-gui/blob/master/src/scanner/io.clj\" target=\"_blank\" title=\"https://github.com/RadicalZephyr/sensitivity-gui/blob/master/src/scanner/io.clj\">https://github.com/RadicalZephyr/sensitivity-gui/blob/master/src/scanner/io.clj</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34314413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422465701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I checked buffy and gloss before :), but they turned out to be inflexible; buffy focuses on writing specs instead of mapping to previous ones and in gloss I want the possibility to define empty regions in a spec. In the end I decided to write my own</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34323367,
            "is_me_message": false,
            "last_edit_timestamp": 1422476788,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "read file as bytes",
            "submessages": [],
            "timestamp": 1422476761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d14c2ca7104d9623bd7a7edd821339db?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, I am considering writing a file sync application in Clojure, and I'm really excited about the idea. There are two ways that I have considered approaching the problem. First, I could use a client/server architecture, where the server manages file versions and sits between all clients and pushes new versions (probably using hashes to track file versions). Second, I could write a BitTorrent client and do a p2p architecture. Any thoughts on which approach might be more interesting/provide more opportunities for learning?</p>\n<p>I have a pretty solid understanding of Scheme, but am new to Clojure, would someone want to pair with me early next week and maybe just go through the early stages of the project with me?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34455135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jdp5087@gmail.com",
            "sender_full_name": "Jon Poler (he) (W2'15)",
            "sender_id": 7078,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "File sync application",
            "submessages": [],
            "timestamp": 1422722183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "Android",
            "content": "<p>BitTorrent clients are a popular problem at HS :) You'd benefit from the wisdom of Hacker Schoolers who tried it before.</p>\n<p>If you did the first option, it might be interesting to try implementing the rsync algorithm. Unlike BitTorrent, rsync does a good job handling the case where you want to re-sync a file that's had bytes inserted or removed from the middle. In BitTorrent, every chunk of the file after that insertion point has to be re-downloaded. In rsync, the use of a \"rolling hash\" means it still detects the shared chunks at the end of the file, and I've always thought that was a neat algorithm.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34457027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "File sync application",
            "submessages": [],
            "timestamp": 1422726279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I've made a basic app. <code>lein uberjar</code> compiles, but then gives me this error: <code>Warning: The Main-Class specified does not exist within the jar....  A gen-class directive may be missing in the namespace which contains the main method.</code> Unsurprisingly, the jar file then won't run. There is a gen-class directive in that namespace, so I'm puzzled. Any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34462568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein uberjar",
            "submessages": [],
            "timestamp": 1422734181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span>  I'll come take a look</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34462893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein uberjar",
            "submessages": [],
            "timestamp": 1422734592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34463138,
            "is_me_message": false,
            "last_edit_timestamp": 1422735121,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein uberjar",
            "submessages": [],
            "timestamp": 1422735077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks to Chris, the problem is solved. Because I'm using Ring (apparently), I had to run <code>lein ring uberjar</code>, and it then compiled properly. Now to read up on the Leiningen and Ring documents!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34463368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein uberjar",
            "submessages": [],
            "timestamp": 1422735582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d14c2ca7104d9623bd7a7edd821339db?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>Im wondering if a p2p rsync might be possible</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34467698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jdp5087@gmail.com",
            "sender_full_name": "Jon Poler (he) (W2'15)",
            "sender_id": 7078,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "File sync application",
            "submessages": [],
            "timestamp": 1422745191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Categorised directory of libraries and tools:<a href=\"http://www.clojure-toolbox.com/\" target=\"_blank\" title=\"http://www.clojure-toolbox.com/\">http://www.clojure-toolbox.com/</a><br>\nSearchable quick documentation: <a href=\"http://conj.io/\" target=\"_blank\" title=\"http://conj.io/\">http://conj.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34634492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Couple resources",
            "submessages": [],
            "timestamp": 1423071594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Earlier, <span class=\"user-mention\" data-user-email=\"lisa.vangelder@gmail.com\">@Lisa van Gelder (W2'15)</span> and I were trying to figure out how to use unit tests stored in a function's metadata. The docs say that the following function, and others on this template, will throw an exception if you run <code>(test my-function)</code>.</p>\n<p>But I just get :no-test. Any ideas?</p>\n<p><code>(defn my-function\n  \"this function adds two numbers\"\n  {:test #(do\n            (assert (= (my-function 2 3) 5))\n            (assert (= (my-function 99 4) 8)))}\n  ([x y] (+ x y)))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34874693,
            "is_me_message": false,
            "last_edit_timestamp": 1423524398,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Var Metadata Test",
            "submessages": [],
            "timestamp": 1423524343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looking at the docs, you might need to dereference my-function by calling <code>(test #'my-function)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34874875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Var Metadata Test",
            "submessages": [],
            "timestamp": 1423524575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>That was it! Right in front of me. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34875334,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Var Metadata Test",
            "submessages": [],
            "timestamp": 1423525160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"kd\">defprotocol </span><span class=\"nv\">P</span>\n        <span class=\"p\">(</span><span class=\"nf\">p</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]))</span>\n<span class=\"nv\">P</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">myfn</span> <span class=\"nv\">inc</span><span class=\"p\">]</span>\n        <span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Foo</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">]</span>\n          <span class=\"nv\">P</span>\n          <span class=\"p\">(</span><span class=\"nf\">p</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"nv\">y</span><span class=\"p\">))))</span>\n<span class=\"nv\">CompilerException</span> <span class=\"nv\">java.lang.RuntimeException</span><span class=\"err\">:</span> <span class=\"nv\">Unable</span> <span class=\"nv\">to</span> <span class=\"nb\">resolve </span><span class=\"nv\">symbol</span><span class=\"err\">:</span> <span class=\"nv\">myfn</span> <span class=\"nv\">in</span> <span class=\"nv\">this</span> <span class=\"nv\">context</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34964983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423677746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone have an idea on how to accomplish this? (The defrecord docs specify that the method bodies are not closures)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34964995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423677769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>The high level problem, is I have a library-defined record<code>Foo</code>, which depends on an application-defined fn <code>myfn</code>, i was hoping to pass in the application defined function to some sort of factory</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34965028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423677834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've seen people use bindings for this sort of thing but i am generally not a fan of those as they seem to make repl usage really awkward but maybe i have just not seen a good example</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34965088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423677876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>similar issues with dynamic vars</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34965114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423677925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a solution - I don't define the method bodies on the defrecord, but i make a multimethod instead, because multimethod bodies can be closures</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Foo</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Bar</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmulti </span><span class=\"nv\">render-response</span> <span class=\"nv\">class</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">myfn</span> <span class=\"nv\">inc</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"kd\">defmethod </span><span class=\"nv\">render-response</span> <span class=\"nv\">Foo</span> <span class=\"p\">[</span><span class=\"nv\">val</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:ok</span> <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">val</span><span class=\"p\">))})</span>\n  <span class=\"p\">(</span><span class=\"kd\">defmethod </span><span class=\"nv\">render-response</span> <span class=\"nv\">Bar</span> <span class=\"p\">[</span><span class=\"nv\">val</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:err</span> <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">val</span><span class=\"p\">))}))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">comment</span>\n  <span class=\"p\">(</span><span class=\"nf\">render-response</span> <span class=\"p\">(</span><span class=\"nf\">Foo.</span> <span class=\"mi\">10</span><span class=\"p\">))</span>   <span class=\"c1\">;; =&gt; {:ok 11}</span>\n  <span class=\"p\">(</span><span class=\"nf\">render-response</span> <span class=\"p\">(</span><span class=\"nf\">Bar.</span> <span class=\"mi\">10</span><span class=\"p\">))</span>   <span class=\"c1\">;; =&gt; {:err 11}</span>\n  <span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34966098,
            "is_me_message": false,
            "last_edit_timestamp": 1423679353,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423679307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> any reason you're not just using Stuart Sierra component for this pattern instead?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34966609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423679923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seemed like overkill. I think what I actually need is just a protocol. So I can declare my dependencies in the library, and supply the implementation in the app</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34968208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423681814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>This solves my DI I believe but it feels like an abuse of protocols</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defprotocol </span><span class=\"nv\">LibDependencies</span>\n  <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Foo</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">Bar</span> <span class=\"p\">[</span><span class=\"nv\">y</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmulti </span><span class=\"nv\">render-response</span> <span class=\"nv\">class</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmethod </span><span class=\"nv\">render-response</span> <span class=\"nv\">Foo</span> <span class=\"p\">[</span><span class=\"nv\">val</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:ok</span> <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">val</span><span class=\"p\">))})</span>\n<span class=\"p\">(</span><span class=\"kd\">defmethod </span><span class=\"nv\">render-response</span> <span class=\"nv\">Bar</span> <span class=\"p\">[</span><span class=\"nv\">val</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:err</span> <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">val</span><span class=\"p\">))})</span>\n\n<span class=\"p\">(</span><span class=\"nf\">extend-type</span> <span class=\"nv\">Object</span>\n  <span class=\"nv\">LibDependencies</span>\n  <span class=\"p\">(</span><span class=\"nf\">myfn</span> <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">x</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">comment</span>\n  <span class=\"p\">(</span><span class=\"nf\">render-response</span> <span class=\"p\">(</span><span class=\"nf\">Foo.</span> <span class=\"mi\">10</span><span class=\"p\">))</span>   <span class=\"c1\">;; =&gt; {:ok 11}</span>\n  <span class=\"p\">(</span><span class=\"nf\">render-response</span> <span class=\"p\">(</span><span class=\"nf\">Bar.</span> <span class=\"mi\">10</span><span class=\"p\">))</span>   <span class=\"c1\">;; =&gt; {:err 11}</span>\n  <span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34968418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423682051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> component is a single source file with &lt;200 lines of code, but OK.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 34973455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423687655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> Can you take a look at this, what do you think? <a href=\"http://stackoverflow.com/questions/28466496/dependency-injection-between-app-and-library-in-clojure\" target=\"_blank\" title=\"http://stackoverflow.com/questions/28466496/dependency-injection-between-app-and-library-in-clojure\">http://stackoverflow.com/questions/28466496/dependency-injection-between-app-and-library-in-clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35024701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> Is the fact that you're extending <code>Object</code> significant? Does the library consumer only ever need to provide one implementation for <code>some-injected-capability</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Correct, it is not significant, its an abuse of protocols</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>only one implementaiton</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>It seems like you could just require <code>render-response</code> to take an additional argument, a function, which represents that capability</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>If people don't like having to pass it in all the time they can just curry or something</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423768905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks, i dont know why i couldn't see that! that's probably the answer i;m looking for</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423769002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Awesome, glad i could be of help =) If you come up with something else as well, I'd love to know</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35025534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependency injection and defrecord",
            "submessages": [],
            "timestamp": 1423769032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a socket that I perform actions on within a loop/recur. Prior to adding core.async, the program would crash gracefully when the socket was unexpectedly killed. Now that I've added core.async, the concurrent routines that don't touch the socket continue to run and actually lead to the program continuing to spawn new threads and eventually run out of memory. </p>\n<p>Code snippet here: <a href=\"https://www.refheap.com/97173\" target=\"_blank\" title=\"https://www.refheap.com/97173\">https://www.refheap.com/97173</a> . This isn't my actual code--I've cleaned it up to emphasize the problem I'm experiencing. </p>\n<p>I didn't see anything in the Java docs on how to detect a disconnected socket, although I imagine it's possible. Any suggestions on how to fix this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423778689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not quite sure how your linked code relates to your socket problems.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423778845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you wondering how to tell if a core.async channel is closed?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423778862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing that looks suspicious: you're loop-recuring on something that spawns a go routine, so you're going to spin up go routines in a hot loop.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423778917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ordinarily you'd want to have a loop that blocks before it recurs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423778958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe part of my ignorance here is not knowing how go blocks know when to die</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>They die when they return. (If I recall correctly.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034619,
            "is_me_message": false,
            "last_edit_timestamp": 1423779023,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>but they return immediately</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm. Can I take a look at your actual code?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure although I'm not sure how intelligible this is going to be. The code snippet above was from the bottom of the first link.</p>\n<p><a href=\"https://www.refheap.com/9d6a3f7edfb7f98a346a6ef81\" target=\"_blank\" title=\"https://www.refheap.com/9d6a3f7edfb7f98a346a6ef81\">https://www.refheap.com/9d6a3f7edfb7f98a346a6ef81</a><br>\n<a href=\"https://www.refheap.com/e64a928d27a13358ac7cd608e\" target=\"_blank\" title=\"https://www.refheap.com/e64a928d27a13358ac7cd608e\">https://www.refheap.com/e64a928d27a13358ac7cd608e</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35034860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, it's still suspicious that you're calling <code>get-messages</code> in a loop like that. I'm not sure yet, but it's possible you're overrunning the other side of the <code>server-chan</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35035478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423779923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> looks like you were correct. the problem was resolved by removing the loop in <code>connect-loop</code> and instead wrapping the inside of <code>get-messages</code> with <code>go-loop</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35071016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "sockets/core.async",
            "submessages": [],
            "timestamp": 1423842562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hi everyone,</p>\n<p>First day and I want to start on learning Clojure(script). I know about Clojure for the Brave and True (<a href=\"http://www.braveclojure.com/\" target=\"_blank\" title=\"http://www.braveclojure.com/\">http://www.braveclojure.com/</a>) and I've just found \"The Joy of Clojure\" book. But I would love to have advice for a good / better / best way to start. I know JS and I have done the cljs koans, but that is it.</p>\n<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35196664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424111129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo</span> My favorite Clojure book is Clojure Programming by Chas Emerick, et al. <span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> and <span class=\"user-mention\" data-user-email=\"lisa.vangelder@gmail.com\">@Lisa van Gelder (W2'15)</span> have also been doing Clojure stuff (and others, surely!)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35196772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424111287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo</span>  - <span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> recommended me the book Programming Clojure by Halloway, which I am reading these days; it is really good and there are a few copies in the space. Pinging <span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> because he might have some advice with his nicely curated list of Clojure learning resources.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35196811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424111370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>We might have a copy of Clojure Programming in the library as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35196812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424111371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Thank you all so much!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35197247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424112031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68d40c5cc1496c2abc1f862dd148a036?d=identicon&version=1",
            "client": "website",
            "content": "<p>4clojure is useful too, its basically a bunch of small clojure problems that gradually teach you clojure <a href=\"http://www.4clojure.com/problem/1\" target=\"_blank\" title=\"http://www.4clojure.com/problem/1\">http://www.4clojure.com/problem/1</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35197879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lisa.vangelder@gmail.com",
            "sender_full_name": "Lisa van Gelder (W2'15)",
            "sender_id": 7086,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424113096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68d40c5cc1496c2abc1f862dd148a036?d=identicon&version=1",
            "client": "website",
            "content": "<p>And for a very gentle introduction try <a href=\"http://www.tryclj.com/\" target=\"_blank\" title=\"http://www.tryclj.com/\">http://www.tryclj.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35197889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lisa.vangelder@gmail.com",
            "sender_full_name": "Lisa van Gelder (W2'15)",
            "sender_id": 7086,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424113117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo</span> I'm happy to chat Clojure stuff if you have any questions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35198028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424113402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>The Clojure and ClojureScript tooling environments are pretty different. If you haven't touched CLJS yet, I'd recommend this tutorial <a href=\"https://github.com/magomimmo/modern-cljs\" target=\"_blank\" title=\"https://github.com/magomimmo/modern-cljs\">https://github.com/magomimmo/modern-cljs</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35198196,
            "is_me_message": false,
            "last_edit_timestamp": 1424113716,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424113705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "website",
            "content": "<p>I'm also looking at some Clojurescript (and have decent Lisp experience) if anyone's interested in talking</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35198223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424113757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35200844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "why doesn't clojure have dependency hell?",
            "submessages": [],
            "timestamp": 1424117067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> well that's not true, due to Leiningen it's exactly the dependency hell of Maven. Maven does have decent dependency conflict resolution tools. I suppose thanks to isolated classloaders on the JVM you can also get Node.js style dependency management if you so desire.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35200983,
            "is_me_message": false,
            "last_edit_timestamp": 1424117372,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "why doesn't clojure have dependency hell?",
            "submessages": [],
            "timestamp": 1424117307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I really enjoyed Brave and True, for what that's worth. Thorough yet approachable. He clearly explains the code examples at the end, but I still asked for help working through them, as they're a little long. After that I felt prepared to read parts of The Joy of Clojure.</p>\n<p>The Joy of Clojure also highlights some differences between Clojure and ClojureScript.</p>\n<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> tried ClojureScript on Emacs, as did David Nolen - both report that doesn't work well, though Clojure is great there. I've just started with ClojureScript, trying to learn Reagent. I'll report on tooling problems as they arise...</p>\n<p>The Grimoire: <a href=\"http://conj.io/\" target=\"_blank\" title=\"http://conj.io/\">http://conj.io/</a><br>\nClojure from the Ground Up - I haven't done it but it seems popular. <a href=\"https://aphyr.com/tags/Clojure-from-the-ground-up\" target=\"_blank\" title=\"https://aphyr.com/tags/Clojure-from-the-ground-up\">https://aphyr.com/tags/Clojure-from-the-ground-up</a><br>\nList of resources on HN: <a href=\"https://news.ycombinator.com/item?id=1054968\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=1054968\">https://news.ycombinator.com/item?id=1054968</a><br>\nClojure Cookbook: <a href=\"https://github.com/clojure-cookbook/clojure-cookbook\" target=\"_blank\" title=\"https://github.com/clojure-cookbook/clojure-cookbook\">https://github.com/clojure-cookbook/clojure-cookbook</a><br>\nClojure web dev resources: <a href=\"http://clojurewebdev.com/resources.html\" target=\"_blank\" title=\"http://clojurewebdev.com/resources.html\">http://clojurewebdev.com/resources.html</a></p>\n<p>Finally, here's my own list of Clojure libraries:<br>\n** Libraries to test<br>\n*** Routing: Compojure, playnice, bidi, Route One, gudu<br>\n*** REST APIs: Liberator. ?.<br>\n*** Back-end: Pedestal, Luminus, Conjure <br>\n*** Front-end: Hoplon, Om, Reagent, Meteor Cljs, Angular, Ember<br>\n*** HTML: Hiccup, Enlive<br>\n*** CSS: Garden, gaka, clj-style, Zengarden<br>\n*** Databases: Korma, Datomic, Immutant<br>\n*** Servers: HTTP Kit<br>\n*** Testing: Midje, Speclj<br>\n*** Refactoring: Kibit, clj-refactor.el<br>\n*** I8n and I10n - Tower<br>\n*** Asset pipeline: Optimus or Stefon</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35201453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424118016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> yeah Emacs+ClojureScript might finally be turning a new leaf thanks to growing community understanding about how the shared REPL architecture works. FWIW, I found inferior lisp satisfactory for day to day Clojure &amp; ClojureScript programming. I recently switched to CursiveClojure, the debugging &amp; stability story is just way better.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35201557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424118182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So is trying to just use something like Sublime for Clojurescript totally insane?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35201630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424118342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo</span> not at all. The paredit emulation &amp; the REPLs are not as good as elsewhere but you can definitely be productive with Sublime. One of the Arcadia Unity devs uses Sublime for all of his ClojureCLR hacking.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35202397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424119409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I'd love it if I could do ClojureScript in Emacs! Here's hoping!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35239194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424190622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>If anyone wants to pair on a Clojure project, I'd be down. <br>\nYesterday I got stuck on Reagent (I think I don't know enough web dev to grok it yet), so I'm going to fall back on what I know. Seeing other folks' projects would be helpful as well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35239479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pairing",
            "submessages": [],
            "timestamp": 1424190878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68d40c5cc1496c2abc1f862dd148a036?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you want to join me on dropping treasure you are welcome :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35240561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lisa.vangelder@gmail.com",
            "sender_full_name": "Lisa van Gelder (W2'15)",
            "sender_id": 7086,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pairing",
            "submessages": [],
            "timestamp": 1424192191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Awesome - about 2:30?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35241014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pairing",
            "submessages": [],
            "timestamp": 1424192852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/68d40c5cc1496c2abc1f862dd148a036?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35241428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lisa.vangelder@gmail.com",
            "sender_full_name": "Lisa van Gelder (W2'15)",
            "sender_id": 7086,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pairing",
            "submessages": [],
            "timestamp": 1424193456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/951aab6c37ac5eb75a7882078615eb1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Any experienced clojure folks around? I'm running a \"simple\" program and getting the following:</p>\n<p>Exception in thread \"main\" java.lang.ClassCastException: clojure.lang.LazySeq cannot be cast to clojure.lang.IFn, compiling:(/private/var/folders/j3/g4s8qhy57z5825k9zc1p48600000gn/T/form-init7860794367999889631.clj:1:124)<br>\n    at clojure.lang.Compiler.load(Compiler.java:7142)<br>\n    at clojure.lang.Compiler.loadFile(Compiler.java:7086)<br>\n    at clojure.main$load_script.invoke(main.clj:274)<br>\n    at clojure.main$init_opt.invoke(main.clj:279)<br>\n    at clojure.main$initialize.invoke(main.clj:307)<br>\n    at clojure.main$null_opt.invoke(main.clj:342)<br>\n    at clojure.main$main.doInvoke(main.clj:420)<br>\n    at clojure.lang.RestFn.invoke(RestFn.java:421)<br>\n    at clojure.lang.Var.invoke(Var.java:383)<br>\n    at clojure.lang.AFn.applyToHelper(AFn.java:156)<br>\n    at clojure.lang.Var.applyTo(Var.java:700)<br>\n    at clojure.main.main(main.java:37)<br>\nCaused by: java.lang.ClassCastException: clojure.lang.LazySeq cannot be cast to clojure.lang.IFn<br>\n    at foo.core$_main.doInvoke(core.clj:10)<br>\n    at clojure.lang.RestFn.invoke(RestFn.java:397)<br>\n    at clojure.lang.Var.invoke(Var.java:375)<br>\n    at user$eval5.invoke(form-init7860794367999889631.clj:1)<br>\n    at clojure.lang.Compiler.eval(Compiler.java:6703)<br>\n    at clojure.lang.Compiler.eval(Compiler.java:6693)<br>\n    at clojure.lang.Compiler.load(Compiler.java:7130)<br>\n    ... 11 more</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35255923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "serban@hiddenelephant.com",
            "sender_full_name": "Serban Porumbescu (SP1'15)",
            "sender_id": 7652,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424209211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/951aab6c37ac5eb75a7882078615eb1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the code:</p>\n<p>(ns foo.core<br>\n  (:require [clj-http.client :as client]))</p>\n<p>(defn -main<br>\n  \"Prints the first 50 characters of the HTML source of <a href=\"http://yelp.com\" target=\"_blank\" title=\"http://yelp.com\">yelp.com</a>.\"<br>\n  [&amp; args]<br>\n  (println (apply str(<br>\n                      (take 50 <br>\n                            (:body (client/get \"<a href=\"http://www.yelp.com\" target=\"_blank\" title=\"http://www.yelp.com\">http://www.yelp.com</a>\")))))))</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35255988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "serban@hiddenelephant.com",
            "sender_full_name": "Serban Porumbescu (SP1'15)",
            "sender_id": 7652,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424209309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/951aab6c37ac5eb75a7882078615eb1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ugh, that didn't paste well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35255996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "serban@hiddenelephant.com",
            "sender_full_name": "Serban Porumbescu (SP1'15)",
            "sender_id": 7652,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424209321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/951aab6c37ac5eb75a7882078615eb1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay, there was an extra set of parenthesis</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35256200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "serban@hiddenelephant.com",
            "sender_full_name": "Serban Porumbescu (SP1'15)",
            "sender_id": 7652,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424209525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"serban@hiddenelephant.com\">@Serban Porumbescu (SP1'15)</span> The problem with your script is that <code>apply</code> expects a function as a parameter, so instead try this:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">-main</span>\n  <span class=\"s\">&quot;Prints the first 50 characters of the HTML source of yelp.com.&quot;</span>\n  <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">args</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nb\">apply str </span><span class=\"p\">(</span><span class=\"nb\">take </span><span class=\"mi\">50</span> <span class=\"p\">(</span><span class=\"ss\">:body</span> <span class=\"p\">(</span><span class=\"nf\">client/get</span> <span class=\"s\">&quot;http://www.yelp.com&quot;</span><span class=\"p\">))))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35256942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "total newb resources / advice",
            "submessages": [],
            "timestamp": 1424210304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm wrapping my head around monads and getting a little stuck. I get that </p>\n<div class=\"codehilite\"><pre>(m-bind ...\n        (fn [x]\n            (m-bind ...\n                (fn [y]\n                    (m-result ...)))))\n</pre></div>\n\n\n<p>is handled by </p>\n<div class=\"codehilite\"><pre>(domonad m-something\n    [x (monadic-func arg)\n     y (monadic-func2 x)]\n    [x y])\n</pre></div>\n\n\n<p>My question is what if my monadic functions take two arguments. Can I still use the domonad macro?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35262423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "multiple args with domonad",
            "submessages": [],
            "timestamp": 1424216997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>To be more specific, I'm trying to implement this article <a href=\"http://www.cs.nott.ac.uk/~gmh/monparsing.pdf\" target=\"_blank\" title=\"http://www.cs.nott.ac.uk/~gmh/monparsing.pdf\">http://www.cs.nott.ac.uk/~gmh/monparsing.pdf</a> in Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35262501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "multiple args with domonad",
            "submessages": [],
            "timestamp": 1424217115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm making my way through The Joy of Clojure, and one thing I am not entirely clear on is why to use destructuring with maps instead of accessing the values. For instance why </p>\n<div class=\"codehilite\"><pre>(let [{:keys [f-name m-name l-name]} guys-name-map]\n          (str l-name &quot;, &quot; f-name &quot; &quot; m-name))\n</pre></div>\n\n\n<p>instead of </p>\n<div class=\"codehilite\"><pre>(let [g guys-name-map]\n          (str g:l-name &quot;, &quot; g:f-name &quot; &quot; g:m-name))\n</pre></div>\n\n\n<p>Is it efficiency, idiom, something else?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35266001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424221561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/00e64691f30328787e84b912b5cb6581?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've always thought about destructuring like pattern matching to pull out specific values.  I can't speak for the efficiency aspect of it, but I would think the benefits become more clear in deeply nested maps, but maybe I'm wrong.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35266502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "robmalko@gmail.com",
            "sender_full_name": "Robert Malko (SP1'15)",
            "sender_id": 7648,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424222275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span> did your snippet not format correctly? I don't think what I'm seeing is valid Clojure in the second example.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35267345,
            "is_me_message": false,
            "last_edit_timestamp": 1424223559,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424223548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But at any rate, destructuring is just a convenient syntax for plucking out the values, that's all. It saves you from having to repeat the name of the map all over the place.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35267412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424223655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is it not valid? I just threw it together to illustrate how I think the alternative would work but I also thought it was.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35269320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424227078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>nvm I just figured this out. I was looking at it the wrong way.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35269369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "multiple args with domonad",
            "submessages": [],
            "timestamp": 1424227173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> ^^ Other than the fact that the map isnt defined.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35269523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424227449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span>, the <code>g:l-name</code> syntax doesn't work. You'd need to do <code>(:l-name g)</code> or <code>(g :l-name)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35270775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424229894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The thing that actually makes no sense to me about Clojure map destructing is why you do <code>[{my-variable-binding :x} {:x 123}]</code> instead of <code>[{:x my-variable-binding} {:x 123}]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35270986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424230296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why flip the order?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35270990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424230319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>\n<p><img alt=\":blush:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/blush.png\" title=\":blush:\">  Right, parens, LISP. </p>\n<p>The Joy of Clojure suggests the ordering is to (a) keep the trend of <code>var</code> &lt;- <code>value</code> left to right and (b)  because the left side can only be specific keywords, symbols, or possibly a nested form. I personally find the first reason pretty compelling. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35288801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424270623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Like some other users, I thought Korma's (fields) function would restrict the query to the fields specified. But it seems this expands the query, rather than restricting it! <a href=\"https://github.com/korma/Korma/issues/251\" target=\"_blank\" title=\"https://github.com/korma/Korma/issues/251\">https://github.com/korma/Korma/issues/251</a></p>\n<p>Concretely, with a table like so:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">defentity</span> <span class=\"nv\">bitterly</span>\n  <span class=\"p\">(</span><span class=\"nf\">database</span> <span class=\"nv\">pg</span><span class=\"p\">)</span> \n  <span class=\"p\">(</span><span class=\"nf\">table</span> <span class=\"ss\">:bitterly</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">pk</span> <span class=\"ss\">:id</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">entity-fields</span> <span class=\"ss\">:oldaddress</span> <span class=\"ss\">:newaddress</span> <span class=\"ss\">:timesvisited</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>and a query like so:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">returnAddress</span> <span class=\"p\">[</span><span class=\"nv\">newaddress</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">select </span><span class=\"nv\">bitterly</span>\n    <span class=\"p\">(</span><span class=\"nf\">fields</span> <span class=\"ss\">:oldaddress</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">where</span> <span class=\"p\">{</span><span class=\"ss\">:newaddress</span> <span class=\"nv\">newaddress</span><span class=\"p\">})))</span>\n</pre></div>\n\n\n<p>I get all the fields, not just the :oldaddress one! I have been working around this by running the keyword on the query map. (:oldaddress (first (select bitterly...)))</p>\n<p>Is there a more idiomatic way to restrict the fields returned from a Korma query?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35360956,
            "is_me_message": false,
            "last_edit_timestamp": 1424372639,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Korma select fields",
            "submessages": [],
            "timestamp": 1424372452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Tip: use <code>~~~</code> around code blocks for better syntax highlighting (instead of a backtick)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35361022,
            "is_me_message": false,
            "last_edit_timestamp": 1424372512,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Korma select fields",
            "submessages": [],
            "timestamp": 1424372502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Fixed, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35361130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Korma select fields",
            "submessages": [],
            "timestamp": 1424372567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>You can even use <code>~~~clj</code> on the top line for syntax highlighting, if you so desire :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35361178,
            "is_me_message": false,
            "last_edit_timestamp": 1424372639,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Korma select fields",
            "submessages": [],
            "timestamp": 1424372623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>ooh shiny</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35361256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Korma select fields",
            "submessages": [],
            "timestamp": 1424372654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span> , the convenience pays off a lot more if you nest destructuring forms. For example, here is an inner function that takes one parameter, a http request map, and pulls out various nested keys from it. the request might look like <code>{:query-params {:tx 10} :path-params {:id 42} :body-params {:field1 \"a\" :field2 \"b\"}}</code></p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">mk-item-put</span> <span class=\"p\">[</span><span class=\"nv\">typeinfo</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[{{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">tx</span><span class=\"p\">]}</span> <span class=\"ss\">:query-params</span>\n        <span class=\"p\">{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">id</span><span class=\"p\">]}</span> <span class=\"ss\">:path-params</span>\n        <span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"ss\">:body-params</span><span class=\"p\">]}]</span>\n    <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"p\">(</span><span class=\"nf\">api/entity-update</span> <span class=\"p\">(</span><span class=\"nf\">Long/parseLong</span> <span class=\"nv\">id</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"nf\">Long/parseLong</span> <span class=\"nv\">tx</span><span class=\"p\">)</span> <span class=\"c1\">;; to detect concurrent modifications</span>\n                           <span class=\"nv\">body-params</span>\n                           <span class=\"nv\">typeinfo</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nf\">response/-&gt;UpdateItemResponse</span><span class=\"p\">))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35435395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424482411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have two clojure core.async questions</p>\n<p><strong>1) How exactly does execution occur within a <code>go</code> block?</strong></p>\n<p>Why is it that this code doesn't work as intended:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">)]</span> \n  <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">x</span> <span class=\"mi\">42</span><span class=\"p\">))</span> \n  <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nf\">alts!</span> <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"ss\">:default</span> <span class=\"ss\">:nothing-found</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>But this code does:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nf\">chan</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">x</span> <span class=\"mi\">42</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nf\">go</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nf\">alts!</span> <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"ss\">:default</span> <span class=\"ss\">:nothing-found</span><span class=\"p\">)))))</span>\n</pre></div>\n\n\n<p>I don't think that <code>&gt;!</code> is a blocking operation. My only theory is that <code>go</code> is executing <code>alts!</code> first, and it blocks execution waiting for data to channel <code>x</code>. Is it correct that <code>go</code> will execute calls  out of order when the block is first evaluated? </p>\n<p><strong>2) When I'm working in the REPL and I execute a statement like the first one, up above, what happens in terms of resource allocation?</strong> </p>\n<p>That is to say, is there still memory allocated towards waiting for the <code>go</code> block to finish executing?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35469468,
            "is_me_message": false,
            "last_edit_timestamp": 1424556851,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1424556771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d14c2ca7104d9623bd7a7edd821339db?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>writing to a channel will block unless something is actively trying to take from the channel on the other side. If im understanding alts! correctly it is a multiplexor equivalent to select? In the first snippet you block because execution is sequential and alts! is never reached. In the second example you spin one goroutine to write to the channel, but execution is allowed to continue to spin up a second goroutine that will return as soon as your first goroutine writes to x because it returns the first event that becomes available. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35471307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jdp5087@gmail.com",
            "sender_full_name": "Jon Poler (he) (W2'15)",
            "sender_id": 7078,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1424561143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d14c2ca7104d9623bd7a7edd821339db?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>you can buffer a channel so that writing to it does not block. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35471360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jdp5087@gmail.com",
            "sender_full_name": "Jon Poler (he) (W2'15)",
            "sender_id": 7078,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1424561263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks Jon, very helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35472455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "core.async",
            "submessages": [],
            "timestamp": 1424563519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>hey y'all, I just asked a long SO question that some of you may be able to help with: <a href=\"https://stackoverflow.com/questions/28662319/rerootable-purely-functional-tree-data-structure\" target=\"_blank\" title=\"https://stackoverflow.com/questions/28662319/rerootable-purely-functional-tree-data-structure\">https://stackoverflow.com/questions/28662319/rerootable-purely-functional-tree-data-structure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35500418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"rerooting\" a purely functional tree data structure",
            "submessages": [],
            "timestamp": 1424633735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>TLDR I want to figure out how to cheaply \"reroot\" a purely functional tree; I have been playing around with zippers and getting nowhere</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35500458,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"rerooting\" a purely functional tree data structure",
            "submessages": [],
            "timestamp": 1424633774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span> You can also use map destructuring to get keyword arguments <a href=\"https://clojuredocs.org/clojure.core/defn\" target=\"_blank\" title=\"https://clojuredocs.org/clojure.core/defn\">https://clojuredocs.org/clojure.core/defn</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35558167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "destructuring & maps",
            "submessages": [],
            "timestamp": 1424732520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Suppose I want to see if a hashmap <code>m</code> has a value for key <code>:foo</code>. I can do something like </p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">({</span><span class=\"ss\">:foo</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">}</span> <span class=\"ss\">:foo</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">action</span> <span class=\"k\">if </span><span class=\"nv\">truthy...</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">action</span> <span class=\"k\">if </span><span class=\"nv\">falsey...</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>Now suppose I want to clean this up and replace the direct hashmap interaction with a function like <code>foo?</code> that checks whether a hashmap contains a truthy value for <code>:foo</code></p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">m</span> <span class=\"p\">{</span><span class=\"ss\">:foo</span> <span class=\"s\">&quot;bar&quot;</span><span class=\"p\">})</span>\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">foo?</span> <span class=\"p\">[</span><span class=\"nv\">m</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"nv\">m</span> <span class=\"ss\">:foo</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">foo?</span> <span class=\"nv\">m</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">action</span> <span class=\"k\">if </span><span class=\"nv\">truthy...</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">action</span> <span class=\"k\">if </span><span class=\"nv\">falsey...</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>Now the code is doing the same thing as it was before but the semantics of <code>foo?</code> seem incorrect to me as we're concerned with a boolean outcome but the function itself doesn't return boolean values. (Rather, values that are evaluated as booleans.)</p>\n<p>To fix this I can either wrap the inside of <code>foo?</code> in <code>boolean</code> to only return a true or false value, or perhaps wrap the inside in an <code>if</code> statement.</p>\n<p>This is a lot of text on what is a fairly simple question. Ultimately what I'm curious about is this: should we be OK with <code>foo?</code> returning a non-boolean value if we're only going to be using it to evaluate its result for truthiness? Or is it better practice to first coerce to boolean?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35589206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Evaluating truthiness",
            "submessages": [],
            "timestamp": 1424791126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> You can use <code>contains?</code> instead, which checks whether an associative thing has a certain key.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35589253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Evaluating truthiness",
            "submessages": [],
            "timestamp": 1424791205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all! I'm new to datomic. I'm trying to connect to a datomic-free transactor like so:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">uri</span> <span class=\"s\">&quot;&quot;</span> <span class=\"s\">&quot;datomic:free://localhost:4334/my-db&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\">d/delete-database</span> <span class=\"nv\">uri</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\">d/create-database</span> <span class=\"nv\">uri</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">conn</span> <span class=\"p\">(</span><span class=\"nf\">d/connect</span> <span class=\"nv\">uri</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">schema</span> <span class=\"p\">(</span><span class=\"nb\">load-file </span><span class=\"s\">&quot;resources/datomic/schema.edn&quot;</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">d/transact</span> <span class=\"nv\">conn</span> <span class=\"nv\">schema</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>I get problems with <code>(d/connect uri)</code>. When I run that in my cider repl, I get <code>ExceptionInfo database does not exist  clojure.core/ex-info (core.clj:4403)</code>. Does anybody know what I'm missing? o__O</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425496882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest</span> you're <code>uri</code> line is wrong, it's assigning the blank string</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049726,
            "is_me_message": false,
            "last_edit_timestamp": 1425497175,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest</span> oh hrm, perhaps not, that 's a blank docstring</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> yes, that's just a blank docstring</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I literally added the blank docstring literally just so that emacs would highlight everything to be pretty ~__~</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>literally.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36049908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest</span> looks good to me and I can't dig in anymore at the moment. Might want to check in the Datomic IRC channel, people are very helpful there.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36050113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Thanks for checking out my issue, and thanks for the tip!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36050237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425497678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>For those of you who are seeing the problem, Stuart Sierra from the Cognitect team told me this on datomic IRC: \"deleting a database is eventual, not immediate.\" He also had this recommendation: \"You should create a new, unique database URI each time you want to start over.\" But yes, simply waiting about 60 seconds from <code>(delete-database uri)</code> to calling <code>(connect uri)</code> did the trick.</p>\n<p>Not certain of the design reasons behind making <code>delete-database</code> eventual and not consistent, but hopefully this helps somebody else!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36051266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425498605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest</span> I think the underlying issue is that Datomic is not in control of storage or tooling around storage. For example you don't want to munge DynamoDB table names, and DynamoDB has the same eventual consistency problems. Same would be true for other kinds of BigTable like storage.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36054925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425502288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Gotcha, that makes sense! Thanks for sharing the perspective!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36055138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic help",
            "submessages": [],
            "timestamp": 1425502476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all! I want to be able to copy my entire dom tree, send it across the wire to save to my datomic database, and then spit out my snapshot to recreate my dom tree at another time.</p>\n<p>I couldn't find anything else in the cljs landscape which already does this. The closest thing I could find was google closure's goog.dom.NodeIterator, but that itself isn't enough just yet. Am I missing a preexisting option?</p>\n<p>If it doesn't exist, then I'd like to roll out my own. I think a naive implementation would be relatively straightforward, but I'm worried about performance. Do you guys have any suggestions on how to implement this fast dom snapshot?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36173165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425675320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest</span> are you using Om? Then you can just send the app-state over the wire whenever you want</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36174103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425675843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's not the entire dom tree but it's (or should be) the entire state of your application</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36174282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425675894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's what I do anyway, and you can save it to localstorage so things look the same (incl form data etc) when you open the site again, if you so wish</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36174465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425675961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span>  Hey buddy!!! :)</p>\n<p>Nope, not using Om. I'm searching for a generic solution which doesn't rely on the render method or framework. Things would be easier if everybody were using Om lol D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36175234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425676312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey! Ok, no idea then, sorry :&lt;</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36175297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425676340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>wahh okay T^T haha thanks for checking out my issue though :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36175487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425676545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>For those who are interested, my current plan is to leverage <code>(.-innerHTML dom-node)</code> as much as possible.</p>\n<p>Unfortunately, seems like my desired use-case is too complex for <code>(-&gt; js/document .-body .-innerHTML)</code>. D: But I think that'll do for now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36179004,
            "is_me_message": false,
            "last_edit_timestamp": 1425680428,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1425680398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I found two different ways to assign values:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">set!</span> <span class=\"p\">(</span><span class=\"k\">. </span><span class=\"nv\">body</span> <span class=\"nv\">-scrollTop</span><span class=\"p\">)</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and also</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">set!</span> <span class=\"p\">(</span><span class=\"nf\">.-scrollTop</span> <span class=\"nv\">body</span><span class=\"p\">)</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Is there a reason to prefer one over the other? Or is there a different method that's better than those two?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36533868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best way to assign values wrt js interop? [cljs]",
            "submessages": [],
            "timestamp": 1426193205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> They're equivalent. The second is just sugar for the first, so that it looks a bit more like regular function calls in Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36534498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best way to assign values wrt js interop? [cljs]",
            "submessages": [],
            "timestamp": 1426193976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, thanks <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> !! <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36534601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best way to assign values wrt js interop? [cljs]",
            "submessages": [],
            "timestamp": 1426194059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello mah swanky swegrs~~</p>\n<p>I have some recursive code here: <a href=\"https://github.com/dillonforrest/domshot/blob/0.0.0/src/domshot/core.cljs#L35\" target=\"_blank\" title=\"https://github.com/dillonforrest/domshot/blob/0.0.0/src/domshot/core.cljs#L35\">https://github.com/dillonforrest/domshot/blob/0.0.0/src/domshot/core.cljs#L35</a></p>\n<p>I'd like to refactor it to use <code>loop..recur</code>. However, when I tried it, the clojurescript compiler threw this error:</p>\n<div class=\"codehilite\"><pre>Caused by: clojure.lang.ExceptionInfo: Can&#39;t recur here at line 42 src/domshot/core.cljs\n</pre></div>\n\n\n<p>My conjecture is that I probably did it wrong, since I'm recurring within a list comprehension. I'd like to use this library at scale on very large doms, so optimizing this function to use <code>loop..recur</code> is a non-urgent but important task. Any suggestions on how to do it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36665987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426461942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36691435,
            "is_me_message": false,
            "last_edit_timestamp": 1426519437,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "REPL ns aliases",
            "submessages": [],
            "timestamp": 1426518310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36691645,
            "is_me_message": false,
            "last_edit_timestamp": 1426519442,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "REPL ns aliases",
            "submessages": [],
            "timestamp": 1426518574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> you can't recur from a for comprehension because that isn't the tail-call position i believe</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36692144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426519093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> Makes sense! Thanks for the input! I feel like my refactor to incorporate <code>loop..recur</code> will probably not be very elegant . D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36707811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426536938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Im not convinced loop/recur will help you very much</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426537850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks to me like you're doing a BFS</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426537914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is probably the fastest way to bf-traverse a tree: <a href=\"https://github.com/aysylu/loom/blob/master/src/loom/alg_generic.clj#L184\" target=\"_blank\" title=\"https://github.com/aysylu/loom/blob/master/src/loom/alg_generic.clj#L184\">https://github.com/aysylu/loom/blob/master/src/loom/alg_generic.clj#L184</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426537950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>that code is generic enough that you can literally use that code for your use case i believe</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426537963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could also be missing something about your use case, I didn't really dig into what your code is doing, i just noticed it looked like a bf-traversal</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36708793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426538035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure about the internals of <code>for</code> comprehensions, so I actually have no idea if I'm breadth- or depth-first. However, speed is definitely the primary concern. Thanks for sharing the link!!! <span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36722403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using loop..recur inside a list comprehension",
            "submessages": [],
            "timestamp": 1426555059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>In my clojurescript front-end, I'm fetching data from my server, and then I want to store it in a global reference. This data will never change. It will always be read-only. I figured an atom was overkill, and I'm worried that constantly dereffing a read-only atom will be bad for performance. Are there other canonical ways to address read-only data loaded asynchronously which needs fast reads?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I figure atoms are probably still the way to go, but I wanted to ask to be sure :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> It looks like there's next to no overhead for derefing an atom in cljs: <a href=\"https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs#L3786\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs#L3786\">https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs#L3786</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>That <code>state</code> attribute on atoms is the underlying persistent data structure, and things like <code>reset!</code> and <code>swap!</code> <a href=\"https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs#L3823\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs#L3823\">just set it</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Got it, thanks!! <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>super helpful :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36755893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "best way to store async'ly loaded data?",
            "submessages": [],
            "timestamp": 1426615690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i believe there are two cases where you pass react a list of components. You can pass an array directly (requires react keys) or you can apply varargs (does not require keys). The varargs case is important to not require a key, because we don't need keys for static markup like <code>[:div [:span \"a\"] [:span \"b\"]]</code>. However Om/Sablono seems to intermittently require a key in that case, probably because certain branches do something like <code>(apply dom/div children)</code>. Am I missing something? React warnings are absolutely killing me because console.warn isn't available in server-side rendering and I'm trying to avoid polyfilling it (It shouldn't be so hard to get the keys right!)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36853773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426767172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Everything is fine with Reagent and with vanilla react)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36853778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426767202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have tracked the problem into sablono, and i think its intermittent because sablono attempts to \"pre-compile\" certain html forms. Making certain no-op changes to some of the forms makes the warning go away. Still seeking advice if anyone has more info.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36855756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426771282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> Not 100% sure I understand your question correctly, but do you use build-all?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36857464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426774002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you want to show multiple things, I think you either have to do apply &lt;some element that can be parent of multiple children&gt; or build-all</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36857551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426774152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> and I dealt with something like this. I don't quite remember what the problem was, but I think Zach might remember.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36859001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426776015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> i don't think it's that, i think it's bugs in sablono. I've been able to make all the warnings go away by jiggling the sablono markup around. The sablono source is non-trivial</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36861761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426779342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> yeah, not a huge fan of all the defmacro magic that goes on in sablano. In my most recent Om project I just decided to stick with the builtin dom stuff for as long as possible, and then maybe use om-tools or look into kioo</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36862524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426780251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36862965,
            "is_me_message": false,
            "last_edit_timestamp": 1426780720,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426780714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, this diff, red warns, green doesn't. The macro isn't smart enough to properly compile the red version<br>\n<a href=\"/user_uploads/13/LcDEsi4fzc9eidcsHFI-yu6Q/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/LcDEsi4fzc9eidcsHFI-yu6Q/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\"><img src=\"/user_uploads/13/LcDEsi4fzc9eidcsHFI-yu6Q/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426780849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> it's possible that the <code>html</code> macro doesn't do much macroexpansion. We had a similar problem where the <code>html</code> macro didn't work correctly through <code>(if-not condition)</code>. We had to write our code as <code>(if (not condition))</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think what you've done is the way to go</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically, I think if sablono's compiler can't statically understand the stuff you've passed into it, it just waits until runtime, and evals the stuff it can't understand and then compiles</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>which is probably why you're getting the key error</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>because at runtime, it doesn't know how long the vector is, so it can't use the varargs form that you were talking about.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is all mostly conjecture. Zach and I didn't look into it deeply, and this was a while ago. but I think this is the gist of what we found</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> Thanks, yeah, I believe you are correct. I'm just shocked that more people haven't run into this</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's possible for sablono to handle this case properly, by being either simpler or smarter</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I believe you're right. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(that you could get sablono to handle this)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The other thing that I found a bit annoying about this, was that there's probably a performance hit that you take when sablono does this stuff at runtime (it has to compile the data structure every time the JS is loaded)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>i have no idea what the overhead is</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>and it might even be nothing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36863975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426781938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>but i felt a bit uncomfortable with the fact that it's hard to know</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36864073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426782015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>like your only clue that you might be doing some computation at runtime rather than compile time is sometimes maybe a key warning from react</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36864084,
            "is_me_message": false,
            "last_edit_timestamp": 1426782056,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426782026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Reagent does basically the same thing (hiccup -&gt; react interpreter only, no compiler), except it does it in like 20 lines. In fact Reagent it is so vastly simpler that it makes me wonder if I am missing something. Performance wise, given proper use of React's hook to skip full re-renders, i think interpreting is fine even if it is somewhat expensive</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36864508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426782528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can believe that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36864516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426782552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(believe that interpreting at runtime is probably fine all the time)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36864529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426782574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW I had similar problems with let being inside or outside a go-loop for listening to a channel, so could be something with react lifecycle and when code (involving macro-calls) is reified</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36865945,
            "is_me_message": false,
            "last_edit_timestamp": 1426784307,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426783976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36866022,
            "is_me_message": false,
            "last_edit_timestamp": 1426784285,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426784049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have a fn to slugify urls in clojurescript?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36875751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unexpected React :key warnings with Om/Sablono",
            "submessages": [],
            "timestamp": 1426791808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all! I'd like to write a function which takes a node name, eg <code>DIV</code>, and returns a react-friendly dom node function, like <code>quiescent.dom/div</code>. Here's my current attempt:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">get-dom-fn</span> <span class=\"p\">[</span><span class=\"nv\">node</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">node-name</span> <span class=\"p\">(</span><span class=\"nb\">-&gt; node </span><span class=\"ss\">:node-name</span> <span class=\"nv\">clojure.string/lower-case</span><span class=\"p\">)]</span>\n    <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nb\">symbol </span><span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;quiescent.dom/&quot;</span> <span class=\"nv\">node-name</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p>As you might expect, this doesn't work. Unfortunately I can't quite figure out how to do this myself. Any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36883609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426798506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay, one thing I'm doing wrong is using <code>~</code> in a <code>.cljs</code> file. ~_____~</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36884452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426799359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>In case I'm being confusing, here's a gist of what I'm trying to accomplish: <a href=\"https://gist.github.com/dillonforrest/894f05c45773897f62c8\" target=\"_blank\" title=\"https://gist.github.com/dillonforrest/894f05c45773897f62c8\">https://gist.github.com/dillonforrest/894f05c45773897f62c8</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36884873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426799855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>can you have a simple map from string -&gt; symbol ?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\">@Dustin Getz (S'12)</span> I'm looking for a more automatic way to do it without hardcoding a map or a condp</p>\n<p>So far, on irc, david nolen recommended using <code>ns-interns</code>, so I'm trying that right now!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>quiescent is abandoned btw, he had a breaking bug in his inputs and didn't get around to fixing it for months</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>he finally did</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah okay, thanks for letting me know!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thankfully I'm not using it for a real app</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>just as a way to conveniently show different dom states</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>quiescent is perfect for this very specific use case</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>otherwise I'd use om or reagent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36886329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "[cljs] how to return functions from other libs?",
            "submessages": [],
            "timestamp": 1426801362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>.indexOf</code> exists for clojure, but I came across issues of it not existing inside cljs as per this SO thread: <a href=\"http://stackoverflow.com/questions/25324082/index-of-vector-in-clojurescript\" target=\"_blank\" title=\"http://stackoverflow.com/questions/25324082/index-of-vector-in-clojurescript\">http://stackoverflow.com/questions/25324082/index-of-vector-in-clojurescript</a></p>\n<p>What would be the best way to find the index of an item inside a list for cljs?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37073538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "what's the state of .indexOf in cljs?",
            "submessages": [],
            "timestamp": 1427159692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been dabbling with full stack Clojure in my free time and am pretty excited about it, but I was wondering whether Clojure leans more towards an editor/terminal workflow like Rails, or a full IDE workflow?  More specifically what programs to people use for this, and are there one or two that seem to be the go-tos?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> Emacs is pretty good, but anything with a REPL really</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are things like <a href=\"https://cursiveclojure.com/\" target=\"_blank\" title=\"https://cursiveclojure.com/\">https://cursiveclojure.com/</a> which seems to have some nice features, but it's definitely not a must.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165715,
            "is_me_message": false,
            "last_edit_timestamp": 1427307404,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>See this for some more common setups: <a href=\"https://cognitect.wufoo.com/reports/state-of-clojure-2014-results/\" target=\"_blank\" title=\"https://cognitect.wufoo.com/reports/state-of-clojure-2014-results/\">https://cognitect.wufoo.com/reports/state-of-clojure-2014-results/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried Cursive last night, overall I liked the features but some bizarre autocomplete issue prevented me from adding all the closing braces to a function, which is a dealbreaker</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>The most barebones you can do is &lt;editor of choice&gt; and lein repl, which is 90% there I'd say</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, sure it wasn't paredit?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's a pretty powerful tool but it takes some time getting used to, definitely not essential though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It could have been that, I imported a project and tried messing around with it and ran into that, I might have engaged some mode I didn't know about</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I ought to learn emacs for this, I've just been a Vim person for years so it feels like a lot of learning curve</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Paredit autocompletes ( with ), \" with \", [ with ] etc. It also allows you to move around s-expressions like</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(foo) bar -&gt; (foo bar) with just a keypress or two</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37165992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could, but don't feel like you have to. Using Emacs now, but there have been periods where I used stock vi/vim and lein repl for months at a time</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's good to know, I might just forge ahead with that then, thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427307796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b3a4be73ec22c01a87b77ddc2bb6f7d?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span>  I've been super happy with Figwheel via Lein. The hello world app makes everything super clear and I was pleased to use that with Sublime Text, which is my go-to editor.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166379,
            "is_me_message": false,
            "last_edit_timestamp": 1427308170,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "sarah.groff.palermo@gmail.com",
            "sender_full_name": "Sarah Groff-Palermo (SP1'15)",
            "sender_id": 7637,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427308156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span> Thanks, I'll look into that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37166819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427308660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> if you wanna use emacs for closure but wanna still use vim bindings, you can fork my emacs setup with evil mode! <a href=\"https://github.com/dillonforrest/emacs-for-clojure\" target=\"_blank\" title=\"https://github.com/dillonforrest/emacs-for-clojure\">https://github.com/dillonforrest/emacs-for-clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37182147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427326553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That might be a great way to go, I'll check that out. Thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37182291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427326741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/604748cba506592b62e4bfde54f01fa8d082013f?x=x&version=1",
            "client": "website",
            "content": "<p>Has anyone played around with <a href=\"http://data-sorcery.org/\" target=\"_blank\" title=\"http://data-sorcery.org/\">Incanter</a> or any other tools to analyze data? I've only ever used the <a href=\"http://pandas.pydata.org/\" target=\"_blank\" title=\"http://pandas.pydata.org/\">Pandas</a> python library. I'm thinking of trying out something new.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37199180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dela3499@gmail.com",
            "sender_full_name": "Carlos De la Guardia (F1'14)",
            "sender_id": 6435,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427361872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> FWIW, I think any editor built on emacs lisp will be far far far superior to an editor built on vimscript, BUT I think vim offers a muchhhhhh more comfortable and ergonomic development model than emacs. Evil mode for emacs is definitely the best of both worlds! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37223077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1427397527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>pinging <span class=\"user-mention\" data-user-email=\"outofthemadness@gmail.com\">@James A. Keene (W1'14)</span> bc he can math haha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37223116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427397570,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span>  haha -- while I certainly can math, I haven't actually played around much with Clojure data stuff, unfortunately</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37224246,
            "is_me_message": false,
            "last_edit_timestamp": 1427398794,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427398785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":beers:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/beers.png\" title=\":beers:\"> <span class=\"user-mention\" data-user-email=\"outofthemadness@gmail.com\">@James A. Keene (W1'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37224303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427398831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37233390,
            "is_me_message": false,
            "last_edit_timestamp": 1427409160,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427409143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all! I'm pretty inexperienced with back-end web development, so please excuse my noobiness.</p>\n<p>Problem: I want a way to uniquely identify all requests coming from the same user session, but I don't know how.</p>\n<p>Possible solutions:</p>\n<p>I'm using ring/compojure. I'm noticing that the ring requests come in with a <code>client-id</code> as its only query param. As far as I can tell, this <code>client-id</code> query param is appended programmatically. I didn't intentionally do that anywhere. I noticed that the <code>client-id</code> changed when I sent requests from a different tab in my browser. Does anybody know what this <code>client-id</code> is? Can I use it to uniquely identify sessions?</p>\n<p>Another thing I'm considering is just generating my own sessions by including the IP with the datetime of the first request sent, and then stashing that into the session cookie.</p>\n<p>Does anybody have any suggestions on the best way to approach session ids in clojure with ring/compojure?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37233549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427409406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>update: actually, i was mistaken, the <code>client-id</code> doesn't seem to be the session after all</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37233629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427409500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> I'm not sure what you mean by \"same user session\" --- you mention the session cookie, which you can use to associate users with an arbitrary in-memory map of data (if I recall correctly you can also store session info in a more durable service in case you need it to work across multiple backend machines).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37238641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427418074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you mean same person but across multiple session cookies (e.g., the person is on their laptop and their phone accessing the service) then you'll have to juggle things yourself during the login flow.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37238657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427418123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you are asking about *how* to use session cookies, take a look at <a href=\"https://ring-clojure.github.io/ring/ring.middleware.session.html#var-wrap-session\" target=\"_blank\" title=\"https://ring-clojure.github.io/ring/ring.middleware.session.html#var-wrap-session\">https://ring-clojure.github.io/ring/ring.middleware.session.html#var-wrap-session</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37238706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427418234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>and if you want to pair on it to get it working, feel free to ping me and we can setup a time.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37238745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427418265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Thanks so much for the detailed reply! I'd totally totally totally love to pair if you have the time! :) I'm located in New York and can pair either in person or remotely. What's your availability look like?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37244218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427429258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm free tomorrow before 4pm EDT and basically all next week!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37244222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427429281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lets shoot for Tuesday at 2 p.m. Eastern; we can pair via Skype or Google hangouts (<a href=\"mailto:kevin@keminglabs.com\" title=\"mailto:kevin@keminglabs.com\">kevin@keminglabs.com</a>).<br>\nBefore then, can you setup a basic leiningen project for your server (if you don't have one already) and, more importantly, think of a few concrete goals you want to work towards.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37245914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427433246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>(either building some specific functionality, or designing a few experiments to test out your model of how the ring session stuff works)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37245931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427433269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, I've never written a cookie-based session store (or any other kind of session store) so I'm not going to promise that I know how they work either, but we can probably figure some stuff out = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37245936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427433302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>No problem! I already have a leiningen project with some substantial cycles already invested. I'll definitely have some goals!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37246068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427433508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks so much!!! I appreciate your time and look forward to it!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37246074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unique session ids with ring/compojure",
            "submessages": [],
            "timestamp": 1427433534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b085bcb2533a000bf8505dcada29345e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I played around with it a couple of years ago. There have been updates, and I think integration w/ core.matrix since then, so my view may be out of date. My feeling was that it was pretty nice for what it aimed to do. Just wrt to its \"datasets\" (dataframes), it basically covered the kind of functions and API you get with say, R's basic data.frame. It reminded me of doing stuff in R 10 years ago, in terms of features and the code you write in it. It's certainly not the 50lb. swiss army knife that pandas is. </p>\n<p>If your use case is that your program has everything else going on in Clojure, then it seemed very good for integrating a data analysis component into that (like running a regression on a bunch of data you've collected and processed w/ Clojure). Nothing about it though compelled me to just use it on its own.</p>\n<p>If you're just interested in doing data processing and analysis outside of python/pandas, instead of in Clojure specifically, I might suggest looking at R. In the last couple of years, packages like tidyr and dplyr (and purr, which is brand new), have been really doing some interesting things with tools for data processing--centered around codifying some new idioms for data processing, and abstracting away data frames themselves and coding in terms of composable pipelines.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37268687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "carljv@gmail.com",
            "sender_full_name": "Carl Vogel (W'14)",
            "sender_id": 5023,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427477868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/604748cba506592b62e4bfde54f01fa8d082013f?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the input. I'll have to take a closer look at R.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37293664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dela3499@gmail.com",
            "sender_full_name": "Carlos De la Guardia (F1'14)",
            "sender_id": 6435,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427519475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b085bcb2533a000bf8505dcada29345e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sure. Don't get me wrong--I think Clojure is a <strong>much</strong> better language than R, generally. But I don't know that Incanter is particularly interesting as an alternative to Pandas.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37304397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "carljv@gmail.com",
            "sender_full_name": "Carl Vogel (W'14)",
            "sender_id": 5023,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Data Science in Clojure",
            "submessages": [],
            "timestamp": 1427548750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all! I'm using clojure for my startup attempt. I blogged about why I'm using clojure rather than python or java, in case you're interested: <a href=\"http://www.dillonforrest.com/startup/why-im-using-clojure-to-start-up/\" target=\"_blank\" title=\"http://www.dillonforrest.com/startup/why-im-using-clojure-to-start-up/\">http://www.dillonforrest.com/startup/why-im-using-clojure-to-start-up/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37454733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'd love to hear your feedback :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37454750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why do you think boring and proven technologies are more costly?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>^^ <span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>mostly an aggregation of small things</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing I don't agree with is start ups are risky so I'm going to take on a whole bunch of risk</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>first of all, thanks for reading and sharing your thoughts! <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span>  :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think a start up needs to take calculated risks in the right area. That odds are against you. You don't want that on every possible front.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for js for instance, it was mostly language warts like everything is mutable and no native namespacing, and then ecosystem stuff like bad modularity (imo) with libraries and bad (again, imo) package managers, and then ultimately just poorer abstractions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Btw I'm at the same point as you right now. I'm choosing my stack for my start up.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah i hear you</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, good luck!!!!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427829991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>For me it comes down to speed</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think you're right that you should be calculated with your risks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>YES, SPEED</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i feel so much faster with clojure, and i'm still a supernoob</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>what are you hoping to work on btw?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>(if you don't mind me asking)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>totally understand if you're not ready to discuss :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>well I'm coming on as a partner for something that's already going</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://bitfountain.io\" target=\"_blank\" title=\"http://bitfountain.io\">bitfountain.io</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool stuff :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>what are the thoughts you're weighing right now in choosing your stack?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was deciding between Go and Clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Clojure for the same reason you stated</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>but I've been writing Go every day for the past 1.5 years</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>word</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>tough choice!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I think Go is the move</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>makes sense</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really wanted ClojureScript too but again I have way more experience with JS and so do the other founders</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>as a totally biased clojure programmer wannabe, i'd argue that's even more reason to use cljs over vanilla js haha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>but I love Clojure I want to use it for everything right now!!! lol</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but i'm sure they won't like the parens et al</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>btw, idk if you've seen this post or would think it's helpful for you to decide to use cljs or js: <a href=\"https://precursorapp.com/blog/clojure-is-a-product-design-tool\" target=\"_blank\" title=\"https://precursorapp.com/blog/clojure-is-a-product-design-tool\">https://precursorapp.com/blog/clojure-is-a-product-design-tool</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>a designer ended up going towards cljs and he prefers it now</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>interesting blog post</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think if you feel you can move fastest with clojure then go for it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>and i fully believe it's possible even with being a clojure noob</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i do worry about the unknown unknowns though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think unknown unknowns are scary as well</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>honestly it's not like i'm leaping up and down saying that every startup attempt should use clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea of course this is for you i get it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>please write more as you get deeper into this</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the big thing for me is that i wanna use clojurescript, since my startup attempt relies a lot on web frontend, and i'd rather use cljs rather than vanilla js for that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and all my competitors are using js</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes will do!!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you read the paul graham lisp as a competitive advantage post?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah i have!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's the one paul graham post that everybody seems to ignore</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and another reason why i feel more confident not using a more mainstream stack</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>the cool thing about clj is you don't ever have to worry about it not being \"mainstream\" enough because you can just drop down to java if needed</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>which is a huge win for moving fast</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i actually never thought of that :O</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>hahaha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>huge accidental win!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm pretty inexperienced with the jvm, but i'm loving it so far</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>slow startup time totally worth everything else it comes with</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea you're starting to sway me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>LOL</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, another reason why i wanted to use cljs rather than vanilla js</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>again, bc my domain relies very heavily on web frontend magic</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455976,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so js is mission critical for me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the other reason is that there's a compiler</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37455990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i feel much better when a compiler looks at my code</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>sometimes i wish there were type safety, but overall just the entire development experience with cljs is way better than js i think</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's typed clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427830989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i don't know if it works with cljs</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i heard core.typed isn't ready for cljs for a while tho :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah that's a shame</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>not everything is awesome, but most of it is still pretty awesome</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>well i gotta get back to setting up my db schema</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>good luck with everything!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks buddy, you too!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37456158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427831088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been very pleased with Clojure + ClojureScript for the projects I've used them on over the past few years. That said, I usually hesitate to recommend the stack to people because the learning curve is pretty rough.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37475089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427859257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's nowhere near as rough as it was when I started, but it's still pretty bad.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37475095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427859268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But then again, I think the learning curve for most tech/programming is pretty terrible. My recommendation now tends to be \"try to make a few grand with your idea using Google Spreadsheets and/or a telephone. If you can't do that, maybe find a new idea\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37475145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427859365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Personally Clojure{,Script} lost me when I kept finding that recommended libraries to do basic tasks were:</p>\n<ul>\n<li>only half- or \u00bc-documented</li>\n<li>missing obvious, basic features</li>\n<li>barely maintained</li>\n<li>sometimes, simply full-on broken</li>\n</ul>\n<p>The package ecosystem seemed more proofs of concept than anything I could actually build on, and as I struggled to get packages to work, the amount of code I personally had to understand and maintain (templating engines, database libs, routing libs) kept increasing. Do you think this is a fair criticism or has your experience been better?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37477319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427863889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> I think it's definitely fair --- not just for Clojure, but for open source in general: Programmers make open source libraries because they love to code, not because they love to make a great product experience. Things like documentation, support for use cases beyond their own, and maintainance beyond the initial few weeks/months of interest are all easy to let slip.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Guess so, but I've had much better luck with open-source Python and JavaScript libraries. Do you think it's mostly a function of community size\u2014like, if the community is big enough, eventually a well-supported library to do Thing X will emerge\u2014or something else?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Most of my day-to-day work now in Clojure is using tools that we have developed internally. E.g., we basically have our own interface to the cljs compiler with things like autoreload and html templating baked in. I decided not to release most of those tools because they weren't something that I wanted to support/maintain for other use cases.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866834,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> I don't know, I haven't really thought or studied the issue very rigorously.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't be too surprised if open source is closer to the exception than the norm, though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>As in, you think it's exceptional for people to open-source the tools they write?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The vast majority of programming is probably done in Excel spreadsheets for very specific tasks, with no thought to reusability or libraries for others to use.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427866989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, there's definitely a selection bias, right? You only see code that people open source.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are probably 100 implementations of, say, linked lists for every linked-list library on Github (maintained or otherwise)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, doubt that's true for LZ77 (de)compression though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure, there are some domains that are addressed by easily reused tools.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>algorithms are a good example</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah. It might be true for routers! My current work has a really terrible client-side router that a guy who quit wrote a year ago, which he had apparently wanted us to open source.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>But if we were starting from scratch today, we would use <a href=\"https://github.com/rackt/react-router\" target=\"_blank\" title=\"https://github.com/rackt/react-router\">react-router</a>, because it's well documented and the authors are clearly committed to supporting it and helping people use it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>That's the kind of project I didn't see much in Clojure land.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, for sure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I try to think about the incentives/motivations of authors when evaluating this sort of thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37478993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Feedback is a big one. If you get a bunch of people at other companies whacking on your library, they're gonna hit some problems before you do, and think of improvements you may not have thought of.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But since I don't know most open source people personally, I can't really expect much --- I don't know if an author is passionate about their project because they want to provide a free service for the greater good or because they just want to try their hand at writing an MVC framework for a weekend.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I think it's crucial when evaluating open source to be able to tell, a) if they're using it in production on something they care about, b) if it's solving a real problem existing stuff didn't, not just \"we thought it'd be cool to write our own\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479086,
            "is_me_message": false,
            "last_edit_timestamp": 1427867667,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Needless to say, most of my personal stuff on GitHub fails both tests :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> Agreed.  It's also worth thinking about what using someone else's project means.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>in terms of the consequences / constraints on your own project.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Oh?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>When I first started programming I tried to use lots of libraries (because reuse!), but I got burned enough times from version changes and big piles of other people's code that now I lean towards just \"reinventing the wheel\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37479171,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427867806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> fwiw these days I actively use Python, JavaScript, Clojure, ClojureScript, and Java OSS in anger. Of these I can only say I really enjoy interacting with Clojure/ClojureScript and I'm increasingly wary of dependencies regardless of language.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37499902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> with regard to your post and the original one - I think the question is not about \"bleeding-edge\" usually when this is bandied about it just means \"I live in my own tiny world and I haven't heard of that\". The only thing that really matters is how well you know the tool and whether you know that it will deliver benefits towards your real goals. Tech decisions generally need to factor in and are constrained by social dimensions: \"How will we staff this?\", \"How are we going to hand this off?\", \"Is training a part of our culture?\", etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500089,
            "is_me_message": false,
            "last_edit_timestamp": 1427905614,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think that makes sense <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for chiming in!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, thanks <span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> and <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> for your inputs as well</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so far, my experience with clojure &amp; clojurescript has been mostly exellent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>my big problem has been datomic</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and even then, datomic hasn't been terrible, just obviously harder for me to pick up than clojure(script)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i look at my productivity log, and i spent easily the most learning time on datomic rather than anything with clj(s)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW I also blogged about open source as a startup's competitive advantage, in case you're interested in hearing my thoughts: <a href=\"http://www.dillonforrest.com/startup/open-source-as-a-startups-competitive-advantage/\" target=\"_blank\" title=\"http://www.dillonforrest.com/startup/open-source-as-a-startups-competitive-advantage/\">http://www.dillonforrest.com/startup/open-source-as-a-startups-competitive-advantage/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> <span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427905996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>with datomic, i'm by far deepest in the sea of unknown unknowns</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for isntance, the other day i had a problem which i thought was simple, but i knew so little about the domain that i couldn't figure out the right google search terms to find the answer</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>eventually i came across a clojure google group post by stu halloway suggesting somebody else use :db/txInstant, and finally i realized that's what i was looking for too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> right people are succeeding w/ Datomic but I think it really needs a more definitive reference - i.e. a book. One problem is that Datomic has fairly steady stream of important enhancements. It's certainly more bleeding edge than Clojure and even ClojureScript (ClojureScript the language doesn't really change, but there is churn around tooling for various reasons).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>as a clojure noob, i'd say that my experience with clj and cljs so far is that both tools are definitely mature enough for any engineering team</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>you guys did seriously good work</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i have a mindblowing experience with clojurescript every single day</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and i wonder how i spent so much time in vanilla js</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>seriously can't understate how appreciative i am of your work!!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but yes, datomic.....</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's been tough for me D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> that's nice to hear. It's definitely getting to the point where I'm happier with it and there are big improvements slated to land in 2015.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>super excited to see it happen!! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i was actually thinking that if i redid hacker school, i'd like to make contributing to the clojurescript compiler my top project of interest</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37500786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> ha, yeah now that we have a lot of fundamental stuff behind us there's so many cool things to work on. High on the list of priorities are parallel analysis/builds, ES6/CommonJS/AMD integration, interop validation, and more type inference/optimization.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37501189,
            "is_me_message": false,
            "last_edit_timestamp": 1427906820,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1427906799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> if you are still taking this approach, maybe this is interesting: <a href=\"https://github.com/Matt-Esch/virtual-dom\" target=\"_blank\" title=\"https://github.com/Matt-Esch/virtual-dom\">https://github.com/Matt-Esch/virtual-dom</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37541005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1427973295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would anyone who knows Clojure be willing to pair with a total newbie?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37547826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427985871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pietromenna@gmail.com\">@Pietro Francesco Menna Ruiz Diaz (SP2'15)</span> sure!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37549794,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427988478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37554997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427995002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you at Recurse Center right now?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37554998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427995015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> thank you!!! :) super interesting!!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37555277,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1427995425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>How can we do to meet each other?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37555527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427995791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm sitting near the back. i'm going to get lunch soon and have a call at 3:30, but otherwise i'm available whenever</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37555782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Pair with a total beginner?",
            "submessages": [],
            "timestamp": 1427996051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting discussion! I'm also using Clojure/ClojureScript for my startup. I knew Python, mainly, but didn't know anything about webdev in general. Coming from a place of equal ignorance to webdev in Clojure or Python, I figured I might as well start off with a language I liked (more), and that would help me grow as a programmer, and potentially solve high-falutin' concurrency issues down the road. <br>\nIf I'd known more about web dev in Python, the all-important speed consideration would have made me go with Python. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37616179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428099226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>The inestimable Chris Granger kindly explained the principles of Reagent to me. I took his advice of \"pain-driven development\" (do as much as you can with your current knowledge, and reach for more powerful tools as it becomes too painful to work with old ones), and as a result am staying away from Datomic.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37616280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428099328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Of course if you survive as a startup, then you have to worry about finding developers. Obviously there are many fewer Clojurians than Pythonistas - but it seems in general more experienced developers are attracted to Clojure, and able to overcome the steep learning curve. So maybe the language will filter for quality, and help attract good folks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37616474,
            "is_me_message": false,
            "last_edit_timestamp": 1428099722,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428099507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>As <span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> said,  the ability to use essentially the same language to grab both Java and Javascript libraries was and is very attractive - but <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> speaks gospel truth, many libraries are sadly undocumented. This contributes to a steeper learning curve.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37616616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428099707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>maybe the language will filter for quality, and help attract good folks!</p>\n</blockquote>\n<p>I think this is basically sound reasoning... with a caveat. I'd work extra hard to make sure these are people who can handle unglamorous work, who can use, maintain, and build on existing software even if it's not perfect (instead of getting distracted trying to rewrite it), and who are able to recognize good ideas that come from other communities than their own, even from \"bad\" languages like JavaScript and PHP. And that does describe many Clojurists. But beware the functional programmer who sees other languages as beneath them.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37624235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428114483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> hey there, thanks for your feedback!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'd say that the learning curves for clojure and clojurescript are trivial as long as 1) you're not a beginner at programming and 2) you're already familiar with functional programming but in a more mainstream language like js or python</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>#2 is critical</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>if your mind just thinks in an object oriented way, it'll just always be hard to pick up clojure until you can change your programming paradigms in your head</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i've tried teaching functional programming to more experienced developers, and their struggle was definitely not due to them not knowing how to program</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647882,
            "is_me_message": false,
            "last_edit_timestamp": 1428176616,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>it was just due to the way they think</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>suddenly they can't stash state into any random object which is at hand and easily accessible</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and that's a hard thought transition for people</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's easier to make that transition first in a language that you already know</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then, once you're thinking functionally, learning all the parens and all the clojure sugar like destructuring are pretty simple tasks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i do believe that datomic is its own separate beast</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Let's steer clear of subtle ageism here, please, re: the \"older\" remark.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> thanks for keeping me in check!!!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>editing now</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i feel like a jerk now :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37647996,
            "is_me_message": false,
            "last_edit_timestamp": 1428176666,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>seriously, thanks!! <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, none of us are perfect, that's why the rules exist.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>rules mean nothing without ppl helping others to follow them, and you did so very respectfully <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I think you do have a good point about it being difficult to get used to not stashing state everywhere.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Did you know Java reasonably well before learning Clojure?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428176969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>nope lol</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>For me the JVM stuff could be tricky, and it's often assumed you already know.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so things like tuning the jvm for performance are beyond me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>however, leveraging all the tooling made available to the jvm has been pretty easy</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so far, as long as i imagine something might exist in java-land, i've found it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Well, like...I think <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span>, you mentioned this? Having to drop down to Java APIs to do network programming?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I also had to go look up the docs for various Java methods in order to make binary file I/O work.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah that's reasonable</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>So, there's places where there isn't an idiomatic Clojure way to do something, and the underlying Java machinery leaks through.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and going back to what you said about lots of clojure docs not being so great, java docs are typically very detailed, which is always refreshing no matter what language</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I guess, but sometimes the way you use the Java API is, instantiate an object, and then instantiate some other object, and then... and I'm like, shouldn't this whole thing just be one function?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm you know, i haven't done enough interop with java to know how messy java leakage into clojure might become</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>LOLOL</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah that's a good point</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i don't wanna say \"oh just encapsulate all of that into a function to hide the implementation details\" because i know that might turn into a leaky abstraction, but unfortunately right now i can't envision any clojure programmer saying anything other than that D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's a question that i'd love an aswer for as well</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Surprisingly, experienced Clojure programmers seem totally comfortable calling into Java APIs directly.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>some java classes, like `java.util.UUID, are stateless enough to not think twice about interop</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i am definitely not experienced enough to be comfortable doing that with most random java apis D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>another thing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i believe clojure and clojurescript create a lot of moral hazard when it comes to interop</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is all conjecture for me though, again due to my inexperience</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but i'm guessing this moral hazard exists because i assume clj(s) programmers create those leaky abstractions thinking that hiding implementation details inside of a function is enough</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i have nooooo ideaaaaaa</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for instance, with clojurescript, it's very tempting to just use the google closure library for basically everything, and most interop seems pretty stateless</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but there are a few closure features which require instantiating hefty classes</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i ended up hesitating with those and searching for separate solutions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but i almost didn't think about it and just slung code all over it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37648577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428177900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for those of you who might be curious, another great option is jsoup, which i believe is the predecessor of python's beautiful soup</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37649204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1428179507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>or maybe python's came first, i'm not sure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37649230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1428179525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so you can use <code>innerHTML</code> client-side, pass the html as a string to your backend, and then use jsoup to turn it into a more useful data structure of your choosing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37649253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how to quickly snapshot the dom?",
            "submessages": [],
            "timestamp": 1428179568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> with both Clojure &amp; ClojureScript I would use Java and Google Closure Library directly over any Clojure(Script) shim. They tend to be better documented and have less bugs for the obvious reasons.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37678704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428256207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> the one area where I avoid Closure is anything at the presentation layer - Closure widgets, SVG abstractions, Canvas abstractions. Quality tends to be significantly lower and usually where the OOP-y stuff comes in.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37681181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428260084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>gotcha, thanks for weighing in with that!! <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37685753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428265949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> also, I realized something else today about learning clojure without any meaningful java experience: I think the most important things are to 1) know how all the interop syntax works and 2) experiment in the repl</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37690211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428271853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>without either knowledge of interop syntax or a repl, i think production clojure would be substantially harder for a beginner</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37690228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428271887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>of course, i'm still a beginner myself, so my opinion might change as i learn more D:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37690237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "using clojure for my startup",
            "submessages": [],
            "timestamp": 1428271911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>What are the advantages/disadvantages doing concurrent network operations over a single socket using Aleph ( <a href=\"http://ideolalia.com/aleph/literate.html#aleph.examples.tcp\" target=\"_blank\" title=\"http://ideolalia.com/aleph/literate.html#aleph.examples.tcp\">http://ideolalia.com/aleph/literate.html#aleph.examples.tcp</a> ) vs. <a href=\"http://clojure.java.io\" target=\"_blank\" title=\"http://clojure.java.io\">clojure.java.io</a>, which I believe would require instantiating a new thread for each connection. Aleph looks like it might be more trouble than it's worth.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37751832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aleph vs. Java socket?",
            "submessages": [],
            "timestamp": 1428347272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> Java NIO is also an option and probably the one I would go with if I don't need Aleph abstractions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37752032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aleph vs. Java socket?",
            "submessages": [],
            "timestamp": 1428347458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Truth is, I already have <a href=\"http://clojure.java.io\" target=\"_blank\" title=\"http://clojure.java.io\">clojure.java.io</a> working but not supporting concurrency at the moment. At a glance, Java NIO looks too low level for my purposes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37753489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aleph vs. Java socket?",
            "submessages": [],
            "timestamp": 1428349117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> a previous HSer wrote this up <a href=\"http://pepijndevos.nl/2011/06/18/nio-in-clojure.html\" target=\"_blank\" title=\"http://pepijndevos.nl/2011/06/18/nio-in-clojure.html\">http://pepijndevos.nl/2011/06/18/nio-in-clojure.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37754542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aleph vs. Java socket?",
            "submessages": [],
            "timestamp": 1428350475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all! I have lists like <code>'(:a :b :c :d ...)</code> of arbitrary lengths. I'd like to turn these lists into <code>'(:hello :a :hello :b :hello :c :hello :d ...)</code>.</p>\n<p>Right now, I'm doing this by <code>(cons :hello (interpose :hello my-list))</code>. However, I'm sure that's not the most elegant way to do it. Any suggestions?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37769788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "creating new collection similarly to interpose",
            "submessages": [],
            "timestamp": 1428373575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> (interleave (repeat :hello) '(:a :b :c :d :e)) ;; =&gt; (:hello :a :hello :b :hello :c :hello :d :hello :e)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37773028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "creating new collection similarly to interpose",
            "submessages": [],
            "timestamp": 1428380282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>wow that's so much cleaner!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37798911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "creating new collection similarly to interpose",
            "submessages": [],
            "timestamp": 1428428788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> !! <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37798912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "creating new collection similarly to interpose",
            "submessages": [],
            "timestamp": 1428428788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is anyone aware of a curated list of the best Clojure talks from the Conj or other conferences?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37838995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best Clojure talks",
            "submessages": [],
            "timestamp": 1428498283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aside-- I really enjoyed this one from Zach Tellman at the recent Conj <a href=\"https://www.youtube.com/watch?v=3oQTSP4FngY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3oQTSP4FngY\">https://www.youtube.com/watch?v=3oQTSP4FngY</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=3oQTSP4FngY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3oQTSP4FngY\"><img src=\"https://i.ytimg.com/vi/3oQTSP4FngY/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37838996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best Clojure talks",
            "submessages": [],
            "timestamp": 1428498298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone have a handly little fn that slugifies a string in clojurescript? About to start porting one from understore.string</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37869159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "slugify in clojurescript",
            "submessages": [],
            "timestamp": 1428534443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Just these two on Rich Hickey's talks, <a href=\"https://clojurefun.wordpress.com/2012/08/06/great-clojure-videos-by-rich-hickey/\" target=\"_blank\" title=\"https://clojurefun.wordpress.com/2012/08/06/great-clojure-videos-by-rich-hickey/\">https://clojurefun.wordpress.com/2012/08/06/great-clojure-videos-by-rich-hickey/</a>, <a href=\"https://thechangelog.com/rich-hickeys-greatest-hits/\" target=\"_blank\" title=\"https://thechangelog.com/rich-hickeys-greatest-hits/\">https://thechangelog.com/rich-hickeys-greatest-hits/</a>. <br>\nAnd LispCast did short interviews with the upcoming speakers at a Clojure conference: <a href=\"http://www.lispcast.com/\" target=\"_blank\" title=\"http://www.lispcast.com/\">http://www.lispcast.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37947249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best Clojure talks",
            "submessages": [],
            "timestamp": 1428678497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Thanks that snippet was helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 37962121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aleph vs. Java socket?",
            "submessages": [],
            "timestamp": 1428699190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I'm trying to make a div expand after being clicked. I found a little JS on StackOverflow I'd like to try out, but I'm having n00b issues converting it to ClojureScript.<br>\nHere's the CSS:</p>\n<div class=\"codehilite\"><pre>#sample {\n    border: 1px solid black;\n    height: 10px;\n    padding: 12px;\n    overflow: hidden;    \n}\n</pre></div>\n\n\n<p>Here's the JS I want:</p>\n<div class=\"codehilite\"><pre>document.getElementById(&quot;sample&quot;).onclick = function() {\n    this.style.height = &#39;auto&#39;;\n}\n</pre></div>\n\n\n<p>And here's my ClojureScript attempt:</p>\n<div class=\"codehilite\"><pre>   [:div {:id &quot;sample&quot;}\n    [:p &quot;This is actually a really long paragraph, which goes far beyond the bound set in the CSS.&quot;]]\n   [:input {:type &quot;button&quot; \n             :class &quot;btn btn-info&quot; \n             :value &quot;click me&quot;\n             :on-click #(let [thing (.getElementbyId js/document &quot;sample&quot;)]\n                          (set! (-&gt; thing .-height .-style) &quot;auto&quot;))}]\n</pre></div>\n\n\n<p>That function doesn't return an error - but it doesn't do anything either! I'm still learning JS interop, thanks for any help!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38127149,
            "is_me_message": false,
            "last_edit_timestamp": 1429037014,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429036959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> can you verify your thing is even getting the click event?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38127268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429037160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>When I substitute another function to change the page, like <code>#(change-page future-page)</code>, that works fine. So the button responds to click events. I'm wondering if the JS \"thing\" is messing me up.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38127487,
            "is_me_message": false,
            "last_edit_timestamp": 1429037845,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429037407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Okay, I've arrived at a working solution. Using the prismatic/dommy library, a DOM manipulation library, the button's on-click function can read:</p>\n<div class=\"codehilite\"><pre>  [:input {:type &quot;button&quot; \n             :class &quot;btn btn-info&quot; \n             :value &quot;click me&quot;\n             :on-click #(set! (-&gt; (sel1 :#sample) .-style .-height) &quot;auto&quot;)}]\n</pre></div>\n\n\n<p>This leaves my JS interop somewhat less than satisfactory, but is a more idiomatic solution.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38129228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429039436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> the previous thing appears to me that it should it work, but it looks like you are using Sablono or some other such thing, hard to say if there's some other bad interaction happening.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38130525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429041116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Well, it's reassuring that it looks like it should work - at least I was on the right track! It's a barebones Reagent app so far, without any extra libraries other than Dommy. Go figure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38136873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429048637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"timothy.roy@protonmail.ch\">@Timothy Roy (W2'15)</span> yeah not particularly familiar with Reagent or Dommy.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38137756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "JS -> CLJS, and expanding div",
            "submessages": [],
            "timestamp": 1429049735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rmcase@gmail.com\">@Ryan Case (S'14)</span> <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> <span class=\"user-mention\" data-user-email=\"sarah.groff.palermo@gmail.com\">@Sarah Groff-Palermo (SP1'15)</span> <span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> I just posted a related question to <a href=\"http://hoplon.discoursehosting.net/t/recommended-hoplon-cljs-development-workflow/475\" target=\"_blank\" title=\"http://hoplon.discoursehosting.net/t/recommended-hoplon-cljs-development-workflow/475\">http://hoplon.discoursehosting.net/t/recommended-hoplon-cljs-development-workflow/475</a> and then discovered this thread! In case you want to follow any resulting discussion over there.</p>\n<p>And if any other CLJS connoisseurs have anything to add (<span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> anyone else I should ping?) would be much appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38183693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429129255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jabronson@gmail.com\">@Josh Bronson (W'12)</span> I don't use Hoplon so I can't say anything about that. With regards to Cursive, I only have effusive praise. I use Cursive now for all my Clojure work at Cognitect, all my ClojureScript compiler open source work, and I'm developing the next version of Om with it. It *rocks*. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38184609,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429130317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, an endorsement like that from you is super valuable! Is there anything you'd recommend to someone with zero IntelliJ experience for getting up to speed with it (beyond <a href=\"https://cursiveclojure.com/userguide/\" target=\"_blank\" title=\"https://cursiveclojure.com/userguide/\">https://cursiveclojure.com/userguide/</a>)? Also, are you using a paid version of IntelliJ? Having never used IntelliJ, I was just going to start with Community Edition, but have no idea what the paid version buys you.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38184808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429130632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jabronson@gmail.com\">@Josh Bronson (W'12)</span> IntelliJ takes the cake as the simplest and easiest to gradually learn IDE I've ever encountered. My only tip is to learn how to open the command window (Like M-x in Emacs). Community Edition works great and that's what I use. Cursive itself may eventually cost money but is free at the moment.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38184929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429130766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Awesome, thanks <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38184971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429130812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>appreciate hearing the vote for cursive clojure as well!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38185843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429131870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> I also have Emacs fingers and of all the alternatives I've tried (and I've tried them all at one point or another) only IntelliJ/Cursive has delivered acceptable simulation of basic operations (including sticky selection, kill ring and paredit).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38187295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure WebDev Environment",
            "submessages": [],
            "timestamp": 1429133602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Just posted <a href=\"http://hoplon.discoursehosting.net/t/cljs-boot-one-lang-to-rule-them-all/480\" target=\"_blank\" title=\"http://hoplon.discoursehosting.net/t/cljs-boot-one-lang-to-rule-them-all/480\">http://hoplon.discoursehosting.net/t/cljs-boot-one-lang-to-rule-them-all/480</a> and would be super interested to hear anyone here's thoughts on this! <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> anyone else I should ping? Thanks for any responses you may have.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38193908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429142589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>There was talk of Om Native becoming a thing, no? David would have to comment :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38194122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429142882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>(where Om is David's ClojureScript wrapper around React, and Om Native would be analogous)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38194168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429142906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's already great support for building iOS apps with ClojureScript, <a href=\"https://github.com/omcljs/ambly\" target=\"_blank\" title=\"https://github.com/omcljs/ambly\">https://github.com/omcljs/ambly</a>, <a href=\"https://github.com/mfikes/shrimp\" target=\"_blank\" title=\"https://github.com/mfikes/shrimp\">https://github.com/mfikes/shrimp</a>. Om Native is around the corner, but it's waiting for React Native to settle down, for us to sort out a building strategy, and for Om/Relay to see the light of day. But yes, in the longterm I suspect you'll be able to write Clojure(Script) and have a good workflow regardless of target.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38194461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429143306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be at Clojure West next week. Anyone else going? RC drinks after one of the days?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38222341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429198742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tried out Cursive yesterday coming from emacs. One small thing is bothering me - barf forward barfs on to a new line. Any way to fix this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38222544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Cursive barf forward",
            "submessages": [],
            "timestamp": 1429198980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wish I was!  Have fun!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38224704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429201369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks for the info <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>! Cool to see there's such a good option for iOS dev already, and that Om Native will offer something cross-platform for mobile. Wonder if for desktop anyone is doing anything in CLJS on NW.js yet<br>\nWonder what the best people/ways to follow what's going on in the CLJS world are, not sure I'm finding the right forums. I need a post like <a href=\"https://medium.com/@dan_abramov/my-react-list-862227952a8c\" target=\"_blank\" title=\"https://medium.com/@dan_abramov/my-react-list-862227952a8c\">https://medium.com/@dan_abramov/my-react-list-862227952a8c</a> but for CLJS!<br>\nAwesome to hear in the longterm CLJS could offer a good workflow on all these platforms. Seems to me like if Om Native takes off for mobile, and something (maybe built on NW.js) takes off for desktop, CLJS could eclipse CLJ! <img alt=\":bangbang:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/bangbang.png\" title=\":bangbang:\"> Is that nuts?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38225134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429201871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> I live in PDX and am going to Clojure/West.  Would be happy to grab a drink.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38230969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429209822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be there!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429210219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome! See you on Monday!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38231993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429211194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I'm moving from NYC to PDX in June so I'd love to find out about tech stuff in Portland.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38232282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429211560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think <span class=\"user-mention\" data-user-email=\"Dwaynekj@gmail.com\">@Dwayne Jones (F'12)</span> will be there!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38242811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure West",
            "submessages": [],
            "timestamp": 1429224884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i feel like 80 chars per line might be a bit short for a lisp, but i'm not really sure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38288051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429305858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>is there a general recommendation?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38288055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429305866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>80 chars works great for me! Why do you feel like it might be short?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429308976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sometimes in Om/templating code it can be a tad short, but liberal indentation / functionalization usually works for me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you have some examples?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Clojure style guide recommends 80c/l too, <a href=\"https://github.com/bbatsov/clojure-style-guide#80-character-limits\" target=\"_blank\" title=\"https://github.com/bbatsov/clojure-style-guide#80-character-limits\">https://github.com/bbatsov/clojure-style-guide#80-character-limits</a> and IIRC the same is true everywhere in clojure.core, except in maybe some java code</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks bud!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i felt 80 might be too short because the vast majority of clj source code that i read exceeds 80</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but then again, i guess most code in general disregards character limits</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38290482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "how many chars per line for clj code?",
            "submessages": [],
            "timestamp": 1429309392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Added ambly and shrimp to my growing list of Clojure/ClojureScript libraries - very cool!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38318951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS: One Lang To Rule Them All?",
            "submessages": [],
            "timestamp": 1429381112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all, I'm mainly using <code>cons</code> when I'm creating a lazy sequence. However, it adds new items to the head instead of the tail. Right now, I'm just applying <code>reverse</code> after I'm doing <code>cons</code>-ing, however that doesn't seem very elegant to me. Is there a better way to add to the tail?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38387311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429544111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is <code>conj</code> what you're looking for?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38389216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429546797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>conj</code>'s behavior is appropriate for me if the input collection is a vector only</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429547985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>conj</code> is interesting because its behavior depends on the type of collection that goes into it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429547998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for vectors, it inserts at the tail</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>for lists, it inserts at the head</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think i read somewhere that the reason <code>conj</code> behaves differently for all these collection types is that they wanna keep performance consistent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Perhaps the issue is that you're using insertion-order-dependent functions like <code>first</code> and <code>rest</code> to process this structure? If that's the case, you should be able to replace those calls with something like <code>peek</code> and <code>pop</code>, which will just do the efficient thing for the type of data you're working with.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>But I think I'd need more context to answer this correctly</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for chiming in! <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, thanks <span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> for the input as well :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>performance isn't actually the priority right now thankfully. just the order of the list is most important.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i was doing some slightly more advanced filtering where <code>filter</code> wasn't appropriate, so i was implementing my custom fancy filter with <code>loop..recur</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>because recursion just makes me happy, idk</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so i was aggregating the new collection in the recursive loop, and i was adding to it with <code>cons</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390466,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, to preserve the correct order of all the items in my filtered list, i built the end result with <code>cons</code> and then applied <code>reverse</code> at the very end</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>these all turned out to be implementation details</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ since performance wasn't really a concern especially</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but i felt like i was doing something wrong and might be missing something o__O</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, gotcha. You could consider doing this type of thing instead:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">my-fun</span> <span class=\"p\">[</span><span class=\"nv\">coll</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">loop </span><span class=\"p\">[</span><span class=\"nv\">new-coll</span> <span class=\"p\">(</span><span class=\"nf\">empty</span> <span class=\"nv\">coll</span><span class=\"p\">)</span>, <span class=\"nv\">coll</span> <span class=\"nv\">coll</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"nf\">cond</span>\n      <span class=\"p\">(</span><span class=\"nf\">empty?</span> <span class=\"nv\">coll</span><span class=\"p\">)</span> <span class=\"nv\">new-coll</span>\n      <span class=\"p\">(</span><span class=\"nf\">keep?</span> <span class=\"p\">(</span><span class=\"nb\">peek </span><span class=\"nv\">coll</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">recur</span> <span class=\"p\">(</span><span class=\"nb\">conj </span><span class=\"nv\">new-coll</span> <span class=\"p\">(</span><span class=\"nb\">peek </span><span class=\"nv\">coll</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">pop </span><span class=\"nv\">coll</span><span class=\"p\">))</span>\n      <span class=\"ss\">:else</span> <span class=\"p\">(</span><span class=\"nf\">recur</span> <span class=\"nv\">new-coll</span> <span class=\"p\">(</span><span class=\"nb\">pop </span><span class=\"nv\">coll</span><span class=\"p\">)))))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>If I'm not mistaken, this will keep the same insertion order of the original collection, and return a new collection of the same type</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>actually\u2026 wait, I think I'm mistaken (this is what I get from typing something out without a repl open)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, this reverses everything. I'm not sure what the right way to approach this is, then.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38390640,
            "is_me_message": false,
            "last_edit_timestamp": 1429548848,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429548833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>hehe no problem :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38392527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429551577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks much!!! :D <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38392532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cons, but adding to tail instead of head",
            "submessages": [],
            "timestamp": 1429551585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>This appears to be a genuinely interesting problem: how can you take a function name as a string?</p>\n<p>1. The <code>name</code> function works for keywords, etc - but not for functions! This, I think, is because Clojure evaluates the function before applying the name function to it - which defeats the purpose of the name function.</p>\n<p>2. Here is a macro to convert a function name to a string. This works well, but see 3, below, for difficulties calling this macro from another function.</p>\n<div class=\"codehilite\"><pre>(defmacro fn-name\n  [f]\n  `(-&gt; ~f var meta :name str))\n</pre></div>\n\n\n<p>This macro works by getting the meta-data which is attached to every function, and then turning that into a string. We need a macro (I think) because Clojure evaluates arguments to ordinary functions before applying the function to them, and we don't want that.</p>\n<p>3. When I try to call that weird little macro from another function, I get an error message: \"unable to resolve var: x in this context.\"</p>\n<div class=\"codehilite\"><pre>(defn hello [] &quot;hello&quot;)\n(defn hello-to-string [x] (fn-name x))\n</pre></div>\n\n\n<p>(Of course, I don't want to just wrap the macro inside a function - I'd like to use the stringified function name! This is just an example.)</p>\n<p>Perhaps Clojure attempts to evaluate x before passing it to the macro - that is my only guess. But to prevent x from getting evaluated, it seems I need yet another macro! Oh noes! Macro turtles all the way down!</p>\n<p>4. Note also that to use macros in ClojureScript, you define the macros in a separate Clojure file, and then require them inside your ClojureScript file. I considered moving the macro clients inside the macro, but I'm not sure that will allow Javascript interoperability.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38451810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429647653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Let me make sure I'm understanding what you want to do. You can do the meta stuff without a macro:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">say-hi</span> <span class=\"p\">[</span><span class=\"nv\">to-whom</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">&quot;Hi &quot;</span> <span class=\"nv\">to-whom</span> <span class=\"s\">&quot;!&quot;</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">say-hi</span> <span class=\"k\">var </span><span class=\"nb\">meta </span><span class=\"ss\">:name</span> <span class=\"nv\">str</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429648892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you saying you'd like to be able to use a function, knowing only its name?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429648914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like, given the name is \"f\", go call it with some arguments?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429648926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I'd like to be able to do:</p>\n<div class=\"codehilite\"><pre>(defn string-me [x]\n(-&gt; x var meta :name str))\n</pre></div>\n\n\n<p>This doesn't work - it can't resolve the variable x.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38452931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Concretely, I'd use this function like this:</p>\n<div class=\"codehilite\"><pre>(defn make-url [component-page]\n    (str &quot;/&quot; (string-me component-page)))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, got it. I don't know Clojure very well, but I imagine it's a problem with <code>var</code>s, not variables. The <code>var</code> thing is a special form that needs to be passed a symbol that evaluates to a var.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>But in general, I don't think you can really make that work.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Basically, a Clojure var (apparently) has a <code>:name</code>, but when you pass a function to <code>make-url</code>, you're as far as I know not passing the var, you're passing the actual function--which no longer has a name.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, that sounds right! </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>It seems a little crazy that we can't stop the function name from being evaluated, and just take the name as a symbol, more easily/generally. I could be wrong, it just feels like there should be a way to do this...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess I'm used to thinking of functions as not having names--I didn't even know that Clojure vars kept track of their names.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could just pass the var directly to <code>make-url</code>, so instead of taking a <code>component-page</code>, it would take a <code>component-page-var</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't have thought to do it that way (since now you're forcing people to use vars, instead of, say, an anonymous function).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm. I may need to refine my thinking here. In <code>(defn hello [] \"hello\")</code>, is <code>hello</code> a symbol or a var?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're defining a var there.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can look up the var with <code>(var hello)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the way, I'm definitely not being very clear here--I'm not the best person to ask. I should read through <a href=\"http://clojure.org/vars\" target=\"_blank\" title=\"http://clojure.org/vars\">http://clojure.org/vars</a> again.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Ha, well, I'm probably asking fuzzy questions also!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>(name (var hello)) doesn't work in the repl, though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>What's <code>name</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429649957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you do <code>(:name (meta (var hello)))</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>For keywords, <code>name</code> will give back a string. </p>\n<div class=\"codehilite\"><pre>(name :a)\n&quot;a&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Yes you can! You can even do: <code>(str (:name (meta (var hello))))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>BUT, you cannot do: <code>(defn stringify-please [x] (str (:name (meta (var x)))))</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>It won't work inside a function. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, you'd need to pass the <code>(var x)</code> as the argument to the function, not do it inside.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38453853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>With <code>name</code>, it needs to operate on a String, symbol, or keyword. When you say <code>(name hello)</code> though, you're passing it a function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>You're completely right, and that works much better!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>(defn string-me [x] (str (:name (meta x))))\n(string-me (var hello))\n&quot;hello&quot;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>However, I can't call our new <code>string-me</code> from another function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you show me an example?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p><code>(defn try-me [x] (string-me (var x)))</code> yields another RuntimeException: unable to resolve var: x</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yeah, you just can't do that :) There's no way to turn that <code>x</code> into a var; it would need to just already be a var (since you passed a var to try-me).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>As far as I know.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That <code>x</code> is bound to a regular Clojure value (which might be a var, if you passed one in); there's no way to go backwards to a var.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>These explanations are terrible, I'm in real distress writing this, some Clojure person please chime in which a good explanation :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, suppose you have the following:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">hi</span> <span class=\"p\">[]</span> <span class=\"s\">&quot;hi&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">sup</span> <span class=\"nv\">hi</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\">try-me</span> <span class=\"nv\">sup</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454435,
            "is_me_message": false,
            "last_edit_timestamp": 1429650782,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I'm beginning to be afraid you might be right - though I hate to admit defeat!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>In my example, we're passing the *value* of <code>sup</code>, aka a function. What var should try-me pick? hi or sup?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>They both refer to the same value!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm... let me go flip through the Clojure docs on vars, so I can try to say this coherently!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38454619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429650978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>So, if we have <code>(defn string-me [x] (str (:name (meta (var x)))))</code>, Clojure says it cannot resolve the var x, because we have not bound this variable to anything. This is a setback, since we would have liked to be able to pass in arbitrary parameters. But we're not discouraged, we rewrite string-me:<br>\n<code>(defn string-me [x] (str (:name (meta x))))</code>. To use this, we have to pass it a variable bound to something, which has var called on it: (var hello).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429651378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>But if our goal is to define a function which takes an arbitrary function and turns its name into a string, then this tactic has only pushed our problem back a step.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429651420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p><code>(defn call-string-me [x] (string-me (var x)))</code> will just complain that x is an unbound variable!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429651469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>So it seems that yes, Clojure will allow us to get the variable name - but there is a limit to how general this can get.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429651628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>The macro gets around this limit, but when we use the macro inside a function, we get the same error message, indicating that we have hit the same problem.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429651723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess the way I think about this is just that arbitrary functions simply don't have names--vars have names.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429652042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>An arbitrary function could be an anonymous function, and once you pass a variable into a function, it's automatically anonymized.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38455604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429652075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>I think you're right. Unless I can find some tricksy JavaScript way of doing it, I'll need to use another macro, or just use another strategy altogether. At least I have a slightly better understanding of vars and names!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38456880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429653559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks so much for helping me work through that - pair programming at a distance</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38457441,
            "is_me_message": false,
            "last_edit_timestamp": 1429654298,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429654194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p>Puts his finger on the problem: <a href=\"http://www.braveclojure.com/writing-macros/#6_3__Macros_all_the_way_down\" target=\"_blank\" title=\"http://www.braveclojure.com/writing-macros/#6_3__Macros_all_the_way_down\">http://www.braveclojure.com/writing-macros/#6_3__Macros_all_the_way_down</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38461602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Function names as strings",
            "submessages": [],
            "timestamp": 1429658734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a shortcut for:</p>\n<div class=\"codehilite\"><pre>(fn [first-name]\n{:first-name first-name})\n</pre></div>\n\n\n<p>Basically I want to turn my variable name into a keyword and then associate that with the value bound to the variable</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38545197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429799579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not that I know of.  But I wonder why are you trying to do that?  Is that actually the function you're trying to write?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38545619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429800115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could write a macro to do it though!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38545719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429800238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nah I'm messing around with honeysql</p>\n<div class=\"codehilite\"><pre>(defn create-user\n  [first-name last-name email password]\n  (-&gt; {:insert-into user-table}\n      (values [{:last_name last-name :first_name first-name :email email :password password}])))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38545733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429800243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea that's what I'm thinking of doing but wanted to check before I go down that path</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38545773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429800264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds interesting.  I'm thinking about it more and I'm not totally sure how I would write a macro to do that.  Would be interested to see what you come up with.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38546063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429800678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"geoffpshannon@gmail.com\">@Geoff Shannon (F2'14)</span> </p>\n<div class=\"codehilite\"><pre>(defmacro var-map [&amp; args]\n  (apply hash-map (mapcat (fn [x] [(keyword (name x)) x]) args)))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38547247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429801993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woooo my first macro ever</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38547254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429802003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now the function looks like this:</p>\n<div class=\"codehilite\"><pre>(defn create-user\n  [first-name last-name email password]\n  (-&gt; {:insert-into user-table}\n      (values [(var-map first-name last-name email password)])))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38547432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429802212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38548039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429802970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>first macro!!! <img alt=\":hand:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/hand.png\" title=\":hand:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38613032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Building a hash map from variables",
            "submessages": [],
            "timestamp": 1429908632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=ZK0WtcppZuA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ZK0WtcppZuA\">https://www.youtube.com/watch?v=ZK0WtcppZuA</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=ZK0WtcppZuA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ZK0WtcppZuA\"><img src=\"https://i.ytimg.com/vi/ZK0WtcppZuA/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38638030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependent types for clojure",
            "submessages": [],
            "timestamp": 1429966098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't realize the typed racket &amp; typed clojure systems even could be extended to do dependent types, so this is really neat for me!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38638080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependent types for clojure",
            "submessages": [],
            "timestamp": 1429966271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm having trouble defining and calling my own protocol methods on Om components. <br>\nI'd like my component to call om/build on its argument and also call a separate custom protocol method, but om/build needs a function that returns a reify instance, and calling a custom protocol method requires direct access to the reify instance. </p>\n<p>Evaluating the component before calling the protocol method separately from the final om/build call feels clunky for some reason.<br>\nIs there a better way to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38660354,
            "is_me_message": false,
            "last_edit_timestamp": 1430022660,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430022034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">higher-order</span> <span class=\"p\">[</span><span class=\"nv\">other-component</span><span class=\"p\">]</span> <span class=\"c1\">; other-component is a fn that will return reify instance</span>\n  <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">app</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"nf\">om/component</span>\n      <span class=\"c1\">;; won&#39;t work, need to evaluate other-component first</span>\n      <span class=\"p\">(</span><span class=\"nf\">my-custom-protocol-method</span> <span class=\"nv\">other-component</span><span class=\"p\">)</span> \n      <span class=\"c1\">;; no problem</span>\n      <span class=\"p\">(</span><span class=\"nf\">om/build</span> <span class=\"nv\">other-component</span> <span class=\"p\">{})))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38660439,
            "is_me_message": false,
            "last_edit_timestamp": 1430022501,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430022335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I just bite the bullet and evaluate other-component separately from the final om/build call, I end up with two different reify instances that don't share their state! That's not my intention, and I'm sure there's a better way to do this. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38660724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430023112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> Very cool. At 15:20 is an example of how types can help not just with correctness, but also performance. Typed Racket already takes advantage of this. IIUC this will extend that. /cc <span class=\"user-mention\" data-user-email=\"samth@cs.indiana.edu\">@Sam Tobin-Hochstadt</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38677562,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dependent types for clojure",
            "submessages": [],
            "timestamp": 1430069054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>For a second I thought I had solved it by using <code>specify</code>: </p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">game-date-field</span> <span class=\"p\">[</span><span class=\"nv\">update-path</span> <span class=\"nv\">update-fn</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">specify</span> \n    <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">app</span> <span class=\"nv\">owner</span><span class=\"p\">]</span>\n      <span class=\"p\">(</span><span class=\"nf\">reify</span>\n        <span class=\"nv\">om/IInitState</span>\n        <span class=\"p\">(</span><span class=\"nf\">init-state</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:text</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">})</span>\n        <span class=\"nv\">om/IRenderState</span>\n        <span class=\"p\">(</span><span class=\"nf\">render-state</span> <span class=\"p\">[</span><span class=\"nv\">this</span> <span class=\"nv\">state</span><span class=\"p\">]</span>\n          <span class=\"p\">(</span><span class=\"nf\">html</span> \n            <span class=\"p\">[</span><span class=\"ss\">:div</span> \n             <span class=\"p\">[</span><span class=\"ss\">:label</span> <span class=\"s\">&quot;Date&quot;</span><span class=\"p\">]</span>\n             <span class=\"p\">[</span><span class=\"ss\">:input</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"s\">&quot;text&quot;</span> \n                      <span class=\"ss\">:value</span> <span class=\"p\">(</span><span class=\"ss\">:text</span> <span class=\"nv\">state</span><span class=\"p\">)</span>\n                      <span class=\"ss\">:onChange</span> \n                      <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">e</span><span class=\"p\">]</span> \n                        <span class=\"p\">(</span><span class=\"nf\">om/set-state!</span> <span class=\"nv\">owner</span> <span class=\"ss\">:text</span> <span class=\"p\">(</span><span class=\"nb\">.. </span><span class=\"nv\">e</span> <span class=\"nv\">-target</span> <span class=\"nv\">-value</span><span class=\"p\">)))}]]))))</span>\n    <span class=\"nv\">form/IField</span>\n    <span class=\"p\">(</span><span class=\"nf\">value</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">om/get-state</span> <span class=\"nv\">owner</span> <span class=\"ss\">:text</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nf\">validation-error?</span> <span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span> \n      <span class=\"p\">(</span><span class=\"nb\">if-not </span>\n        <span class=\"p\">(</span><span class=\"nf\">validate-date</span> <span class=\"p\">(</span><span class=\"nf\">om/get-state</span> <span class=\"nv\">owner</span> <span class=\"ss\">:text</span><span class=\"p\">))</span> \n        <span class=\"s\">&quot;Please enter a date in mm/dd/yyyy format&quot;</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nf\">update-state</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> \n      <span class=\"p\">(</span><span class=\"nf\">om/transact!</span> <span class=\"nv\">app</span> <span class=\"nv\">update-path</span> <span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">update-fn</span> <span class=\"p\">(</span><span class=\"nf\">value</span> <span class=\"nv\">this</span><span class=\"p\">))))))</span>\n</pre></div>\n\n\n<p>But alas, my protocol methods all rely on being able to access the om component's state! (<code>owner</code> is not in scope when I call specify, and isn't closed over for my protocol methods to access)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38679595,
            "is_me_message": false,
            "last_edit_timestamp": 1430074288,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430074269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ed38804b786f73ce2f1b155dfb0a777?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> what if you create a type which implements your protocols then make an instance of the type within the Om lifecycle methods?</p>\n<p>for instance:</p>\n<div class=\"codehilite\"><pre>(deftype Field [owner] \n  form/IField\n  (value [this] ...)\n  (validation-error? [this] ...))\n</pre></div>\n\n\n<p>I then write template fns that generate sablono using an instance of the type.</p>\n<p>It's not a higher-order component, but idk if that's necessary.</p>\n<p>You could also pass that instance into your component as a little bundle of functionality if you want to create it outside the component.</p>\n<p>I try to draw the line between components and template fns based on who\u2019s holding the state and who needs to know about the state.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38861732,
            "is_me_message": false,
            "last_edit_timestamp": 1430394565,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "brianrubinton@gmail.com",
            "sender_full_name": "Brian J. Rubinton (S'13)",
            "sender_id": 2109,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430393469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, I see! sure, I'll try that.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38909049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430477915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've started working on a web app but I haven't seen much info out there on clojure error handling. <br>\nThis is what I have so far <a href=\"https://gist.github.com/MattParker89/4941e713ed4e039e1c05\" target=\"_blank\" title=\"https://gist.github.com/MattParker89/4941e713ed4e039e1c05\">https://gist.github.com/MattParker89/4941e713ed4e039e1c05</a></p>\n<p>I'm hoping to get some feedback on what I'm doing with errors. The basics are that handler.clj handles all of the web facing code. user.clj handles the core logic and doesn't know anything about http. It either returns data or errors. The functions in handler.clj handle those errors.</p>\n<p>The way I'm passing back errors is through keywords. In user.clj I have a deferror macro that binds a keyword to a symbol. This just allows me to see all of the possible errors up front. I'm only allowing functions to return one of the predefined errors. I haven't seen keywords used for error types in clojure so maybe this isn't the best way.</p>\n<p>The other thing that I feel might not be clojure-y is in handler.clj I'm essentially dispatching on the error type which seems like a problem for defmulti but the error handling is context specific so it doesn't make sense to define something outside of a handler.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38909987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430480220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> I wrote a blog post on what I learned about error-handling in Clojure: <a href=\"http://blog.oskarth.com/simple-error-handling-using-slingshot-and-clj-http\" target=\"_blank\" title=\"http://blog.oskarth.com/simple-error-handling-using-slingshot-and-clj-http\">http://blog.oskarth.com/simple-error-handling-using-slingshot-and-clj-http</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38910388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430481142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know if anything there might be useful</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38910393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430481175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your way works, but I'd avoid macros unless you absolutely have to. It makes it hard to reason about the code. The Clojure way would probably be to conform to the platform it's running on, which means java exception and catching them</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38910402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430481239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> Thanks! I actually came across your blog post when I was looking into this. <br>\nI'm really not a fan of try/catch. It's easy to make the exception somebody else's problem. You can easily write code that assumes nothing ever goes wrong. I find that if an error is returned it's the opposite, you have to explicitly ignore the error.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a good presentation at some conference about various error/exception styles, can't find it right now though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was hesitant about using try/catch initially, because it felt unlispy, but I haven't found anything that is more satisfactory</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to use Rich Hickey's framework when thinking about this: <a href=\"http://blog.oskarth.com/the-simplicity-toolkit\" target=\"_blank\" title=\"http://blog.oskarth.com/the-simplicity-toolkit\">http://blog.oskarth.com/the-simplicity-toolkit</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911493,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that it's a problem if you write code that encourages you to ignore errors, and that it should probably be explicit</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>One idiomatic thing I like about Scala is the Option[Foo] type</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So when you do your pattern matching on some data query, say, you either get a Some or a None, and then you either handling it or throw an exception</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And you can choose where to handle it, but  you always have to think about exceptional states as you are pattern matching</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea i love that but sadly we have no types</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It depends on how sophisticated your system is too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you have exception tracking, various noise levels and your own exceptions, you can get a nice view of your system</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430483964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>We had this at my last company using pagerduty, so every morning there were exceptions of various degrees of seriousness. It was also a distributed system so things kept retrying until they succeeded (reference matching, financial system)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911642,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>that is definitely not viable for a small self-contained app though</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another reasonable add hoc thing is to do Go-style error handling</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911657,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This doesn't work well if you are talking to other systems etc</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>when you say exception tracking you mean like logging of exceptions?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>By that I mean returning tuples [ok err], and then do something like if no err</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like timeouts, failed to do this, access error, etc</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>then the system have to be adaptable and be able to deal with failure in a reasonable way</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm coming from Go which is what made me want to return errors in the first place</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, references that weren't matched kept trying to get matched every 4h or so, and then human intervention could make sure they were matched / dealt with at a later batch handling, ie they were never forgotten</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911764,
            "is_me_message": false,
            "last_edit_timestamp": 1430484270,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeaaaa that's way beyond what i'm trying to do lol</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, sorry :p</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think ad-hoc macros is the way to go though, it's too easy to get wrong with edge cases</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you want to preserve errors and exceptions as data, keep them as a tuple or something like it, then write general accessors so you can always change it if you come up with something new</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's what I would do if I wanted to avoid try/catch</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i only really use two macros: my deferror which just cuts down on duplication and attempt-all which wraps the demonad macro</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>if it works that's good, I would just find it difficult to inspect and use in the REPL</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be interesting to see what other Clojure people think, maybe <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> has some experiences from working on Community?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>one clue, but seems to be for showing user errors: <a href=\"https://github.com/recursecenter/community/blob/50da62b39073807cb61451e36ec39c963fdfecbe/client/src/community/state.cljs#L38-L41\" target=\"_blank\" title=\"https://github.com/recursecenter/community/blob/50da62b39073807cb61451e36ec39c963fdfecbe/client/src/community/state.cljs#L38-L41\">https://github.com/recursecenter/community/blob/50da62b39073807cb61451e36ec39c963fdfecbe/client/src/community/state.cljs#L38-L41</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>here we go: <a href=\"https://github.com/recursecenter/community/blob/cb6cd549ba9ad5721157bb14b67548828b38ec3a/client/src/community/api.cljs#L47-L74\" target=\"_blank\" title=\"https://github.com/recursecenter/community/blob/cb6cd549ba9ad5721157bb14b67548828b38ec3a/client/src/community/api.cljs#L47-L74\">https://github.com/recursecenter/community/blob/cb6cd549ba9ad5721157bb14b67548828b38ec3a/client/src/community/api.cljs#L47-L74</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyway I have to go, good luck!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for all the info!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure thing!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38911983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430484812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Had to share this for any Star Wars and clojure fans <a href=\"https://speakerdeck.com/swlaschin/railway-oriented-programming-a-functional-approach-to-error-handling\" target=\"_blank\" title=\"https://speakerdeck.com/swlaschin/railway-oriented-programming-a-functional-approach-to-error-handling\">https://speakerdeck.com/swlaschin/railway-oriented-programming-a-functional-approach-to-error-handling</a> slide 104<br>\nEven Yoda recommends not to use exception handling for control flow: \"Do or do not, there is not try.\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38917912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430494627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> doing anything beyond try/catch is going to against the host and I do not recommend it. try/catch is how you do error handling in Clojure / ClojureScript, anything else is not idiomatic.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38922301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430500652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> if you want to add a type to an exception (e.g. InvalidPasswordException) would you use <code>ex-info</code> and just add a keyword for the type? </p>\n<div class=\"codehilite\"><pre>(throw (ex-info &quot;Invalid password&quot; {:type :invalid-password}))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38926961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span>  yes, things like that are what <code>ex-info</code> is for.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38927006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38927137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I forgot about ex-info, to be honest I have no idea why I didn't use it rather than an external library.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38927142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea finding ex-info kinda swayed me</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38927197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It might have something to do with wrapping existing lib exception in some way, but don't remember</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38927206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "idiomatic error handling",
            "submessages": [],
            "timestamp": 1430507473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38934937,
            "is_me_message": false,
            "last_edit_timestamp": 1430540235,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430518485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 38935001,
            "is_me_message": false,
            "last_edit_timestamp": 1430540240,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "protocols and om",
            "submessages": [],
            "timestamp": 1430518566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I'm using gen-class and compile the associated namespace via the repl, is it possible to access the generated class without having to restart the repl? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39212827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Access generated class",
            "submessages": [],
            "timestamp": 1431010137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh wait, got it. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39212955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Access generated class",
            "submessages": [],
            "timestamp": 1431010259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Was using <code>import</code> incorrectly. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39212970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Access generated class",
            "submessages": [],
            "timestamp": 1431010270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>super interesting post by stuart sierra: <a href=\"http://stuartsierra.com/2015/04/26/clojure-donts-concat\" target=\"_blank\" title=\"http://stuartsierra.com/2015/04/26/clojure-donts-concat\">http://stuartsierra.com/2015/04/26/clojure-donts-concat</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39231896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is a common trend that i've observed over my programming career thus far, yet somehow i always always always either neglect it or forget it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39231959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the idea of functions or processes being 100% of a certain attribute</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39231977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>don't mix attributes, i guess</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39231993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>in this case, stu's recommendation is to not mix lazy with strict evaluation</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39231997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the first case of this taht i ever saw was realizing that i should probably have my functions and methods either only read or write to state, or never read or write to state</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39232043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then later, i saw that my functions should be either completely asynchronous or completely synchronous</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39232057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>of course, best practices probably with exceptions and such</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39232062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>idk, i have a lot to learn before i feel like i really understand programming @_____@</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39232065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431031748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Excellent post! I use a lot of concat</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39272336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431108440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4e3a0b28e0aec22140849a66c36e3ec4?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I must start not using it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39272346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pietromenna@gmail.com",
            "sender_full_name": "Pietro Francesco Menna (SP2'15)",
            "sender_id": 7855,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "\"clojure don'ts: concat\"",
            "submessages": [],
            "timestamp": 1431108456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>The community has started a Clojure Slack Channel. It has a CoC, is moderated by nice people, and is very beginner friendly. Check it out. <a href=\"https://t.co/csIpN3vYAs\" target=\"_blank\" title=\"https://t.co/csIpN3vYAs\">https://t.co/csIpN3vYAs</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39937431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Slack Channel",
            "submessages": [],
            "timestamp": 1432312213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks, just joined.</p>\n<p>Also, that signup form looks really slick!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39938466,
            "is_me_message": false,
            "last_edit_timestamp": 1432313980,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Slack Channel",
            "submessages": [],
            "timestamp": 1432313946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Just joined too!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39938856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Slack Channel",
            "submessages": [],
            "timestamp": 1432314580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/698f6cb788a1bf94da9781c181bf151cad452950?x=x&version=1",
            "client": "website",
            "content": "<p>Cool, me too!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39950410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "wforzo@gmail.com",
            "sender_full_name": "Will Orzo (W'14)",
            "sender_id": 5029,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Slack Channel",
            "submessages": [],
            "timestamp": 1432331122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on a flexbox editor using React.js and ClojureScript, but I've run into some tricky architectural issues: Some of my components rely on layout information.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40844954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g., When you click on a box, the box becomes \"selected\" and little dimension bars are drawn on the sides that let you drag it around.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40844988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>These dimensions show the actual width/height, so the app needs to know about that kind of layout information</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm stuck between the following options:</p>\n<p>1) Calculate all layout information myself via my own implementation of flexbox; and only draw absolutely positioned rectangles in the browser. This way I just use react's normal 1-way data flow.</p>\n<p>2) Do a \"two-pass\" render of sorts where I draw everything in the browser once, then use the react lifecycle methods to add layout information into component local state. Potential drawback is that the component local state could get out of date (e.g., if the parent is resized but the child's data doesn't change and so the child doesn't re-render)</p>\n<p>3) Use the browser to calculate layout off screen manually (in a visibility: hidden box), then measure the results and throw those into the main data structure  and use react's 1-way data flow to draw my actual stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> You have any thoughts on the above? Esp. w.r.t. what you're doing w/ Om next?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> well that just sounds like a fundamental JS DOM issue, nothing specific to React or Om.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845436,
            "is_me_message": false,
            "last_edit_timestamp": 1433874540,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The real issue is going to be perf --- not sure if it's going to be faster to leverage the browser's layout system at the cost of trickier semantics w.r.t. component-local-state vs. do it all in JS in totality and use normal react to render.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've done #3 many times over the years.</p>\n<p>As far as #1 I thought React released a JS flexbox thing when they released React Native?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, they have one that's in JS</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I looked into it, but it doesn't support all of the properties that I need</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>which is what prompted me to look into using the browser native stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> ah k right, it's not full flexbox. For the offscreen bit I wonder if you could do this in a Web Worker?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could submit a pull to add the features that I need, but before I got into that I wanted to poll the folks here to see if anyone had any thoughts on this kind of thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think so --- I'd need to touch the DOM</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's no way to run CSS calculations via JS without just adding stuff to the DOM and then measuring <code>$node.clientLeft</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> been a long time since I used Web Workers wasn't sure if Worker had its own DOM.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40845917,
            "is_me_message": false,
            "last_edit_timestamp": 1433874891,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>other perf issue w/ doing calcs manually was integrating results into cljs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846015,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433874938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll need to do both and run some benchmarks before deciding on an approach. In terms of the measurement-side, do you have any thoughts on #2 vs #3?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> how much data are you expecting to generate? I can't imagine this being a perf issue.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's perf for drag/drop.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846277,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might have a few hundred boxes and then drag-to-resize one.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>that was getting 20--30 ms in the facebook layout engine+cljs serialization</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I'm still skeptical this will be a bottleneck if you design this correctly. 16ms a whopping huge amount of time to do your calculations / conversions. Also just skip the conversion unless there's some real benefit.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also mouse events fire every ~5-6ms, you don't need them all.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'd definitely prefer a 1-pass render over component-local state too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll dive into it and see how far I can get optimizing the perf</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>speaking of which --- do you have any suggestions for profiling cljs?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40846830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Chrome DevTools, that's what I've used to tune everything (ClojureScript, core.async, Om). With the recent ClojureScript compiler changes where nearly every function has a name it's even more useful than before.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40847176,
            "is_me_message": false,
            "last_edit_timestamp": 1433875871,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay, cool. That's what I've been using as well, but I didn't know if there were newer, hotter things.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40847318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Well, beyond <code>doall</code> =  ) Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 40847336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "dom-intertwined react/om",
            "submessages": [],
            "timestamp": 1433875979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Hey. I'm very new to Clojure and leiningen, and was wondering if there are hidden search tips?</p>\n<p>Essentially, my specific problem is this: I am looking for a tcp library. When I <code>lein search tcp</code> I get 16 pages of results, the first 3 of which are entirely taken up by the 13,000 versions of org.mule.transports/mule-transport-tcp. I'd be totally fine with just seeing the latest (or even first) version of every library, as opposed to every single version. Is there a way to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434321892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> I had no idea lein had a search function!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I usually just search via Google --- if I have one tip, it'd be to take a look at Java libraries first.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I usually search with <a href=\"https://clojars.org/\" target=\"_blank\" title=\"https://clojars.org/\">https://clojars.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are a ton of great libraries in Java world and they are just as easy to pull in via Leiningen and use from Clojure as any Clojure library.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.clojure-toolbox.com/\" target=\"_blank\" title=\"http://www.clojure-toolbox.com/\">http://www.clojure-toolbox.com/</a> is also pretty good</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or what Kevin is saying :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>= )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Downside of Java libraries is that some of them are very mutation-heavy, which is awkward to do from Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, it's technically very easy to do. It just *feels wrong*</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434322995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kevin, you wouldn't know of any good resources on how to implement a macro system in a lisp by any chance?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> Don't tell anyone, but I actually have never implemented my own lisp.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You did, I saw it!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41093966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or part of one anyway, with the datalog stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, right. but that wasn't really a lisp, it was a bunch of tricks on top of an existing language. I had no <code>eval</code> = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fair enough</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> I have heard that Racket has an interesting staged compilation pipeline.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's pretty fun and wasn't very hard, SICP makes it really straightforward</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434323103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting, something to look into more</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure why you're in the market for a macro impl, but if it's for education/giggles I'd say you should do more than the traditional macro stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh I'm just writing a toy lisp, and thought it'd be cool to try to add a macro system</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd like to replace some special forms in my eval with macros, for example</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>More than in what sense?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you mean with a separate reader/analyze/eval stage etc?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Perhaps</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, it could have a different syntax</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Or you could restrict the macro code some how to only do certain kinds of tranforms.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm cheating with my reader since I implemented it in Racket, so it's basically just eval, apply and doing stuff with the environment/vars</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah sure, but I don't really know where to start!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g., maybe it's just for syntatic rewrites --- come up with something that lets you implement the threading macro, but doesn't allow you to make a huge mess</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>so your reader gives you an AST?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would guess that to do a traditional macro system you walk that AST and if any of the symbols resolve to macro names, you pass the rest of the args in that node to the corresponding macro</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>And replace with the AST nodes it gives you back</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm using Racket's data structures, so expressions goes straight from the REPL to eval</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes, something like that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My question is: how do you deal with backquotes, quasi-quotes, splicing, and gensyms?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm sure there are plenty of gotchas and clever tricks, but I haven't found any good canonical resources yet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yeah. I have no idea.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will have to look harder</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>How is the cell phone going btw?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094241,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Going off-topic in zulip threads is my thing)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just got back from a teaching tour in Australia, so no progress since !!con</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now that I'm back in PDX, though, I'd like to try out some more case designs --- not particularly thrilled where the walnut+leather is going.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>so probably a few months to get the industrial design to where I like it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323910,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>then redesign the PCBs to fit.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So...maybe in time for the artesian cell phone holiday season.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>How big is the thing now? Is it hard to right-size it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>excellent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434323966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's about 12 x 5 x 1.4 cm.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Smaller than this one <a href=\"http://netdna.webdesignerdepot.com/uploads/cellphone_design/dkmb86g_487pr55s2hc_b.jpg\" target=\"_blank\" title=\"http://netdna.webdesignerdepot.com/uploads/cellphone_design/dkmb86g_487pr55s2hc_b.jpg\">http://netdna.webdesignerdepot.com/uploads/cellphone_design/dkmb86g_487pr55s2hc_b.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://netdna.webdesignerdepot.com/uploads/cellphone_design/dkmb86g_487pr55s2hc_b.jpg\" target=\"_blank\" title=\"http://netdna.webdesignerdepot.com/uploads/cellphone_design/dkmb86g_487pr55s2hc_b.jpg\"><img src=\"https://external-content.zulipcdn.net/fabeb60b9648abdfddff2f1ef157faf98e7cbae4/687474703a2f2f6e6574646e612e77656264657369676e65726465706f742e636f6d2f75706c6f6164732f63656c6c70686f6e655f64657369676e2f646b6d623836675f34383770723535733268635f622e6a7067\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So wait, it already is the right size then, no? Scaling the PCBs for the new case?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyway, have to go. Good luck with it, looking forward to seeing the final product :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> I'd prefer to have it about 8 mm thick and 4cm wide.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> absolutely amazing how that size was cutting-edge just a decade ago for cell phones.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434324777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, electronics are insane. I can't believe I managed to get something this small that works already</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434325205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>esp. since I basically have no idea what I am doing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434325214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>After doing this project, I'm insanely impressed by basically all consumer electronics now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41094932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp macro system impl",
            "submessages": [],
            "timestamp": 1434325265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f096601ea9803a137bce5c99715ba16?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"steve@redlua.com\">@Steven McCarthy (SP2'15)</span> I would recommend to go to <a href=\"https://clojars.org/\" target=\"_blank\" title=\"https://clojars.org/\">https://clojars.org/</a> and do the search there. It always works for me :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41096248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hi@that.world",
            "sender_full_name": "Wei Tang (S1'15)",
            "sender_id": 8071,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434328587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f096601ea9803a137bce5c99715ba16?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh sorry didn't read the previous messages!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41096257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hi@that.world",
            "sender_full_name": "Wei Tang (S1'15)",
            "sender_id": 8071,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434328637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the 2nd reference to clojars, though, <span class=\"user-mention\" data-user-email=\"sorpaas@gmail.com\">@Wei Tang (S1'15)</span>. And thanks for the first <span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span>, it had exactly what I needed (clj-tcp) </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41096598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434329472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6527e077e84e20214d5373101ea15910d6b6f7a3?x=x&version=1",
            "client": "website",
            "content": "<p>Whoops, meant <span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span>. But thanks to all for the fast help!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41096605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "steve@redlua.com",
            "sender_full_name": "Steven McCarthy (he) (SP2'15)",
            "sender_id": 7871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "better 'lein search'?",
            "submessages": [],
            "timestamp": 1434329505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm interested in exporting subsets of datomic entities so that they can be imported into another datomic database without ID collisions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41182850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434479982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I want to grab a bunch of entities and serialize them in such a way that they retain their relationships to each other, but can still be imported into a second datomic DB.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41182905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434480019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was thinking of just getting all of the entity datoms (ignoring the tx reference) and serializing those to disk</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41182925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434480066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Then to import, walk all of those datoms and replace the eids w/ tempids suitable for the database they're being imported into. However, to do this I'll need to use the schema to know whether a val is a reference</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41182987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434480132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm wondering if this is a reasonable approach, or if there's a cooler trick to do this kind of thing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41183004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434480163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's an implementation of the above, anyway: <a href=\"https://gist.github.com/lynaghk/52ec255ea22ba9f1efef\" target=\"_blank\" title=\"https://gist.github.com/lynaghk/52ec255ea22ba9f1efef\">https://gist.github.com/lynaghk/52ec255ea22ba9f1efef</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41184563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434482137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> If you are using one transaction to do the import, you could just pass the negated entity ids into temp id. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41186044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434484007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure what to do about the val/reference aspect though. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41186159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434484161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> Ah, that's a clever idea --- just negating the eids to turn them into tempids. When I wrote it I just explicitly used the range -100000 to -1 as per the datomic docs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41193442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434494117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>That'd save a hashmap creation and a bunch of lookups, but I don't know what the impl will do past the -100000th tempid</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41193492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434494173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Yeah it almost seems like it would be too clever by half to do it that way. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41443356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "datomic export",
            "submessages": [],
            "timestamp": 1434999080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>We have a large core service platform written primarily in Java, with some modules towards the periphery written in Scala. I'm porting one of those modules to Clojure. </p>\n<p>The Java platform relies heavily on Guice, a Java dependency injection framework. Guice basically handles the entire process of finding dependencies and instantiation. Sadly, to get access to some of the Java objects I need, I have to rely on Guice too. </p>\n<p>Unfortunately, Guice doesn't play nicely with the REPL. You can only instantiate from it once in a REPL session. Otherwise, you need to kill the REPL completely and restart. This kills the workflow.</p>\n<p>I'm wondering how others have dealt with this kind of issue.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41527396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Working Effectively With Legacy Java",
            "submessages": [],
            "timestamp": 1435158079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I ended up solving this using <code>defonce</code>. This way even if I reload the code in my REPL session, the Guice injector will not be reinstantiated, and thus preventing the nasty errors I would get.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41569883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Working Effectively With Legacy Java",
            "submessages": [],
            "timestamp": 1435235376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really enjoyed this blog post showing side by side how one might translate good idiomatic Java code to equivalently good idiomatic Clojure code <a href=\"http://adambard.com/blog/refactoring-refactored/\" target=\"_blank\" title=\"http://adambard.com/blog/refactoring-refactored/\">http://adambard.com/blog/refactoring-refactored/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41569965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Java vs Clojure side by side",
            "submessages": [],
            "timestamp": 1435235487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone ever used the New Relic java agent with Clojure? I can get the agent up and running but not recognizing Jetty web transactions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41578641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435249750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> How are you getting the agent up and running? I've used it on several projects in the past w/ ring + jetty7 and everything came up automatically.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41626255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435339125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Only thing I had to do was add <code>:jvm-opts [\"-javaagent:newrelic/newrelic.jar\"]</code> to my project.clj</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41626264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435339143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I packed my project up into an uberjar and then ran java --javaagent:newrelic/newrelic.jar -cp target/project-standalone.jar clojure.main -m project.web</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41632006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435347666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I ended up having to add some ring middleware <a href=\"https://github.com/Yleisradio/new-reliquary\" target=\"_blank\" title=\"https://github.com/Yleisradio/new-reliquary\">https://github.com/Yleisradio/new-reliquary</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41632013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435347677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>It does the job but it doesn't register the events as web transactions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41632032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435347708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>In an effort to improve my functional skills I've been thinking about how to write pure code for web. I find myself writing a lot of code that looks like this:</p>\n<div class=\"codehilite\"><pre>(defn web-handler [req]\n  (let [data            (transform-req req)\n        db-result       (do-thing-in-db data)\n        external-result (external-service data)\n        resp-data       (transform-resp data db-result external-result)]\n    (render-template resp-data)))\n</pre></div>\n\n\n<p>This has a bunch of pure code and side effects mixed in. I've been thinking a better approach might be:</p>\n<div class=\"codehilite\"><pre>(defn web-handler [req]\n  (fn [do-thing-in-db external-service]\n    (let [data            (transform-req req)\n          db-result       (do-thing-in-db data)\n          external-result (external-service data)\n          resp-data       (transform-resp data db-result external-result)]\n      (render-template resp-data))))\n</pre></div>\n\n\n<p>Small difference but I think the web-handler is now technically pure and the result is something that's easier to test.</p>\n<p>Is this just unnecessary complexity? How do other people tackle this? Is it even practical to try to be pure when dealing with web handlers?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41696412,
            "is_me_message": false,
            "last_edit_timestamp": 1435505649,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1435505231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> I wouldn't call that pure, since presumably the versions of <code>do-thing-in-db</code>, <code>external-service</code> that you eventually pass in still have side effects.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41697901,
            "is_me_message": false,
            "last_edit_timestamp": 1435508993,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1435508923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's true that you can now test it in a pure way though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41698128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1435509516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> isn't it pure in the sense that given the same inputs web-handler always returns the same output? The function that web-handler returns has side-effects. Is a function that returns side-effecting functions impure?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41700230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1435514927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, I see what you mean--I guess you're right, <code>web-handler</code> is pure :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41701711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1435518436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> Hmm, no idea. Maybe New Relic has since updated how their agent works so it requires more configuration. I'd swing by their IRC and ask 'em what you need to do --- it's great to be able to see routes and everything broken down in the reporting.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41707059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "New Relic and Clojure",
            "submessages": [],
            "timestamp": 1435531349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm messing around with using clojurescript to write programs for scrapping. I've gotten to the point where I would like to define a particular function, compile it ahead of time into a single optimized file and then, later on, as the arguments for the function are created during the scrap process, pass them into the previously compiled function. I've been exploring the cljs compiler api and have yet to find a way to do the first part. Is there a function with the type signature akin to CLJSForms -&gt; StringOfOptimizedJavascript ? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41739499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435601213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've thought about having the process write the optimized string to a tmp file and use the build api, but I would like to skip the FS if possible. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41739513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435601256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adee30adc767a9c8d4d99383fda84a8585f58e2d?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"http://blog.juxt.pro/posts/why-clojurescript-matters.html\" target=\"_blank\" title=\"http://blog.juxt.pro/posts/why-clojurescript-matters.html\">http://blog.juxt.pro/posts/why-clojurescript-matters.html</a></p>\n<p>Great rollup (though I'm using Reagent rather than Om).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41740532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "timothy.roy@protonmail.ch",
            "sender_full_name": "Timothy Roy (W2'15)",
            "sender_id": 7105,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why ClojureScript Matters",
            "submessages": [],
            "timestamp": 1435602964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f096601ea9803a137bce5c99715ba16?d=identicon&version=1",
            "client": "website",
            "content": "<p>The worst thing about Clojurescript is that there's no <code>eval</code> for it :(</p>\n<p>So I'm creating an alternative...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41740641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hi@that.world",
            "sender_full_name": "Wei Tang (S1'15)",
            "sender_id": 8071,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why ClojureScript Matters",
            "submessages": [],
            "timestamp": 1435603193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sorpaas@gmail.com\">@Wei Tang (S1'15)</span> The recent work on CLJS-in-CLJS means that pretty soon there could be an eval. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41742749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why ClojureScript Matters",
            "submessages": [],
            "timestamp": 1435606336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f096601ea9803a137bce5c99715ba16?d=identicon&version=1",
            "client": "website",
            "content": "<p>That would be great :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41743243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hi@that.world",
            "sender_full_name": "Wei Tang (S1'15)",
            "sender_id": 8071,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why ClojureScript Matters",
            "submessages": [],
            "timestamp": 1435607148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Update: I've found that something like <code>(build/build '((+ 1 1)) {:optimizations :advanced})</code> does almost what I want. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41748610,
            "is_me_message": false,
            "last_edit_timestamp": 1435615118,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435615076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Where the <code>build</code> ns is cljs.build.api. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41748655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435615100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is still some business about 'cljs' being undefined in the resulting js string for some reason which I don't fully understand. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41748684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435615161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>What does \"for scrapping\" mean in this context?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41788427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435692368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sorpaas@gmail.com\">@Wei Tang (S1'15)</span> eval is already possible now if you bootstrap, the blog post alludes to that :) That said it's fundamentally not a very important feature for serious work.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41823074,
            "is_me_message": false,
            "last_edit_timestamp": 1435762285,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Why ClojureScript Matters",
            "submessages": [],
            "timestamp": 1435762219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> For some particularly bad websites, you have to fake being a web browser in some way. Store cookies, remember session id's, interact with the webpage to load data, etc. All of it can be done via scripts without using a browser, but it's a lot of work that sort of sucks. I'm experimenting with assuming the worst, that you have to run a browser (or some parts of it) to scrape the website for the data you want. What does a scraping tool look like then, when you let the browser do most of the interactions with the server for you? The goal is to make something that A. allows me to use my browser to create plans for how to scrape things (like <a href=\"https://github.com/scrapinghub/portia\" target=\"_blank\" title=\"https://github.com/scrapinghub/portia\">https://github.com/scrapinghub/portia</a> but with better UI and backend) and B. allows for optimizations that cut down on the performance hit you take for running selenium instead of just raw http. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41823989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435763613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm messing around with writing a language that describes the plan for a web scraper to follow. I'm considering embeding clojurescript scripts into it (the language is just edn data at this point). </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41824085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435763710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>An example: <a href=\"https://github.com/sunlightlabs/corona/blob/master/resources/example.edn\" target=\"_blank\" title=\"https://github.com/sunlightlabs/corona/blob/master/resources/example.edn\">https://github.com/sunlightlabs/corona/blob/master/resources/example.edn</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41824110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435763753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was thinking of using clojurescript for the more complicated situations that xpath and enlive couldn't cover but I'm sort of leaning away from it now .</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41824179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435763845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm thinking if I implement the basics of <a href=\"http://vis.stanford.edu/wrangler/\" target=\"_blank\" title=\"http://vis.stanford.edu/wrangler/\">http://vis.stanford.edu/wrangler/</a>, which was part of the plan all along, I wouldn't need to actually execute any js/cljs and could get away with just browser actions, enlive/xpath and clojure statements for creating/manipulating variables. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41824253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurescript",
            "submessages": [],
            "timestamp": 1435763939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>At EuroClojure I announced a official bootstrapping effort. Within 4 days you now have iOS ClojureScript REPL and a Node.js one.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/bus_kanaka/status/616026801412804608\" target=\"_blank\" title=\"https://twitter.com/bus_kanaka/status/616026801412804608\">https://twitter.com/bus_kanaka/status/616026801412804608</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bus_kanaka/status/616026801412804608\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1090040547/gravatar_normal.jpeg\"></a><p>ClojureScript REPL in 3 steps:\n\n1. Install node\n2. curl -L <a href=\"https://t.co/flPNBKKfQ6\" target=\"_blank\" title=\"https://t.co/flPNBKKfQ6\">https://gist.githubusercontent.com/kanaka/b588dbb6d44174672cc2/raw/90718328795e21b18b6828f91fd69b7a3da9f05b/repl-all.js</a> | node\n3. Retweet\n\n#ymmv #nojvm <a href=\"https://twitter.com/mfikes\" target=\"_blank\" title=\"https://twitter.com/mfikes\">@mfikes</a> <a href=\"https://twitter.com/swannodette\" target=\"_blank\" title=\"https://twitter.com/swannodette\">@swannodette</a></p><span>- Joel Martin (@bus_kanaka)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/mayaneise/status/615647390536613890\" target=\"_blank\" title=\"https://twitter.com/mayaneise/status/615647390536613890\">https://twitter.com/mayaneise/status/615647390536613890</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/mayaneise/status/615647390536613890\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/575193207069245441/pSre6YM0_normal.jpeg\"></a><p>This is great! Trying out <a href=\"https://twitter.com/mfikes\" target=\"_blank\" title=\"https://twitter.com/mfikes\">@mfikes</a> Replete on my iPhone. Sign up for beta testing now  <a href=\"https://t.co/AgCM7hdDX4\" target=\"_blank\" title=\"https://t.co/AgCM7hdDX4\">https://github.com/mfikes/replete/wiki/Beta</a> <a href=\"http://t.co/IOqElf6X9c\" target=\"_blank\" title=\"http://t.co/IOqElf6X9c\">http://twitter.com/mayaneise/status/615647390536613890/photo/1</a></p><span>- Maria Neise (@mayaneise)</span><div class=\"twitter-image\"><a href=\"http://t.co/IOqElf6X9c\" target=\"_blank\" title=\"http://t.co/IOqElf6X9c\"><img src=\"https://pbs.twimg.com/media/CIs4Ci4UkAA327l.png:thumb\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> this is very exciting!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>will there be videos of the talk up at some point?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> yeah, in a couple of weeks I think. The talk is pretty long I only talk about the bootstrapping in the very end. And these two efforst are bigger news really. They just went ahead and ran with it. Early days, lots of rough edges, not useful (all the libraries, tooling requires JVM) but cool nonetheless.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>The neat bit is this isn't a ClojureScript \"light\", this the real deal, just self compilation.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I'm expecting that this will make tooling a lot easier.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Specifically for things like integrating with the Rails asset pipeline)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41835716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> this won't make tooling any easier for non JVM users, that's a non-goal. The best tooling will likely continue to be on the JVM for years. We still generate only Closure compatible code this will never change.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836021,
            "is_me_message": false,
            "last_edit_timestamp": 1435780926,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435780914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> that said, it's never been clear to me why integrating with the Rails asset pipeline is problematic at all today. I'm assuming it has good support for shelling out to anything.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I may have been conflating issues :). The issue with Rails asset pipeline integration is mostly that it assumes a 1 to 1 mapping between input (cljs) files and output (js) files. The last time I looked into this, the ClojureScript compiler took in one input and generated a bunch of output files.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(presumably corresponding to each cljs file that the root file included)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Upon reflection, the interface to the compiler has nothing to do with the language it's written in, but I'm excited about bootstrapped ClojureScript none the less.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> the most fun bit ...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>the macros file has to require itself to compile itself, LOL <a href=\"https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/core.cljc#L44-L50\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/core.cljc#L44-L50\">https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/core.cljc#L44-L50</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836325,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>ha. neat.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's the only real bit of meta-circularity that crops up</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836337,
            "is_me_message": false,
            "last_edit_timestamp": 1435781386,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435781378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Sidenote) yeah I don't understand the asset pipeline issue at all. Unless the asset pipeline assumes you copied and pasted every last dependency into some location in your Rails project. I suspect even JavaScript developers using Bower would have huge issues with the Rails asset pipeline if this is the case.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41836863,
            "is_me_message": false,
            "last_edit_timestamp": 1435782195,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435782178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is bower integration with the asset pipeline that I haven't really looked at, but the shallow answer is that bower doesn't really work out of the box with the asset pipeline.</p>\n<p>For the most part, the way you deal with JS dependencies is by either copying your dependencies into your project, or using gems that package up your dependencies. We do both depending on availability. For instance, the <code>react-source</code> gem packages React and adds it to the asset pipeline's search path. Then somewhere in your javascript, you require it with a little preprocessor directive:</p>\n<div class=\"codehilite\"><pre><span class=\"c1\">//= require react</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">Foo</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">});</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837313,
            "is_me_message": false,
            "last_edit_timestamp": 1435782966,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435782844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> right so my larger point is that Rails just goes completely the wrong way wrt. to modern JavaScript development. This isn't a ClojureScript thing at all.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> I've been using webpack/browserify to dump my compiled JS into app/assets/javascripts. I imagine I could tell the compiler to ignore erb snippets, but I haven't tried that yet.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Typed before your most recent message:</p>\n<p>I have a hunch that people who are used to using dependency managers for their JS think this is silly, but it has some nice benefits: In development, assets are compiled on HTTP request, so there's no chance that you accidentally get older versions of assets because your compiler process hasn't finished compiling things, and if there's a compilation error, rails renders a page with the error, backtrace, etc.</p>\n<p>This might not be as good an experience as ClojureScript development with Figwheel (something we want to try with Community soon), but I find it nicer than just having a separate process that is compiling your front end code in the background.</p>\n<p>Typed after your most recent message:</p>\n<p>That very well may be the case, but in practice, the ClojureScript compiler is the only compiler I have encountered that has this issue (though I have encountered only a limited set, namely: JSXTransformer, CoffeeScript, Babel and ClojureScript). It's possible other, more advanced compile to JavaScript languages (Elm comes to mind) would be hard to integrate into the asset pipeline.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> no you just said Bower has this problem. This means Ember, Angular, Browserify, Webpack, anything that manages dependencies for you. Seems pretty broken to me all conveniences aside :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837815,
            "is_me_message": false,
            "last_edit_timestamp": 1435783647,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also I used the Asset Pipeline in production at NYTimes. I don't have too many good things to say about it. No terrible things. But no good things either :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41837895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Granted that was 2-3 years ago, so likely all the things that we ran into have probably been addressed. But it appears not the 3rd party JS dependency management issue.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435783837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>But it seems to me whatever <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> is doing is probably similar to what anyone is doing in this case. Which means ClojureScript is no worse off. You can do the same thing, point <code>:output-dir</code> to <code>assets</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, it's possible my lack of experience with most of these things is biting me in the butt. I know there are gems that integrate Bower and Browserify into the asset pipeline. I am not as sure about Webpack. I didn't know that Ember and Angular include dependency managers, but people certainly use those things with rails.</p>\n<p>When I said that I think Bower has a similar problem, what I meant to say was Bower doesn't integrate with the asset pipeline out of the box, you have to get a gem to make it work. The thing I was getting at is with my understanding of the interface to the CLJS compiler (one file in, many files out), I don't know how I would write a gem that does the equivalent of bower-rails. That said, I haven't looked at the source of bower-rails.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not using a gem--I just tell webpack to plop its compiled output into app/assets/javascripts/bundle.js, and then it gets picked up automatically. I admittedly don't get to use erb etc. in my JS though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838408,
            "is_me_message": false,
            "last_edit_timestamp": 1435784360,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> all I mean is that Ember and Angular projects necessarily have complex dependencies due to their popularity in SPA architectures, they have to use something to manage them.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example, Ember.js Rails Asset Pipeline integration does not look simple <a href=\"https://github.com/emberjs/ember-rails\" target=\"_blank\" title=\"https://github.com/emberjs/ember-rails\">https://github.com/emberjs/ember-rails</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Got it. We do the same thing with Community (setting <code>:output-dir</code>) and it works fine. It just comes with the (mostly small) annoyances that I mentioned above (no integrated compile error messages, sometimes having stale code on page reload). </p>\n<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> we dont' use ERB in our JavaScript either. I have found not too many benefits.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, got it, so we're doing the same thing. Cool.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, on Community we are doing the same thing (basically bypassing the asset pipeline), though we are checking in our production assets rather than using heroku-buildpack-multi</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But on <a href=\"http://recurse.com\" target=\"_blank\" title=\"http://recurse.com\">recurse.com</a>, we are not</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> my co-worker Yoko Harada did this thing <a href=\"https://github.com/yokolet/clementine\" target=\"_blank\" title=\"https://github.com/yokolet/clementine\">https://github.com/yokolet/clementine</a>. Old so can't recommend. But I suspect a lot of rough edges could be eliminated just by someone spending some time doing a proper Asset Pipeline gem. But of course most people doing ClojureScript are doing Clojure not Rails :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838783,
            "is_me_message": false,
            "last_edit_timestamp": 1435784824,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yup. That's basically what I want: a better clementine. But clementine is very slow if you're not using JRuby because it boots up a new JVM every time you want to compile, which means every request (in JRuby, it uses the same JVM that is running Ruby). Bootstrapped CLJS should make something like Clementine a lot more feasible because node, etc boot up substantially faster than the jvm.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41838895,
            "is_me_message": false,
            "last_edit_timestamp": 1435784994,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435784985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> the JVM boots as fast as Node.js. This is a weird meme that continues to be perpetuated. 80ms to start a trivial program like Hello World.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh. Did not know that. Thanks for the info :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>What is slow is booting Clojure, takes about 700-800ms on a modern reasonably fast machine.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>AOTed ClojureScript takes about 1.2-1.3s on the same box. But this may be fast enough for a Clementine like thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840750,
            "is_me_message": false,
            "last_edit_timestamp": 1435787648,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>The source of the idea that the JVM is slow around Clojure is almost entirely Leiningen's fault and the fact that Clojure libraries ship source and no tools leverage incremental compilation a la ClojureScript.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just did a Hello World in Java and confirmed that the JVM is indeed pretty fast to start up (~160ms on my machine, but mine is 4 years old, so I don't doubt that it can get down to 80ms or even faster). Part of what had given me the wrong impression was this from the Clementine readme:</p>\n<blockquote>\n<p>Please be aware. When you run Clementine on CRuby, you hook up JVM everytime ClojureScript code is changed. This takes long time since starting JVM is a heavy weight job. For a shorter compilation time, I recommend using JRuby.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But that was written years ago at this point, and perhaps the JVM was substantially slower than it was now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> yeah there's a lot of older documentation that talks about JVM startup time, but there's been improvements to the JVM as well substantial testing that places the blame squarely on Clojure itself and the naive nature of the tools built around it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>got it</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41840961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435787940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> you really should try the Quick Start tutorial, compiling Hello World is very, very fast now. I see no reason why you couldn't shell out to the <code>cljs.jar</code> as long as you can compute the classpath. ClojureScript is unlikely to be a bottleneck I suspect.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841061,
            "is_me_message": false,
            "last_edit_timestamp": 1435788058,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435788043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool. I will take a look at some point soon.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435788093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> JS Bin now supports ClojureScript, they shell out to the cljs.jar, no complaints so far - <a href=\"http://jsbin.com/\" target=\"_blank\" title=\"http://jsbin.com/\">http://jsbin.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41841133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1435788148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woah, I'm super late to the party here!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think functional programming applied to web is a funny thing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>particularly with state management</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>in my mind, functional programming in a web context is less about avoiding side effects and state mutation, and more about *managing* side effects and mutation</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>in the typical crud app with data persistence in the backend and some type of GUI on the frontend, you end up invariably having to at least create, update, or destroy records</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>applying functional programming imo will be about ensuring as much predictability as possible in those instances</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>like how in rest, when they say that get, delete, and patch are all idempotent</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>the mutation is done at least one time, but the net sum of an arbitrary number of equivalent mutations is the same as just a single mutation</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and these are things that you can ensure with functional purity</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>things like idempotence in an inherently stateful problem</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i think your second rendition of <code>web-handler</code> is indeed more referentially transparent, but i'm also wondering if this instance of referential transparency is useful for you</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's kind of like how testing is generally considered a Good Thing (tm), but not all tests are actually useful</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42196991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and you sometimes see tests which pass, but they don't test anything useful, and they never fail</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>so the test ends up being more deadweight than anything else</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>i've definitely written a lot of code with the intention of referential transparency, but the end result was just complicating my life :|</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>imo, if referential transparency makes your life simpler, then it's worth pursuing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and if referential transparency makes your life more complicated, then it's not worth pursuing</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>TL;DR: imo, it's adding a little bit of unnecessary complexity :) but i might be missing some of picture, and maybe it's working out well for you?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>would love to hear how it's working for you since you originally posted this</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42197082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436224938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dillonforrest@gmail.com\">@Dillon Forrest (S'12)</span> I haven't actually used these kind of handlers yet. The benefit would be easier testing. The second version of <code>web-handler</code> is just dependency injection but I figure at least it explicitly breaks out what the side-effecting parts are.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42201363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436234299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81a335a667259e453dba0c5acb16932d?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool stuff. would love to hear how this pattern works for you as time progresses!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42226871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dillonforrest@gmail.com",
            "sender_full_name": "Dillon Forrest (S'12)",
            "sender_id": 7748,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Functional purity in web",
            "submessages": [],
            "timestamp": 1436287344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>And the talk is up!</p>\n<p><a href=\"https://www.youtube.com/watch?v=ByNs9TG30E8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ByNs9TG30E8\">https://www.youtube.com/watch?v=ByNs9TG30E8</a> </p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=ByNs9TG30E8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ByNs9TG30E8\"><img src=\"https://i.ytimg.com/vi/ByNs9TG30E8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42343182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Bootstrapped ClojureScript",
            "submessages": [],
            "timestamp": 1436368646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://src.chromium.org/viewvc/blink?view=revision&amp;revision=198504\" target=\"_blank\" title=\"http://src.chromium.org/viewvc/blink?view=revision&amp;revision=198504\">http://src.chromium.org/viewvc/blink?view=revision&amp;revision=198504</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42346072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HELLS YEAH",
            "submessages": [],
            "timestamp": 1436372662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7571d485f27fd3656371e4418e0e4f3e?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42346318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bts@gmail.com",
            "sender_full_name": "Brian Schroeder (he) (S2'15)",
            "sender_id": 8317,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HELLS YEAH",
            "submessages": [],
            "timestamp": 1436373028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I got excited, then saw that it was closurescript and got sad, and then realized it was a typo and got happy again.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42346409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HELLS YEAH",
            "submessages": [],
            "timestamp": 1436373212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>My EuroClojure talk summarizes my thoughts about where application architecture is going + lots of ClojureScript goodies <a href=\"https://www.youtube.com/watch?v=ByNs9TG30E8&amp;\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ByNs9TG30E8&amp;\">https://www.youtube.com/watch?v=ByNs9TG30E8&amp;</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=ByNs9TG30E8&amp;\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=ByNs9TG30E8&amp;\"><img src=\"https://i.ytimg.com/vi/ByNs9TG30E8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42346683,
            "is_me_message": false,
            "last_edit_timestamp": 1436373604,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436373590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I really like the om next ideas in terms of consuming data on the client side. Is there any thoughts you have on producing data and how that should happen? My initial reaction is that each app is unique and does it's own thing for production, but that would have been my original thought about consumption before seeing om next and how well it might could mix declarative and UI programming. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42348785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436376669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zack@zacharymaril.com\">@Zack Maril (S'13)</span> writing data already just works. We'll ship something that works for Om and Datomic</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42348849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436376749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>but doing DataScript or whatever won't be hard</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42348851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436376758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Don't want to derail the conversation but just want to add: <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Watched your Om Next talk last night and really enjoyed it. It seems like a lot of exciting ideas are coming together! <img alt=\":+1:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/+1.png\" title=\":+1:\">)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42348862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436376781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fcd59db6d86365a6fba1ce0f9c7b8102?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks. That was my feeling as well, just edn it up, but was wondering whether you had something else in mind. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42348921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zack@zacharymaril.com",
            "sender_full_name": "Zack Maril (S'13)",
            "sender_id": 2130,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436376856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> oooh some stuff clicked while watching your talk, I've got goosebumps :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42440399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436549829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> cool! Long time coming :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42440411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Om Next / Relay / Falcor / iOS / React Native / yadda yadda",
            "submessages": [],
            "timestamp": 1436549851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(I'm writing this in common lisp but I figured clojure people would probably know the most about this)</p>\n<p>I need to traverse over an input stream and return multiple collections of results, each filtered according to different criteria. I sketched out a generalization of the basic transducer pattern to take an arbitrary number of input sequences and pipe them into an arbitrary number of reducing pipelines:</p>\n<div class=\"codehilite\"><pre>(super-fold\n    (super-transducer\n        (;; pipe two inputs into three pipelines\n         (lambda (x y) (values x (+ x y) y)) 2) \n\n      ;; pipeline 1\n      ((lambda (x y) (list* y x)) ;; base-level reducer, essentially conj\n\n       (filtering #&#39;oddp)\n       (mapping (lambda (x) (* x x))))\n\n      ;; pipeline 2\n      ((lambda (x y) (list* y x))\n\n       (filtering #&#39;evenp)\n       (mapcatting (lambda (x) (list x x))))\n\n      ;; pipeline 3\n      ((lambda (x y) (list* y x))\n\n       (mapping (lambda (x) (* 10 x)))))\n\n    (nil nil nil) ;; pipeline seeds\n  (list 1 2 3 4 5) ;; input 1\n  (list 3 1 5 2 4) ;; input 2\n  )\n;; result:  (25 9 1), (6 6 8 8 4 4), (40 20 50 10 30)\n</pre></div>\n\n\n<p>has anybody done stuff like this? I guess you could just set up several transducers and run them in parallel, and from what I know about clojure I'd guess that's how you'd usually do this sort of thing, but if mechanisms for genuine parallelism are not available to you, or you need to execute them in lockstep, you'd have to create a more generalized construct like this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42441889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436552008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> if I needed pipelining like this I would probably just use core.async since that's truly parallel. Maybe Zach Tellman's Manifold supports stuff like this too?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42444539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436555946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'll look into manifold and see if I can get a good sense of what it does. there are a couple of good libraries like lparallel for parallelizing folds, etc in common lisp. but I figure if you take the opportunity to explicitly and expressively deforest a computation like this, it could free up resources to increase throughput elsewhere</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42448178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436561545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>it would probably be worth checking out the old SERIES package from the 80s too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42448207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436561604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>okay, I think I made this overly complex because in my first attempt, I sort of tried to allow the values being accumulated into one result stream to depend on more than one pipeline stream, and that's getting into territory that demands real concurrency handling.<br>\nafter tinkering with it for a while, I think it's better to define individual transducers as usual, and put all the additional complexity into a more generalized definition of fold.<br>\nthe way I have it now, this macro:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nv\">multi-fold</span> <span class=\"p\">(</span><span class=\"ss\">:pipeline-width</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">stream-input-x</span> <span class=\"nv\">stream-input-y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">values</span> <span class=\"nv\">stream-input-x</span>\n          <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"nv\">stream-input-x</span>\n             <span class=\"nv\">stream-input-y</span><span class=\"p\">)</span>\n          <span class=\"nv\">stream-input-y</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>returns a lambda that takes three reducing functions and two input streams, and feeds the values from the first stream to the first reducing function, the sum of the values from the first and second streams to the second reducing function, and the values from the second stream to the third reducing function, and runs them all in lockstep.<br>\nI could go a step further and specify the base-level reducers separately from the composing of maps/filters/etc within <code>multi-fold</code>, but this meets my needs for now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42484296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436651381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've just started looking into optimizing the performance of a React app I've been working on, and I've run into a bit of a tricky issue: <a href=\"https://github.com/tonsky/rum/issues/34\" target=\"_blank\" title=\"https://github.com/tonsky/rum/issues/34\">https://github.com/tonsky/rum/issues/34</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42514969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436733295,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would love to get some thought from ya'll on this problem (it's not Clojure-specific)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42514972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436733327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> fwiw this problem is what motivated <code>opts</code> parameter, <code>:shared</code> etc. I think the real solution is just to have a smarter props updating system a la Relay / Om Next.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42566008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436835072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Smarter props updating meaning deriving updates by some mechanism other than compare-by-value? E.g., an entity transaction log?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42566986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436837057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not obvious to me how that'd fix this problem --- unless that solution implies I'm using something besides callbacks for my reusable components to, er, call back about changes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42567049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436837205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> all I mean is that relying only equality checks doesn't really work anyway as the application becomes larger and more complex. It works better in combination with other strategies. For example, in Relay if you change some data you only want the affected components to change.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42567604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "efficient react w/ components that take callbacks",
            "submessages": [],
            "timestamp": 1436838409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>for the single-input case, if you use as your accumulation seed a list of as many empty collections as there are pipelines you want to use, you can just reduce the input sequence by the function <code>(lambda (accum item) (mapcar (lambda (pipe pipe-accum) (funcall pipe pipe-accum item)) pipelines accum))</code>. this would have been readily apparent if I'd just tried the simple case first.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42581311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436870296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>or in clojure it'd probably look something like <code>(fn [accum item] (map-something (fn [pipe pipe-accum] (pipe pipe-accum item)) pipelines accum))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42581321,
            "is_me_message": false,
            "last_edit_timestamp": 1436870418,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "generalized transducers?",
            "submessages": [],
            "timestamp": 1436870378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://blog.fikesfarm.com/posts/2015-07-16-fast-javascriptcore-desktop-clojurescript-repl.html\" target=\"_blank\" title=\"http://blog.fikesfarm.com/posts/2015-07-16-fast-javascriptcore-desktop-clojurescript-repl.html\">http://blog.fikesfarm.com/posts/2015-07-16-fast-javascriptcore-desktop-clojurescript-repl.html</a></p>\n<p><img alt=\":fireworks:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/fireworks.png\" title=\":fireworks:\"> <br>\n<img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42690045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437067585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is neat:<br>\n$ time cat script.cljs | ./planck<br>\nnil</p>\n<p>real    0m0.628s<br>\nuser    0m0.621s<br>\nsys 0m0.143s</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42691218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437069440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> yeah bootstrapping is the gift that keeps on giving. JavaScriptCore also has a good story for building on pretty much every operating system, interesting because it has very good C/C++/Objective-C interop.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42694207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437073338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Neatttttt. <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> is there still some low-hanging fruit remaining as far as optimization is concerned, or is this half-a-second a good ballpark estimate for how fast it's going to be moving forward?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42695826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437075682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> the half second is just parsing/loading JavaScript. No way to get rid of that really.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42695892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437075756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgmuthalaly@gmail.com\">@Bert Muthalaly (S'14)</span> actual peak performance under JavaScriptCore is only 1.5X slower than JVM. Don't see how you can do much better than that really.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42695901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437075783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42695927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "desktop.cljs",
            "submessages": [],
            "timestamp": 1437075827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f1a76a74c82ee6b6f035964c3920908a?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>so i ran into an interesting problem today when trying to evaluate some of the code from Joy of Clojure in my REPL. originally, running on clojure 1.7.0, i got results like this <a href=\"http://i.imgur.com/bpGJA6h.png\" target=\"_blank\" title=\"http://i.imgur.com/bpGJA6h.png\">http://i.imgur.com/bpGJA6h.png</a> (side by side, text from the book and 1.7.0 REPL). when i just fired up a 1.6.0 REPL and evaluated the same statements, everything is totally fine <a href=\"http://i.imgur.com/mCoYDV2.png\" target=\"_blank\" title=\"http://i.imgur.com/mCoYDV2.png\">http://i.imgur.com/mCoYDV2.png</a> .  someone mentioned to me that iterate changed between 1.6.0 and 1.7.0, which may be the source of the discrepancy. </p>\n<p>looking at the compatability notes for 1.7.0,  they mention an incompatability with specifically Java iterators and next(), but to me, it appears that the iterator that is used in the sample is, indeed, a Clojure iterator. sussing out the differences myself seems like a good way to spin my wheels, so i'm going to set it aside and focus on other things. nevertheless, an interesting thing. will forward this difference along to the book authors.</p>\n<div class=\"message_inline_image\"><a href=\"http://i.imgur.com/bpGJA6h.png\" target=\"_blank\" title=\"http://i.imgur.com/bpGJA6h.png\"><img src=\"https://external-content.zulipcdn.net/e6303604055c21fdef802531509321f0f87bff10/687474703a2f2f692e696d6775722e636f6d2f6270474a4136682e706e67\"></a></div><div class=\"message_inline_image\"><a href=\"http://i.imgur.com/mCoYDV2.png\" target=\"_blank\" title=\"http://i.imgur.com/mCoYDV2.png\"><img src=\"https://external-content.zulipcdn.net/bc8698fb1efb39148fed117ed24df524ad36121c/687474703a2f2f692e696d6775722e636f6d2f6d436f594456322e706e67\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42844825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pkurpiewski@gmail.com",
            "sender_full_name": "Marie Jeanne Kurpiewski (she) (S2'15)",
            "sender_id": 8324,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "joy of clojure / laziness",
            "submessages": [],
            "timestamp": 1437411587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm a little confused with externs. I have the following code:</p>\n<div class=\"codehilite\"><pre>(def my-player (js/videojs &quot;example_video_1&quot;))\n(defonce auto-toggle (.autoplayToggle my-player (js/Object.)))\n(.ready my-player (fn []\n                    (.playbackRate my-player js/playbackRate)))\n</pre></div>\n\n\n<p>And the following externs:</p>\n<div class=\"codehilite\"><pre>function videojs (playerid){};\n</pre></div>\n\n\n<p>After compiling <code>videojs</code>, <code>.playbackRate</code>,  and <code>.ready</code> show up correctly but <code>.autoplayToggle</code> doesn't. Am I missing something in my externs file?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42887960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437494810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Got it working but I still don't understand what's happening.</p>\n<div class=\"codehilite\"><pre>var j = {}\nj.autoplayToggle = function(options){};\n</pre></div>\n\n\n<p>I can declare autoplayToggle under any namespace and it will preserve the symbol name.</p>\n<p>The more confusing thing is that <code>.playbackRate</code> and <code>.ready</code> are preserved without adding them to the externs file. If I look up their definition with Cursive it takes me to video.dev.js which i have in resources/public/js - the same place where the externs file is. Only thing is I haven't passed that file in any way in the compiler options.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42890728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437499042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> none of those symbols are guaranteed to be left alone unless they are all supplied in your externs. I'm assuming you are trying to apply advanced optimizations.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42890738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437499064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> yes advanced optimizations. Oh so they could be changed. <br>\nWhy does the random namespace work?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42890823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437499175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> that's a Closure question not really a ClojureScript one, but I'm assuming it's conservative if it can't determine the type or definition of the thing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42890890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437499263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for the help</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 42891032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "CLJS externs",
            "submessages": [],
            "timestamp": 1437499457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7571d485f27fd3656371e4418e0e4f3e?d=identicon&version=1",
            "client": "website",
            "content": "<p>does anyone know whether Om Next is ready to be used yet?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46835746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bts@gmail.com",
            "sender_full_name": "Brian Schroeder (he) (S2'15)",
            "sender_id": 8317,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om vs om next",
            "submessages": [],
            "timestamp": 1441812339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7571d485f27fd3656371e4418e0e4f3e?d=identicon&version=1",
            "client": "website",
            "content": "<p>guessing \"no\" for now, at least because there needs to be a jsongraph-ish kind of thing on the server side</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46836651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bts@gmail.com",
            "sender_full_name": "Brian Schroeder (he) (S2'15)",
            "sender_id": 8317,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om vs om next",
            "submessages": [],
            "timestamp": 1441813545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone here have experience exposing an nrepl server using <code>nrepl.tools.server</code>?</p>\n<p>I want to inject some definitions into the session, and maybe have it autostart in a custom namespace and I can't figure out how.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46837276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "nrepl server",
            "submessages": [],
            "timestamp": 1441814308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bts@gmail.com\">@Brian Schroeder (S2'15)</span>  I don't know if Om Next is ready or not but there already is a jsongraph-ish thing on the server side - Datomic! From what I remember from the presentation, Om Next is using the Datomic pull syntax. My guess is it will be up to the community to write a backend query dispatcher for your DB of choice.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46838849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om vs om next",
            "submessages": [],
            "timestamp": 1441816495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7571d485f27fd3656371e4418e0e4f3e?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks -- yeah it seemed like he was using datomic for the demo. unfortunately I'm already using postgres/REST on the backend for this project. so, Om it is, for now</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 46838967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bts@gmail.com",
            "sender_full_name": "Brian Schroeder (he) (S2'15)",
            "sender_id": 8317,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "om vs om next",
            "submessages": [],
            "timestamp": 1441816700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47255007,
            "is_me_message": false,
            "last_edit_timestamp": 1442640263,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro expansion",
            "submessages": [],
            "timestamp": 1442632696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47255377,
            "is_me_message": false,
            "last_edit_timestamp": 1442640268,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro expansion",
            "submessages": [],
            "timestamp": 1442633849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Seems they might be making their way into scala. There are already a few transducer libraries for scala, but this would be replacing core functionality.<br>\n<a href=\"https://github.com/jsuereth/slip/blob/wip/view-proposal/0027-collection-view-redesign.md\" target=\"_blank\" title=\"https://github.com/jsuereth/slip/blob/wip/view-proposal/0027-collection-view-redesign.md\">https://github.com/jsuereth/slip/blob/wip/view-proposal/0027-collection-view-redesign.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47855751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers on the march",
            "submessages": [],
            "timestamp": 1443819706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's great to see languages talking to each other like that! It's what makes the FP community so good, people are quick to adapt ideas that are just plain good.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47855920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "transducers on the march",
            "submessages": [],
            "timestamp": 1443819953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>does anyone here use Sublime/SublimeREPL with clojure? trying to figure out some of the key bindings</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>also, be gentle, am clojure noob, reading brave clojure and they recommend emacs, but not sure I want to switch editors yet...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>Spacemacs &lt;= nuff Said <span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span> can confirm :P</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128195,
            "is_me_message": false,
            "last_edit_timestamp": 1444317629,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>My actual suggestion is to keep your repl in emacs and your text editing in Sublime. As someone who started Clojure on Sublime, then moved to emacs, I can confirm that Clojure development is MUCH better on emacs. If emacs might be your goal in the future, then maybe JUST doing repl development in it would be a nice way to get started.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Um, to a further point, like, there are several people here who could help you set up the repl in emacs but I'm not sure anyone can help you on Sublime. But if you DO decide to take my advice about this split development style, please come grab me so I can set you up!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though maybe there are alums who develop on Sublime, so I shouldn't speak so generally.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>And yes I wouldn't recommend anyone to learn emacs on anything other than spacemacs it's just flat out better than emacs in all ways, 5x as much if you're a newbie.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>awesome. thanks for the input. I'm going to continue to futz around a little bit with SublimeREPL but I certainly could see myself switching to emacs later, so I will definitely ping you then. just want to stick to learning the language features first, then decide if I need a new tool. but it sounds like the benefits could outweigh in the long run</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>spacemacs &gt; emacs &gt; sublime &gt; stone tablet ...?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>nano fits in somewhere between sublime and stone tablet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>be fair</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>The way I figure it is that SublimeREPL is it's own new tool anyway, so the overhead of learning to use nREPL on emacs should be comparable, you know?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>and then there's ed, which is somewhere to the right of stone tablet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444317966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though, actually, there's nothing wrong with doing your repling on the command line, either.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>it appears SublimeREPL bridges directly to the nREPL</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>like it just spins up a new \"lein repl\" from your project root</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>... if that makes sense. I might be talking outta my ass</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds like that's right. I mostly mean on the installation and key binding fronts</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>ahh</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":sheep:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/sheep.png\" title=\":sheep:\"> Good luck!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p><img alt=\":turtle:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/turtle.png\" title=\":turtle:\"> thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>oops, i guess I just needed to read the docs a little more, you have to release your initial key combo before pressing 'l' or 'b' for line or block to send to the REPL</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>'ctl+,' first, then the thing you want to send as a separate keypress... funky.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":cold_sweat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/cold_sweat.png\" title=\":cold_sweat:\"> yeaaaa</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48128858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444318432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have used Sublime REPL but I ended up switching to Spacemacs because I could never get it to feel not-clunky. :/</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48129674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444319488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been writing Clojure for years, and I see a lot of people (myself included) spending time setting up an integrated REPL. Try running your favorite text editor and a lein repl (or boot repl or figwheel repl or whatever) side by side, and making use of load-file in the REPL, copy-paste, and temporary side effects in your text editor. It works surprisingly well.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48129974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444319840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>If all you want to do is learn Clojure and you don't want to futz around, Cursive for IntelliJ is really your best bet. I never spend anytime setting up integrated REPLs anymore.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130051,
            "is_me_message": false,
            "last_edit_timestamp": 1444319910,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444319899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Is cursive officially out yet, or is it still in the EAP phase?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also try light table.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320416,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cestdiego@gmail.com\">@Diego Berrocal (F2'15)</span> as much as I like Light Table I cannot recommend it to anyone yet, it still has too many issues.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"outofthemadness@gmail.com\">@James A. Keene (W1'14)</span> still EAP, but it's already light years ahead of everyone else ... and I've actually tried everything else. vim-fireplace, SublimeText, Emacs (swank-clojure, cider), nightcode etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Emacs is probably the 2nd best environment but the story around ClojureScript is the pits - Cursive again is way ahead</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>but then again, it's like learning tons of editor and IDE's, with Spacemacs/Emacs it's like learning once, and then just configurig it for certain languages. It can go like this:</p>\n<p>python -&gt; PyCharm /   Emacs with anaconda-mode<br>\njavascript -&gt; WebStorm (Itellij)  / Emacs with js2-mode<br>\nClojure  -&gt;    Intellij derivative for it / Emacs with clojure-mode and awesome repl integration.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cestdiego@gmail.com\">@Diego Berrocal (F2'15)</span> I've used Emacs for 11 years, and I still do for org-mode, the problem is the \"just configuring\" part. Never is.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>It never ends indeed :( haven't tried Cursive. Might be surprised :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's possible to say no to configuration if you are ok with stone age tools (and unix)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444320944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cursive looks great, my biggest problem is that it's always great in the beginning. Everyone loved Light Table a year ago, and it was The Future. Same thing with the new hot emacs package. Very often ends in endless configuration or abandonware, or something else</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48130939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You should listen to David's advice though, he's way more experienced and productive in Clojure than I'm :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> Cursive isn't new anymore :) And I use it for actual Cognitect work so the bar is very high.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131154,
            "is_me_message": false,
            "last_edit_timestamp": 1444321376,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> you are right, and I figured you do. I'm just overly skeptical - the rule of thumb I use is that if something has been around for X years it's, not knowing anything else, going to be around for X more years.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321479,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@oskarth.com\">@Oskar Thor\u00e9n (F'12)</span> Everything comes and goes, Emacs is only ever as good as the packages that support your language and the maintainers that support. And that has crashed and burned a few times for Clojure in the past 7 years I've used it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cursive might also crash and burn. But at the moment it's the best tool for focusing on being effective with Clojure IMO.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allie.jones@gmail.com\">@Allie Jones (W'13)</span> that is EXACTLY why I switched. Sublime never felt tight. And um, <span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>, does Cursive play nice with ClojureCLR? I write lots of Arcadia code, and I wouldn't want to swap editors just to write CLR stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span> no it doesn't. Ramsey Nasser one of the lead devs on Arcadia uses SublimeText. Tims Gardner uses Emacs + inferior-lisp.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's a shame. Maybe one day!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span> yeah ClojureCLR community is non-existent outside of Arcadia so there's not much incentive until that really takes off.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48131537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444321986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>thanks again everyone!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48133654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "editor",
            "submessages": [],
            "timestamp": 1444325573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/1HMtYWO3QMHB4wwfdvUTHjRzEnlHccO0AhrGNhuykovA/edit#gid=0\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1HMtYWO3QMHB4wwfdvUTHjRzEnlHccO0AhrGNhuykovA/edit#gid=0\">https://docs.google.com/spreadsheets/d/1HMtYWO3QMHB4wwfdvUTHjRzEnlHccO0AhrGNhuykovA/edit#gid=0</a> &lt;== THIS NEEDS MORE VOTES</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48330363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444757332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f727856d13b61ec63a08b140a5aad13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I put Tim Baldridge up too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48331483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rose@superluser.com",
            "sender_full_name": "Rose Ames (W2'16)",
            "sender_id": 5011,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444758972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>idk who a tim is</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48331791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444759341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>I've ipmlemented a toy lisp in php... because reasons <a href=\"https://github.com/blackwood/phlp\" target=\"_blank\" title=\"https://github.com/blackwood/phlp\">https://github.com/blackwood/phlp</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444866454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>please break it/play with it, etc. :D</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444866522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "website",
            "content": "<p>That is amazing.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444866585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>thanks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444866859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p><img alt=\":cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/cat.png\" title=\":cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444866871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5e235dd57a562e435a8a6002d8e82fee64907ff7?x=x&version=2",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>I just got a linkedin message that said<br>\n<strong> WANTED: PROGRAMMER</strong> MUST HAVE 7 YEARS PHLP EXPERIENCE </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "duncanregan@gmail.com",
            "sender_full_name": "Duncan Regan (F2'15)",
            "sender_id": 8705,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444867073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>hahaha</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48391838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "phlp",
            "submessages": [],
            "timestamp": 1444867780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>+1'd HICKEY FOR RESIDENT</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48432753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444950422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>+1</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48432757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444950429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>I'd do a second batch if this happened</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48433244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444951455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72772603199ba79a1635578c419b06361d921199?x=x&version=1",
            "client": "website",
            "content": "<p>(read that as \"for president\")</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48433246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tn.pablo@gmail.com",
            "sender_full_name": "Pablo Torres (W'14)",
            "sender_id": 4997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1444951463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh my gooooood</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48499877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445108192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>Please make this happen</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48499881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445108241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"giorgio.m.leveroni@gmail.com\">@Giorgio Leveroni (S'14)</span> I tried out your transients suggestion, and the loop, and my algorithm went from being super messy and tough to SO elegant. Geez it was so easy to write like this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48499882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445108243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Written! Look at how neat that function is. It does ALL the diffing I need.<a href=\"/user_uploads/13/zgWOWORq7LxG7aKNSzb_Sh8w/screen-shot-2015-10-17-at-50454-pm.png\" target=\"_blank\" title=\"screen-shot-2015-10-17-at-50454-pm.png\">screen-shot-2015-10-17-at-50454-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/zgWOWORq7LxG7aKNSzb_Sh8w/screen-shot-2015-10-17-at-50454-pm.png\" target=\"_blank\" title=\"screen-shot-2015-10-17-at-50454-pm.png\"><img src=\"/user_uploads/13/zgWOWORq7LxG7aKNSzb_Sh8w/screen-shot-2015-10-17-at-50454-pm.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>nice <span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span>! transients are just what you needed :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>(although I am interested in knowing how the function was before)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Before I used the transients or before I started rewriting this at all?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502874,
            "is_me_message": false,
            "last_edit_timestamp": 1445116545,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe both?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>My first version was super lazy I just got the ids, used clojure.set/difference and interesection, anything just in the old one was a delete, anything just in the new one was a new, anything in both was an edit. I didn't diff past that at all (that e-diff function is really just calling clojure.data/diff and cleaning up the result for me), so I just assumed any shared id was a complete change of the object.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yesterdays' version compared ids using diff like <code>(diff (keys old) (keys new))</code> and then diffed any edits. But because I was using diff in that first spot, I had to prune out lots of nils and stuff and massage the data a lot more than in this simple recursion.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48502975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Doing it all in a <code>loop</code> let me avoid all the massaging, and using transients let me build the result more efficiently, but it's more or less similar to what I had yesterday</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48503015,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Basically the same thing but I'm not repeating lots of work</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48503023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445116861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>and the resulting code is easier to read/grok</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48503152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445117165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah it's so readable. I feel like I need to use loop a lot more often, the resulting code is so nice.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48503208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445117301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/11ed5743e4e57d1aa01ba7581e2fdd702ded658c?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/tallesl/Rich-Hickey-fanclub\" target=\"_blank\" title=\"https://github.com/tallesl/Rich-Hickey-fanclub\">https://github.com/tallesl/Rich-Hickey-fanclub</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48634376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "davoclavo@gmail.com",
            "sender_full_name": "David Gomez-Urquiza (W2'15)",
            "sender_id": 7087,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445415887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>nice, thanks for sharing. Just listened to \"Clojure: Made Simple\", and I think his voice sounds a little like coach mcguirk...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48646290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445441611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll do a 3rd batch if that's happening</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48661715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445464786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91110739a69aa1d40ecedfcd998320a3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"madhuvishy@gmail.com\">@Madhumitha Viswanathan (F1'14)</span> would that make you the first 3rd batcher?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48661873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tsinha@gmail.com",
            "sender_full_name": "Tanoy Sinha (F1'14)",
            "sender_id": 955,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445465010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/739a6102890fca3aa52f04998eb548e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>ha ha probably</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48661936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "madhuvishy@gmail.com",
            "sender_full_name": "Madhumitha Viswanathan (F1'14)",
            "sender_id": 5019,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "RICH HICKEY AS RESIDENT?",
            "submessages": [],
            "timestamp": 1445465101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>NOOB QUESTION ALERT! So, I'm doing an exercise that intends to have the user implement <code>range</code> without using the function itself... I can <code>(println)</code> my value as my function recurs and the values look correct, but it always returns nil at the end. is there a way to short circuit this so that it returns my conjoined sequence instead of nil? what am i missing?</p>\n<p><code>(#(loop [i %1 z [%1]] (when (&lt; i %2) z (recur (inc i) (conj z (inc i))))) 1 8) ; should output [1 2 3 4 5 6 7]</code> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48701480,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "simple koan drives recurser mad",
            "submessages": [],
            "timestamp": 1445543392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"giorgio.m.leveroni@gmail.com\">@Giorgio Leveroni (S'14)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48701848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "simple koan drives recurser mad",
            "submessages": [],
            "timestamp": 1445543868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p><code>#(loop [i %1 z [%1]] (let [n (inc i)] (if (&lt; n %2) (recur n (conj z n)) z)))</code> thats better</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48701914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "simple koan drives recurser mad",
            "submessages": [],
            "timestamp": 1445543965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p><span class=\"user-mention\" data-user-email=\"duncanregan@gmail.com\">@Duncan Regan (F2'15)</span>  you were right too, but it didn't occur to me to change the order of the expressions after changing it to an <code>if</code> statment <img alt=\":rubberduck:\" class=\"emoji\" src=\"https://external-content.zulipcdn.net/d6158e463fcc013bc5a6a327c1c72927c8675354/687474703a2f2f73722e70686f746f73332e666f746f7365617263682e636f6d2f627468756d622f4353502f4353503231332f6b323133353636372e6a7067\" title=\":rubberduck:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48701930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "simple koan drives recurser mad",
            "submessages": [],
            "timestamp": 1445544001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>d'doy</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48701955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "simple koan drives recurser mad",
            "submessages": [],
            "timestamp": 1445544006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Coming into this late, but transients aren't something I've used much of.</p>\n<p><span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span> are transients required for this pattern, or could you have done it with regular immutable vectors and it would have just been slower?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48860041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445896822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>They're required because it's an extremely performance sensitive section of the game (that diff will happen once a frame), but if you could tolerate slower code, you could totally just have done it with regular immutable data structures.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48861648,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Transients",
            "submessages": [],
            "timestamp": 1445899467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f727856d13b61ec63a08b140a5aad13a?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyone else heading to Philadelphia this weekend?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49601812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rose@superluser.com",
            "sender_full_name": "Rose Ames (W2'16)",
            "sender_id": 5011,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1447433007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>my coworkers are looking into the datomic training session on sunday</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49610523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1447447134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Will be there!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49610801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1447447633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wish I could!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49615607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "conj",
            "submessages": [],
            "timestamp": 1447455033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>After today's Clojure talk and demonstration and watching this video <a href=\"https://www.youtube.com/watch?v=gsffg5xxFQI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gsffg5xxFQI\">https://www.youtube.com/watch?v=gsffg5xxFQI</a> I'm sold. </p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=gsffg5xxFQI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=gsffg5xxFQI\"><img src=\"https://i.ytimg.com/vi/gsffg5xxFQI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49724094,
            "is_me_message": false,
            "last_edit_timestamp": 1447713447,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurescript",
            "submessages": [],
            "timestamp": 1447713438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm so looking forward to going deep into the rabbit hole :D</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49724102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurescript",
            "submessages": [],
            "timestamp": 1447713469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Welcome to the club <span class=\"user-mention\" data-user-email=\"cestdiego@gmail.com\">@Diego Berrocal (F2'15)</span> ! I was first introduced to clojure at RC through a talk as well. Now I've built my company on it. It's a lot of fun!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49728849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurescript",
            "submessages": [],
            "timestamp": 1447722005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>I was hoping to automate the creation of my jar via lein on my server, but it looks like that might consume a bit too much memory--on a related note, does anyone have any strategies for speeding up lein or on automating clojure/clojurescript deploys?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49768693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447799572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"miles@blackwood.io\">@Miles Blackwood Robinson (F2'15)</span> A common pattern it to build an uberjar and scp/rsync it over. I do this, and I'm medium-happy with it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49790753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447852023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I gave a talk at the Toronto clojure meetup about Datomic last night.</p>\n<p>I think y'all will enjoy the cake I brought.</p>\n<p><a href=\"/user_uploads/13/AU049G5vR_84h-sZdJMVvhhL/img_0506.jpg\" target=\"_blank\" title=\"img_0506.jpg\">img_0506.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/AU049G5vR_84h-sZdJMVvhhL/img_0506.jpg\" target=\"_blank\" title=\"img_0506.jpg\"><img src=\"/user_uploads/13/AU049G5vR_84h-sZdJMVvhhL/img_0506.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49795455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Yes there was cake",
            "submessages": [],
            "timestamp": 1447861542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>thanks for the input -- I suppose I'll probably end up building my uberjar locally and let git do the syncing and just have my post-deploy commands restart the jetty server</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49796224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447862876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"miles@blackwood.io\">@Miles Blackwood Robinson (F2'15)</span> Out of curiosity what are you writing your deploy scripts in?</p>\n<p>I have a capistrano script that runs lein uberjar and syncs with rsync, but I am definitely looking for a Better Way.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49797710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447865200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>or does your server just auto pull from git?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49797718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447865217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>I'm catching git webhooks with a sinatra (ruby) endpoint, and then recloning the repo into a matching folder with the same name</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49798094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447865783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>I also set it up to take any number of shell commands to run sequentially in that dir after cloning</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49798105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447865824,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>is there any downside to storing the .jar in my git history?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49798196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447865987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I have heard that git isn't suited to large binary files, but I can't tell you specifically why (probably take up a lot of space to keep history?)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49798808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lein memory consumption",
            "submessages": [],
            "timestamp": 1447866904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/65f4604519e22965923bc4d8e4582c1f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey has anyone run into Re-frame?  <a href=\"https://github.com/Day8/re-frame\" target=\"_blank\" title=\"https://github.com/Day8/re-frame\">https://github.com/Day8/re-frame</a> .  What are your opinions of it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50003629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gregt87@gmail.com",
            "sender_full_name": "Gregory Thompson (he) (W1'19)",
            "sender_id": 8853,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Re-frame",
            "submessages": [],
            "timestamp": 1448301427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"gregt87@gmail.com\">@Gregory Thompson</span> it's quite popular. No strong personal opinions about it since I haven't used it myself, but a lot of people seem to like it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50047567,
            "is_me_message": false,
            "last_edit_timestamp": 1448386640,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Re-frame",
            "submessages": [],
            "timestamp": 1448386632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're having fun with Clojure or ClojureScript please fill out the survey: <a href=\"https://twitter.com/cognitect/status/672813255451086848\" target=\"_blank\" title=\"https://twitter.com/cognitect/status/672813255451086848\">https://twitter.com/cognitect/status/672813255451086848</a>. Thanks!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/cognitect/status/672813255451086848\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/378800000462831381/01054803ccd66143c093435d7cec2da9_normal.png\"></a><p>2015 State of Clojure Community Survey  <a href=\"https://t.co/3aGXMwb9hK\" target=\"_blank\" title=\"https://t.co/3aGXMwb9hK\">http://blog.cognitect.com/blog/2015-clojure-community-survey</a></p><span>- Cognitect, Inc. (@cognitect)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50462852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure / ClojureScript Survey",
            "submessages": [],
            "timestamp": 1449247999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><code>defn</code> and <code>defmacro</code> have parameter signatures like <code>[name doc-string? attr-map? ([params*] prepost-map? body)+ attr-map?]</code>, with kleene stars and pluses. these are defined in <code>:arglists</code> in their metadata. are these signatures actually used to define the behavior/validation of <code>defn</code> and <code>defmacro</code> forms, or are they for display purposes only? can I create bespoke signatures for my own macros to give users a richer understanding of how they're meant to be used?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50473619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro signature grammar",
            "submessages": [],
            "timestamp": 1449264692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> just used to communicate information - no semantics</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50475238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro signature grammar",
            "submessages": [],
            "timestamp": 1449267364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> but can I use metadata to override the signature presented in my emacs minibuffer?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50475504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro signature grammar",
            "submessages": [],
            "timestamp": 1449267869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>for my own macros?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50475506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro signature grammar",
            "submessages": [],
            "timestamp": 1449267884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> I think <code>:arglists</code> meta should work regardless of macros or fns, you should try it. I don't recall at the moment.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50475515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macro signature grammar",
            "submessages": [],
            "timestamp": 1449267922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone here use a debugger? If so which one?</p>\n<p>My colleague is very used to rubyland where you can put a <code>binding.pry</code> anywhere and it stops execution and gives you a repl</p>\n<p>We've looked at <a href=\"http://brownsofa.org/blog/2014/08/03/debugging-in-clojure-tools/\" target=\"_blank\" title=\"http://brownsofa.org/blog/2014/08/03/debugging-in-clojure-tools/\">http://brownsofa.org/blog/2014/08/03/debugging-in-clojure-tools/</a> and experimented with <a href=\"https://github.com/razum2um/clj-debugger\" target=\"_blank\" title=\"https://github.com/razum2um/clj-debugger\">https://github.com/razum2um/clj-debugger</a> but it still feels like something is missing, especially since clj-debigger doesn't work well for breaking on a web request (server is launched from a repl).</p>\n<p>I've played with cider-debug as well, which seems to be the best one, but my colleague uses vim...</p>\n<p>Whenever I read about lisp machines I hear that any error  would just drop the user directly into a feature-rich debugger. Do common lisp users have this? I know cider-debug is based on eldebug, and it seems like emacs-lisp users have something akin to this debugging magic. How do I get it as a clj user?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50707579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1449753242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> yes SBCL has a fantastic debugger. I use Cursive with Clojure which also has a fantastic debugger.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50708398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1449754941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"maxim@ontoillogical.com\">@Max Veytsman (S'14)</span> I actually have a series of blog posts detailing all of the crazy things you can do with the common lisp debugger. You can find the first post in the series <a href=\"http://malisper.me/2015/07/07/debugging-lisp-part-1-recompilation/\" target=\"_blank\" title=\"http://malisper.me/2015/07/07/debugging-lisp-part-1-recompilation/\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50738095,
            "is_me_message": false,
            "last_edit_timestamp": 1449802642,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1449802626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"michaelmalis2@gmail.com\">@Michael Malis (S1'15)</span> that looks great!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50857220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450069030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>I started picking up some clojure recently and I'm a little confused as to why <code>create-starter-tableau</code> returns (what I think are) functions, and not the expected hashes. <code>cards</code> in this context is just a vector of hashes. Any ideas (or other parts of this that doesn't look right?). </p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">make-tableau</span> <span class=\"p\">[</span><span class=\"nv\">stock</span> <span class=\"nv\">num</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"p\">{})</span> <span class=\"nv\">num</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">create-starter-tableau</span> <span class=\"p\">[</span><span class=\"nv\">stock</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">make-tableau</span> <span class=\"nv\">stock</span> <span class=\"nv\">%</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">play-solitaire</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"nf\">let</span>\n    <span class=\"p\">[</span>\n      <span class=\"nv\">stock</span> <span class=\"p\">(</span><span class=\"nf\">shuffle</span> <span class=\"nv\">cards</span><span class=\"p\">)</span>\n      <span class=\"nv\">foundation</span> <span class=\"p\">[]</span>\n      <span class=\"nv\">waste</span> <span class=\"p\">[]</span>\n      <span class=\"nv\">tableau</span> <span class=\"p\">(</span><span class=\"nf\">create-starter-tableau</span> <span class=\"p\">(</span><span class=\"nb\">rest </span><span class=\"nv\">stock</span><span class=\"p\">))</span>\n      <span class=\"nv\">available-card</span> <span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">stock</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\">; body stuff</span>\n    <span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh dangit</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think I just figured it out</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>this looks like it's mapping each part of the vector with the <code>make-array</code> function?</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">make-tableau</span> <span class=\"p\">[</span><span class=\"nv\">stock</span> <span class=\"nv\">num</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"p\">{})</span> <span class=\"nv\">num</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>sdkfjsl;kdfj I wasn't even utilizing the <code>stock</code> argument</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"matthewhl@gmail.com\">@Matthew Long (W'14)</span> why are you using <code>make-array</code> here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>I assume it's a way of creating an array of x size. Is there a better one to use?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"matthewhl@gmail.com\">@Matthew Long (W'14)</span> but why do you want to make mutable arrays here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301356,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>this only ever done for perf (premature optimization, yadda yadda) or interop</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is it better to make the mutable arrays inside the primary function? <code>play-solitaire</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"matthewhl@gmail.com\">@Matthew Long (W'14)</span> my question is deeper than that. Why aren't you just using vectors?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh - is it because map doesn't return vectors? Are they lists?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450982957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>should i use <code>into</code> to convert them</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450983038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48bee62bf5815a31a0102e4f7110b630?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suppose this is one of those major tenets of clojure that I should probably pay more attention to</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51301550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matthewhl@gmail.com",
            "sender_full_name": "Matthew Long (W'14)",
            "sender_id": 5018,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450983170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>make-array</code> is one of those functions you should only be using if you REALLY know why you're using it. Using vectors is more idiomatic for when you need a sequential data structure.  Arrays are the mutable arrays of JS and Java.  You might be fine just using whatever map returns you, unless you need to call <code>nth</code> on it, or something, but with solitaire, you're just popping off the heads of these card stacks, so the list that the map function gives back to you might be totally adequate for your needs. In Clojure, it's often best to work agnostically of the data structure you're given back. Most functions that work on list will work on vector, and you only need to worry about the conversion if you're calling functions that can only work on vectors.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51304341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450989421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, the <code>make-tableau</code> function is giving you functions back because you mapped using an array as a function, getting back a bunch of weird transducers. You'll notice that in your function, your map is only taking one argument, and that argument is not an anonymous function. (David should come yell at me if I'm wrong)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51304387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Debugger",
            "submessages": [],
            "timestamp": 1450989561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>it looks like the norm in clojure projects is to put tests in the same project as the code they\u2019re testing, as opposed to common lisp where it's more typical to create a separate project (or \"system\") for tests that end users will probably never load. from what I gather, putting them in the same project makes it easier to interactively modify both the source and the tests without having to use multiple cider connections/JVM processes that you're restarting all the time. but doesn't it also mean that even if I use a particular dependency only for test purposes, it will still be loaded in production builds? is there a standard way to tag dependencies as test-only so this won't happen?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51705333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test-only dependencies",
            "submessages": [],
            "timestamp": 1451898003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> production / release artifacts do not generally include test sources. All Maven based tooling has support for expressing this.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51712750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test-only dependencies",
            "submessages": [],
            "timestamp": 1451916122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I'm mostly experience with lein, and in lein, it's pretty simple to create different versions of stuff with different dependencies (in fact, I think lein gives you a dev, test, and min build with good enough defaults by default). I don't have a great example to show off, but if you look up build specific stuff with lein, you can probably find examples where people are only including test libraries in test builds and so on. Or even if you just make an empty project.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51909058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "test-only dependencies",
            "submessages": [],
            "timestamp": 1452293754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>(extreme beginner here)</p>\n<p>I'm building a super simple REST server in clojure that I intend to use as a microservice. I've written a simple wrapper to the <a href=\"http://omdbapi.com/\" target=\"_blank\" title=\"http://omdbapi.com/\">OMDB API</a> using clj-http, and now I'm trying to write an http server to expose those requests. I have what seems to be a sensible handler configuration, but it's broken in two ways I don't understand: </p>\n<p>- It returns a 0-length stream even though my request function returns a map;<br>\n- It returns a content-type:application/octet-stream even though I use wrap-json-response. </p>\n<p>Can anyone see what I'm doing wrong?</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">clrk-omdb.app</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">clrk-omdb.core</span> <span class=\"ss\">:as</span> <span class=\"nv\">omdb</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">compojure.core</span> <span class=\"ss\">:refer</span> <span class=\"ss\">:all</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">compojure.route</span> <span class=\"ss\">:as</span> <span class=\"nv\">route</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">ring.middleware.json</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">wrap-json-response</span><span class=\"p\">]]</span>\n            <span class=\"p\">[</span><span class=\"nv\">ring.middleware.defaults</span> <span class=\"ss\">:refer</span> <span class=\"ss\">:all</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">defroutes</span> <span class=\"nv\">movie-routes</span>\n  <span class=\"p\">(</span><span class=\"nf\">GET</span> <span class=\"s\">&quot;/movies/:title&quot;</span> <span class=\"p\">[</span><span class=\"nv\">title</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"p\">(</span><span class=\"nf\">omdb/find-movie</span> <span class=\"nv\">title</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">app</span>\n  <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">movie-routes</span>\n      <span class=\"p\">(</span><span class=\"nf\">wrap-json-response</span> <span class=\"ss\">:pretty</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nf\">wrap-defaults</span> <span class=\"nv\">api-defaults</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52273713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453063356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Oh my... I don't have an answer to that but I remember that <code>wrap-json-response</code> was not enough. Some dance with compojure was necessary to make that work :/</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453074343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Compare to that: <a href=\"http://zaiste.net/2014/02/web_applications_in_clojure_all_the_way_with_compojure_and_om/\" target=\"_blank\" title=\"http://zaiste.net/2014/02/web_applications_in_clojure_all_the_way_with_compojure_and_om/\">http://zaiste.net/2014/02/web_applications_in_clojure_all_the_way_with_compojure_and_om/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453074459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>you need to ring <code>response</code>a response</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453074485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>and you have to <code>(middleware/wrap-json-body)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453074497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>maybe some other stuff, too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453074503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"maciej.jaskowski@gmail.com\">@Matthew Ja\u015bkowski (W2'16)</span> great link! It was <code>response</code> that was lacking. I'd seen <code>wrap-json-body</code> but that's for reading requests. But adding <code>response</code> makes the thing work.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52282817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453085800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>You're welcome :) It kinda makes sense when you think about it: after all you return not only a value but also HTTP response code, header etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52283678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453088083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Absolutely. I think the thing that actually gets me is that I'm used to heavier frameworks like Django where you just assume that there's a lot of processing going on under the hood that you're not privy to - so it's normal, on the application level, to return only the data you're interested in and assume someone else is taking care of the rest. But I'm getting a feeling for the clojure way of doing things.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52300444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453130174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2721884d3a8177d1844095f4e7bf67b28df8719?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>The problem is, once you played a little with a libraries like ring and compojure there is non going back to heavy frameworks ;)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52301913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maciej.jaskowski@gmail.com",
            "sender_full_name": "Matthew Maciej Jaskowski (W2'16)",
            "sender_id": 8982,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Compojure confusion",
            "submessages": [],
            "timestamp": 1453133099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey everyone! I released version 1.0.0 of my ClojureScript slides and presentation framework! It's short, opinionated, and is engineering to make it super fast to write and test applications. It's SUPER hard to test any sort of example code in a slideshow, and Jobim aims to change that. Plus, it transpiles to Javascript, making it easy for you to host your presentations on your own personal websites. Because this is software, and because this is my first time using Clojars, I'm sure things are terribly broken. I would love it if any RCers tried it out and sent me bug reports. Thanks!</p>\n<p><a href=\"https://github.com/MysteryMachine/jobim\" target=\"_blank\" title=\"https://github.com/MysteryMachine/jobim\">https://github.com/MysteryMachine/jobim</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52362712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jobim",
            "submessages": [],
            "timestamp": 1453248137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>I've finally found some free time to pick up Clojure. I am currently doing <a href=\"http://clojurebridge.github.io/curriculum/#/\" target=\"_blank\" title=\"http://clojurebridge.github.io/curriculum/#/\">ClojureBridge Curriculum</a> and the first four chapters of <a href=\"https://github.com/clojure-cookbook/clojure-cookbook\" target=\"_blank\" title=\"https://github.com/clojure-cookbook/clojure-cookbook\">Clojure Cook Book</a>. Do you recommend any other books to pick up the basics?  I want to be ready to make a game using ClojureScript very soon. Any advice/pitfalls to avoid would be greatly appreciated.   </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54396339,
            "is_me_message": false,
            "last_edit_timestamp": 1457729633,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457729179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>With the help of <span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span>, I have a cool clojure spacemacs workflow using CIDER. I love using the REPL on the fly! </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54396427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457729350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>The Joy of Clojure is pretty great</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54396665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457729713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Clojure Applied is a pretty well-rounded guide to good practices from lower-level concepts to higher-level application architecture decisions. at about 200 pages, it doesn't go into depth on any particular topic, but it goes just far enough on every topic that you should have enough of a mental map to figure out how to go deeper on your own. after that, Joy of Clojure covers a lot of topics in great detail, but it has a lot of bad examples that explain language features by doing things you really shouldn't do with those language features, so you may want to see more clojure code in the wild before you pick it up</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54396792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457729892,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span>  and <span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span>  thanks <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54398488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457732644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":+1:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/+1.png\" title=\":+1:\"> Yay!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54404647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1457745564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not meaning to be a jerk, but don't read Joy of Clojure this early. It was my first Clojure book and it was hard to understand and the things I picked up were too advanced for the problems I was trying to solve. A year later, it was a much better read. Living Clojure is the best Clojure text for beginners right now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54570636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458148421,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the O'Reilly Clojure Programming is pretty good too if you're coming from Java/Ruby/Python</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54570841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458148717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>^ I learned from Clojure Programming, it was great</p>\n<p><a href=\"http://shop.oreilly.com/product/0636920013754.do\" target=\"_blank\" title=\"http://shop.oreilly.com/product/0636920013754.do\">http://shop.oreilly.com/product/0636920013754.do</a> </p>\n<p>Not to be confused with the book that follows O'Reilly naming convention, but isn't O'Reilly - <a href=\"https://pragprog.com/book/shcloj/programming-clojure\" target=\"_blank\" title=\"https://pragprog.com/book/shcloj/programming-clojure\">https://pragprog.com/book/shcloj/programming-clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54570990,
            "is_me_message": false,
            "last_edit_timestamp": 1458149026,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458148960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>+1 to Clojure Programming from O'Reilly as well. That was my second book and it was a lot better for me.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54572077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458150663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54586034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458175878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I kind of like <a href=\"http://www.braveclojure.com/\" target=\"_blank\" title=\"http://www.braveclojure.com/\">Clojure for the Brave and True</a>, which has the advantage that you can try as much of it as you like for free. <br>\nMost of these books were written a few years ago, which means they're not going to cover comparatively recent developments.  I believe both B+T and Clojure Applied cover <code>core.async</code>, which at this point is as important as the other concurrency constructs.  I don't think any of them talk about transducers, which fundamentally alter the way you compose streaming operations. <br>\nThe best advice I was given three years ago was that, whatever book I chose to read, I should only read half of it before diving in and trying to write something.  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54692065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458414912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Clojure Applied covers transducers</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54726638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458506706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>Do clojurians need to know transducers these days ? AFAIK they're only ~1 year old. The name of that feature is a bit scary, like monads  in haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54726734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458506907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I use them in my work, but then I didn't use clojure before they existed, so I don't know if I'd have written that code differently if I had already been used to processing sequences another way. but taking the time to learn them (and implement them for yourself!) is a good way to get an intuition for what xforms do in other contexts (like <code>into</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54726841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458507159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f33ab270e7b7512fc38d9dad2644501b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You definitely don't need to use transducers to use Clojure productively :) (doesn't mean they aren't useful)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54727136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ot@oskarthoren.com",
            "sender_full_name": "Oskar Thor\u00e9n (F'12)",
            "sender_id": 876,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458507952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I have overly documented misgivings about transducers, but I think they're here to stay, and they fundamentally change the way you do some very common things.  For example</p>\n<div class=\"codehilite\"><pre>(-&gt;&gt; myseq (map inc) (filter odd?) (reduce +))\n</pre></div>\n\n\n<p>turns into something like</p>\n<div class=\"codehilite\"><pre>(-&gt; (comp (map inc) (filter odd?)) (transduce + myseq))\n</pre></div>\n\n\n<p>You can still process collections the old way,  but  <code>core.async/map&gt;</code> &amp;co are now deprecated in favor of channels with transducers, which are now hard to avoid (but still under-documented).  </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54751678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458566841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> , yeah, there's definitely a risk that transducers become the moral equivalent of monads.  I really hate it when language proponents start saying you need to \"train your mind\" to grasp their exalted concepts. (To be fair, Clojurians don't use that phrase yet, but it's immensely popular at Haskell meetups.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54751886,
            "is_me_message": false,
            "last_edit_timestamp": 1458567204,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Learning Clojure Basics",
            "submessages": [],
            "timestamp": 1458567154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>are there any good takes on CLOS stuff like this in clojure? is it just not part of clojure style?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54926656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458918869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>you mean like <code>:after</code> and <code>:around</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54926713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458918967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54928724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458922734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>exactly that.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54928726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458922743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>even if as a library.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54928728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458922753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I think this is one place where people would be more likely to roll their own one-off extensions because multimethods are so simple they could have been made available as a small library instead of a core language feature in the first place, and there aren't a lot of moving parts you have to integrate with, and they weren't designed for performance. since they allow totally arbitrary dispatch functions and ad-hoc hierarchies already, any extension would really be a restriction on their power, and the choices you make in restricting their flexibility in one dimension might be unacceptable to somebody who needs to extend their methods along that dimension for some other purpose.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54930497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458926187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I mean, I've written some helper macros to express some higher-level multimethod patterns more concisely, but they're tailored to the exact situation I was facing and wouldn't be easily reuseable.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54930577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458926340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>hmm, I am not a macro wizard (in fact, i've never macro-ed), so maybe I'm incredibly naive here, but it seems like it would be difficult to do around methods for code you didn't write unless everyone used the same mechanism.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458955956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>like, if someone else calls the method</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458955960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>in another package</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458955970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>you can't customize their calls</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458955975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>which seems to be how it works in CLOS</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458955984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "desktop app Mac 0.5.0",
            "content": "<p>(haven't done any CLOS either, still trying to wrap my head around the concepts.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54947882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "advice/secondary methods",
            "submessages": [],
            "timestamp": 1458956001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Hi pals,</p>\n<p>I'm going to release a wrapper library for datomic that I've been working on for a while, basically it gives you:</p>\n<p>- A simplified syntax for defining Datomic models.<br>\n- Arbitrary data validations and default<br>\n- Above is achieved by auto-generating both transactor function and Clojure functions to create and upsert entities of each model.<br>\n-  An ActiveRecord-inspired query DSL to cover the most common kinds of queries without having to use the Datomic query API.<br>\n- Entities in your application code represented as lazy maps, complete with arbitraty computed fields. It's like the Datomic Entity API on steroids<br>\n- Migrations of sorts</p>\n<p>It's here: <a href=\"https://github.com/appcanary/crustacean/tree/docs\" target=\"_blank\" title=\"https://github.com/appcanary/crustacean/tree/docs\">https://github.com/appcanary/crustacean/tree/docs</a></p>\n<p>I'd appreciate any feedback before I merge the documentation branch and \"release\" it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55417113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "My Datomic wrapper library",
            "submessages": [],
            "timestamp": 1459524444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>what does CRU stand for?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55417211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "My Datomic wrapper library",
            "submessages": [],
            "timestamp": 1459524555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>Create Read Upsert</p>\n<p>I should change the repo tagline to something more meaningful</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55417324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "My Datomic wrapper library",
            "submessages": [],
            "timestamp": 1459524660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>I initially meant it as a play on CRUD that acknowledges the append only no-deletion nature of datomic. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55417352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "My Datomic wrapper library",
            "submessages": [],
            "timestamp": 1459524704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "website",
            "content": "<p>maybe it should be CRUR - Create Read Upsert Retract</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 55417410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "My Datomic wrapper library",
            "submessages": [],
            "timestamp": 1459524739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Crossposting from announce, but I'll be speaking at the Clojure NYC meetup about a piece of software I wrote at RC! I'd love to see RC Clojure friends there! :D :D :D</p>\n<p><a href=\"http://www.meetup.com/Clojure-NYC/events/231338036/\" target=\"_blank\" title=\"http://www.meetup.com/Clojure-NYC/events/231338036/\">http://www.meetup.com/Clojure-NYC/events/231338036/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58297957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Meetup",
            "submessages": [],
            "timestamp": 1464016955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>Supporting your talk from across the other side of the pond <span class=\"user-mention\" data-user-email=\"physicsfu@gmail.com\">@Salomao Diovanni Montemezzo Becker (F2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58302558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Meetup",
            "submessages": [],
            "timestamp": 1464020483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> Yeaaa! <span class=\"user-mention\" data-user-email=\"kal_ali@hotmail.com\">@Khalid Omar Ali (F2'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58303947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure Meetup",
            "submessages": [],
            "timestamp": 1464021445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Does anyone want to pair on macros next week? No goal in mind besides learning... in NY, but remote works</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62726957,
            "is_me_message": false,
            "last_edit_timestamp": 1470440701,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470440648,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>I believe I might be of service <a href=\"https://www.youtube.com/watch?v=yQ6bolOsx8s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=yQ6bolOsx8s\">https://www.youtube.com/watch?v=yQ6bolOsx8s</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.youtube.com/watch?v=yQ6bolOsx8s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=yQ6bolOsx8s\"><img src=\"https://i.ytimg.com/vi/yQ6bolOsx8s/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62733713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470441600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>want to meet around the space next week?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62755498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470444728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>sure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62755565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470444922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>which of TWTh is best for you? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62755606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470444970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>W/Th both seem fine</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62755623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470445061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0cafd2aa397b7d2709f0e917f76ddcd30d04e8e6?x=x&version=1",
            "client": "website",
            "content": "<p>i would be interested in macros for a later week if you are too <span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62762717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kangren.chia@gmail.com",
            "sender_full_name": "Kang Ren Chia (S2'16)",
            "sender_id": 9487,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470462652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>time?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62779164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470506841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>let's do it... how about W next week? What time would be best?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 62779166,
            "is_me_message": false,
            "last_edit_timestamp": 1470507021,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Macrologists wanted",
            "submessages": [],
            "timestamp": 1470506872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>I'm in the process of translating some code from Scheme to Clojure.</p>\n<p>The Scheme code uses a macro called pmatch (<a href=\"https://github.com/webyrd/quines/blob/master/pmatch.scm\" target=\"_blank\" title=\"https://github.com/webyrd/quines/blob/master/pmatch.scm\">https://github.com/webyrd/quines/blob/master/pmatch.scm</a>) to pattern match arguments to output expressions. Specifically, it allows for variable capture as follows:</p>\n<div class=\"codehilite\"><pre>    (define eval-expr\n      (lambda (expr)\n        (pmatch expr\n          [(zero? ,e)\n           (zero? (eval-expr e)))\n    ...\n</pre></div>\n\n\n<p>In this use example, some input expression to eval-expr, '(zero? 0), should match the the first case. The car of the list matches to zero? and the arity of the input matches. As a consequence, 0 is bound to ,e and passed to (zero? (eval-expr e)), and this expr is evaluated recursively.</p>\n<p>In Haskell, which supports pattern matching natively, the code might translate to something like the following:</p>\n<div class=\"codehilite\"><pre>    Prelude&gt; let evalexpr &quot;zero?&quot; e = (e == 0) -- ignoring recursive application\n    Prelude&gt; evalexpr &quot;zero?&quot; 0\n    True\n</pre></div>\n\n\n<p>In Clojure, I first tried to substitute pmatch with core.match (<a href=\"https://github.com/clojure/core.match\" target=\"_blank\" title=\"https://github.com/clojure/core.match\">https://github.com/clojure/core.match</a>), which was written by David Nolen and others, but, to my knowledge, this macro seems to<br>\n    1. only support a single arity of arguments per use<br>\n    2. only support explicit matching, rather than property based matching (available as guards)</p>\n<p>Another option I'm trying is a lesser known macro called defun (<a href=\"https://github.com/killme2008/defun\" target=\"_blank\" title=\"https://github.com/killme2008/defun\">https://github.com/killme2008/defun</a>), which defines pattern matching functions. Here's an example:</p>\n<div class=\"codehilite\"><pre>    (defun count-down\n      ([0] (println &quot;Reach zero!&quot;))\n      ([n] (println n)\n         (recur (dec n))))\n</pre></div>\n\n\n<p>I'm still exploring defun to see if it gives me the flexibility I need. <strong>Meanwhile, does anyone have suggestions of how to pattern match in Clojure with 1. flexible arity 2. variable capture?</strong></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100185024,
            "is_me_message": false,
            "last_edit_timestamp": 1471716108,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1471715988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100187869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1471723312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> you can use patterns like this to match against code, but it's not visually quite as clean:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">expr</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">match</span> <span class=\"nv\">expr</span>\n    <span class=\"p\">([</span><span class=\"ss\">&#39;zero?</span> <span class=\"nv\">e</span><span class=\"p\">]</span> <span class=\"ss\">:seq</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"p\">(</span><span class=\"nf\">eval-expr</span> <span class=\"nv\">e</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p>in common lisp, you can modify the read-table to reuse quasiquote/unquote syntax for pattern matching: <a href=\"https://github.com/m2ym/optima/#quasiquotation\" target=\"_blank\" title=\"https://github.com/m2ym/optima/#quasiquotation\">https://github.com/m2ym/optima/#quasiquotation</a></p>\n<p>you can't intercept quasiquotes in clojure; its reader works a bit differently. after playing with it for a bit, I came up with something that seems to work like your first example, if you just want to use unquotes to designate variables and write patterns as if they're one quotation level down from what <code>match</code> expects (warning: ad-hoc code walking, use at your own peril):</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">upquote</span> <span class=\"p\">[</span><span class=\"nv\">form</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n    <span class=\"p\">(</span><span class=\"nb\">vector? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">mapv</span> <span class=\"nv\">upquote</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"nf\">set?</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"o\">#</span><span class=\"p\">{}</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">upquote</span><span class=\"p\">)</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">map? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">{}</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">upquote</span><span class=\"p\">)</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">seq? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">cond</span>\n      <span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"nv\">form</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">form</span><span class=\"p\">)</span> <span class=\"ss\">&#39;clojure.core/unquote</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\">second </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n\n      <span class=\"ss\">:else</span>\n      <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">upquote</span> <span class=\"nv\">form</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"o\">`&#39;~</span><span class=\"nv\">form</span>\n\n    <span class=\"ss\">:else</span>\n    <span class=\"nv\">form</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">match-code</span> <span class=\"p\">[</span><span class=\"nv\">vars</span> <span class=\"o\">&amp;</span> <span class=\"nv\">clauses</span><span class=\"p\">]</span>\n  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nf\">match</span> <span class=\"o\">~</span><span class=\"nv\">vars</span>\n     <span class=\"o\">~@</span><span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">pat</span> <span class=\"nv\">expr</span><span class=\"p\">]]</span>\n                 <span class=\"p\">[(</span><span class=\"nf\">upquote</span> <span class=\"nv\">pat</span><span class=\"p\">)</span> <span class=\"nv\">expr</span><span class=\"p\">])</span>\n         <span class=\"p\">(</span><span class=\"nf\">partition</span> <span class=\"mi\">2</span> <span class=\"nv\">clauses</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">expr</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">match-code</span> <span class=\"nv\">expr</span>\n    <span class=\"p\">([</span><span class=\"nb\">zero? </span><span class=\"o\">~</span><span class=\"nv\">e</span><span class=\"p\">]</span> <span class=\"ss\">:seq</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"p\">(</span><span class=\"nf\">eval-expr</span> <span class=\"nv\">e</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p>with a little more tweaking after the \"upquote\" step, I bet you could make the patterns look just like they do in pmatch.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100335442,
            "is_me_message": false,
            "last_edit_timestamp": 1472061656,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472061603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>as for variable arity, do you mean something like this?</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">]]</span>\n  <span class=\"p\">(</span><span class=\"nf\">match</span> <span class=\"nv\">x</span>\n    <span class=\"p\">[</span><span class=\"nv\">a</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"nv\">a</span><span class=\"p\">]</span>\n    <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">]</span>\n    <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"o\">&amp;</span> <span class=\"nv\">c</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"nv\">c</span><span class=\"p\">]))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100335460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472061643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">code-&gt;pattern</span> <span class=\"p\">[</span><span class=\"nv\">form</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n    <span class=\"p\">(</span><span class=\"nb\">vector? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">mapv</span> <span class=\"nv\">code-&gt;pattern</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"nf\">set?</span> <span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">{}</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">code-&gt;pattern</span> <span class=\"nv\">form</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">map? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">{}</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">code-&gt;pattern</span> <span class=\"nv\">form</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">seq? </span><span class=\"nv\">form</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">cond</span>\n      <span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"nv\">form</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">form</span><span class=\"p\">)</span> <span class=\"ss\">&#39;quote</span><span class=\"p\">))</span>\n      <span class=\"nv\">form</span>\n\n      <span class=\"ss\">:else</span>\n      <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">mapv</span> <span class=\"nv\">code-&gt;pattern</span> <span class=\"nv\">form</span><span class=\"p\">)</span> <span class=\"ss\">:seq</span><span class=\"p\">))</span>\n\n    <span class=\"ss\">:else</span>\n    <span class=\"nv\">form</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">match-code</span> <span class=\"p\">[</span><span class=\"nv\">vars</span> <span class=\"o\">&amp;</span> <span class=\"nv\">clauses</span><span class=\"p\">]</span>\n  <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nf\">match</span> <span class=\"o\">~</span><span class=\"nv\">vars</span>\n     <span class=\"o\">~@</span><span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">form</span> <span class=\"nv\">expr</span><span class=\"p\">]]</span>\n                 <span class=\"p\">[(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">form</span> <span class=\"nv\">upquote</span> <span class=\"nv\">code-&gt;pattern</span><span class=\"p\">)</span> <span class=\"nv\">expr</span><span class=\"p\">])</span>\n         <span class=\"p\">(</span><span class=\"nf\">partition</span> <span class=\"mi\">2</span> <span class=\"nv\">clauses</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">expr</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nf\">match-code</span> <span class=\"nv\">expr</span>\n    <span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"o\">~</span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"p\">(</span><span class=\"nf\">eval-expr</span> <span class=\"nv\">e</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p>this could probably be extended to spliced unquotes (<code>~@</code>) too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100343402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472075673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, you're right. By variable airty, I mean variable length patterns.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100592429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472662218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>The sequence idiom doesn't seem to behave as expected, outputting the last element of the list regardless of what expression is encoded in the host language.</p>\n<p>interp.core=&gt; (defn try-match [expr]<br>\n                               (match [expr]<br>\n                                  [([+ x y] :seq)] (+ x y)))<br>\n        #'interp.core/try-match<br>\n        interp.core=&gt; (try-match '(+ 2 0)) <br>\n        0</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100592630,
            "is_me_message": false,
            "last_edit_timestamp": 1472662892,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472662712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> okay, this is kind of funny. by not quoting <code>+</code> within the pattern definition, you've simply bound the symbol <code>+</code> to a local variable named <code>+</code>. so you've invoked a symbol as a function, which has the effect of looking up that symbol as a key, as if you had written <code>(get 2 '+ 0)</code>, which returns the default value 0 because 2 is not a map.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100673022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1472842626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Trying to run a very old clojurescript project, and getting <code>base.js:619 Uncaught Error: Undefined nameToPath for visual_rc.config</code> in the console; looks like it's coming from the google closure library? I've tried running it a few different ways,  <code>lein clean</code>, etc, but I haven't written clojurescript in so long that I'm afraid I'm just missing something very obvious</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 100892339,
            "is_me_message": false,
            "last_edit_timestamp": 1473356912,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1473356894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure that there's anything obvious going on here. Is this error related to the pattern match macro? Do you have a link to the code?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101517280,
            "is_me_message": false,
            "last_edit_timestamp": 1474858777,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1474858666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lyndsey@uchicago.edu\">@Lyndsey Moulds (F'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101517352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pattern match macro",
            "submessages": [],
            "timestamp": 1474858802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Given a tree encoded as a set of nested lists (e.g.,<code>(+ 2 (+ 2 1) (+ 1 3 2)))</code>, is there a known algorithm in Clojure that stochastically traverses the tree, applying a parametrically supplied function at a single node, with equal probability of 'landing' at any node? Note: the walk terminates after a single node is transformed.</p>\n<p>I expect the algorithm to behave as follows:<br>\n<code>(def tree '(1 (1 (1 1 1) 1) 1))</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 2 1) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 1 2) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (2 (1 (1 1 1) 1) 1)</code><br>\n<code>(stochastic-tree-f-app inc tree) =&gt; (1 (1 (1 1 1) 1) 2)</code><br>\n<code>(stochastic-tree-f-app dec tree) =&gt; (1 (1 (1 1 1) 0) 1)</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101604447,
            "is_me_message": false,
            "last_edit_timestamp": 1475042590,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stochastic tree traversal in Clojure",
            "submessages": [],
            "timestamp": 1475042536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>A solution that comes to mind: 1. traverse the tree by bfs or dfs, returning the number of nodes 2. feed that number to a random integer generator, feeding the result (between 0 and n) to 3. a third d/bfs that traverses the graph the number of times specified by the random number generator 4. apply f</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101608710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stochastic tree traversal in Clojure",
            "submessages": [],
            "timestamp": 1475053449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's about all I can think of.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101612775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stochastic tree traversal in Clojure",
            "submessages": [],
            "timestamp": 1475062851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wait, why re-traverse the tree multiple times in step 3? I thought you'd just 1. figure out how big the tree is, 2. pick a lucky node, 3. bfs to that node and apply the function.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101612825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stochastic tree traversal in Clojure",
            "submessages": [],
            "timestamp": 1475062937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>thanks, <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> <br>\nhere's a solution:<br>\n<code>(require '[clojure.zip :as z])</code></p>\n<p><code>(defn stochastic-tree-f-app [f tree]</code><br>\n<code>(let [zp    (z/zipper list? seq (fn [_ c] c) tree)</code><br>\n<code>nodes (-&gt;&gt; (iterate z/next zp)</code><br>\n<code>(take-while (complement z/end?))</code><br>\n<code>(filter (comp integer? z/node))</code><br>\n<code>(into []))]</code><br>\n<code>(-&gt; (rand-nth nodes)</code><br>\n<code>(z/edit f)</code><br>\n<code>z/root)))</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101629521,
            "is_me_message": false,
            "last_edit_timestamp": 1475094232,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stochastic tree traversal in Clojure",
            "submessages": [],
            "timestamp": 1475094220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>Possibly slightly offtopic, but there doesn't appear to be a generic functional programming stream, and this is way more lisp than haskell.</p>\n<p>I'm writing a programming language to replace bash (<a href=\"https://github.com/pbiggar/rash\" target=\"_blank\" title=\"https://github.com/pbiggar/rash\">https://github.com/pbiggar/rash</a>). As a first step, I'm translating a ton of bash scripts into it (automagically).</p>\n<p>I hit this construct in a bash script: <code>crontab -l | { cat; echo \"0 0 * * * $SUDO le renewAll &gt; /dev/null\"; } | crontab -</code> . I'm wondering if the right way to think about the middle bit (within <code>{}</code>) is as a lambda.</p>\n<p>The entire line simply adds an entry to crontab. To explain the entire bash line: it execs <code>crontab -l</code>, which spits out the current crontab. The <code>cat</code> reads from stdin and spits it into stdout. The <code>echo</code> then adds that string (a new crontab entry) to the output, all of which is consumed by <code>crontab -</code> which sets a new crontab.</p>\n<p>This looks a lot like a lambda (esp the idea that it has input and output, which is what functions do in bash). Does that seem sane to people? </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101902360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "is this a lambda?",
            "submessages": [],
            "timestamp": 1475717117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Suppose I have a very simple <code>.clj</code> file on disk with the following content:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">a</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">b</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">add-two</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"p\">(</span><span class=\"nf\">add-two</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>From the context of separate program, I would like to read the above program as a list of S-Expressions, <code>'((def a 2) (def b 3) ... (add-two a b)))</code>.</p>\n<p>I imagine that one way of doing this involves 1. Using <code>slurp</code> on <code>(io/file file-name.clj)</code> to produce a string containing the file's contents, 2. passing that string to a parser for Clojure code, and 3. injecting the sequence produced by the parser to a list (i.e., <code>(into '() parsed-code)</code>).</p>\n<p>However, this approach seems sort of clumsy and error prone. <strong>Does anyone know of a more elegant and/or idiomatic way to read a Clojure file as a list of S-Expressions?</strong></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102107369,
            "is_me_message": false,
            "last_edit_timestamp": 1476198652,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476198596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's tricky because Clojure has a fair bit of syntax --- especially now with the conditional reader system.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102122254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476224586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure exactly what you're trying to do with what you're reading, but in the past I've had luck using Instaparse to define a grammar and then parse things that way.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102122260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476224608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I never tried to read every piece of legal Clojure code, though, just a subset. It's pretty easy to tweak the grammar and use Instaparse from a REPL though, so if you have a dataset in mind you could keep tweaking the grammar until you get what you need.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102122305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476224674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Beyond conditional reader statements, in clj source files you also need to deal with things like semicolons (which comment out until the end of line)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102122324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476224725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span>, thanks for the response. I'm building a mutation testing library that requires me to read Clojure source files and manipulate their content as data/code.</p>\n<p>Aphyr's clj-Antlr (<a href=\"https://github.com/aphyr/clj-antlr\" target=\"_blank\" title=\"https://github.com/aphyr/clj-antlr\">https://github.com/aphyr/clj-antlr</a>) looks promising, since it allows me to leverage existing Antlr grammar specs (<a href=\"https://github.com/antlr/grammars-v4/blob/master/clojure/Clojure.g4\" target=\"_blank\" title=\"https://github.com/antlr/grammars-v4/blob/master/clojure/Clojure.g4\">https://github.com/antlr/grammars-v4/blob/master/clojure/Clojure.g4</a>). However, the documentation for aphyr's Clojure bindings is sparse, and it looks like the project is likely inactive. As far as instaparase goes, I'll keep an eye out for the appropriate grammar specification, but since the the domain is arbitrary Clojure code, I'm not sure I'll do a good job specifying the grammar on my own.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102125605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476231747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> I got on a parsing kick a year or two back, and I was horrified to discover that very few of the popular programming languages actually have well-defined grammars. A lot of them are just \"whatever our official compiler accepts\".</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102125998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476232738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you want to handle whatever's legal clojure and you don't want to define a grammar yourself, I'd hook into the reader. But be careful about read-eval, conditional reading, and other lurking surprises = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102126050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476232826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIUC clojure code is just EDN, so an EDN reader is sufficient. And clojure has one of those built in! I don't know the name of it, but I know it does.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102128825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476239979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(You would hope it would have one built in, because EDN was built for clojure, so, like. Yeah.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102128865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476240023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>But you definitely don't even need a library for this, if you don't want to worry about anything like macro expansion, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102128867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476240042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tehgeekmeister@gmail.com\">@Ezekiel Benjamin Smithburg (F2'15)</span> re: Clojure.edn (<a href=\"https://clojure.github.io/clojure/clojure.edn-api.html\" target=\"_blank\" title=\"https://clojure.github.io/clojure/clojure.edn-api.html\">https://clojure.github.io/clojure/clojure.edn-api.html</a>). I think the idea of leveraging edn readers built into Clojure or as the basis for a parsing grammar is promising. However, I think Rich indicates that edn represents only a subset of Clojure code, \"A superset of edn is used by Clojure to represent programs\" (<a href=\"https://github.com/edn-format/edn\" target=\"_blank\" title=\"https://github.com/edn-format/edn\">https://github.com/edn-format/edn</a>).  Seems like edn is Clojure, but Clojure is not *just* edn.</p>\n<p>Am I off base here?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102144022,
            "is_me_message": false,
            "last_edit_timestamp": 1476277390,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476276265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>I would imagine the \"superset\" bit just means they used the extensibility. In any case, tools.reader exists, and should be what you want.</p>\n<p>This exists in most lisps, FWIW, and in fact most well developed languages have a mechanism like this by now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102145547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476279440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "ZulipiOS",
            "content": "<p>afaik \"reader\" is the conventional name for this in lisps.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102145549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476279466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>On point, <span class=\"user-mention\" data-user-email=\"tehgeekmeister@gmail.com\">@Ezekiel Benjamin Smithburg (F2'15)</span> ... tools.reader looks like it'll fit the call perfectly. Thanks for the tip!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102148050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Reading another Clojure program as a list of S-Expressions",
            "submessages": [],
            "timestamp": 1476283880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Cross-posting from the Common Lisp stream, to which some of you may not be subscribed:<br>\nAnyone interested in experimenting with a regular reading group on important Lisp texts? For everyone's convenience, we can meet in the space and include remote participants using Skype/Google hangouts. Some ideas: On Lisp (<a href=\"http://www.paulgraham.com/onlisp.html\" target=\"_blank\" title=\"http://www.paulgraham.com/onlisp.html\">http://www.paulgraham.com/onlisp.html</a>) with up-to-date code by Kyle Littler ( <a href=\"https://github.com/DalekBaldwin/on-lisp\" target=\"_blank\" title=\"https://github.com/DalekBaldwin/on-lisp\">https://github.com/DalekBaldwin/on-lisp</a>), McCarthy's classic paper (<a href=\"http://www-formal.stanford.edu/jmc/recursive.pdf\" target=\"_blank\" title=\"http://www-formal.stanford.edu/jmc/recursive.pdf\">http://www-formal.stanford.edu/jmc/recursive.pdf</a>), selections from Peter Norvig's AI text, and/or anything else that might interest people.</p>\n<p>I suggest we aim to be as dialect agnostic as possible, but use Common Lisp for its macro support.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102148566,
            "is_me_message": false,
            "last_edit_timestamp": 1476285173,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp reading group",
            "submessages": [],
            "timestamp": 1476284762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>hmm, I could be into this if it's not too heavyweight.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102151262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp reading group",
            "submessages": [],
            "timestamp": 1476289034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm down. I've been working through PAIP by Norvig but happy to do any Lisp book.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102168974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp reading group",
            "submessages": [],
            "timestamp": 1476321370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would be remote btw.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102168976,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp reading group",
            "submessages": [],
            "timestamp": 1476321400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mdparker89@gmail.com\">@Matthew Parker (F2'14)</span> Feel free to join us this week! The conversation has been happening the the hyphenated common lisp stream.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102384983,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp reading group",
            "submessages": [],
            "timestamp": 1476824772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>let's coordinate over on <a href=\"https://recurse.zulipchat.com/#narrow/stream/Social.20(New.20York)/subject/rich.20hickey.20talkkkkk\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/Social.20(New.20York)/subject/rich.20hickey.20talkkkkk\">social ny</a>, but, just in case some of y'all are local and want to go: <a href=\"http://www.meetup.com/LispNYC/events/228643581/\" target=\"_blank\" title=\"http://www.meetup.com/LispNYC/events/228643581/\">http://www.meetup.com/LispNYC/events/228643581/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102794832,
            "is_me_message": false,
            "last_edit_timestamp": 1477706527,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk",
            "submessages": [],
            "timestamp": 1477706408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Good call. This will be good.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102801099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "rich hickey talk",
            "submessages": [],
            "timestamp": 1477723455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>An older article on Clojure's notorious stacktraces that surfaced in my reading queue today: <a href=\"https://8thlight.com/blog/connor-mendenhall/2014/09/12/clojure-stacktraces.html\" target=\"_blank\" title=\"https://8thlight.com/blog/connor-mendenhall/2014/09/12/clojure-stacktraces.html\">8th light's Mendenhall on understanding Clojure Stacktraces</a></p>\n<p>\"Learn to filter [the signal] from the noise, and you'll master the dark art of reading the Clojure stack trace.\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104071323,
            "is_me_message": false,
            "last_edit_timestamp": 1480528970,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stacktraces article",
            "submessages": [],
            "timestamp": 1480528774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5e4aa5311affe020e4b36536287f3ec1?d=identicon&version=2",
            "client": "website",
            "content": "<p>nice!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104079845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kal_ali@hotmail.com",
            "sender_full_name": "Khalid Omar Ali (F2'15)",
            "sender_id": 8713,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "stacktraces article",
            "submessages": [],
            "timestamp": 1480542378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e9433418f2a92b22754ae732984a4bbb2e1c3e81?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>anyone in the space available to pair on something small related to <code>for</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104549518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tbvanc@gmail.com",
            "sender_full_name": "Tara Vancil (she) (F2'16)",
            "sender_id": 100192,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1481581460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyone know of <code>-&gt;&gt;</code>, as seen <a href=\"https://github.com/nathanmarz/cascalog/blob/develop/cascalog-core/src/clj/cascalog/logic/vars.clj#L145\" target=\"_blank\" title=\"https://github.com/nathanmarz/cascalog/blob/develop/cascalog-core/src/clj/cascalog/logic/vars.clj#L145\">here</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104751755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482022567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>it looks like it's not in core, but I could just be searching wrong. defs not a clojure wizard.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104751756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482022584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, it is. nevermind. the main docs site just wasn't as searchable as I hoped, just found it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104751799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482022741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;&gt;\" target=\"_blank\" title=\"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;&gt;\">docs here</a> for posterity's sake.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104751803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482022752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I almost always use <code>as-&gt;</code> in preference to the <code>-&gt;</code> and <code>-&gt;&gt;</code> macros since it seems like there's no clear dominant idiom to put the \"accumulation\" parameter in either the first or last parameter of any given function</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104751942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482023160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>good to know, but this is for spelunking rather than writing (I write way too little code, read so much more).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104752022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482023300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>trying to understand the cascalog query compiler <img alt=\":smiley:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104752025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482023320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>similarly, is <code>(-&gt;Foo ...</code> equivalent to <code>(-&gt; Foo ...</code> (where the ... just indicate there's more to the form)? or is this some kind of reader macro or what?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104752472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482024571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/nathanmarz/cascalog/blob/deaad977aa98985f68f3d1cc3e081d345184c0c8/cascalog-core/src/clj/cascalog/logic/parse.clj#L179\" target=\"_blank\" title=\"https://github.com/nathanmarz/cascalog/blob/deaad977aa98985f68f3d1cc3e081d345184c0c8/cascalog-core/src/clj/cascalog/logic/parse.clj#L179\">here</a>'s an example of the kind of thing I'm seeing. there's no obvious definitions of this or other similar names that I can find from grepping through the codebase.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104752516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482024633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah, tracked it down. there's a macro introducing these symbols indirectly.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104752557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482024740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\">@Kyle Littler (F'13)</span> I use <code>-&gt;&gt;</code> (argument in last position) all the time for collection-related functions. Pretty much all of the ones in core (<code>filter</code>, <code>map</code>, etc) take the collection in the last place.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104753860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "unidentified macro",
            "submessages": [],
            "timestamp": 1482028164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/286db2fe3ae6145dc9fda2a25ffca1b2?d=identicon&version=1",
            "client": "website",
            "content": "<p>hello friends  <img alt=\":heart:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/heart.png\" title=\":heart:\">. Recently I've been writing clojure again (woo! figwheel!) and have run into a problem with cleanly expressing a certain kind of encapsulation that is familiar from object oriented code. My example is a data structure which I wrote a set of functions for (inserting, getting ranges, etc), all of which need to know a number (called s) that represents the bin size. Right now I've  been defining s as a constant and then passing it in each function call but it doesn't feel as elegant as what I might do in a less functional language with \"this.size\". any suggestions? (linking a gist for reference: <a href=\"https://gist.github.com/MaxBittker/873a925cf9f513b1dc2920d37b2e5b1d\" target=\"_blank\" title=\"https://gist.github.com/MaxBittker/873a925cf9f513b1dc2920d37b2e5b1d\">https://gist.github.com/MaxBittker/873a925cf9f513b1dc2920d37b2e5b1d</a>) </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105069535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxbittker@gmail.com",
            "sender_full_name": "Max Bittker (S1'16)",
            "sender_id": 9345,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "looking for vocabulary...",
            "submessages": [],
            "timestamp": 1482783412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/286db2fe3ae6145dc9fda2a25ffca1b2?d=identicon&version=1",
            "client": "website",
            "content": "<p>...after writing this out, I suppose that storing 'grid' as a map of :bins and :size is probably what I want to do?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105069587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxbittker@gmail.com",
            "sender_full_name": "Max Bittker (S1'16)",
            "sender_id": 9345,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "looking for vocabulary...",
            "submessages": [],
            "timestamp": 1482783591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>How about <a href=\"https://clojuredocs.org/clojure.core/defrecord#example-542692c8c026201cdc326a32\" target=\"_blank\" title=\"https://clojuredocs.org/clojure.core/defrecord#example-542692c8c026201cdc326a32\">defrecord</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105169327,
            "is_me_message": false,
            "last_edit_timestamp": 1483028441,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "looking for vocabulary...",
            "submessages": [],
            "timestamp": 1483028435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Lisp NYC is holding a <a href=\"https://www.meetup.com/LispNYC/events/232208774/\" target=\"_blank\" title=\"https://www.meetup.com/LispNYC/events/232208774/\">lecture</a> tomorrow night (01-12-17 7pm) on Common Language Runtime support for Clojure. Plenty of room is still available, so I hope some of you can make it.</p>\n<p><em>abstract</em>: \"The Morgan And Grand Intermediate Language Compiler (MAGIC) is a new compiler library for Clojure, written in Clojure and targeting the Microsoft Common Language Runtime. [...] The talk will cover the differences between the CLR and the JVM as they relate to Clojure, the semantics of CLR bytecode, MAGIC's approach to bytecode generation and optimization, and next steps...\"</p>\n<p>Address: <br>\nShareablee<br>\n123 William Street, 19th Floor</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105677915,
            "is_me_message": false,
            "last_edit_timestamp": 1484155875,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484155714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>That's also three floors down from my work! Just saying.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105682683,
            "is_me_message": false,
            "last_edit_timestamp": 1484163279,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484163273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span> Awesome. See you there?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105683088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484163873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh awesome, I might be able to do that!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105683108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484163932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p>rsvped, see you there</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105683254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484164192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105684068,
            "is_me_message": false,
            "last_edit_timestamp": 1605719254,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484165331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9e0096ad9f376eb9f609372bc87542e4?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stanley@stanzheng.com\">@Stanley Zheng (W1'16)</span> rsvp over at the meetup page :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105684183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tehgeekmeister@gmail.com",
            "sender_full_name": "Sophie Ren\u00e9e Smithburg (she) (F2'15)",
            "sender_id": 8690,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484165489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105685655,
            "is_me_message": false,
            "last_edit_timestamp": 1605719255,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484167954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span>  Well probably not. I don't do any windows dev. But I see Pierre in the elevator all the time. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105695151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484184400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I have to miss this one. but if the crowd heads to stout afterward, I'll stop by</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105695479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484185078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span>, also not interested in windows dev, but I'm sure the implementation details are universally applicable. see you around. </p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105695850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484185897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"*\">@all</span> Does anyone want to pair remotely over the long weekend and look at the internals of this project for fun?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105815903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484430469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> I'm curious, but don't know a lot of clojure... also missed the talk!  but if you want a curious rubber duck I'm happy to try remote pairing with you</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105816091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484430901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"brian@glusman.me\">@Brian Glusman (SP2'15)</span> sounds fun. how about 1pm tomorrow?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105816881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484432550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>anyone else is welcome to join</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105816883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484432561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b05b48dffacfe8bc5336d44718f65da6?d=identicon&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> dont think that works, I have some stuff at and after 2 and will take some time to get there, maybe later or Monday?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105818783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "brian@glusman.me",
            "sender_full_name": "Brian Glusman (SP2'15)",
            "sender_id": 7848,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484435869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>How about Monday afternoon? You choose the time. I have the common lisp group meeting at 5pm that you're welcome to come to (see common lisp stream). Other than that, my schedule is flexible.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105819289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "lisp nyc, magic",
            "submessages": [],
            "timestamp": 1484436964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Those visually-inclined who are interested in learning foundational  Clojure might find this useful: <a href=\"http://blog.josephwilk.net/clojure/functions-explained-through-patterns.html?utm_source=PurelyFunctional.tv&amp;utm_medium=email&amp;utm_campaign=212&amp;__s=ezbfmsbthz9pwgjsr8hd\" target=\"_blank\" title=\"http://blog.josephwilk.net/clojure/functions-explained-through-patterns.html?utm_source=PurelyFunctional.tv&amp;utm_medium=email&amp;utm_campaign=212&amp;__s=ezbfmsbthz9pwgjsr8hd\">Functions Explained Through Patterns</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107120385,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@greghendershott.com",
                        "full_name": "Greg Hendershott (he) (F2'14)",
                        "id": 6678
                    },
                    "user_id": 6678
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul@paulwmorris.com",
                        "full_name": "Paul Morris (he) (SP1'17)",
                        "id": 100524
                    },
                    "user_id": 100524
                }
            ],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure core functions rendered graphically",
            "submessages": [],
            "timestamp": 1487046182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would looove if someone went to this and took notes: <a href=\"https://www.meetup.com/Clojure-NYC/events/239281967/\" target=\"_blank\" title=\"https://www.meetup.com/Clojure-NYC/events/239281967/\">https://www.meetup.com/Clojure-NYC/events/239281967/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111897051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "making SQL more like Datomic",
            "submessages": [],
            "timestamp": 1497038310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ad220596b601687b8785b5fbfa8ecbe?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't make it because of \"night school\"</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111897059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bgmuthalaly@gmail.com",
            "sender_full_name": "Bert Muthalaly (S1'14)",
            "sender_id": 5871,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "making SQL more like Datomic",
            "submessages": [],
            "timestamp": 1497038334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm planning on coming to RC on Tuesday, anyone want to pair and hang out?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113076582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499467493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span>! This might also be helpful: <a href=\"https://www.recurse.com/directory?q=clojure&amp;scope=current\" target=\"_blank\" title=\"https://www.recurse.com/directory?q=clojure&amp;scope=current\">https://www.recurse.com/directory?q=clojure&amp;scope=current</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113076825,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499467995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I'm totally into clojure, I think I remember maybe <span class=\"user-mention\" data-user-email=\"kdurril@gmail.com\" data-user-id=\"101321\">@Kenneth Alexander Durril (S2'17)</span> too?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113077069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499468418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>OOhhh I am a serious datomic user <span class=\"user-mention\" data-user-email=\"kdurril@gmail.com\" data-user-id=\"101321\">@Kenneth Alexander Durril (S2'17)</span> we might have a lot to talk about</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113082992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499480967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool Paul, I'll try to find you tuesday morning</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113083038,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499481014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I'd love to chat about Datomic. I'm implementing a Datomic clone in Rust (and also am a heavy Clojure user)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113085133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499485819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span> do you work at Mozilla?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113098207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499518992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/mozilla/mentat/\" target=\"_blank\" title=\"https://github.com/mozilla/mentat/\">https://github.com/mozilla/mentat/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113098237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499519043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you have a repo</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113098248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499519058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/loganmhb/logos\" target=\"_blank\" title=\"https://github.com/loganmhb/logos\">https://github.com/loganmhb/logos</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113098250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499519101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Nope! This is just what I've been working on during my RC batch. And yeah, logos, that's my repo. I'm more interested in the distributed aspects of Datomic than Mentat is based on the cursory look I gave it a few months ago, but I haven't given it a deep dive yet.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113099489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499522175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Distributed like semantic web?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113104755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499535022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I just mean the way that Datomic clients can run queries locally/by accessing the backing store directly without coordinating through a single DB server, rather than sending queries to the db server to run like a normal database client/server setup.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113144391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499632524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you given any thought to cross database queries?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113146312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499637181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>I've thought about it a little bit (insofar as my current query engine design doesn't support multiple inputs and it'd be nice to), but I don't have a good sense of use cases and so forth. Would love to talk about it if you have thoughts! I don't have very much experience actually using Datomic, so I'm always curious to hear from people who've used it more what they find to be the most important features/ideas.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113171985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499697672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey guys I am coming today! Looking forward to meeting you all! Hopefully i will be there by noon. My public transit has been twice delayed :(</p>\n<p><span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span> <span class=\"user-mention\" data-user-email=\"kdurril@gmail.com\" data-user-id=\"101321\">@Kenneth Alexander Durril (S2'17)</span> <span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113212257,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499777169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Public transportation fail. I'm still in philly. Postponing the trip at this point. Will try to make this happen next week. Sorry:(</p>\n<p>@Logan Buckley (S1'17) @Kenneth Alexander Durril (S2'17) <span class=\"user-mention\" data-user-email=\"paul@paulwmorris.com\" data-user-id=\"100524\">@Paul Morris (SP1'17)</span> Gowder (S2'17)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499782980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Bummer, did you get bit by Amtrak chaos?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499783043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Amtrak costs too much for me right now, it was just bad luck with busses and hard to change last minute because everything else was sold out</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215332,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f627",
                    "emoji_name": "anguished",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499783325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Bleck, sorry to miss you!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499783362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6dd8ec78c904fd082520dd4dc842dd7a914052d7?x=x&version=2",
            "client": "website",
            "content": "<p>Oh hey! just seeing this now! I write Clojure and would definitely be into pairing and hanging out and talking about it :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aftaberski@gmail.com",
            "sender_full_name": "Anna Taberski (S2'17)",
            "sender_id": 101323,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499783452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> Sorry to hear that! Hope to see you next week.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113215772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1499784037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Consider this...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">space-game</span> <span class=\"p\">{</span><span class=\"ss\">:space-cam</span> <span class=\"p\">{</span><span class=\"ss\">:a</span> <span class=\"mi\">1</span> <span class=\"ss\">:b</span> <span class=\"mi\">2</span><span class=\"p\">}})</span>\n<span class=\"c1\">;; get to b</span>\n<span class=\"p\">((</span><span class=\"nf\">space-game</span> <span class=\"ss\">:space-cam</span><span class=\"p\">)</span> <span class=\"ss\">:b</span><span class=\"p\">)</span>\n<span class=\"c1\">;; =&gt; 2</span>\n<span class=\"c1\">;; or</span>\n<span class=\"p\">(</span><span class=\"ss\">:b</span> <span class=\"p\">(</span><span class=\"ss\">:space-cam</span> <span class=\"nv\">space-game</span><span class=\"p\">))</span>\n<span class=\"c1\">;; =&gt; 2</span>\n</pre></div>\n\n\n<p><img alt=\":mount_fuji:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f5fb.png\" title=\":mount_fuji:\"> mind_blown <img alt=\":mount_fuji:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f5fb.png\" title=\":mount_fuji:\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113323911,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aftaberski@gmail.com",
                        "full_name": "Anna Taberski (S2'17)",
                        "id": 101323
                    },
                    "user_id": 101323
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "carl.douglas@gmail.com",
                        "full_name": "Carl Douglas (S1'17)",
                        "id": 101092
                    },
                    "user_id": 101092
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jo.chasinga@gmail.com",
                        "full_name": "Joe Chasinga (S2'17)",
                        "id": 101482
                    },
                    "user_id": 101482
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "csdrane@gmail.com",
                        "full_name": "Chris Drane (W2'15)",
                        "id": 7080
                    },
                    "user_id": 7080
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure dilemma",
            "submessages": [],
            "timestamp": 1500000635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I've just dabbled into Clojure but had done some Haskell and Elm before. Was hacking a Java GL lib for a while and thought of using Kotlin but Clojure kind of got me hooked! Would be awesome to have veterans' guidance here!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113324400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500001721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p>Just found this guide which is pretty useful.</p>\n<p><a href=\"https://github.com/bbatsov/clojure-style-guide#collections\" target=\"_blank\" title=\"https://github.com/bbatsov/clojure-style-guide#collections\">https://github.com/bbatsov/clojure-style-guide#collections</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113338001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Best Practice",
            "submessages": [],
            "timestamp": 1500035872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span> looking forward to meeting you!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113342010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500044303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span> re. multiple db query inputs. Check this out:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113342031,
            "is_me_message": false,
            "last_edit_timestamp": 1500044405,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500044397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span>  <a href=\"https://goo.gl/yrz8pD\" target=\"_blank\" title=\"https://goo.gl/yrz8pD\">https://goo.gl/yrz8pD</a> (Had to url shorten the url since it has commas in it which confused zulip)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113342101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500044471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>Oh cool! this looks really interesting</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113346221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500052468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>When does your batch end?<br>\n<span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span>  <span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span> <span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span> <span class=\"user-mention\" data-user-email=\"aftaberski@gmail.com\" data-user-id=\"101323\">@Anna Taberski (S2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113493311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500387089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> Mine ends Aug 10, but I'm local to NYC so I'll still be around after that.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113493547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500387523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm doing the half-batch, so like second week of august :-(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113494905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500389611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6dd8ec78c904fd082520dd4dc842dd7a914052d7?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> Mine ends September 21</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113495451,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aftaberski@gmail.com",
            "sender_full_name": "Anna Taberski (S2'17)",
            "sender_id": 101323,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500390380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I'm ending second week of august for half-batch too, and will have to fly off the the bay area right away.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113504654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500404653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span> you are a halfling too?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113508624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500411240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>alas, yes!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113508670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500411263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>What if I come next thursday and friday 7/27-28 </p>\n<p>@Logan Buckley (S1'17)  @Panisuan Chasinga (S2'17)  <span class=\"user-mention\" data-user-email=\"paul@paulwmorris.com\" data-user-id=\"100524\">@Paul Morris (SP1'17)</span> Gowder (S2'17)  @Anna Taberski (S2'17)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535082,
            "is_me_message": false,
            "last_edit_timestamp": 1500471048,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500470995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535126,
            "is_me_message": false,
            "last_edit_timestamp": 1500471015,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I dont know if these tags are working sorry. <span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span> <span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span> <span class=\"user-mention\" data-user-email=\"paul@paulwmorris.com\" data-user-id=\"100524\">@Paul Morris (SP1'17)</span>  <span class=\"user-mention\" data-user-email=\"aftaberski@gmail.com\" data-user-id=\"101323\">@Anna Taberski (S2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>I'll be around!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6dd8ec78c904fd082520dd4dc842dd7a914052d7?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I'm actually going to be gone those days :(</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aftaberski@gmail.com",
            "sender_full_name": "Anna Taberski (S2'17)",
            "sender_id": 101323,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, 8/1-2 (tues-wed) is a fallback date</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>Will also be here 8/1-2</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500471306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ac25c0f0dbfaa3e0d68634873943e63bdd41139c?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span> ^  I've also dabbled with Clojure, have used Scheme, am in NYC, so I don't mind being tagged.  :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113535677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul@paulwmorris.com",
            "sender_full_name": "Paul Morris (he) (SP1'17)",
            "sender_id": 100524,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500472143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6dd8ec78c904fd082520dd4dc842dd7a914052d7?x=x&version=2",
            "client": "website",
            "content": "<p>Will definitely be here 8/1-8/2 :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113538016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aftaberski@gmail.com",
            "sender_full_name": "Anna Taberski (S2'17)",
            "sender_id": 101323,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500476511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be around all those days!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113539316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500478545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> works for me! I'm exploring possibility of interfacing with lwjgl engine in Clojure OR Kotlin. Since OpenGL APIs are very imperative and C-like, having to learn Clojure, then calling Java code from it, and managing state in a pure functional language while also learning OpenGL seemed pretty daunting, but also very fun compared to Kotlin which works with Java like a charm.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113543101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1500485193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just have to crow about how great clojure is.  Some months ago, I threw up a very craptastic bug-filled private web app in clojure for my student research assistants to do some data entry.  One of them ran into a bug today where it was hanging onto some state it shouldn't and not letting her enter new data. But the one sensible thing that I did was leave a running nrepl server going in production, so the fix was as simple as ssh in, connect to the repl, and reset the live atom to be what it ought to be on the fly. </p>\n<p>Clojure = the best.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113600016,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "giorgio.m.leveroni@gmail.com",
                        "full_name": "Giorgio Leveroni (S2'14)",
                        "id": 6185
                    },
                    "user_id": 6185
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "giorgio.m.leveroni@gmail.com",
                        "full_name": "Giorgio Leveroni (S2'14)",
                        "id": 6185
                    },
                    "user_id": 6185
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dustin.getz@gmail.com",
                        "full_name": "Dustin Getz (S'12)",
                        "id": 868
                    },
                    "user_id": 868
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxbittker@gmail.com",
                        "full_name": "Max Bittker (S1'16)",
                        "id": 9345
                    },
                    "user_id": 9345
                }
            ],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure fanboy win",
            "submessages": [],
            "timestamp": 1500596546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span> I have so many stories like that</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113919132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure fanboy win",
            "submessages": [],
            "timestamp": 1501256096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey guys just bought my bus ticket for tuesday morning!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113919672,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1501256934,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span>  <span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> heard a bit about this killer repl-live-coding thing about Clojure, but not yet at the point of trying it yet. I guess this makes sense for live-coding project like <a href=\"http://overtone.github.io/\" target=\"_blank\" title=\"http://overtone.github.io/\">http://overtone.github.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113920142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure fanboy win",
            "submessages": [],
            "timestamp": 1501257655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span> Check this out <a href=\"https://github.com/hyperfiddle/hypercrud.browser\" target=\"_blank\" title=\"https://github.com/hyperfiddle/hypercrud.browser\">https://github.com/hyperfiddle/hypercrud.browser</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113920764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure fanboy win",
            "submessages": [],
            "timestamp": 1501258804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Live demo <a href=\"https://goo.gl/3s1cmd\" target=\"_blank\" title=\"https://goo.gl/3s1cmd\">https://goo.gl/3s1cmd</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113920784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure fanboy win",
            "submessages": [],
            "timestamp": 1501258858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone know of a good introduction to bytearrays and streams and all the rest of those weird low-level java representations of strings for clojure people?</p>\n<p>I'm continually running into this leaky abstraction problem where I've got something that should just be a string, but there's some library or something that really wants it to be some particular flavor of string that I know nothing about.  Example: I wanted to use transit to parse json-encoded data coming over a websocket. But then I looked at the <a href=\"https://github.com/cognitect/transit-clj\" target=\"_blank\" title=\"https://github.com/cognitect/transit-clj\">transit readme</a>, and it gave this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"o\">&#39;</span><span class=\"p\">[</span><span class=\"nv\">cognitect.transit</span> <span class=\"ss\">:as</span> <span class=\"nv\">transit</span><span class=\"p\">])</span>\n<span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">java.io</span> <span class=\"nv\">ByteArrayInputStream</span> <span class=\"nv\">ByteArrayOutputStream</span><span class=\"p\">])</span>\n\n<span class=\"c1\">;; Write data to a stream</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">out</span> <span class=\"p\">(</span><span class=\"nf\">ByteArrayOutputStream.</span> <span class=\"mi\">4096</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">writer</span> <span class=\"p\">(</span><span class=\"nf\">transit/writer</span> <span class=\"nv\">out</span> <span class=\"ss\">:json</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nf\">transit/write</span> <span class=\"nv\">writer</span> <span class=\"s\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nf\">transit/write</span> <span class=\"nv\">writer</span> <span class=\"p\">{</span><span class=\"ss\">:a</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">]})</span>\n\n<span class=\"c1\">;; Take a peek at the JSON</span>\n<span class=\"p\">(</span><span class=\"nf\">.toString</span> <span class=\"nv\">out</span><span class=\"p\">)</span>\n<span class=\"c1\">;; =&gt; &quot;{\\&quot;~#&#39;\\&quot;:\\&quot;foo\\&quot;} [\\&quot;^ \\&quot;,\\&quot;~:a\\&quot;,[1,2]]&quot;</span>\n\n<span class=\"c1\">;; Read data from a stream</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">in</span> <span class=\"p\">(</span><span class=\"nf\">ByteArrayInputStream.</span> <span class=\"p\">(</span><span class=\"nf\">.toByteArray</span> <span class=\"nv\">out</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">reader</span> <span class=\"p\">(</span><span class=\"nf\">transit/reader</span> <span class=\"nv\">in</span> <span class=\"ss\">:json</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">prn </span><span class=\"p\">(</span><span class=\"nf\">transit/read</span> <span class=\"nv\">reader</span><span class=\"p\">))</span>  <span class=\"c1\">;; =&gt; &quot;foo&quot;</span>\n<span class=\"p\">(</span><span class=\"nb\">prn </span><span class=\"p\">(</span><span class=\"nf\">transit/read</span> <span class=\"nv\">reader</span><span class=\"p\">))</span>  <span class=\"c1\">;; =&gt; {:a [1 2]}</span>\n</pre></div>\n\n\n<p>and so I used  a different library.  Because I had no idea what the relationship was between the json string that was coming over the websocket connection and a ByteArrayInputStream or a ByteArray or a WhateverObjectStreamArrayByteArrayStringStreamArrayFoo.  </p>\n<p>it would be really nice to fix this cluelessness...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114043743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jvm string/bytes types",
            "submessages": [],
            "timestamp": 1501534740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span>  The abstraction leaks because performance. I'll be at RC today we can chat about this! I am a transit user</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114070137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jvm string/bytes types",
            "submessages": [],
            "timestamp": 1501593051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes can't wait to chat about this yay!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114070378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jvm string/bytes types",
            "submessages": [],
            "timestamp": 1501593607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aftaberski@gmail.com\" data-user-id=\"101323\">@Anna Taberski (S2'17)</span>  <span class=\"user-mention\" data-user-email=\"paul.gowder@gmail.com\" data-user-id=\"101322\">@Paul Gowder (S2'17)</span>  <span class=\"user-mention\" data-user-email=\"logan.buckley@gmail.com\" data-user-id=\"101096\">@Logan Buckley (S1'17)</span> <span class=\"user-mention\" data-user-email=\"jo.chasinga@gmail.com\" data-user-id=\"101482\">@Panisuan Chasinga (S2'17)</span>  <span class=\"user-mention\" data-user-email=\"kdurril@gmail.com\" data-user-id=\"101321\">@Kenneth Alexander Durril (S2'17)</span>  Hey guys i'm here sitting with Anna if anyone wants to talk or work on clojure related things or anything else i can help you with!:)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114072476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1501598016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> Cool! I'll be in shortly</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114074219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1501601462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b0373befcb9fe1ca27ee0ac86fccc63eb8ccabe?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dustin.getz@gmail.com\" data-user-id=\"868\">@Dustin Getz (S'12)</span> so sorry I'm not around today working from home / packing, but I'm sure others would be excited to see you in the space! :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114078200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jo.chasinga@gmail.com",
            "sender_full_name": "Joe Chasinga (S2'17)",
            "sender_id": 101482,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1501608505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/107505cecb969e4bbb78a90d54148677e7257ca1?x=x&version=3",
            "client": "website",
            "content": "<p>I'm a beginning clojure programmer and would like to run something by someone more experienced, anyone free?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120799431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "laney.thais@gmail.com",
            "sender_full_name": "Thais Correia (they/she) (F2'19)",
            "sender_id": 105049,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515452909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Maybe <span class=\"user-mention\" data-user-email=\"dave.a.duthie@gmail.com\" data-user-id=\"105241\">@David Andrew Duthie (W2'18)</span>?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120799505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515453014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Also, for future reference, I found this information using the <a href=\"https://www.recurse.com/directory/\" target=\"_blank\" title=\"https://www.recurse.com/directory/\">RC directory</a>! (by checking \"at RC now\" and searching for \"clojure\"): <a href=\"https://www.recurse.com/directory?q=clojure&amp;scope=current\" target=\"_blank\" title=\"https://www.recurse.com/directory?q=clojure&amp;scope=current\">https://www.recurse.com/directory?q=clojure&amp;scope=current</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120799518,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "laney.thais@gmail.com",
                        "full_name": "Thais Correia (they/she) (F2'19)",
                        "id": 105049
                    },
                    "user_id": 105049
                }
            ],
            "recipient_id": 20136,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515453075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/107505cecb969e4bbb78a90d54148677e7257ca1?x=x&version=3",
            "client": "website",
            "content": "<p>thanks! that's handy</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120799568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "laney.thais@gmail.com",
            "sender_full_name": "Thais Correia (they/she) (F2'19)",
            "sender_id": 105049,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515453150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Hey Thais, we met earlier. I\u2019m always keen to chat Clojure. Best of luck with your rad music generator.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120800557,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grin",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "laney.thais@gmail.com",
                        "full_name": "Thais Correia (they/she) (F2'19)",
                        "id": 105049
                    },
                    "user_id": 105049
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515454928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"laney.thais@gmail.com\" data-user-id=\"105049\">@Thais Laney (m1'18)</span> I'm not in the current batch, but am always happy to review Clojure or just pair/chat.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120846191,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grin",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "laney.thais@gmail.com",
                        "full_name": "Thais Correia (they/she) (F2'19)",
                        "id": 105049
                    },
                    "user_id": 105049
                }
            ],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515538471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also working on clojure this week, if you want to pair later on.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120846202,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grin",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "laney.thais@gmail.com",
                        "full_name": "Thais Correia (they/she) (F2'19)",
                        "id": 105049
                    },
                    "user_id": 105049
                }
            ],
            "recipient_id": 20136,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515538522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/107505cecb969e4bbb78a90d54148677e7257ca1?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bonnie.eisenman@gmail.com\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span> yes!! i saw your jigsaw, looked so cool! don't see you in the space now but i'll come find you tomorrow, want to hear about what you've been up to too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120851995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "laney.thais@gmail.com",
            "sender_full_name": "Thais Correia (they/she) (F2'19)",
            "sender_id": 105049,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515549542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-email=\"laney.thais@gmail.com\" data-user-id=\"105049\">@Thais Laney (m1'18)</span> thanks! Yeah, I went home for the day but let's catch up tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120852006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515549576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bonnie.eisenman@gmail.com\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span> Also not in the current batch, and also free to chat. I write clojure for a living, and I'm happy to share my opinions, which are positive with regards to the language. If you're interested in generative music, you should perhaps (as you probably already know) check out <code>overtone</code>, which is lots of fun.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120857114,
            "is_me_message": false,
            "last_edit_timestamp": 1515560226,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515560184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\" data-user-id=\"8995\">@David Shaked (W2'16)</span> thanks! <code>overtone</code> is actually the reason I first heard about clojure, several years ago.</p>\n<p>I've posted a gist with my puzzle-generating code so far: <a href=\"https://gist.github.com/bonniee/5501b07502711004142351d2b858a3dd\" target=\"_blank\" title=\"https://gist.github.com/bonniee/5501b07502711004142351d2b858a3dd\">https://gist.github.com/bonniee/5501b07502711004142351d2b858a3dd</a><br>\nI would love it if someone more experienced with clojure could give me some review. I'm interested in things like: am I organizing my code sensibly? are there places where I should be doing something more idiomatic?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120887164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515616737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"bonnie.eisenman@gmail.com\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span>, I'd be happy to take a closer look when I get the chance. Looks cool!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120890200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515621356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>awesome, ty</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120890242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Hey any clojure programmers in current batch?",
            "submessages": [],
            "timestamp": 1515621367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone have examples of particularly idiomatic clojure code? I'm looking for medium-small projects on github so that I can get a feel for how people structure their programs.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120923374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "shiny clojure examples",
            "submessages": [],
            "timestamp": 1515685690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe try a project by <a href=\"https://github.com/cemerick\" target=\"_blank\" title=\"https://github.com/cemerick\">Chas Emerick</a> (lots of small libraries) <a href=\"https://github.com/gigasquid\" target=\"_blank\" title=\"https://github.com/gigasquid\">Carin Meier</a> (lots of experimental projects, talks, etc.), both of whom tend to produce nice readable stuff.  For a little bigger but super-popular libraries, maybe <a href=\"https://github.com/ptaoussanis\" target=\"_blank\" title=\"https://github.com/ptaoussanis\">Peter Taoussanis</a> stuff</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120928542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "shiny clojure examples",
            "submessages": [],
            "timestamp": 1515693487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, also the <a href=\"http://clojurewerkz.org\" target=\"_blank\" title=\"http://clojurewerkz.org\">clojurewerkz</a> libraries</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120928573,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bonnie.eisenman@gmail.com",
                        "full_name": "Bonnie Eisenman (she) (m5'20)",
                        "id": 105050
                    },
                    "user_id": 105050
                }
            ],
            "recipient_id": 20136,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "shiny clojure examples",
            "submessages": [],
            "timestamp": 1515693580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bonnie.eisenman@gmail.com\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span> <a href=\"https://github.com/clojure/test.check\" target=\"_blank\" title=\"https://github.com/clojure/test.check\">https://github.com/clojure/test.check</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120935866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "shiny clojure examples",
            "submessages": [],
            "timestamp": 1515703492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have been looking at Datomic for a while, and am now finally taking the time to actually check it out.  Would love to talk through some high-level stuff, if anyone has any experience using it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121678519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517164428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>And also (though less exciting) would love some help debugging a basic issue I'm having w/ the client library.  Getting a runtime error when requiring <code>datomic.client.api</code></p>\n<div class=\"codehilite\"><pre><span></span>CompilerException java.lang.RuntimeException: Unable to resolve symbol: halt-when in this context, compiling:(datomic/client/api.clj:57:11)\n</pre></div>\n\n\n<p>Having been fiddling for 1.5 days, to no avail.  Any help appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121678662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517164705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kyle.littler@gmail.com\" data-user-id=\"2857\">@Kyle Littler (F'13)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121680217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517168052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"james.lane.conkling@gmail.com\" data-user-id=\"105103\">@James Conkling (W2'18)</span> It looks like <code>halt-when</code> was introduced in Clojure 1.9 (<a href=\"https://clojuredocs.org/clojure.core/halt-when\" target=\"_blank\" title=\"https://clojuredocs.org/clojure.core/halt-when\">https://clojuredocs.org/clojure.core/halt-when</a>) so my guess is that you need to run that version of Clojure to use whatever version of the Datomic Client library you're using.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517181070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't used Datomic itself in a while, so I can't speak to the ops situation beyond my experience two years ago (it's...very complicated and AWS is complicated and I'mma go make a desktop app now...)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517181116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I'm happy to talk about the data modeling aspect. Subform (my desktop graphic design tool) is built on top of DataScript, which is an open source implementation of the same information model</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517181161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you want to video chat, I'm at GMT+11. I can do 20 minutes sometime in the next 1--3 hours, though, if you can get your questions organized by then.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517181264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\" data-user-id=\"2172\">@Kevin Lynagh</span> well, yup, that would do it.  Thanks so much--upgraded and am now up and running.  Would love to chat about Datomic/DataScript, but for now will just continue working through the examples so I can get a better hold on the environment.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517182031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>Might ping you down the line if/when I get my thoughts together.  Thanks again!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517182060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Totally! It took me a while to really wrap my head around immutability and Datomic, but now I'm quite thrilled about it --- pretty sure it'd be at least 5x more work to solve the problems I'm working on using Postgres or whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517182342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The query stuff can be a bit awkward, but depending on what you're doing it's often possible to just walk the entity graph directly using Clojure's usual functions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121711721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517182412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I did a couple aborted projects with datomic but got to know the principles and how it maps to other knowledge models pretty well. if you're doing semantic web/RDF stuff, datomic's entity-attribute-value[/entity] model is essentially equivalent to subject-predicate-object, including first-class entity status for predicates/attributes, although if you want to associate URIs as canonical identifiers with everything, you'll probably have to include that as a special key attribute on all your entities</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121743933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1517247818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://asciinema.org/a/160597\" target=\"_blank\" title=\"https://asciinema.org/a/160597\">https://asciinema.org/a/160597</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122385676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Awesome tools",
            "submessages": [],
            "timestamp": 1518501752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I heard someone (using Datomic for years in production) say that Datomic isn't really a database system -- it's more like a LEGO set with which you can build a database system.</p>\n<p>So, if you're coming to it from something like Postgres or MS SQL Server, you may miss some things. You need to decide if you can live without them, or, if you want to build them yourself.</p>\n<p>For example, one thing I missed was constraints. Maybe your <code>Order</code> table has a foreign key relation to zero or more rows in a <code>LineItem</code> table. Maybe you want to ensure that the rows actually exist. Or, maybe you want to say that a column's value isn't just \"any integer\", but an integer within a certain range.  Now, plenty of people happily use SQL databases without constraints. Either they enforce integrity in their app instead of the db, or, they're OK with no data integrity. For many things that's reasonable. Me, I like things like static types or runtime contracts, and I like them enforced centrally. So, I missed this in Datomic. And tried to add an equivalent myself, using database transaction functions. It worked well enough but also felt like a strange use of my time.</p>\n<p>I did love the \"database as a value\" concept (immutability, \"time travel\",  etc.) Also, writing datalog style queries was weird but fun.</p>\n<p>All told, I enjoyed using Datomic; the experience helped me feel good about choosing Postgres for my current project.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122472321,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul@paulwmorris.com",
                        "full_name": "Paul Morris (he) (SP1'17)",
                        "id": 100524
                    },
                    "user_id": 100524
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ds2643@columbia.edu",
                        "full_name": "David Shaked (W2'16)",
                        "id": 8995
                    },
                    "user_id": 8995
                }
            ],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1518662108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone know if Datomic supports some concept of metadata for datums?  i.e. a way to store additional facts about a fact (like a source, or valid start/end date).  In RDF this is known as reification, and in some graph dbs as qualifiers.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123976432,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ds2643@columbia.edu",
                        "full_name": "David Shaked (W2'16)",
                        "id": 8995
                    },
                    "user_id": 8995
                }
            ],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1521572081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't seen anything on it in the docs, and there are other ways to handle metadata like this, but at the expense of clarity</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123976530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1521572210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>nm, spoke too soon: datums can be reified at the transaction level</p>\n<ul>\n<li><a href=\"http://blog.datomic.com/2015/12/reified-transactions.html\" target=\"_blank\" title=\"http://blog.datomic.com/2015/12/reified-transactions.html\">http://blog.datomic.com/2015/12/reified-transactions.html</a></li>\n<li><a href=\"https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285\" target=\"_blank\" title=\"https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285\">https://blog.clubhouse.io/auditing-with-reified-transactions-in-datomic-f1ea30610285</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123976857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1521572638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://www.innoq.com/en/blog/native-clojure-and-graalvm/\" target=\"_blank\" title=\"https://www.innoq.com/en/blog/native-clojure-and-graalvm/\">https://www.innoq.com/en/blog/native-clojure-and-graalvm/</a> <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 125940099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Graal",
            "submessages": [],
            "timestamp": 1525173671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/513b96bfef3dcbee7604880ad96b4062?d=identicon&version=1",
            "client": "website",
            "content": "<p>Saw this article and really excited for the possibilities of interopt</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126194022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "Dwaynekj@gmail.com",
            "sender_full_name": "Dwayne Khallique Jones (F'12)",
            "sender_id": 915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Graal",
            "submessages": [],
            "timestamp": 1525653605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone had any experience using DataScript in a cljs app.  In particular, I'm looking for advice on clojurescript DataScript-UI binding libraries like om/next, posh, fulcro, etc.  Have been working on something in om/next, but am kind of surprised at some of its restrictions and not sure if there's active interest in moving it out of beta and supporting new stuff like react16.  that prompted me to look to posh and fulcro, but haven't experimented w/ them yet (posh in particular has a pretty slim, elegant api that I like).  Anyone have any experience with these/others?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126938051,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527014657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh</span> you mentioned you'd worked w/ DataScript.  Did you use it along w/ any UI bindings libraries?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126938077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527014705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>the author of datascript also wrote a library called rum for building react-bound UI components, so it was easy for me to get started using his tutorials combining the two. I disagreed with the way he tends to mix domain state and UI state in the database, but it's still a good starting point</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126942492,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "james.lane.conkling@gmail.com",
                        "full_name": "James Conkling (he) (W2'18)",
                        "id": 105103
                    },
                    "user_id": 105103
                }
            ],
            "recipient_id": 20136,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527019846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, was also looking at Rum as well, which looks promising.  The feature I'm most interested in is declarative data fetching at the component level, like what Relay gives you w/ graphQL, and Om/next and Posh (I think) give you w/ DataScript.  I'd guess that such a thing would be do-able w/ Rum/DataScript, given that Rum takes such an un-opinionated approach to UI construction.  Or maybe I'm over thinking it, and Rum has it's own approach to declarative data fetching.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126944993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527023046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105103\">@James Conkling (W2'18)</span> I didn't use any kind of UI binding library or anything, no. I did use Rum as a way to render markup, but I did all of the state management myself. Instead of doing fine grained dependency tracking or lenses or anything fancy, I just re-render the entire app everytime anything changes.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126985966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Changes were mediated by a side-effecting function that swapped an atom and then re-rendered the app w/ the new value of the atom.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126986018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I passed that function to any view (rum component) that needed to wire up event handlers.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126986027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">!app</span>\n  <span class=\"p\">(</span><span class=\"nf\">atom</span> <span class=\"p\">{</span><span class=\"ss\">:my-app-state</span> <span class=\"nv\">datascript-db</span>, <span class=\"nv\">...</span><span class=\"p\">}))</span>\n\n\n<span class=\"p\">(</span><span class=\"nf\">rum/defc</span> <span class=\"nv\">*app</span>\n  <span class=\"p\">[</span><span class=\"nv\">trigger!</span> <span class=\"p\">{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">my-app-state</span><span class=\"p\">]}]</span>\n\n  <span class=\"p\">[</span><span class=\"ss\">:div</span> <span class=\"p\">{</span><span class=\"ss\">:on-click</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">trigger!</span> <span class=\"p\">{</span><span class=\"ss\">:event</span> <span class=\"ss\">:foo-clicked</span><span class=\"p\">})}])</span>\n\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">trigger!</span>\n  <span class=\"p\">[</span><span class=\"nv\">event</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">swap!</span> <span class=\"nv\">!app</span> <span class=\"nv\">update-fn-for-entire-app</span> <span class=\"nv\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">rum/render</span> <span class=\"nv\">$my-container</span> <span class=\"p\">(</span><span class=\"nf\">*app</span> <span class=\"nv\">trigger!</span> <span class=\"o\">@</span><span class=\"nv\">!app</span><span class=\"p\">)))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126986140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like that, basically. Let me know if that doesn't make sense.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126986147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I liked datascript mostly because of the entity API --- didn't actually use the query API very much at all in my application. That could be application-specific though.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126986228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527095958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "website",
            "content": "<p>On a tenuously related note, has anybody tried qlkit?  It seems to be competing with Om in terms of having a discipline around querying app state. <a href=\"https://medium.com/@conrad_9565/lets-build-a-ui-with-qlkit-and-graph-queries-79b7b118ddac\" target=\"_blank\" title=\"https://medium.com/@conrad_9565/lets-build-a-ui-with-qlkit-and-graph-queries-79b7b118ddac\">https://medium.com/@conrad_9565/lets-build-a-ui-with-qlkit-and-graph-queries-79b7b118ddac</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127045789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527191042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh</span> yes, that makes sense.  Thanks so much for sharing!  I really like Rum as a simple, straightforward React Layer.  Datascript is way more powerful than most client-side state management solutions I've looked at.  I'm less clear on how Datascript would manage server communication--tonsky's examples suggest just using http/REST (if i'm reading them correctly), which is a shame as that loses all the expressiveness of Datalog.  I also do wish there were simple Datascript/Rum bindings for composing components in queries, a la Om/next or GraphQL's Relay or Apollo, or Reagent's Posh.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046084,
            "is_me_message": false,
            "last_edit_timestamp": 1527191786,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527191433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105241\">@David Andrew Duthie (W2'18)</span> welp, there's another approach I'll be adding to my list.  That is precisely what I was talking about.  Will have to check it out.  If anyone's had a chance to play around with it, pray tell.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527192016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105103\">@James Conkling (W2'18)</span> If you want to use datalog for remote queries, you can always send the query itself over as EDN --- no need to try and put together a bunch of REST-ish endpoints unless you need that for other API consumers or something.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127049315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527195500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>You may also want to dig through the datascript issues, since I think a lot of folks have the same problem about client/server sync, and you may be able to get some pointers from those discussions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127049326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527195531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>I may be looking at this from too narrow a perspective, as my real familiarity is w/ Falcor/GraphQL-Relay.  What I would ultimately hope to be able to do is issue a query (e.g. via Datalog), and if any subset of the query is resolvable against the local data model, have part of the query resolve immediately, while the remaining part of the query is resolved against the remote and cached in the client on success.  Falcor calls itself an isomorphic data model for this reason: queries against remote vs local data are resolved identically, regardless of whether the data reside locally or remotely.  I admittedly haven't worked enough w/ DataScript to know whether or not it could act as an isomorphic db--looking at <a href=\"https://github.com/metasoarous/datsync\" target=\"_blank\" title=\"https://github.com/metasoarous/datsync\">DatSync</a> as a possible solution for this.<br>\nBut again, I might be defining the requirements too narrowly--perhaps DataScript already has a solution more close at hand...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127049866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1527196320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Zach Tellman's new collection library looks really interesting: <a href=\"https://github.com/lacuna/bifurcan\" target=\"_blank\" title=\"https://github.com/lacuna/bifurcan\">https://github.com/lacuna/bifurcan</a><br>\nAnybody here played with or benchmarked it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127432712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "bifurcan",
            "submessages": [],
            "timestamp": 1527880408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f388e8f2d7838cbdbdcdf315163103a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all! I'm not going to repost a bunch of stuff here, but I've been working on a game in clojure for the past year and a half! Check out #games if you wanna play it. For those interested in what a long, high polish clojurescript game might look like, check out my repo!</p>\n<p><a href=\"https://github.com/MysteryMachine/syms-qual\" target=\"_blank\" title=\"https://github.com/MysteryMachine/syms-qual\">https://github.com/MysteryMachine/syms-qual</a></p>\n<p>I built a custom framework for it, and you can see my code's gotten sloppier as I'm nearing release. That's because I noticed some big fundamental flaws with that framework. I'm gonna write a postmortem for it eventually, too, so hang tight!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129354531,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f49c",
                    "emoji_name": "purple_heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f49c",
                    "emoji_name": "purple_heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                },
                {
                    "emoji_code": "1f3ae",
                    "emoji_name": "video_game",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "outofthemadness@gmail.com",
                        "full_name": "James A. Keene (he) (m2'18)",
                        "id": 887
                    },
                    "user_id": 887
                }
            ],
            "recipient_id": 20136,
            "sender_email": "physicsfu@gmail.com",
            "sender_full_name": "Salomao Diovanni Montemezzo Becker (they/he) (F2'15)",
            "sender_id": 8695,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Game in Clojure",
            "submessages": [],
            "timestamp": 1531148612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105103\">@James Conkling (W2'18)</span> I know a lot about ClojureScript and Datalog! Are you still interested in this?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129834574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1531860609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d2992f6b5d942ccfdf36572b9aa74423?d=identicon&version=1",
            "client": "website",
            "content": "<p>As a matter of fact, I am!  I really like the semantics of Datalog, which if used client side would seem like a potentially significant improvement over the semantics of Falcor/GraphQL.  I got a little lost when evaluating front-end frameworks using Datalog or a Datalog-like graph query syntax: Om.next, Posh, Re-Posh, Fulcro, DataSys(?), QLKit... I'm sure there's more.  Couldn't figure out if any of these target the entire use case outlined above.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129838125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "james.lane.conkling@gmail.com",
            "sender_full_name": "James Conkling (he) (W2'18)",
            "sender_id": 105103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Getting Started w/ Datomic",
            "submessages": [],
            "timestamp": 1531865141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Recently came across this fun post, spotted an inefficiency, and offered my own solution in the comments:<br>\n<a href=\"https://porkostomus.gitlab.io/posts-output/2018-08-16-Just-Juxt-2/#comment-4147168467\" target=\"_blank\" title=\"https://porkostomus.gitlab.io/posts-output/2018-08-16-Just-Juxt-2/#comment-4147168467\">https://porkostomus.gitlab.io/posts-output/2018-08-16-Just-Juxt-2/#comment-4147168467</a><br>\n(In case the disqus comments don't load: <a href=\"https://repl.it/@jab/porkostomus-just-juxt-2\" target=\"_blank\" title=\"https://repl.it/@jab/porkostomus-just-juxt-2\">https://repl.it/@jab/porkostomus-just-juxt-2</a>)</p>\n<p>Grateful for any feedback from more experienced Clojurians!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135881257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1539671705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>In particular, is there a better way to write that <code>loop/recur</code> in <code>fuzzy-palindrome?</code>? It's bugging me because it seems not unlike when you see some code written with a <code>while</code> loop only because the author hadn't learned <code>for</code> loops yet. (Its greater flexibility just adds verbosity/boilerplate for this common case.) I'm only trying to iterate over items in a sequence until I reach one or another condition. Is there a better way of writing that?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135998376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1539807858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Got something I'm happier with working <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span><br>\n(Avoided <code>loop/recur</code> by using <code>(first (remove nil? (for [...] (cond ...))))</code> \u2013\u00a0still curious as always if there's a better way:)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136008639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1539819883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/513b96bfef3dcbee7604880ad96b4062?d=identicon&version=1",
            "client": "website",
            "content": "<p>Very cool. I'm about to go back and do some of the harder 4Clojure questions I missed. Also I see that Hackerrank has many problems in Clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136712568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "Dwaynekj@gmail.com",
            "sender_full_name": "Dwayne Khallique Jones (F'12)",
            "sender_id": 915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1540826341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (m1'17)</span>  I'd say in general the 'higher level abstraction' over <code>loop/recur</code> is <code>reduce</code>.</p>\n<p>I'll take a poke at your fuzzy-palindrome case a bit later. :)</p>\n<p>In general I'm very happy to talk style/strategy about the 4Clojure problem set.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136716275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1540829357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"915\">@Dwayne Jones (F'12)</span> <span class=\"user-mention\" data-user-id=\"101997\">@Andrew Nichols (F2'17)</span> Thanks for taking a look! Since my original post I settled on <code>(first (drop-while nil? (map ... (cond ...))))</code> as the best way to express what's going on here (and have updated the code in the <a href=\"http://repl.it\" target=\"_blank\" title=\"http://repl.it\">repl.it</a> link with this latest version). Curious what you think.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136728582,
            "is_me_message": false,
            "last_edit_timestamp": 1540840682,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1540840650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ede63f05c0a949ad0dce6b1e120fa5f2a1cc72a?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (m1'17)</span> So my <em>instinct</em> was that your solution looked like pythonic-flavored clojure, but I wanted to take a shot at doing this in what I would suggest is more idiomatic fashion before making that case:</p>\n<div class=\"codehilite\"><pre><span></span>(defn fuzzy-palindrome2? [s]\n  (apply = ((juxt identity reverse)\n            (into []\n                  (comp\n                   (filter #(Character/isLetter ^Character %))\n                   (map    #(Character/toLowerCase ^Character %)))\n                  s))))\n</pre></div>\n\n\n<p>I was actually prepared for this to be slightly less performant (I would have made the argument for simplicity &gt; performance in most cases), but surprisingly after benchmarking with criterium, it turns out to be an order of magnitude faster. The typehints make a <em>huge</em> impact on this btw, and I added them to your call of <code>Character/toLowerCase</code>.</p>\n<p>I tried for a while to write this with a third transducer inside <code>comp</code> that could reduce each end, before deciding that I was fundamentally fighting the language and it wasn't worth it.</p>\n<p>I still think there's a reasonably simple <code>loop/recur</code> solution to be had that can consume from both ends, but I would argue that the above is performant enough while being very easy to understand.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137059518,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 20136,
            "sender_email": "danweasel@gmail.com",
            "sender_full_name": "Andrew Nichols (he) (F2'17)",
            "sender_id": 101997,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Fun with palindromes (4clojure #27)",
            "submessages": [],
            "timestamp": 1541174025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>As an alternative to the exisiting Clojurians Slack, there is now a Zulip server for the wider Clojure community : <a href=\"https://clojurians.zulipchat.com/\" target=\"_blank\" title=\"https://clojurians.zulipchat.com/\">https://clojurians.zulipchat.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147488657,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "chris.smothers@gmail.com",
                        "full_name": "Chris Smothers (he) (F1'18)",
                        "id": 125111
                    },
                    "user_id": 125111
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurians.zulipchat.com",
            "submessages": [],
            "timestamp": 1541965288,
            "topic_links": [
                "https://clojurians.zulipchat.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Out of curiosity, what's the motivation behind a separate chatroom from slack/clojurians? <span class=\"user-mention\" data-user-id=\"2865\">@Pierre-Yves Baccou (F'13)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147553617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurians.zulipchat.com",
            "submessages": [],
            "timestamp": 1542059778,
            "topic_links": [
                "https://clojurians.zulipchat.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I am not sure who created it, but slack is really not that great for open source communities. One reason among many is that message history is not available</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147555378,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanzanemiller@gmail.com",
                        "full_name": "Ethan Zane Miller (he) (F2'18)",
                        "id": 130321
                    },
                    "user_id": 130321
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ds2643@columbia.edu",
                        "full_name": "David Shaked (W2'16)",
                        "id": 8995
                    },
                    "user_id": 8995
                }
            ],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurians.zulipchat.com",
            "submessages": [],
            "timestamp": 1542061728,
            "topic_links": [
                "https://clojurians.zulipchat.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Another is that zulip works better for large groups IMO</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147555404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurians.zulipchat.com",
            "submessages": [],
            "timestamp": 1542061759,
            "topic_links": [
                "https://clojurians.zulipchat.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>And yet another, it is open source</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 147555411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojurians.zulipchat.com",
            "submessages": [],
            "timestamp": 1542061775,
            "topic_links": [
                "https://clojurians.zulipchat.com"
            ],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p>if you have ~30 mins and want a good laugh, definitely check out this talk given yesterday at clojure/conj! :)<br>\n<a href=\"https://www.youtube.com/watch?v=jlPaby7suOc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=jlPaby7suOc\">https://www.youtube.com/watch?v=jlPaby7suOc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"jlPaby7suOc\" href=\"https://www.youtube.com/watch?v=jlPaby7suOc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=jlPaby7suOc\"><img src=\"https://i.ytimg.com/vi/jlPaby7suOc/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150728797,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wforzo@gmail.com",
                        "full_name": "Will Orzo (W'14)",
                        "id": 5029
                    },
                    "user_id": 5029
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "Dwaynekj@gmail.com",
                        "full_name": "Dwayne Khallique Jones (F'12)",
                        "id": 915
                    },
                    "user_id": 915
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mdparker89@gmail.com",
                        "full_name": "Matthew Parker (F2'14)",
                        "id": 6698
                    },
                    "user_id": 6698
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                }
            ],
            "recipient_id": 20136,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Every Clojure Talk Ever",
            "submessages": [],
            "timestamp": 1543769036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151410673,
            "is_me_message": false,
            "last_edit_timestamp": 1544485781,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Every Clojure Talk Ever",
            "submessages": [],
            "timestamp": 1544485769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Anyone have tips/guides for prepping for a Clojure related technical interview?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151410735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544485806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>My experience giving interviews was at a place where the candidate worked in their own environment and would start a new project for that interview.</p>\n<p>We did not judge people explicitly on how well they were able to bootstrap a project and get it going, but I found that if there was slowness in the beginning, it would start things on the wrong foot.</p>\n<p>With that in mind, I might recommend creating a lein template that already has any dependencies that you frequently use added in</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151410983,
            "is_me_message": false,
            "last_edit_timestamp": 1544486150,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanzanemiller@gmail.com",
                        "full_name": "Ethan Zane Miller (he) (F2'18)",
                        "id": 130321
                    },
                    "user_id": 130321
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544486141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>That seems very sensible. Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151413303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544489029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Is it clojure related in the sense that they\u2019re going to ask you about clojure? Or clojure related as in they use clojure at the company?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151732350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544734802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Obviously the two are highly related, but not necessarily the same... some fp shops just want to know whether you\u2019re comfortable with fp</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151732454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544734857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> I think it's probably a mixture of both. Want to know if I can implement stuff in clojure, so also in a f.p type way. I had an initial interview that was related to lazy sequences.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151842931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544891620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>In general, I think my question is related to not knowing exactly how to study a language like Clojure, i.e. a functional language, in relation to the kind of material that is in Cracking the Coding Interview. It's almost as if one could run through all those problems again because the functional soln's often seem very different.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151843004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544891715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Yeah a lot of those problems are designed for imperative solutions</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151847309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544899851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Perhaps the tree and graph chapters would be approachable in clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151847317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544899870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does there then exist, or ought there to exist, some parallel set of questions for fp, some Cracking the Functional Code Interview?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151851933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544909405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(Maybe what I'm really interested in is interviews vv FP and not Clojure specfically).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151852000,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544909615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>When I first started Clojure, I used <a href=\"http://www.4clojure.com/problems\" target=\"_blank\" title=\"http://www.4clojure.com/problems\">4Clojure</a> and <a href=\"http://clojurekoans.com/\" target=\"_blank\" title=\"http://clojurekoans.com/\">Clojure Koans</a>\u2014perhaps the medium to hard questions approximate CtCI? I did a little of <a href=\"https://adventofcode.com/\" target=\"_blank\" title=\"https://adventofcode.com/\">Advent of Code</a> last year and I remember I learned a bunch from reading others' solutions.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151854628,
            "is_me_message": false,
            "last_edit_timestamp": 1544915232,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "Dwaynekj@gmail.com",
                        "full_name": "Dwayne Khallique Jones (F'12)",
                        "id": 915
                    },
                    "user_id": 915
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanzanemiller@gmail.com",
                        "full_name": "Ethan Zane Miller (he) (F2'18)",
                        "id": 130321
                    },
                    "user_id": 130321
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danweasel@gmail.com",
                        "full_name": "Andrew Nichols (he) (F2'17)",
                        "id": 101997
                    },
                    "user_id": 101997
                }
            ],
            "recipient_id": 20136,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1544915217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>i back <span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> here</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152408195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1545524872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>The Clojure/nyc meetup is having a project night this Wednesday (2/6) from 6:30-9:30pm, in case of interest!<br>\n<a href=\"https://www.meetup.com/Clojure-nyc/events/258301027/\" target=\"_blank\" title=\"https://www.meetup.com/Clojure-nyc/events/258301027/\">https://www.meetup.com/Clojure-nyc/events/258301027/</a></p>\n<p>My first project idea is targeting Cloudflare Workers and the browser with ClojureScript (e.g. to implement a serverless Progressive Web App with the same bundle of code that runs in the browser and in a Cloudflare Worker, \u00e0 la <a href=\"https://blog.cloudflare.com/serverless-pwa-react-cloudflare-workers/\" target=\"_blank\" title=\"https://blog.cloudflare.com/serverless-pwa-react-cloudflare-workers/\">https://blog.cloudflare.com/serverless-pwa-react-cloudflare-workers/</a>). Might be a bit advanced for me to finish on my own on Wednesday night, so hoping someone with more ClojureScript experience will want to work with me.</p>\n<p>Hope to see you there!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157487516,
            "is_me_message": false,
            "last_edit_timestamp": 1549235231,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure/nyc Project Night this Wednesday",
            "submessages": [],
            "timestamp": 1549235126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi all, I just published a small lib yesterday for js-interop in ClojureScript that I have been using for the past year or so and found useful. The basic idea is to  interop with javascript using functions that behave like Clojure core functions, so we have things like <code>get</code> / <code>get-in</code> <code>assoc!</code> <code>assoc-in!</code> and so on. I gave a lightning talk at yesterday's Berlin meetup and would welcome any feedback: <a href=\"https://github.com/appliedsciencestudio/js-interop\" target=\"_blank\" title=\"https://github.com/appliedsciencestudio/js-interop\">https://github.com/appliedsciencestudio/js-interop</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158525757,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44b",
                    "emoji_name": "wave",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxim@ontoillogical.com",
                        "full_name": "Max Veytsman (he) (S1'20)",
                        "id": 5875
                    },
                    "user_id": 5875
                }
            ],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550147920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi Matt! I haven't touched clojure in a few years and haven't done much cljs. Just wondering</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">get</span>\n  <span class=\"p\">([</span><span class=\"nv\">o</span> <span class=\"nv\">k</span><span class=\"p\">]</span>\n   <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"o\">~</span><span class=\"nv\">o</span> <span class=\"o\">~</span><span class=\"nv\">k</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>\n  <span class=\"p\">([</span><span class=\"nv\">o</span> <span class=\"nv\">k</span> <span class=\"nv\">not-found</span><span class=\"p\">]</span>\n   <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"ss\">&#39;goog.object/get</span> <span class=\"o\">~</span><span class=\"nv\">o</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nf\">wrap-key</span> <span class=\"nv\">k</span><span class=\"p\">)</span> <span class=\"o\">~</span><span class=\"nv\">not-found</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>Is there a reason this is a macro and not a function?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158526585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550148826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hey Max! Most of the functions have macro-equivalents which aim to do as much work at compile time as possible, so using this library shouldn't incur any more performance overhead than what you'd otherwise write yourself. (In cljs, unlike Clojure, you can have functions and macros with the same name.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158526742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550148968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>hey <span class=\"user-mention\" data-user-id=\"6187\">@Matthew Huebert (S'14)</span>! just dropping by to say that your talk was great, and i really enjoyed talking to you later that evening!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158526816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550149076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Eg/ in the case of <code>get</code>, if a static keyword is passed in as <code>k</code>, we convert it to a string at compile time. We also avoid an extra function invocation, though I haven't checked if that has a performance impact</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158526935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550149172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> thanks and likewise, I'm glad we finally met! &amp; looking forward to future Berlin recurse gatherings</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158527007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550149215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'd want this lib to be useful in performance-sensitive contexts, as that's a common reason why one is interacting with JS data structures in the first place</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158527352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550149540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f73e65883e520779be92f043b9dc2e8db1ca95d4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I made a gist on Maria that shows comparisons of what kind of code you need to write to get equivalent semantics using <code>goog.object</code> or host interop syntax. (Unfortunately you can't actually evaluate these examples I haven't implemented consumption of external deps on Maria yet) <a href=\"https://www.maria.cloud/gist/7d3bb05390dce04a1bac9fda94ab0b92\" target=\"_blank\" title=\"https://www.maria.cloud/gist/7d3bb05390dce04a1bac9fda94ab0b92\">https://www.maria.cloud/gist/7d3bb05390dce04a1bac9fda94ab0b92</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158527507,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxim@ontoillogical.com",
                        "full_name": "Max Veytsman (he) (S1'20)",
                        "id": 5875
                    },
                    "user_id": 5875
                }
            ],
            "recipient_id": 20136,
            "sender_email": "matt@sparkboard.com",
            "sender_full_name": "Matthew Huebert (S2'14)",
            "sender_id": 6187,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550149674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>woah maria looks really neat</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158528646,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "matt@sparkboard.com",
                        "full_name": "Matthew Huebert (S2'14)",
                        "id": 6187
                    },
                    "user_id": 6187
                }
            ],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "js-interop lib",
            "submessages": [],
            "timestamp": 1550150810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>On the off chance anyone was interested in this, the previous meetup was postponed until tomorrow. RSVP here if interested!: <a href=\"https://www.meetup.com/Clojure-nyc/events/258883856/\" target=\"_blank\" title=\"https://www.meetup.com/Clojure-nyc/events/258883856/\">https://www.meetup.com/Clojure-nyc/events/258883856/</a><br>\nStill planning to join and see if I can target Cloudflare Workers from CLJS (see the new <a href=\"https://workers.dev\" target=\"_blank\" title=\"https://workers.dev\">https://workers.dev</a> site if you haven't yet)!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158933548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure/nyc Project Night this Wednesday",
            "submessages": [],
            "timestamp": 1550622611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/513b96bfef3dcbee7604880ad96b4062?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Was thinking of joining this one, if not then definitely the next</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158978533,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "Dwaynekj@gmail.com",
            "sender_full_name": "Dwayne Khallique Jones (F'12)",
            "sender_id": 915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure/nyc Project Night this Wednesday",
            "submessages": [],
            "timestamp": 1550672494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've been working through the 4clojure problems. I am finding that useful.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158984723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1550676361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> is it possible to venture a description of what it means for certain problems to be/not be approachable in clojure? I mean we should be able to solve any problem in clojure right, it's just that the clojure (functional solution) would take a very different approach?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158984967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1550676538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130321\">@Ethan Zane Miller (F2'18)</span> awesome, I\u2019ve heard great things about 4clojure</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159288573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1551037156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I suppose that I meant that, depending on the interview problem, and depending on what the interviewer is looking for, the optimal solution may be most readily achieved through two-pointer, early exit, or other looping constructs that aren\u2019t always as obviously implementable in purely functional terms. Then again clojure isn\u2019t purely functional, and has loop/recur which may make these types of solution easier to implement</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159288730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1551037414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Another potential concern is that an interviewer may ask about runtime and memory usage characteristics of the algorithm, and understanding the performance traits of clojures persistent structures, as well as laziness and tail recursion will be useful in an interview context</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159288798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1551037547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Another good thing for clojure as an interview language is you can always \u201cdrop down\u201d to other jvm languages to provide whatever tradeoff you\u2019re looking for, assuming that tradeoff is available on the jvm. I\u2019m not suggesting it\u2019d be easy to jump between jvm langs in an interview, but you might have the opportunity to discuss these trade offs at least</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 159288904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure interviews",
            "submessages": [],
            "timestamp": 1551037712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>Does anyone know of a list of open source Clojure projects seeking contributors?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164847298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "List of OS clojure projects",
            "submessages": [],
            "timestamp": 1556940659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://open-source.braveclojure.com/\" target=\"_blank\" title=\"http://open-source.braveclojure.com/\">http://open-source.braveclojure.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164942240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "List of OS clojure projects",
            "submessages": [],
            "timestamp": 1557099489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>I haven't come across this blog in the past, but I think the content is pretty good: <a href=\"http://clojure-goes-fast.com/blog/\" target=\"_blank\" title=\"http://clojure-goes-fast.com/blog/\">http://clojure-goes-fast.com/blog/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166373296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure goes fast blog",
            "submessages": [],
            "timestamp": 1558626412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>they cover profiling, reflection, decompilers, etc</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166373328,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trinityXmontoya@gmail.com",
                        "full_name": "Trinity Montoya (she) (S1'19)",
                        "id": 221831
                    },
                    "user_id": 221831
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure goes fast blog",
            "submessages": [],
            "timestamp": 1558626435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>thanks santi... curious that they don't list webtool-lite</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166373381,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f3fa",
                    "emoji_name": "vase",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f695",
                    "emoji_name": "taxi",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f4a1",
                    "emoji_name": "light_bulb",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "tools",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f578",
                    "emoji_name": "spider_web",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f954",
                    "emoji_name": "potato",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                },
                {
                    "emoji_code": "1f954",
                    "emoji_name": "potato",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 20136,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "List of OS clojure projects",
            "submessages": [],
            "timestamp": 1558626478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05d3b7075db36e6c7cc6d32352cf7a9c8156e6a0?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=wASCH_gPnDw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wASCH_gPnDw\">https://www.youtube.com/watch?v=wASCH_gPnDw</a> neat video of Rich Hickey explaining Clojure to astrophysicist and software architect Brian Beckman (few decades at JPL, microsoft, and amazon)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wASCH_gPnDw\" href=\"https://www.youtube.com/watch?v=wASCH_gPnDw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wASCH_gPnDw\"><img src=\"https://i.ytimg.com/vi/wASCH_gPnDw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167381525,
            "is_me_message": false,
            "last_edit_timestamp": 1559736592,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "trinityXmontoya@gmail.com",
            "sender_full_name": "Trinity Montoya (she) (S1'19)",
            "sender_id": 221831,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "inside Clojure video",
            "submessages": [],
            "timestamp": 1559736578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although it's been awhile since I watched this, I remember it was interesting to see how Beckman already had this big mental map of the possibility space. \"Ah so you're taking that approach for X. In that case, how do you handle Y and Z?\" It's like he already knew most of the answers, the conversation was mostly confirming his guesses. It was interesting to watch.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167479661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "inside Clojure video",
            "submessages": [],
            "timestamp": 1559826460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05d3b7075db36e6c7cc6d32352cf7a9c8156e6a0?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yeah! he's been in the field for so long / cared to go deep into these kind of design fundamentals that he immediately realized the implications of choices Rich Hickey made, something for me to aspire to <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span> (+ having the confidence to wear a cowboy hat everywhere haha)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167502784,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f920",
                    "emoji_name": "cowboy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@greghendershott.com",
                        "full_name": "Greg Hendershott (he) (F2'14)",
                        "id": 6678
                    },
                    "user_id": 6678
                },
                {
                    "emoji_code": "1f920",
                    "emoji_name": "cowboy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                }
            ],
            "recipient_id": 20136,
            "sender_email": "trinityXmontoya@gmail.com",
            "sender_full_name": "Trinity Montoya (she) (S1'19)",
            "sender_id": 221831,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "inside Clojure video",
            "submessages": [],
            "timestamp": 1559842439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey friends, I am the founder of a clojure startup <a href=\"http://hyperfiddle.net\" target=\"_blank\" title=\"http://hyperfiddle.net\">http://hyperfiddle.net</a>, does anyone want to meet and chat Clojure? I am in NYC today</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173666461,
            "is_me_message": false,
            "last_edit_timestamp": 1566313579,
            "reactions": [
                {
                    "emoji_code": "1f44b",
                    "emoji_name": "wave",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rprior@protonmail.com",
                        "full_name": "Ryan Prior (he) (F1'19)",
                        "id": 234256
                    },
                    "user_id": 234256
                },
                {
                    "emoji_code": "1f44b",
                    "emoji_name": "wave",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566313562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"868\">@Dustin Getz (S'12)</span> I have done some Clojure last year and would be happy to chat. I am in RC all day today and tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173668421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566315099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm down to chat Clojure, where are you meeting?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173700935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566339500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>I am headed to localhost now, I can meet up there or at RC after that (my laptop is over there so I will come back)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173704364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566342458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I'm getting dinner right now but could meet up again afterwards</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173754071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566346080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c8dd2e41a62328fe8502000bc5a45ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't plan this well enough. When does the next batch roll over? I am in NYC like every other week now and am happy to arrange a RC Clojure meetup in advance</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173923700,
            "is_me_message": false,
            "last_edit_timestamp": 1566510059,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "dustin.getz@gmail.com",
            "sender_full_name": "Dustin Getz (S'12)",
            "sender_id": 868,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1566510041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>I have a JavaScript collection that I generated with a library. I can call <code>first</code> on it &amp; get the first object, I can run <code>count</code> on it and get the correct count. But when I try to call <code>map</code> on it I don't get what I expect. And because it has self-references, I can't call <code>js-&gt;clj</code> on it or I get a max-stack exception.</p>\n<p>Is my only practical option to call coerce the collection into a JavaScript array and call <code>.map</code> on that? Or are there any other interop ideas y'all think I should try?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174583538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567200141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>what do you get when you map over it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174591251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567208679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>and can you inspect it on the javascript side to see what's going on</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174591253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567208687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>JS has some weird stuff going on with enumerable vs non-enumerable properties that I don't fully understand</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174591276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567208726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>When I map over it I get this:</p>\n<div class=\"codehilite\"><pre><span></span>{ meta: null,\n  fn: [Function],\n  s: null,\n  __hash: null,\n  &#39;cljs$lang$protocol_mask$partition0$&#39;: 32374988,\n  &#39;cljs$lang$protocol_mask$partition1$&#39;: 1 }\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174596405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567216843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>it seems like what you're mapping over is maybe some kind of proxy object</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174601009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567225434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234256\">@Ryan Prior (he) (F1'19)</span>  Clojure's map will return a lazy seq, so I think what you're seeing is ClojureScript's internal impl of lazy seq. (I assume you're seeing this from the JavaScript console)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174634906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567288924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>You should be able to implement the necessary ClojureScript protocols on the JavaScript type so that you can treat it as a sequence and thus use cljs map, filter, etc. on it. <a href=\"https://github.com/lynaghk/c2/blob/master/src/cljs/c2/dom.cljs#L15-L18\" target=\"_blank\" title=\"https://github.com/lynaghk/c2/blob/master/src/cljs/c2/dom.cljs#L15-L18\">Here</a> is an example where I did that for the <code>NodeList</code> type (which is what's returned by <code>document.querySelectorAll()</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174634971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567289062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>Nailed it! I called <code>str</code> on it and it gave me what I wanted instead of the unexpected object. Lesson learned: calling <code>js/console.log</code> on a lazy seq doesn't evaluate it, it just logs the representation of the sequence. Thank you for your help <span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> and <span class=\"user-mention\" data-user-id=\"234254\">@Glenn Willen (he) (F1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 174636678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "map over a javascript collection",
            "submessages": [],
            "timestamp": 1567292750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>In general, I've treated <code>#(body)</code> as if it's the same as <code>(fn [maybe args] body)</code>. in many cases, that seems to be true. For example, <code>(#(+ 2 %) 3)</code> yields <code>5</code>, so far so good.</p>\n<p>However, if I evaluate <code>(take 5 (repeatedly #(0)))</code> I get <code>java.lang.Long cannot be cast to clojure.lang.IFn</code>. Meanwhile, if I evaluate <code>(take 5 (repeatedly (fn [] 0)))</code> I get <code>(0 0 0 0 0)</code> which is what I expected. Apparently in this case, the macro isn't the same as I'd expect.</p>\n<p>Can anybody explain what's going on in that case?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175107750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "function macro",
            "submessages": [],
            "timestamp": 1567807731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p><code>#(body)</code> is actually equivalent to <code>(fn [&amp; args] (body))</code> (note the extra set of parens around body), so whatever you pass has to be invoke-able as a function</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175273413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "function macro",
            "submessages": [],
            "timestamp": 1568056337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Okay, that's a small distinction that makes a big difference. Thank you :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175300091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "function macro",
            "submessages": [],
            "timestamp": 1568081013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "website",
            "content": "<p>Hi everyone,<br>\nI began working through the first problem set over at <a href=\"http://cryptopals.com\" target=\"_blank\" title=\"http://cryptopals.com\">cryptopals.com</a> the other day. I'm trying to learn Clojure simultaneously, so I figured I'd implement all of the exercises in Clojure. These exercises are for learning purposes of course, but I'm going out of my way to not use any libraries besides clojure.core and the Java standard library.<br>\nThe first exercise asks you to write code that takes in a string encoded in hexadecimal and spit out a string encoded in base64. The algorithm for doing this is fairly straightforward:<br>\n1. Get the byte associated with each couplet of hex digits (for example, the hex <code>49</code> becomes <code>01001001</code>.<br>\n2. Once all bytes for the hex string have been retrieved, turn the list of bytes into a sequence of individual bits.<br>\n3. For every 6 bits, return a base64 character (they're all represented as units of 6 bits).<br>\nI'm having trouble actually representing bits and bytes in Clojure (operating on raw bytes is one of the requirements of the exercise. I know I can do <code>byte-array</code> on the initial hex values and get back an array of bytes, but how do I access the raw bits so that I can translate from a series of bytes into a base64 encoded string?<br>\nAny help or direction would be greatly appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175375809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568147703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>With the caveat that I'm also a Clojure novice so might be missing something: I think you might have to use java interop for many cryptopals things, since Clojure doesn't offer much in the way of systems programming</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175377366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568148805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://clojure.org/reference/java_interop\" target=\"_blank\" title=\"https://clojure.org/reference/java_interop\">https://clojure.org/reference/java_interop</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175377369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568148807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "website",
            "content": "<p>Corresponding StackOverflow thread <a href=\"https://stackoverflow.com/questions/57877968/how-can-i-directly-work-with-bits-in-clojure\" target=\"_blank\" title=\"https://stackoverflow.com/questions/57877968/how-can-i-directly-work-with-bits-in-clojure\">https://stackoverflow.com/questions/57877968/how-can-i-directly-work-with-bits-in-clojure</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175377966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568149215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "website",
            "content": "<p>It seems there are more built-in functions for dealing with this than I had found upon initial inspection</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175377995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568149249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>For example, <code>Integer/toBinaryString</code> might be useful, eg if you want to see the result of some binary operations you might</p>\n<div class=\"codehilite\"><pre><span></span>(-&gt; (bit-and 2r1010 2r1111) Integer/toBinaryString)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175378003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568149256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"233915\">@Thomas Francis Lisankie (he) (F1'19)</span> There are <em>many</em> ways to deal with bytes on the JVM. This clj \"rosetta stone\" library might be helpful: <a href=\"https://github.com/ztellman/byte-streams\" target=\"_blank\" title=\"https://github.com/ztellman/byte-streams\">https://github.com/ztellman/byte-streams</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175392339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Representing bytes in Clojure",
            "submessages": [],
            "timestamp": 1568163222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone in F1 or F2 working on Clojure?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176406421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569270503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/973e5363d617a705d4ec13541831691e8d846390?x=x&version=4",
            "client": "website",
            "content": "<p>I've been chipping away at \"Clojure for the Brave and True\" for the last few weeks</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176406697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kathleen.macg@gmail.com",
            "sender_full_name": "Kathleen McGuire (she/they) (F2'19)",
            "sender_id": 228113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569270716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c42d0ccee4e9835cde7dcf4ddf7f6a399d852f5?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>oh wow yes i just started that online!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176407009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lainedkendall@gmail.com",
            "sender_full_name": "Laine Kendall (she/they) (F2'19)",
            "sender_id": 240732,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569270941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/973e5363d617a705d4ec13541831691e8d846390?x=x&version=4",
            "client": "website",
            "content": "<p>My biggest struggle is coming up with a good project to apply what I'm reading about, so I'm very down to pair</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176407615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kathleen.macg@gmail.com",
            "sender_full_name": "Kathleen McGuire (she/they) (F2'19)",
            "sender_id": 228113,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569271333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>I've been working through <a href=\"https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome\" target=\"_blank\" title=\"https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome\">Clojure from the ground up</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176409561,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lainedkendall@gmail.com",
                        "full_name": "Laine Kendall (she/they) (F2'19)",
                        "id": 240732
                    },
                    "user_id": 240732
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569272665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>I've been working on a few Clojure projects :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176497045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569353156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "website",
            "content": "<p>Also definitely down to pair on Clojure stuff, I have a list of ideas</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176497137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569353199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "website",
            "content": "<p>Hey, I'm actually working on a Scuttlebutt implementation in Clojure right now! Half of the code I've written during this batch has probably been Clojure actually</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176593204,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                }
            ],
            "recipient_id": 20136,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569436262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>In my batch last year I worked on a ClojureScript reimplementation of a C++ program I had written earlier. I felt it was a good way of learning Clojure since I knew exactly what my program was supposed to do and also had a reference version for checking the correctness.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176714281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure peeps in current batch?",
            "submessages": [],
            "timestamp": 1569552412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>Hi Clojure friends! I'm seeking help setting up a basic clojure workflow.</p>\n<p>I came across this today in the docs for <a href=\"https://github.com/bhauman/rebel-readline/blob/master/rebel-readline/doc/intro.md\" target=\"_blank\" title=\"https://github.com/bhauman/rebel-readline/blob/master/rebel-readline/doc/intro.md\">Rebel Readline</a>: \"The path for newcomers to create an effective Clojure programming environment, is varied, difficult and confusing. It requires a level of investment and discernment that is too high for the language explorer who has never used a LISP before.\" This is _exactly_ my experience. I've been going in circles with Figwheel, Leiningen, Calva, Cider, Emacs, and a handful of other Clojure tools. I hear so much about the amazing dev experience in Clojure, but at the moment I'm missing too many pieces to take advantage of it.</p>\n<p>I would love to pair with someone on a session where we look at these tools in a hands-on way. Even just hearing how others have set things up would be most helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642420,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span> Do you have a preferred editor? I have been using Emacs and Clojure for years and would be happy to pair sometime to help you get setup and otherwise see what my workflow looks like.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Emacs is a big mess, though, and I don't necessarily endorse it --- just sort of ended up going down that path years ago and now the switching costs are too high for me personally = )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> ! I'm coming from a js background... I've been using VS Code for the past couple years.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know much about VS Code, but it's popular enough that I bet we could get Clojure setup with it if you want to stick with it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not opposed to learning emacs, but a bit worried that trying to learn two major things at once might not be the best learning setup.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>I've been playing with Calva, which is a VS Code extension.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>It seems promising, but I keep hitting errors I don't know how to interpret.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, yeah. I (hopefully) could help with that if it's stuff on the Clojure side.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>I'd be incredibly appreciative. I think my trouble comes from lacking the conceptual overview of what repl-based development really means.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177642971,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm about to have someone over, so can't pair right now. I may be available in 4--5 hours if you are still around I can ping you.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Otherwise I could do 3 p.m. EST tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>3pm tomorrow sounds great</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, I'll send you a google calendar invite with a videoconferencing link</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177643253,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1570558687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/674da3534f3fc8e95568ee8cfad3de73?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span> If this is still a thing, I'm currently working on a Clojure library and will probably be in the space this week and would be happy to pair if you're around during the evenings.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178127674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@changlinli.com",
            "sender_full_name": "Changlin Li (he) (S2'19)",
            "sender_id": 228114,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1571078729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"228114\">@Changlin Li (he) (S2'19)</span>  Yes, I'd very much appreciate that! I tend to be around most evenings. Just let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178130316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Setting up dev environment",
            "submessages": [],
            "timestamp": 1571080667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>How do you build a small production bundle of your cljs app? I'm currently using lein-figwheel, but when I web search \"cljs production build\" it looks like the only game in town is shadow-cljs. Do I have to switch to that in order to build a bundle? Can anybody recommend a good guide or example to look at?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178991306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs production build",
            "submessages": [],
            "timestamp": 1571947270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm guessing you're also using <code>cljsbuild</code>.<br>\nFrom <code>lein-figwheel</code> docs, you'll have something like:</p>\n<div class=\"codehilite\"><pre><span></span>:cljsbuild {\n  :builds [ { :id &quot;example&quot;\n              :source-paths [&quot;src/&quot;]\n              :figwheel true\n              :compiler {  :main &quot;example.core&quot;\n                           :asset-path &quot;js/out&quot;\n                           :output-to &quot;resources/public/js/example.js&quot;\n                           :output-dir &quot;resources/public/js/out&quot; } } ]\n}\n</pre></div>\n\n\n<p>You can add another build:</p>\n<div class=\"codehilite\"><pre><span></span>  :builds [{ :id &quot;example&quot;\n              :source-paths [&quot;src/&quot;]\n              :figwheel true\n              :compiler {  :main &quot;example.core&quot;\n                           :asset-path &quot;js/out&quot;\n                           :output-to &quot;resources/public/js/example.js&quot;\n                           :output-dir &quot;resources/public/js/out&quot; } }\n              { :id &quot;prod&quot;\n              :source-paths [&quot;src/&quot;]\n              :compiler {  :main &quot;example.core&quot;\n                           :optimizations :advanced\n                           :output-to &quot;resources/public/js/example.js&quot; } } ]\n}\n</pre></div>\n\n\n<p>The big difference here is <code>:optimizations :advanced</code> which tells the Google Closure Compiler to make a prod build. To run this <code>lein cljsbuild once prod</code></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179002729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs production build",
            "submessages": [],
            "timestamp": 1571954940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's been a while since I've done this because I've been using shadow and deps instead of figwheel and lein but  I'm pretty sure that's at least close.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179002830,
            "is_me_message": false,
            "last_edit_timestamp": 1571955147,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs production build",
            "submessages": [],
            "timestamp": 1571955005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the lein cljsbuild <a href=\"https://github.com/emezeske/lein-cljsbuild/blob/1.1.7/example-projects/advanced/project.clj\" target=\"_blank\" title=\"https://github.com/emezeske/lein-cljsbuild/blob/1.1.7/example-projects/advanced/project.clj\">example</a> with different configurations</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179002892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "cljs production build",
            "submessages": [],
            "timestamp": 1571955087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have a favorite blog/tutorial for <code>paredit</code> in vim? I know a lot of people really love paredit but I've never managed to get my brain and hand muscles wrapped around it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180150237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "paredit",
            "submessages": [],
            "timestamp": 1573144995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'd be interested in this too, as even though I'm a paredit user I've never rigorously explored its features. have you seen <a href=\"https://www.youtube.com/watch?v=D6h5dFyyUX0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=D6h5dFyyUX0\">https://www.youtube.com/watch?v=D6h5dFyyUX0</a> ?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"D6h5dFyyUX0\" href=\"https://www.youtube.com/watch?v=D6h5dFyyUX0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=D6h5dFyyUX0\"><img src=\"https://i.ytimg.com/vi/D6h5dFyyUX0/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180151512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "paredit",
            "submessages": [],
            "timestamp": 1573145798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Recognize that this isn't strictly-speaking a <a class=\"stream\" data-stream-id=\"18946\" href=\"/#narrow/stream/18946-clojure\">#clojure</a> share, but it's related... I was just discussing this in the pairing area of <a class=\"stream\" data-stream-id=\"19042\" href=\"/#narrow/stream/19042-397-Bridge\">#397 Bridge</a> with <span class=\"user-mention\" data-user-id=\"240629\">@Vincent Perez (F2'19)</span>, but there's a pretty nice open source programming environment for learning some concepts of Lispy functional programming (e.g. <code>scheme</code>, the minimalist SICP-style dialect of scheme called <code>sicp</code>, and a souped-up Scheme descendant which is itself called <code>racket</code>), which can be found here: <a href=\"https://racket-lang.org/\" target=\"_blank\" title=\"https://racket-lang.org/\">https://racket-lang.org/</a> ... and, a free textbook called HtDP (How to Design Programs) that teaches programming through Racket (and focuses on data &amp; abstraction, like SICP) here: <a href=\"https://htdp.org/2019-02-24/part_preface.html\" target=\"_blank\" title=\"https://htdp.org/2019-02-24/part_preface.html\">https://htdp.org/2019-02-24/part_preface.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180153771,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "13986",
                    "emoji_name": "racket-lang",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@greghendershott.com",
                        "full_name": "Greg Hendershott (he) (F2'14)",
                        "id": 6678
                    },
                    "user_id": 6678
                },
                {
                    "emoji_code": "1f3be",
                    "emoji_name": "tennis",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Racket & HtDP",
            "submessages": [],
            "timestamp": 1573147210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although it is even quieter than <a class=\"stream\" data-stream-id=\"18946\" href=\"/#narrow/stream/18946-clojure\">#clojure</a> there is a <a class=\"stream\" data-stream-id=\"20307\" href=\"/#narrow/stream/20307-racket\">#racket</a> stream here.<br>\nI've spent a lot of time using Racket. I'm not super familiar with HtDP, but I think one of the main ideas is to have a \"design recipe\" to help define and work out problems.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180174579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Racket & HtDP",
            "submessages": [],
            "timestamp": 1573159895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for attending Clojonic: Pythonic Clojure <span class=\"user-mention\" data-user-id=\"240629\">@Vincent Perez (F2'19)</span>, <span class=\"user-mention\" data-user-id=\"248080\">@Miri Park (she) (W1'19)</span>, <span class=\"user-mention\" data-user-id=\"100315\">@Stanley Zheng (they) (W1'19)</span>, <span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span>, and <span class=\"user-mention\" data-user-id=\"247176\">@Alan Lin (he) (W1'19)</span>.</p>\n<p>Here's a GitHub rendered notebook where you can find some of the examples I worked through. Clojupyter is a relatively young project so I'm not sure I recommend it just yet, but it's nice to have this code and its output nicely rendered in GitHub here.</p>\n<p><a href=\"https://github.com/amontalenti/hyperloglog-sandbox/blob/796d42162a6eba3013234a9162282656e032df71/docs/clojupyter.ipynb\" target=\"_blank\" title=\"https://github.com/amontalenti/hyperloglog-sandbox/blob/796d42162a6eba3013234a9162282656e032df71/docs/clojupyter.ipynb\">https://github.com/amontalenti/hyperloglog-sandbox/blob/796d42162a6eba3013234a9162282656e032df71/docs/clojupyter.ipynb</a></p>\n<p>I also included some notes in that notebook that can help if you want to go deeper on Clojure resources.</p>\n<p>As for the code itself we worked through in slides, that can be found here: <a href=\"https://amontalenti.com/pub/clojonic/notes/\" target=\"_blank\" title=\"https://amontalenti.com/pub/clojonic/notes/\">https://amontalenti.com/pub/clojonic/notes/</a> -- and that can be accompanied by this post: <a href=\"https://amontalenti.com/2014/11/02/clojonic\" target=\"_blank\" title=\"https://amontalenti.com/2014/11/02/clojonic\">https://amontalenti.com/2014/11/02/clojonic</a></p>\n<p>I also highly recommend this 7-part blog post series for learning Clojure from scratch and getting a deeper overview of all its built-in types and features. It's a nice and gentle introduction with lots of small explanatory code snippets and their output. <a href=\"https://www.one-tab.com/page/DpcygWyeQbqtvt2G3qJrUw\" target=\"_blank\" title=\"https://www.one-tab.com/page/DpcygWyeQbqtvt2G3qJrUw\">https://www.one-tab.com/page/DpcygWyeQbqtvt2G3qJrUw</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180251911,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                },
                {
                    "emoji_code": "1f40d",
                    "emoji_name": "snake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "catwind7+recursecenter@gmail.com",
                        "full_name": "Alan Lin (he) (W1'19)",
                        "id": 247176
                    },
                    "user_id": 247176
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573233922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>that was an A++ presentation. Clearest explanation of macros I've encountered. Thx for making the language more approachable!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180252169,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573234087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for this. It turns out, I was being silly and thought my vim setup was using <code>paredit</code>, when, in reality, it was using <code>vim-sexp</code> and <code>vim-sexp-mappings-for-regular-people</code>. Which I had installed years ago, but forgot about, and for some reason I had it in my mind that I was using paredit. It turns out vim-sexp has a boatload of hotkeys for S-expression editing, but, I was quite pleased to find that someone has written a cheatsheet on GitHub that's pretty darn good: <a href=\"https://gist.github.com/cszentkiralyi/a9a4e78dc746e29e0cc8\" target=\"_blank\" title=\"https://gist.github.com/cszentkiralyi/a9a4e78dc746e29e0cc8\">https://gist.github.com/cszentkiralyi/a9a4e78dc746e29e0cc8</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180253948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "paredit",
            "submessages": [],
            "timestamp": 1573235296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>All of this stuff seems so needlessly complicated, especially if I'm not programming Clojure everyday, but just dipping in and out, so I'm also going to find a hobby programming day sometime soon to play around with <code>parinfer</code> and its Rust implementation which makes it speedy for vim: <a href=\"https://shaunlebron.github.io/parinfer/\" target=\"_blank\" title=\"https://shaunlebron.github.io/parinfer/\">https://shaunlebron.github.io/parinfer/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180254042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "paredit",
            "submessages": [],
            "timestamp": 1573235380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span>, I just wanted to mention since I was intrigued by your question about debugging and your CIDER setup. I just re-discovered that in vim, I have a plugin called <code>vim-fireplace</code> that lets you connect to a running Clojure REPL and then \"pluck out\" lists/s-expressions at your cursor, paste them into a split window (command buffer) which can then be quickly evaluated in the REPL to see the results. The plugin author here refers to it as a \"quasi-REPL\"... essentially a REPL in your editor that you send whole statements to, while still being able to edit those statements (for debugging purposes) in your editor. Anyway, it's described here: <a href=\"https://github.com/tpope/vim-fireplace#not-quite-a-repl\" target=\"_blank\" title=\"https://github.com/tpope/vim-fireplace#not-quite-a-repl\">https://github.com/tpope/vim-fireplace#not-quite-a-repl</a></p>\n<p>I'm sure CIDER has something similar. </p>\n<p>Aphyr also has a section on how to debug Clojure code in this part of his multi-part blog series: <a href=\"https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging\" target=\"_blank\" title=\"https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging\">https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180255751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573236584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> Ah, I've heard of fireplace, but never used it. </p>\n<p>Cider does indeed have similar functionality. At the moment I'm using a very small subset of Cider's functionality. Like all things emacs, it maybe does too many cool things. In case it's helpful: to get my emacs set up I installed Spacemacs, turned on the clojure layer, and then figured out the keybinding to launch Cider.</p>\n<p>And in case it's helpful to anyone following this thread, the Calva extension in VSCode is very similar to Cider. (Calva is short for calvados, a drink that's a distillation of cider.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180270214,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f918",
                    "emoji_name": "rock_on",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573246042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>And thank you for the workshop! It wired in a bunch of concepts for me, and made me excited about macros.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180270298,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573246089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span> I just wanted to say \"thanks!\" for your mention of rebel-readline earlier in the stream. I had never heard of it before, but I <a href=\"https://github.com/amontalenti/home/commit/03e41c0f7a9edafe8be5f48f8399059c8f5964b5\" target=\"_blank\" title=\"https://github.com/amontalenti/home/commit/03e41c0f7a9edafe8be5f48f8399059c8f5964b5\">just set it up in my lein profile</a> and it's a great complement to my usage of vim with Clojure!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180332481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573334886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Awesome! So much better than the plain lein repl!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180339248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573345726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why didn't someone point me to the Clojure cheat sheet earlier!?</p>\n<p><a href=\"https://clojure.org/api/cheatsheet\" target=\"_blank\" title=\"https://clojure.org/api/cheatsheet\">https://clojure.org/api/cheatsheet</a></p>\n<p>It has many of the Clojure built-in functions... but neatly organized by their logical area (e.g. all string functions are together, all vector functions are together, etc.). I feel like this is an absolutely necessary bookmark when you're first getting into the flow with Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180382034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573421337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yep I've learned many things from the cheat sheet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180386449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573429312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Even as abbreviated as it is, it's still overwhelming &amp; I wish there were an even cheatier sheet</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180386501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573429341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I've been writing Clojure off and on for about six years &amp; I still don't \"feel ready\" for the full cheatsheet X.X</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180386509,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f631",
                    "emoji_name": "scream",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f631",
                    "emoji_name": "scream",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojure learning materials",
            "submessages": [],
            "timestamp": 1573429371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Clojure/conj is tomorrow! If any RCers are also going happy to meet up! I\u2019ll fly in a few hours for Board Game Night</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181245592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1574281353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>Wish I was there! If you happen to write up any thoughts on the conj -- blog, twitter, whatever -- I'd love to see them.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181250088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1574284293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I\u2019m actually speaking tomorrow so happy to share the video when it\u2019s posted :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181250329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1574284417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/040d3d35c8e8e39ac8d7cac865c1c6e7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>If you\u2019re looking for a blog for the conj experience, this was shared with me (it\u2019s my first conference so I don\u2019t know what to expect!): <a href=\"http://jonsmock.com/blog/2016/12/11/first-speaking-experience/\" target=\"_blank\" title=\"http://jonsmock.com/blog/2016/12/11/first-speaking-experience/\">http://jonsmock.com/blog/2016/12/11/first-speaking-experience/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181250738,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "santiago.gepigon@gmail.com",
            "sender_full_name": "Santiago Gepigon III (he) (S2'18)",
            "sender_id": 120074,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/conj",
            "submessages": [],
            "timestamp": 1574284682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>Just want to link this really cool looking project here (pre-alpha): <a href=\"https://github.com/ruricolist/cloture\" target=\"_blank\" title=\"https://github.com/ruricolist/cloture\">https://github.com/ruricolist/cloture</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 185218655,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure in common lisp",
            "submessages": [],
            "timestamp": 1578581658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://twitter.com/bbatsov/status/1217823279752323074\" target=\"_blank\" title=\"https://twitter.com/bbatsov/status/1217823279752323074\">https://twitter.com/bbatsov/status/1217823279752323074</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bbatsov/status/1217823279752323074\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1148923247448285185/cgtzxVfX_normal.png\"></a><p>Over the weekend I've started working on a new section in CIDER's user manual dedicated to ClojureScript and setting up the various ClojureScript REPLs <a href=\"https://t.co/lUFwwgVvkP\" target=\"_blank\" title=\"https://t.co/lUFwwgVvkP\">https://docs.cider.mx/cider/cljs/overview.html</a> I'd love it if CIDER's ClojureScript users pitched it with some additions. More improvements to come!</p><span>- Bozhidar Batsov (Bug) (@bbatsov)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186156876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "call to improve CIDER docs",
            "submessages": [],
            "timestamp": 1579588294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>what are all the options for clojure scripting/one off projects? here are the ones I know of:</p>\n<ul>\n<li><a href=\"https://github.com/candid82/joker\" target=\"_blank\" title=\"https://github.com/candid82/joker\">https://github.com/candid82/joker</a></li>\n<li><a href=\"https://github.com/borkdude/babashka\" target=\"_blank\" title=\"https://github.com/borkdude/babashka\">https://github.com/borkdude/babashka</a></li>\n<li><a href=\"https://github.com/planck-repl/planck\" target=\"_blank\" title=\"https://github.com/planck-repl/planck\">https://github.com/planck-repl/planck</a></li>\n<li><a href=\"http://inlein.org/\" target=\"_blank\" title=\"http://inlein.org/\">http://inlein.org/</a></li>\n<li><a href=\"https://github.com/boot-clj/boot/wiki/Scripts\" target=\"_blank\" title=\"https://github.com/boot-clj/boot/wiki/Scripts\">https://github.com/boot-clj/boot/wiki/Scripts</a></li>\n</ul>\n<p>I recently used joker for a one-off script and it was OK - can't really speak to the others, have been meaning to give babashka a go.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186315581,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579717884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"http://lumo-cljs.org\" target=\"_blank\" title=\"http://lumo-cljs.org\">http://lumo-cljs.org</a> is really nice</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186319781,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>What specifically do you mean by \"scripting\"? If you want ease of development without too much thinking, you can use <code>clj</code> to run plain clojure files or snippets on the command line. If you want fast startup time, then you could look into using GraalVM (overview: <a href=\"https://www.innoq.com/en/blog/native-clojure-and-graalvm/\" target=\"_blank\" title=\"https://www.innoq.com/en/blog/native-clojure-and-graalvm/\">https://www.innoq.com/en/blog/native-clojure-and-graalvm/</a>) to turn Clojure into a native binary.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186319904,
            "is_me_message": false,
            "last_edit_timestamp": 1579720447,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>fast startup time is what I'm looking for -- I've used graalVM before on a clojure project but the setup feels like overkill if everything is going to be contained in a single file (this was a few years ago though, maybe it's smoother now/should look into making it feel nice\u2122). My current workflow is to kinda poke in cider and then run the file as a script with joker (or one of the above in the future maybe).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>babashka uses GraalVM</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Lumo's startup time is really fast</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think Graal is your best bet for fast startup time for JVM clojure. If that doesn't work, try AOT compiling your thing into an uberjar and running it via <code>java -jar mything.jar</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't speak to cljs scripting, haven't used any of that stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"234256\">@Ryan Prior (he) (F1'19)</span> <br>\n yes but they've done it ahead of time/compiled a subset -- the 'wait for compilation' is not part of the UX, if I'm reading it right</p>\n<p>will checkout lumo -- IIRC my only blocker was a nixos patch -- there was some discussion on the repo though that I might followup on</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720775,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span></p>\n<blockquote>\n<p>I think Graal is your best bet for fast startup time for JVM clojure</p>\n</blockquote>\n<p><span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>thanks for the tips both of you</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 186320758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure for scripting",
            "submessages": [],
            "timestamp": 1579720870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>just posting a question/discussion I posted on #clojure re: idiomatic pattern/learning: </p>\n<div class=\"codehilite\"><pre><span></span>      me hello all -- newbie clojure user here, and I&#39;ve noticed I tend to solve almost all my problems with loop+recur forms\n         just wondering if that&#39;s like, maybe a sign I&#39;m still doing stuff procedurally\njustin_\u2026 neeasade: yeah - for example any time you do (recur (rest x)) is a sign you are doing it the hard way\n         clojure has many functions to abstract variants of that pattern (traversing a collection in order) without needing to explicitly do a procedural loop\n         then it&#39;s a question of learning what the various collection functions are useful for (filter, map, mapcat, reduce, for etc.)\n      me I guess the problem I have is I feel like usually I have a collection of &#39;moves&#39; or &#39;ops&#39; that I want to apply to &#39;state&#39; and have state change along the way\njustin_\u2026 that sounds like reduce or reductions to me\n      me maybe reduce is what I need to get comfy with then (I&#39;m comf with map/reduce/filter)\njustin_\u2026 it caries a state (usually called an &quot;accumulator&quot; but it can be anything) between each step\n      me cool -- thanks, I&#39;ve use reducing/reducers before, I think I just fell out of habit because it doesn&#39;t feel &quot;natural&quot; to me yet\njustin_\u2026 ,(reduce (fn [acc i] (let [res (+ acc i)] (if (&gt; res 100) (reduced res) res)) 0 (range))\n         #&lt;RuntimeException java.lang.RuntimeException: EOF while reading&gt;\n         oops\n      me thanks justin_smith -- although lol\njustin_\u2026 neeasade: my mental stack forgot the let block :D\n         ,(reduce (fn [acc i] (let [res (+ acc i)] (if (&gt; res 100) (reduced res) res))) 0 (range))\n         105\nalandip\u2026 converting to lazy-seq is another way to wrap your head around how sequences compare to loops, i remember that being enlightening\n      me alandipert: converting from... what?\njustin_\u2026 neeasade: also reduce has a built in debugger, you can s/reduce/reductions/\n         ,(reductions (fn [acc i] (let [res (+ acc i)] (if (&gt; res 100) (reduced res) res))) 0 (range))\n         (0 0 1 3 6 ...)\n         neeasade: from a loop to a lazy-seq\n         (for cases where the loop is building up a result one element at a time, as opposed to consuming an input one item at a time)\n      me ah ok\n         thanks justin_smith , alandipert  -- appreciate it!\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187580858,
            "is_me_message": false,
            "last_edit_timestamp": 1581017832,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "newbie using loop recur everywhere",
            "submessages": [],
            "timestamp": 1581017813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2966057ab612b244fc712417ccd219c3c523e90a?x=x&version=2",
            "client": "website",
            "content": "<p>I'm a functional lang newbie and kind of intimidated by debugging clojure's mega long error stacks. none of the open source libs I've been cloning seem to work with the given examples out of the box, is that unusual?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188650036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rhotic@alum.mit.edu",
            "sender_full_name": "Rachel (rfong) Fong (they) (m2'20)",
            "sender_id": 263712,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582213886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263712\">@Rachel (rfong) Fong (they) (m2'20)</span> I can pair with you on that. Also, here's a nice video of a lightning talk one of our speakers gave at IN/Clojure. \"Afraid of Clojure Stacktraces? Fear no more\" </p>\n<p>In it, he explains why the traces are so, how to break them down and read them, and tooling support available to query/pretty-print the traces.</p>\n<p><a href=\"https://www.youtube.com/watch?v=4fqGdt0-_is\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4fqGdt0-_is\">https://www.youtube.com/watch?v=4fqGdt0-_is</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4fqGdt0-_is\" href=\"https://www.youtube.com/watch?v=4fqGdt0-_is\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4fqGdt0-_is\"><img src=\"https://i.ytimg.com/vi/4fqGdt0-_is/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188658412,
            "is_me_message": false,
            "last_edit_timestamp": 1582219869,
            "reactions": [
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rhotic@alum.mit.edu",
                        "full_name": "Rachel (rfong) Fong (they) (m2'20)",
                        "id": 263712
                    },
                    "user_id": 263712
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582219629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2966057ab612b244fc712417ccd219c3c523e90a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>oop hi just saw this! thanks, would you be down to pair at some point this afternoon? I think a lot of it is just that I don't fully grok <code>lein</code> and am extremely new to the syntax, so my confusions are hopefully quite basic</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188662009,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rhotic@alum.mit.edu",
            "sender_full_name": "Rachel (rfong) Fong (they) (m2'20)",
            "sender_id": 263712,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582221986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2966057ab612b244fc712417ccd219c3c523e90a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>omg yes it works i'm crying <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188674588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "rhotic@alum.mit.edu",
            "sender_full_name": "Rachel (rfong) Fong (they) (m2'20)",
            "sender_id": 263712,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582230562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I just saw this... I'm at the pairing station, and can help you now if you wish.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188677320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582232502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263712\">@Rachel (rfong) Fong (they) (m2'20)</span> </p>\n<p>To visualise a good Vim-based Clojure(Script) editing/interaction workflow:</p>\n<ul>\n<li>I'd suggest viewing this 5 min video first: <a href=\"https://www.youtube.com/watch?v=-MAmXT17EiI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=-MAmXT17EiI\">https://www.youtube.com/watch?v=-MAmXT17EiI</a></li>\n</ul>\n<p>How to configure your own Vim? These blog posts should be more than enough:</p>\n<ul>\n<li>Clojure and Vim: An overview: <a href=\"https://juxt.pro/blog/posts/vim-1.html\" target=\"_blank\" title=\"https://juxt.pro/blog/posts/vim-1.html\">https://juxt.pro/blog/posts/vim-1.html</a></li>\n<li>My Clojure Toolchain: Vim: <a href=\"https://blog.venanti.us/clojure-vim/\" target=\"_blank\" title=\"https://blog.venanti.us/clojure-vim/\">https://blog.venanti.us/clojure-vim/</a></li>\n</ul>\n<p>Here's what live/hot-loaded ClojureScript development looks like (using a tool called \"figwheel\"):</p>\n<ul>\n<li>6 mins video showing interactive/live development of a \"Flappy Bird\" implementation <a href=\"https://www.youtube.com/watch?v=KZjFVdU8VLI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=KZjFVdU8VLI\">https://www.youtube.com/watch?v=KZjFVdU8VLI</a></li>\n<li>How to set it up with Vim: <a href=\"https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim\" target=\"_blank\" title=\"https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim\">https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim</a></li>\n</ul>\n<p>A fuller exposition of all the neat things figwheel enables:  </p>\n<ul>\n<li>Bruce Hauman's very entertaining and informative \"Developing ClojureScript With Figwheel\" <a href=\"https://www.youtube.com/watch?v=j-kj2qwJa_E\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=j-kj2qwJa_E\">https://www.youtube.com/watch?v=j-kj2qwJa_E</a></li>\n</ul>\n<p>Enjoy! <span aria-label=\"spock\" class=\"emoji emoji-1f596\" role=\"img\" title=\"spock\">:spock:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188690445,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f61b",
                    "emoji_name": "mischievous",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rhotic@alum.mit.edu",
                        "full_name": "Rachel (rfong) Fong (they) (m2'20)",
                        "id": 263712
                    },
                    "user_id": 263712
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582241580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2966057ab612b244fc712417ccd219c3c523e90a?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>thank you so much for all the resources!! <span aria-label=\"congratulations\" class=\"emoji emoji-1f389\" role=\"img\" title=\"congratulations\">:congratulations:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188693297,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "rhotic@alum.mit.edu",
            "sender_full_name": "Rachel (rfong) Fong (they) (m2'20)",
            "sender_id": 263712,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582244219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>I've been learning Clojure as well, and I've hit exactly the same issue as you <span class=\"user-mention\" data-user-id=\"263712\">@Rachel (rfong) Fong (they) (m2'20)</span>. <br>\n<span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> Thank you for these resources. Very helpful!</p>\n<p>I often come in during alum hours (including today!). If either of you want to pair on some beginner-level clojure let me know :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188743274,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rhotic@alum.mit.edu",
                        "full_name": "Rachel (rfong) Fong (they) (m2'20)",
                        "id": 263712
                    },
                    "user_id": 263712
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582299649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"241369\">@Emma Smith (she) (F2'19)</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  thanks!<br>\nFYI: I'm at a pairing station right now, and will probably be here all day till 6pm or so (except lunch, and then 2 to 3 pm when I have study group).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188745683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582300976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Cool! I\u2019m heading in soon. I\u2019ll look for you.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188746723,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "debugging 3rd party libs for newbs?",
            "submessages": [],
            "timestamp": 1582301622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263612\">@Bernardo Dornellas Cysneiros Gomes de Amorim (he) (SP1'20)</span> here's the step-by-step exercise-based intro to Clojure for programmers, that I wrote: <a href=\"https://github.com/inclojure-org/clojure-by-example\" target=\"_blank\" title=\"https://github.com/inclojure-org/clojure-by-example\">https://github.com/inclojure-org/clojure-by-example</a></p>\n<p>Posting it in the public channel as I ended up DM-ing it to a bunch of people and figured might as well put in out there. </p>\n<p>The README explains all: goals/anti-goals, suggested learning mindset, setup instructions, and how to use the material. </p>\n<p>There's also a lot of good material to find via the official Clojure website, here: <a href=\"https://clojure.org/guides/getting_started\" target=\"_blank\" title=\"https://clojure.org/guides/getting_started\">https://clojure.org/guides/getting_started</a> and here: <a href=\"https://clojure.org/community/resources#_tutorials_and_learning_materials\" target=\"_blank\" title=\"https://clojure.org/community/resources#_tutorials_and_learning_materials\">https://clojure.org/community/resources#_tutorials_and_learning_materials</a></p>\n<p>Cheers!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188893046,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bamorim2@gmail.com",
                        "full_name": "Bernardo Dornellas Cysneiros Gomes de Amorim (he) (SP1'20)",
                        "id": 263612
                    },
                    "user_id": 263612
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "tutorials",
            "submessages": [],
            "timestamp": 1582508318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> taking the liberty to subscribe you to #clojure as some useful recent discussion has happened above <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> </p>\n<p>In particular, as a Vim user, you can set up your Vim for Clojure development like this: </p>\n<p>To visualise a good Vim-based Clojure(Script) editing/interaction workflow:</p>\n<ul>\n<li>I'd suggest viewing this 5 min video first: <a href=\"https://www.youtube.com/watch?v=-MAmXT17EiI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=-MAmXT17EiI\">https://www.youtube.com/watch?v=-MAmXT17EiI</a></li>\n<li>And see the animated GIFs that demo more structural editing here (ignore the keybindings... Vim keybindings will differ): <a href=\"https://cursive-ide.com/userguide/paredit.html\" target=\"_blank\" title=\"https://cursive-ide.com/userguide/paredit.html\">https://cursive-ide.com/userguide/paredit.html</a></li>\n</ul>\n<p>How to configure your own Vim? These blog posts should be more than enough:</p>\n<ul>\n<li>Clojure and Vim: An overview: <a href=\"https://juxt.pro/blog/posts/vim-1.html\" target=\"_blank\" title=\"https://juxt.pro/blog/posts/vim-1.html\">https://juxt.pro/blog/posts/vim-1.html</a></li>\n<li>My Clojure Toolchain: Vim: <a href=\"https://blog.venanti.us/clojure-vim/\" target=\"_blank\" title=\"https://blog.venanti.us/clojure-vim/\">https://blog.venanti.us/clojure-vim/</a></li>\n</ul>\n<p>Here's what live/hot-loaded ClojureScript development looks like (using a tool called \"figwheel\"):</p>\n<ul>\n<li>6 mins video showing interactive/live development of a \"Flappy Bird\" implementation <a href=\"https://www.youtube.com/watch?v=KZjFVdU8VLI\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=KZjFVdU8VLI\">https://www.youtube.com/watch?v=KZjFVdU8VLI</a></li>\n<li>How to set it up with Vim: <a href=\"https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim\" target=\"_blank\" title=\"https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim\">https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-with-Vim</a></li>\n</ul>\n<p>A fuller exposition of all the neat things figwheel enables:</p>\n<ul>\n<li>Bruce Hauman's very entertaining and informative \"Developing ClojureScript With Figwheel\" <a href=\"https://www.youtube.com/watch?v=j-kj2qwJa_E\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=j-kj2qwJa_E\">https://www.youtube.com/watch?v=j-kj2qwJa_E</a></li>\n</ul>\n<p>Enjoy! <span aria-label=\"spock\" class=\"emoji emoji-1f596\" role=\"img\" title=\"spock\">:spock:</span></p>\n<p>(x-post from <a href=\"#narrow/stream/18946-clojure/topic/debugging.203rd.20party.20libs.20for.20newbs.3F/near/188690445\" title=\"#narrow/stream/18946-clojure/topic/debugging.203rd.20party.20libs.20for.20newbs.3F/near/188690445\">https://recurse.zulipchat.com/#narrow/stream/18946-clojure/topic/debugging.203rd.20party.20libs.20for.20newbs.3F/near/188690445</a> )</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188967063,
            "is_me_message": false,
            "last_edit_timestamp": 1582580186,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "vim",
            "submessages": [],
            "timestamp": 1582579133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>IN/Clojure 2020 talks are out! <a href=\"https://www.youtube.com/channel/UC5U_FITlvZnYK3A95ayzylA/playlists\" target=\"_blank\" title=\"https://www.youtube.com/channel/UC5U_FITlvZnYK3A95ayzylA/playlists\">https://www.youtube.com/channel/UC5U_FITlvZnYK3A95ayzylA/playlists</a></p>\n<p>This is my favourite one of the lot: \"Growing a Clojure Company from small to mid-sized (and hopefully beyond) \u2014 Vedang Manerikar\" <a href=\"https://youtu.be/zsTXte3p0Uk\" target=\"_blank\" title=\"https://youtu.be/zsTXte3p0Uk\">https://youtu.be/zsTXte3p0Uk</a></p>\n<p>Full disclojure: I help organise the conference annually.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UC5U_FITlvZnYK3A95ayzylA/playlists\" target=\"_blank\" title=\"https://www.youtube.com/channel/UC5U_FITlvZnYK3A95ayzylA/playlists\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"zsTXte3p0Uk\" href=\"https://youtu.be/zsTXte3p0Uk\" target=\"_blank\" title=\"https://youtu.be/zsTXte3p0Uk\"><img src=\"https://i.ytimg.com/vi/zsTXte3p0Uk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188993965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "india",
            "submessages": [],
            "timestamp": 1582610579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255051\">@Sol Sarratea (she) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> Clojure/NYC meetup happening this Thursday! I'm going. </p>\n<p>Spots are in wait-list, but drop a line to the organiser and check if they can accommodate you. <a href=\"https://www.meetup.com/Clojure-NYC/\" target=\"_blank\" title=\"https://www.meetup.com/Clojure-NYC/\">https://www.meetup.com/Clojure-NYC/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189031101,
            "is_me_message": false,
            "last_edit_timestamp": 1582656183,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/nyc meetup",
            "submessages": [],
            "timestamp": 1582645595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "website",
            "content": "<p>I'm hoping to be there as well, happy to leave together</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189037211,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/nyc meetup",
            "submessages": [],
            "timestamp": 1582649556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263714\">@Tamreen Khan (he) (SP1'20)</span> cool! Looks like it's 20-odd minutes away from RC by F (or R) trains. So if we hit the road by 6:30pm, I suppose we can make it in time for 7pm. I'm happy to leave a little earlier too if that makes more sense.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189039594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/nyc meetup",
            "submessages": [],
            "timestamp": 1582650952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "website",
            "content": "<p>sounds good! Yeah in the past I've left a little earlier so that I could get there in time to mingle/eat pizza, but there's often time for that after the talk too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189039728,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f355",
                    "emoji_name": "pizza",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/nyc meetup",
            "submessages": [],
            "timestamp": 1582651028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>The Clojure meetup location expects us to carry a valid ID card. I realised in the nick of time and managed to go get mine from home.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189265069,
            "is_me_message": false,
            "last_edit_timestamp": 1582843065,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "clojure/nyc meetup",
            "submessages": [],
            "timestamp": 1582843039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>This morning I'm going to work on some beginner Clojure stuff. My plan is to turn on my Zoom and just stream. This is my first try at participating in this new remote RC world we've suddenly found ourselves in, so it's a bit of an experiment. Anyone is welcome to hop on! (Cross-post from <a class=\"stream\" data-stream-id=\"18967\" href=\"/#narrow/stream/18967-pairing\">#pairing</a> -- hope that's okay :)</p>\n<p><a href=\"https://patrontechnology.zoom.us/my/emmasea\" target=\"_blank\" title=\"https://patrontechnology.zoom.us/my/emmasea\">https://patrontechnology.zoom.us/my/emmasea</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190717217,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Remote pairing on beginner Clojure",
            "submessages": [],
            "timestamp": 1584363063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c96a3927ee49dcc488ffe1745c837cfda1bd8279?x=x&version=2",
            "client": "website",
            "content": "<p>Going to do another hour or so of Clojure, starting in 10-15 minutes. Same Zoom as above.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190979227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "emmazee9009@gmail.com",
            "sender_full_name": "Emma Smith (she) (F2'19)",
            "sender_id": 241369,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Remote pairing on beginner Clojure",
            "submessages": [],
            "timestamp": 1584538191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"256987\">@Bill Marcy (he) (W2'20)</span>Clojure + Unity -&gt; Arcadia: <a href=\"https://arcadia-unity.github.io/\" target=\"_blank\" title=\"https://arcadia-unity.github.io/\">https://arcadia-unity.github.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191257818,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathanisom27@gmail.com",
                        "full_name": "Nathan Isom (he) (W2'20)",
                        "id": 255190
                    },
                    "user_id": 255190
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tamreenkhan@gmail.com",
                        "full_name": "Tamreen Khan (he) (SP1'20)",
                        "id": 263714
                    },
                    "user_id": 263714
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wgmarcy@gmail.com",
                        "full_name": "Bill Marcy (he) (SP2'20)",
                        "id": 256987
                    },
                    "user_id": 256987
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "arcadia",
            "submessages": [],
            "timestamp": 1584718055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"*\">@stream</span> because this is very cool news from Clojurists Together, and may help Clojurists here who freelance or are between jobs in these uncertain times.</p>\n<p>\"Summer of Bugs\" funding applications are open: <a href=\"https://www.clojuriststogether.org/news/announcing-summer-of-bugs/\">https://www.clojuriststogether.org/news/announcing-summer-of-bugs/</a></p>\n<blockquote>\n<p>Ever wanted to take a day off to fix an annoying bug or finally ship a feature? Clojurists Together Foundation wants to make that happen.<br>\n...<br>\n[snip]<br>\nApplications are open to anyone who can plausibly demonstrate their ability to do the proposed work.<br>\n...<br>\n[snip]<br>\nOur initial approach to this is that people can request a micro-grant ($500) or a mini-grant ($1,000). We\u2019re hoping to allocate a budget of $7,500, though that is somewhat dependent on available funds.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198212991,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emily.a.bellows@gmail.com",
                        "full_name": "Emily Amanda Bellows (she) (m2'18)",
                        "id": 9243
                    },
                    "user_id": 9243
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hello@tomlisankie.com",
                        "full_name": "Thomas Francis Lisankie (he) (F1'19)",
                        "id": 233915
                    },
                    "user_id": 233915
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurists Together",
            "submessages": [],
            "timestamp": 1589987645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>super cool, thanks for tagging</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198213689,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "16447",
                    "emoji_name": "clojure",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "66",
                    "emoji_name": "recursecenter",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurists Together",
            "submessages": [],
            "timestamp": 1589987922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Thanks!!!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198228728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Clojurists Together",
            "submessages": [],
            "timestamp": 1589994633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Rich Hickey's HOPL paper is out! <a href=\"https://clojure.org/about/history\">https://clojure.org/about/history</a> . I haven't read it yet (46 pages) but thought this stream might be interested.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199791814,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joppeschwartz@gmail.com",
                        "full_name": "Joe Schwartz (F1'14)",
                        "id": 6418
                    },
                    "user_id": 6418
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "emmazee9009@gmail.com",
                        "full_name": "Emma Smith (she) (F2'19)",
                        "id": 241369
                    },
                    "user_id": 241369
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul@paulwmorris.com",
                        "full_name": "Paul Morris (he) (SP1'17)",
                        "id": 100524
                    },
                    "user_id": 100524
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wforzo@gmail.com",
                        "full_name": "Will Orzo (W'14)",
                        "id": 5029
                    },
                    "user_id": 5029
                }
            ],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HOPL paper",
            "submessages": [],
            "timestamp": 1591296674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I last wrote Clojure in maybe 2013/2014, but I'm about to do some work on a much newer Clojure project. Are there any up to date resources re: getting set up in Clojure? Should I still expect everything to be Leiningen-based, e.g.? And is it worth switching back to emacs for tools support, or are there more tools availble for VS Code these days?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203532585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trying Clojure again!",
            "submessages": [],
            "timestamp": 1594400633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I am also really curious abou the state of clojure in 2020!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203548419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trying Clojure again!",
            "submessages": [],
            "timestamp": 1594409091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0baa75c82ed02d819be85a4b24b0f4d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't think of any resources but I made the switch over to <code>deps.edn</code> for my projects. CIDER is still going strong if you already know that workflow. There is a <a href=\"https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva\">VS Code plugin</a> but I haven't tried it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203551027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "mdparker89@gmail.com",
            "sender_full_name": "Matthew Parker (F2'14)",
            "sender_id": 6698,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trying Clojure again!",
            "submessages": [],
            "timestamp": 1594410694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2861\">@Lyndsey Jane Moulds (she/they) (F'13)</span> If you're not already an Emacs user, then VSCode + Calva or IntelliJ + Cursive are pretty good options. These days, I recommend those two combos to anyone who is new to Clojure (I personally am an Emacs + CIDER user). </p>\n<p>Of the two, I find VSCode + Calva is the easiest, and more lightweight one to set up, and I quite like how well it works.</p>\n<p>The official Clojure website also points to many resources (way better than what it was like in 2014) <a href=\"https://clojure.org/guides/getting_started\">https://clojure.org/guides/getting_started</a></p>\n<p>leiningen is still probably the most-used project/build tool for use with Clojure. However clj + edn and boot are also quite well supported now.</p>\n<p>You may also like to dive into the community Slack --- <em>very</em> active teaching/learning community.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203611993,
            "is_me_message": false,
            "last_edit_timestamp": 1594499892,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "trying Clojure again!",
            "submessages": [],
            "timestamp": 1594499107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I read the paper in its entirety and thought it was great! It's also nice to hear Hickey's personal perspective on doing the deep work necessary to create the kernel of the language. I thought the visualization he did of \"code retention\" in Clojure vs Scala was also pretty fascinating. (It shows that Clojure was built as a number of stable layers, like sediment, over the years. But Scala was constantly refactored and rewritten over the same time period.)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203645926,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HOPL paper",
            "submessages": [],
            "timestamp": 1594564068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I wrote a blog post about babashka (bb) after seeing a Clojure NYC virtual talk on the subject this weekend. Might be interesting to Recursers here in #clojure:</p>\n<p><a href=\"https://amontalenti.com/2020/07/11/babashka\">https://amontalenti.com/2020/07/11/babashka</a></p>\n<p>It's a tool that lets you build quick scripts and command-line tools in Clojure, but with the runtime startup speed of Python/Perl/etc., and none of the complexity of the JVM or classpath. If that sounds like magic, read on!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203646048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "babashka (bb), a minimalist Clojure for CLI tools",
            "submessages": [],
            "timestamp": 1594564214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Random Q: does anyone own \"Elements of Clojure\", but hasn't read it, but would like to read it and do a virtual book club around it?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204753241,
            "is_me_message": false,
            "last_edit_timestamp": 1595468823,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595468809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p>This has been in my TODO for a while now and I own the book. I would definitely be up for a reading group around it. I am only starting to learn clojure but it seemed like the ideas in the book are quite universal.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204786326,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64c",
                    "emoji_name": "raised_hands",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595505063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>If you are new to Clojure, want to start with \u201cJoy of Clojure\u201d and move to \u201cElements\u201d after? Zach Tellman says \u201cElements\u201d is his attempt at the \u201cbest second book\u201d on Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204823938,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595523429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I read 1/3 of \u201cJoy\u201d and it is quite a good first book. I wanted to finish it for awhile.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204823980,
            "is_me_message": false,
            "last_edit_timestamp": 1595523486,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595523469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>I think I'm interested (and thanks for putting the call out, <span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span>)! I only have \"Joy of Clojure\" but haven't read it yet and would like to. I'm not sure I'm a beginner, but I'm not sure I'm not either. I can usually write solutions to small coding challenges in Clojure/ClojureScript (e.g. <a href=\"http://clojurescriptkoans.com\">http://clojurescriptkoans.com</a>), but have never actually gotten the chance to build anything bigger with Clojure, so I'm completely missing practical engineering and tooling knowledge in Clojure, which I'd love to fix sometime.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204831727,
            "is_me_message": false,
            "last_edit_timestamp": 1595550925,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595527299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>In any case, going through \"Joy\" together sounds like a great chance to learn the parts of the language that small things like koans don't cover.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204831972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595527409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Same here!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204832436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "HOPL paper",
            "submessages": [],
            "timestamp": 1595527632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>I watched that talk too but hadn't seen your post -- nice! Thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204832909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "babashka (bb), a minimalist Clojure for CLI tools",
            "submessages": [],
            "timestamp": 1595527897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>I like your \"Clojonic\" post too. In case of interest, this reminds me of a little experiment I did the last time I played with Clojure: Implementing a dumb little palindrome detector in Python vs. Clojure (compare <a href=\"https://repl.it/@jab/pypal\">https://repl.it/@jab/pypal</a> vs. <a href=\"https://repl.it/@jab/porkostomus-just-juxt\">https://repl.it/@jab/porkostomus-just-juxt</a> and see if you can spot where not having \"break inside a for loop\" had me yearning for some more functional elegance that still eluded me for that problem)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204833879,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "babashka (bb), a minimalist Clojure for CLI tools",
            "submessages": [],
            "timestamp": 1595528292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> Cool. Yes, this plan is coming together. I like the idea of starting with \u201cJoy\u201d and moving to \u201cElements\u201d. What say you, <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span>? A 3-person book club seems like a nice way for this to start.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204850455,
            "is_me_message": false,
            "last_edit_timestamp": 1595536523,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595536501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> that sounds great! Yes, I'll be definitely up for going through Joy and then Elements! Thanks for the idea!</p>\n<p>Should we talk about logistics? Is there a way that has worked for you both for virtual reading groups?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204872106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595555276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Yep, perhaps first thing to sync on is timezones. I am in US/Eastern. How about you <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> &amp; <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span>? I think we could get this going with a kickoff next week or week after next.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204872179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595555397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>I am currently in Central European Time. Yes, the week next might work best for me workload wise.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204872305,
            "is_me_message": false,
            "last_edit_timestamp": 1595568362,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595555593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> Welcome to the cljub :D</p>\n<p>I ended up picking up Clojure programming in progressions. In hindsight, I think that did me good.</p>\n<p>I found Aphyr's \"<a href=\"https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome\">Clojure from the ground up</a>\" to be a very approchable, direct, and low-friction way to go over the language once. I really like the fact that Aphyr structured it so that one doesn't need an IDE or any tooling other than the REPL at the command line. </p>\n<p>IDE setup and tooling can come later. If you're also wondering about that, then these days I find myself recommending VSCode + Calva as the lowest friction beginner-friendly Clojure dev setup that I know of currently.</p>\n<p>Progressions could be: <br>\npre-book: aphyr's tutorial (can be done in a day or three of full day work)<br>\nbook: pick your choice: one of Joy of Clojure, Clojure Programming, Programming Clojure, Brave Clojure<br>\nnext book(s): Clojure Applied, Living Clojure, Elements of Clojure, Web Development in Clojure etc. depending on your interest area</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204908932,
            "is_me_message": false,
            "last_edit_timestamp": 1595593679,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595593654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I have gone through aphyr's blog posts (at RC, in fact) and agree that it is one of the best introductions out there because of how he structures the learning in layers with clear code examples.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204917552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595598832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> What's your timezone?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204917665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595598873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> ! This is very helpful! I just finished going through 'Clojure from the group up' and it was a delight. I think Joy of Clojure definitely would be the next stop. I am intrigued by the preface! Editor wise, I am used to using emacs for coding and my world revolves around it, so I am probably going to stick with that.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204925805,
            "is_me_message": false,
            "last_edit_timestamp": 1595602616,
            "reactions": [
                {
                    "emoji_code": "14619",
                    "emoji_name": "emacs",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "punchagan@muse-amuse.in",
                        "full_name": "Puneeth Chaganti (he) (S1'14)",
                        "id": 5868
                    },
                    "user_id": 5868
                },
                {
                    "emoji_code": "16447",
                    "emoji_name": "clojure",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f525",
                    "emoji_name": "fire",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f525",
                    "emoji_name": "fire",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "14619",
                    "emoji_name": "emacs",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "16447",
                    "emoji_name": "clojure",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595602537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"100518\">Nandaja Varma N (she) (SP1'17)</span> <a href=\"#narrow/stream/18946-clojure/topic/Elements.20of.20Clojure.20(book.20club.3F)/near/204925805\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"263547\">Aditya Athalye (he) (SP1'20)</span> ! This is very helpful! I just finished going through 'Clojure from the group up' and it was a delight.  I think Joy of Clojure definitely would be the next stop.</p>\n</blockquote>\n<p>Nice! I think you'll enjoy sinking your teeth into JoC +1</p>\n<blockquote>\n<p>Editor wise, I am used to using emacs for coding and my world revolves around it, so I am probably going to stick with that.</p>\n</blockquote>\n<p>Yay, <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/14619.png\" title=\"emacs\"> :) </p>\n<p>I use Emacs + CIDER and am also enjoying the <a href=\"https://github.com/borkdude/clj-kondo\">clj-kondo</a> code linter, integrated via <a href=\"https://github.com/borkdude/flycheck-clj-kondo\">flycheck-clj-kondo</a>.</p>\n<p>Alongside JoC (and Elements o C), I'd also highly recommend the following masterclasses, that set up really good intuitions for the capabilities of the language:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=wASCH_gPnDw\">Expert-to-Expert Brian Beckman and Rich Hickey</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nDAfZK8m5_8\">Clojure Concurrency - Rich Hickey</a></li>\n<li>And the following, <a href=\"https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr\">from this playlist</a>:<ul>\n<li>Clojure Data Structures Parts 1 &amp; 2</li>\n<li>Clojure for Java Programmers Parts 1 &amp; 2</li>\n<li>Clojure for Lisp Programmers Parts 1 &amp; 2</li>\n</ul>\n</li>\n<li><a href=\"https://tbaldridge.pivotshare.com/\">Clojure Tutorials with Tim Baldridge</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204928108,
            "is_me_message": false,
            "last_edit_timestamp": 1595615161,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595603609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"247727\">Andrew Montalenti (he) (m7'19)</span> <a href=\"#narrow/stream/18946-clojure/topic/Elements.20of.20Clojure.20(book.20club.3F)/near/204917665\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"910\">Josh Bronson (he) (m1'17)</span> What's your timezone?</p>\n</blockquote>\n<p>US/Eastern like you! (ruralish north Stamford, CT for now, but planning to return to NYC someday...)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204949756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595614864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Unfortunately I'm too swamped with my day job to meet during the week, but am super flexible on weekends.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204949951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595614989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Cool. Given that <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> is in CET and we're both in ET, perhaps 8am ET on Fridays? Would that work for you <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span>, or is a pre-work morning meetup out of the question? </p>\n<p>If that doesn't work, we could try for something like Sunday at 11am ET. Here is what that looks like for Friday, August 7:</p>\n<p><a href=\"http://timesched.pocoo.org/?date=2020-08-07&amp;tz=eastern-standard-time!,central-europe-standard-time&amp;range=480,540\">http://timesched.pocoo.org/?date=2020-08-07&amp;tz=eastern-standard-time!,central-europe-standard-time&amp;range=480,540</a></p>\n<p>If Friday:</p>\n<div class=\"codehilite\"><pre><span></span><code>Eastern Standard Time  [EDT; UTC-0400]\n08:00   Fri, Aug 7 2020\n\nCentral Europe Standard Time  [CEST; UTC+0200]\n14:00   Fri, Aug 7 2020\n</code></pre></div>\n\n\n<p>Or, if we preferred the Sunday slot:</p>\n<div class=\"codehilite\"><pre><span></span><code>Eastern Standard Time  [EDT; UTC-0400]\n11:00   Sun, Aug 9 2020\n\nCentral Europe Standard Time  [CEST; UTC+0200]\n17:00   Sun, Aug 9 2020\n</code></pre></div>\n\n\n<p>Let me know what is better for folks. We have time.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204972571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595629212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> I vote for the Sunday slot. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204991285,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595659083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><img alt=\":plus1:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/12795.png\" title=\"plus1\"> for Sunday too. Just penciled in August 9 in anticipation. <br>\nBy the way, I've actually never had the chance to join a book club before, and I'm super excited! Does someone propose a chunk of reading for everyone to do in advance, which we come prepared to discuss? Hoping to find a little time this weekend to start getting my head back into Clojure, so could potentially even start reading now.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205005801,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595686894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have binge-read Elements of Clojure and I'd like to do a more careful read.  Josh told me about the book club and I'd love to join if possible.  I'm in CEST time too, but can do later hours.  I'd rather do Sunday too</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205077421,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1595816894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5d15ea33fc144ca1fcf8b702df2849a?d=identicon&version=1",
            "client": "website",
            "content": "<p>so this Clojure product I inherited... won't run. One of its dependencies' dependencies(?) is outdated (it's this bug: <a href=\"https://github.com/owainlewis/yaml/issues/28\">https://github.com/owainlewis/yaml/issues/28</a>). I suspect that the previous developer was using &lt; Java 11, but besides the README, is there anything I can use to make an educated guess? (I feel silly not knowing this but that's everything I post here I guess!)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205312569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "lyndsey@uchicago.edu",
            "sender_full_name": "Lyndsey Jane Moulds (she/they) (F'13)",
            "sender_id": 2861,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jdk issues",
            "submessages": [],
            "timestamp": 1595990059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><code>lein ancient</code> could help find the offending library(ies), as this commentator <a href=\"https://github.com/owainlewis/yaml/issues/28#issuecomment-467200166\">points out</a>. I'd also try to review the output of <code>lein deps :tree</code> to see what's what. Without any more information about your specific scenario, it's hard to speculate further.</p>\n<p>I'd also try to bump all my project dependencies to the highest non-breaking SEMVER available... maybe catch a lucky break.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205319046,
            "is_me_message": false,
            "last_edit_timestamp": 1596002086,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jdk issues",
            "submessages": [],
            "timestamp": 1595999621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I saw this in my Twitter timeline : <a href=\"https://twitter.com/arcatan/status/1288555314774781959\">https://twitter.com/arcatan/status/1288555314774781959</a> , so hopefully you won't be the only one having to resolve dependency of issues at the moment.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/arcatan/status/1288555314774781959\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/899211314232532993/7WQ67XLh_normal.jpg\"></a><p>Many Clojure projects that I\u2019ve seen are only now upgrading to Java 11 from Java 8. There haven\u2019t been any big barriers for upgrade for a while, but there aren\u2019t that big benefits either.</p><span>- Miikka Koskinen (@arcatan)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205419477,
            "is_me_message": false,
            "last_edit_timestamp": 1596060533,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "jdk issues",
            "submessages": [],
            "timestamp": 1596060488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Excellent! I made us a Recurse Center calendar entry here: <a href=\"https://www.recurse.com/calendar/11740?date=2020-8-9\">https://www.recurse.com/calendar/11740?date=2020-8-9</a> -- Please RSVP there before Sunday.</p>\n<p>For Sunday, let's each read the free chapters available online, this way if you don't own the books yet, there's no pressure to rush to buy them.</p>\n<p>\"Joy of Clojure\" // Chapter 1, Clojure Philosophy:<br>\n<a href=\"https://livebook.manning.com/book/the-joy-of-clojure-second-edition/chapter-1/\">https://livebook.manning.com/book/the-joy-of-clojure-second-edition/chapter-1/</a></p>\n<p>\"Elements of Clojure\" // Chapter 1, Names:<br>\n<a href=\"https://leanpub.com/elementsofclojure/read_sample\">https://leanpub.com/elementsofclojure/read_sample</a></p>\n<p>And, if you're feeling rusty on Clojure overall, you can take a look at \"Clojure from the ground up\" by aphyr:<br>\n<a href=\"https://www.one-tab.com/page/9ln_sDrjS2S7UBWRJ6lqhQ\">https://www.one-tab.com/page/9ln_sDrjS2S7UBWRJ6lqhQ</a></p>\n<p>Looking forward to seeing everyone!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205748364,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596410301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for RSVP'ing to the event, <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> &amp; <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span>.</p>\n<p>Just pinging <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (W'12)</span>, <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span>, &amp; <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> in case any of you have an interest in joining. Here is the cal entry once more for this Sunday at 11am EDT:</p>\n<p><a href=\"https://www.recurse.com/calendar/11740?date=2020-8-9\">https://www.recurse.com/calendar/11740?date=2020-8-9</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206200235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596749945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks, just RSVP\u2019d! Things have been a little crazy here with no power or cell service at home for the past couple days, but hopefully they\u2019ll come back soon and I\u2019ll be able to join!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206204929,
            "is_me_message": false,
            "last_edit_timestamp": 1596753357,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596753261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks for the ping, I've RSVP'd!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206226195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596779613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Summary of plan of action from the call:</p>\n<ul>\n<li>Pick Joy of Clojure</li>\n<li>Read in 2 week chunks: JoC has 6 parts, so try to do 1 part every 2 weeks, on average</li>\n<li>Try to front-load as much reading as can, because the later chapters are difficult</li>\n<li>Code along problems from the book, and </li>\n<li>Sooner than later pick a game like Mastermind, and work on it together --- try to do game logic in Clojure and add in Clojurescript</li>\n</ul>\n<p>For the current 2 weeks, we're reading Part1: Foundations, which includes chapters 1 through 3.</p>\n<hr>\n<p>x-posting links from the Zoom chat:</p>\n<p><a href=\"https://www.youtube.com/watch?v=OyfBQmvr2Hc\">The Most Beautiful Program Ever Written</a> ... neat talk by Will Byrd.</p>\n<p><a href=\"https://github.com/clj-python/libpython-clj\">libpython-clj</a>: Python bindings for Clojure</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Mastermind_(game)\">Mastermind</a>: game as a pair programming exercise </p>\n<p>Using core.async, IRL: My friend and colleague spoke about <a href=\"https://www.youtube.com/watch?v=deBUPZa1D3o\">using core.async to build reliable systems</a></p>\n<p>Using Clojure's built-in concurrency primitives, to model a nontrivial problem: A post detailing a fairly \"production grade\" <a href=\"https://dev.to/vedang/simulating-the-passport-seva-kendra-using-clojure-5df6\">simulation of a Passport Office</a></p>\n<p><a href=\"https://github.com/inclojure-org/clojure-by-example\">Clojure by Example</a>, a workshop I wrote to introduce non-Clojure programmers to Clojure.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206401147,
            "is_me_message": false,
            "last_edit_timestamp": 1596990123,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596989611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Structured Concurrency (see below) is taking off in Python, Kotlin, Java, and several other imperative languages. Is Structured Concurrency gaining any traction in the Clojure world / are there any Clojure libraries like Trio yet?</p>\n<ul>\n<li><a href=\"https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/\">https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</a> -- the big, influential blog post by Nathaniel J. Smith introducing Structured Concurrency</li>\n<li><a href=\"https://blog.softwaremill.com/structured-concurrency-and-pure-functions-92dd8ed1a9f2\">https://blog.softwaremill.com/structured-concurrency-and-pure-functions-92dd8ed1a9f2</a></li>\n<li><a href=\"https://trio.readthedocs.io\">https://trio.readthedocs.io</a> -- Nathaniel's \"Structured Concurrency for Python\" library (fun fact: directly inspired by Dave Beazley's \"Curio\" library)</li>\n<li><a href=\"https://trio.discourse.group\">https://trio.discourse.group</a> \u2013 Structured Concurrency forum (not language- or library-specific)</li>\n<li><a href=\"https://youtu.be/oLkfnc_UMcE?t=30\">https://youtu.be/oLkfnc_UMcE?t=30</a> -- \"Trio: Async concurrency for mere mortals - PyCon 2018\" -- in which Nathaniel live codes a correct solution to Happy Eyeballs in 40 lines of easy-to-follow Python (Happy Eyeballs took the Twisted maintainers years and hundreds of lines of Python and it was still buggy)</li>\n</ul>\n<p>Note: For these purposes Clojure can be considered an imperative language, as per Ron Pressler's definition in his fantastic talk: <a href=\"https://youtu.be/449j7oKQVkc\">https://youtu.be/449j7oKQVkc</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206401295,
            "is_me_message": false,
            "last_edit_timestamp": 1598213104,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Structured Concurrency in Clojure?",
            "submessages": [],
            "timestamp": 1596989791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks for the recap, <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>, and thanks again <span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> and <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> for making this happen!</p>\n<p>I just posted some links about Structured Concurrency in <a href=\"#narrow/stream/18946-clojure/topic/Structured.20Concurrency.20in.20Clojure.3F/near/206401295\">https://recurse.zulipchat.com/#narrow/stream/18946-clojure/topic/Structured.20Concurrency.20in.20Clojure.3F/near/206401295</a> in case you're interested.</p>\n<p>And <a href=\"https://youtu.be/gsffg5xxFQI\">https://youtu.be/gsffg5xxFQI</a> was the ClojureScript talk by Derek Slager from 5 years ago that I still think of to this day.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"gsffg5xxFQI\" href=\"https://youtu.be/gsffg5xxFQI\"><img src=\"https://i.ytimg.com/vi/gsffg5xxFQI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206401751,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596990528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Just watched the \"The Most Beautiful Program Ever Written\" talk -- fun! Looking forward to checking out these other links.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206404452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1596994844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> re: structured concurrency, if you like that, you might also like Eiffel's lock-free, object-oriented concurrency model <a href=\"https://www.eiffel.org/doc/solutions/Concurrency\">https://www.eiffel.org/doc/solutions/Concurrency</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206438651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Structured Concurrency in Clojure?",
            "submessages": [],
            "timestamp": 1597048268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p>Hey folks! Although there is no set out plan made for the weekend, I just wanted to let you all know that I have something over the coming weekend I should tend to and won't be able to join you all if you decide to meet. :( <br>\nIt would be cool if you can make notes/update the cool things that you discussed over here so I can catch up for the next meeting :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207382336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1597826130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>If we moved it from this Sunday to the following one (8/30 11a Eastern, same time as last time), would we all be able to make it? I can still make this Sunday, but would be happy to switch to the opposite Sundays for a bit (I just realized I have a conflict on 9/6 myself), if that means more of us can make it.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207404359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1597842255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>OK all, I moved this to Sunday, August 30 at 11am ET as our next meeting, and made it a repeating event every 2 weeks thereafter.</p>\n<p>RSVP to the next event, or the full series, here:</p>\n<p><a href=\"https://www.recurse.com/calendar/12100?date=2020-8-30\">https://www.recurse.com/calendar/12100?date=2020-8-30</a></p>\n<p>This has some unity as that day is also my birthday and I can't think of a better way to spend an hour on it :) </p>\n<p>Adding Zulip pings for prior RSVPs and interest: <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> &amp; <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> &amp; <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (W'12)</span> &amp; <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> &amp; <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>.</p>\n<p>As a reminder, for this first meeting we have decided to assign \"PART 1: Foundations\" of Joy of Clojure, 2nd. Edition.  It might also be helpful to familiarize yourself with the Mastermind problem on Wikipedia, since we'll be using a toy implementation of Mastermind as our pair programming practical lab.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Mastermind_(board_game)\">https://en.wikipedia.org/wiki/Mastermind_(board_game)</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207464580,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1597873148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>really appreciate the ping! unfortunately won't be able to make it this weekend :/ -- happy birthday!!! I'll be reading along through foundations tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207478059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1597883973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Not this weekend, next one, <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> -- we have moved the meetings to start on August 30.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207584700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1597964762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>oh! sick! I'll be there! I set a reminder this time</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207848776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598278890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>!</p>\n<p>One thing that just occurred to me with regard to structured concurrency in Clojure is the role that Project Loom could play here. <a href=\"https://wiki.openjdk.java.net/display/loom/Structured+Concurrency\">https://wiki.openjdk.java.net/display/loom/Structured+Concurrency</a></p>\n<p>Anyone heard if the Clojure community is following Project Loom at all, and possibly already exploring how Clojure might interact with it?</p>\n<p>A quick search just turned up <a href=\"https://twitter.com/roman01la/status/1153989387211948032\">https://twitter.com/roman01la/status/1153989387211948032</a>, cool that at least someone is!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/roman01la/status/1153989387211948032\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1299432941165121541/d7ddC4ai_normal.jpg\"></a><p>Nice, Fibers and Continuations in Clojure with Project Loom <a href=\"https://t.co/TsbYE3MR6x\">https://twitter.com/roman01la/status/1153989387211948032/photo/1</a></p><span>- Roman Liutikov (@roman01la)</span><div class=\"twitter-image\"><a href=\"https://t.co/TsbYE3MR6x\"><img src=\"https://pbs.twimg.com/media/EAPLOO-XYAAVbNL.jpg:small\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208451515,
            "is_me_message": false,
            "last_edit_timestamp": 1598731751,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Structured Concurrency in Clojure?",
            "submessages": [],
            "timestamp": 1598731627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey Clojure book club friends.</p>\n<p>Two updates on today.</p>\n<p>First update:  I just checked the RSVP list, and only <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> has RSVPed! Did it turn out that today's time slot did not work for others, or did we just forget to RSVP?</p>\n<p>Second update: believe it or not, despite my setting the schedule/cadence here, and despite this being an obviously free day since it's both my birthday and a calm late summer Sunday... I can't make it myself, and on short notice, to boot! It turns out someone in our close family just had a baby this morning (birthday twin!) at a hospital nearby and thus I find myself without my morning free.</p>\n<p>My original plan was going to be to come in here and suggest someone else from the group run the meeting and review of \"Joy of Clojure: Foundations\", I know that most RC'ers can self-organize pretty handily. <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> -- are you at all up for that assuming others show up today? :) It also seems like <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> was pretty confident with Clojure already and had some teaching experience.</p>\n<p>Anyway, sorry for the last minute opt-out. I'm bummed to miss it. But, Life Happens (tm)! I'll catch y'all in 2 weeks and perhaps I'll remind myself to do better reminders as we get closer to Sunday, September 13 to make sure people remember the spot in their calendar. Cheers!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208485194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598794007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Sorry you can\u2019t make it, <span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span>, but congrats on your birthday twin, and happy birthday!!!</p>\n<p>I suspect other folks just forgot to RSVP, so I\u2019ll join the meeting and look forward to hopefully seeing others there:) Happy to go over questions anyone had on the material in Part 1, which I feel pretty confident on. I wouldn\u2019t start the Mastermind project without you, but maybe we can do some exercises or something together as a substitute just for today.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208486248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598795679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>I forgot to RSVP, I'll be there</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208486617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598796262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>see you next time Andrew, thanks for updating~</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208486635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598796338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Great it won\u2019t just be me, <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span>! Look forward to meeting you soon!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208486716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598796462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>it was <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> , <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span>  <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (W'12)</span> </p>\n<p>meeting notes:</p>\n<p>organization:</p>\n<ul>\n<li>Make sure you keep up with the zulip thread to coordinate schedule changes</li>\n<li>RSVP to the events</li>\n<li>Still set on reading 1 part of \"job of clojure 2nd edition\" biweekly</li>\n</ul>\n<p>data visualization:</p>\n<ul>\n<li>cider-inspect</li>\n<li><a href=\"https://github.com/cognitect-labs/REBL-distro\">https://github.com/cognitect-labs/REBL-distro</a></li>\n</ul>\n<p>\"good public clojure code\" repos/examples:</p>\n<ul>\n<li><a href=\"https://luminusweb.com/\">https://luminusweb.com/</a> (the new project lein output, not the repo itself)</li>\n</ul>\n<p>projects:</p>\n<ul>\n<li>still set on mastermind, we think</li>\n<li>need to consider the client -- local? graphical? web based?<ul>\n<li>maybe evolve through these steps</li>\n</ul>\n</li>\n</ul>\n<p>neat links/things that were shared:</p>\n<ul>\n<li><a href=\"https://github.com/metosin/reitit\">https://github.com/metosin/reitit</a> (talked about macros falling out of fashion compared to compojure in the ecosystem)</li>\n<li><a href=\"https://github.com/weavejester/integrant\">https://github.com/weavejester/integrant</a> (data driven architecture)</li>\n<li><a href=\"https://github.com/euccastro/relembra/tree/template\">https://github.com/euccastro/relembra/tree/template</a></li>\n<li><a href=\"https://github.com/neeasade/dotfiles/blob/master/bin/bin/btags\">https://github.com/neeasade/dotfiles/blob/master/bin/bin/btags</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208491732,
            "is_me_message": false,
            "last_edit_timestamp": 1598805091,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598803912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Sorry people, I've dropped off the radar. Last weekend ended up getting packed solid. I'll try to make it for the next one <img alt=\":clojure:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/16447.png\" title=\"clojure\"> <img alt=\":lambda:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/1100.png\" title=\"lambda\"> <span aria-label=\"flame\" class=\"emoji emoji-1f525\" role=\"img\" title=\"flame\">:flame:</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208736255,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "16447",
                    "emoji_name": "clojure",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nathanisom27@gmail.com",
                        "full_name": "Nathan Isom (he) (W2'20)",
                        "id": 255190
                    },
                    "user_id": 255190
                }
            ],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598988686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Glad to hear this went well! Sorry to miss it! Awesome notes!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208749205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1598994653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> thanks! I'll meet you eventually!</p>\n<p>Just as a reminder for anyone watching this thread, a goal next sunday is to discuss chapters 4+5 (part 2) of \"Joy of Clojure\" 2nd edition</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209419541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1599586770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hi friends, just a reminder we are still on for Joy of Clojure book club today at 11am ET. If you didn't manage to finish the reading, don't be nervous and skip, just come anyway! I am hoping today we can also set up our shared development environment for Mastermind. I am personally free 11am-1pm so if anyone else has extra free time beyond the hour, perhaps we can do it together. We will spend the session focused on book learnings from Joy of Clojure parts 1/2 (chapters 1-5, with a focus on 4+5). Excited to see everyone later!</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (W'12)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209931046,
            "is_me_message": false,
            "last_edit_timestamp": 1600003117,
            "reactions": [
                {
                    "emoji_code": "1f38a",
                    "emoji_name": "party_ball",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600003100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Count me in please. I've just bought the book. :)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209933588,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600006730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>I had to bail after 1 hour, but here are some links from the first hour</p>\n<ul>\n<li>number types in clojure reminded us of the number tower: <a href=\"https://en.wikipedia.org/wiki/Numerical_tower\">https://en.wikipedia.org/wiki/Numerical_tower</a></li>\n<li>::&lt;value&gt; as sugar for :&lt;current ns&gt;/&lt;value&gt;</li>\n<li>HOPL paper came up as nice reference for a lot clojure context<ul>\n<li><a href=\"https://clojure.org/about/history\">https://clojure.org/about/history</a></li>\n</ul>\n</li>\n<li>a talk that helps motivate adjusting to persistent data structures <a href=\"https://www.youtube.com/watch?v=-6BsiVyC1kMHOPL\">https://www.youtube.com/watch?v=-6BsiVyC1kMHOPL</a><div class=\"youtube-video message_inline_image\"><a data-id=\"-6BsiVyC1kMHOPL\" href=\"https://www.youtube.com/watch?v=-6BsiVyC1kMHOPL\"><img src=\"https://i.ytimg.com/vi/-6BsiVyC1kMHOPL/default.jpg\"></a></div></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209937665,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600013026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey all! Thanks for meeting up today.</p>\n<p>Here's what I'm going to work on today:</p>\n<ul>\n<li>\n<p>As my own personal warm-up, I'm going to work on the \"Eight Queens\" puzzle in Clojure. That's described here. <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\">https://en.wikipedia.org/wiki/Eight_queens_puzzle</a></p>\n</li>\n<li>\n<p>I'm going to watch &amp; play some Mastermind games online to recall the structure of the problem.</p>\n</li>\n<li>\n<p>I'm going to sketch out (perhaps using Clojure code comments and vars) what I see as the 'first problems' in tackling this, so that I can share that with folks and they can work on it.</p>\n</li>\n</ul>\n<p>Some take-aways from our conversation:</p>\n<ul>\n<li>\n<p>For convenience, people should feel free to work on it in a branch in this public GitHub repo: <a href=\"https://github.com/amontalenti/mastermind-clj\">https://github.com/amontalenti/mastermind-clj</a> -- I'm glad to add anyone as a \"collaborator\" on this repo, just share your GitHub username and I'll do so. We agreed at the end of the call that it's best that we all work in branches and then at our next meetup in 2 weeks, we review branch diffs and decide whether to merge some folks stuff into a mainline branch to move the problem forward. Feel free to push nasty commits to save your work, this isn't a serious project :)</p>\n</li>\n<li>\n<p>Though I was able to get <a href=\"http://Repl.it\">Repl.it</a> set up, it seems like their Clojure support isn't perfect. In particular, it wants us to keep main.clj as the sole file in the root which <a href=\"http://Repl.it\">Repl.it</a> auto-opens and auto-evaluates. Weird. It'll probably work well for pairing during our Zoom calls, but that's about it. I recommend that folks set up a simple local development environment -- above in the stream people shared some info on Lein &amp; rebel-readline, which are good places to start. I've also heard, but not personally tried it, that the \"Calva\" plugin for VSCode is super easy to get going with, if you want to avoid the rabbit hole of vim/emacs/IntelliJ/etc.</p>\n</li>\n<li>\n<p>We had a pretty nice discussion of \"What constitutes an interface or protocol in Clojure core?\" This led us to the page describing the Seq interface in the official docs: <a href=\"https://clojure.org/reference/sequences#_the_seq_interface\">https://clojure.org/reference/sequences#_the_seq_interface</a> -- as well as to a fascinating blog post where someone tried to create a taxonomy of these interface, what the author describes as \"Clojure traits\". You can find that here: \u2029<a href=\"https://insideclojure.org/2016/03/16/collections/\">https://insideclojure.org/2016/03/16/collections/</a></p>\n</li>\n</ul>\n<p>Looking forward to seeing everyone in a couple weeks! Expect an update on this Zulip stream later today when I make some progress on how we can think through the take-home problem.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209939133,
            "is_me_message": false,
            "last_edit_timestamp": 1600015381,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600015326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Was pretty happy with myself just now writing <code>print-board</code> for a chess board represented as a vector of 64 character bytes, with the implementation being as simple as <code>(map println (partition 8 board))</code> (that is, to print 8 \"rows\", or \"partitions\", of 8 elements each).</p>\n<p><a href=\"/user_uploads/13/ZsHP_NPdbMj8fn0WjYXRYz3Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/ZsHP_NPdbMj8fn0WjYXRYz3Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/ZsHP_NPdbMj8fn0WjYXRYz3Z/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209939511,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "16425",
                    "emoji_name": "nice",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600015999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Also: The reading for next time will be Part 3 (which comprises chapters <del>4 &amp; 5</del> 6 &amp; 7).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209939665,
            "is_me_message": false,
            "last_edit_timestamp": 1600016797,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600016182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> Correction: Part 3 is actually chapters 6 + 7. We just covered 4/5 today.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209939913,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                },
                {
                    "emoji_code": "15905",
                    "emoji_name": "facepalm",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600016531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>But yes, Part 3 for next time!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209939918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600016540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's some leeway in deciding the precise Mastermind rules (<a href=\"https://en.wikipedia.org/wiki/Mastermind_(board_game)#Gameplay_and_rules\">https://en.wikipedia.org/wiki/Mastermind_(board_game)#Gameplay_and_rules</a>).  IIUC blanks, if allowed, work like an additional color, so in the interest of simplicity I'd just leave them out of our experiments and assume 6 colors (blue, green, red, yellow, purple, and orange, just because they start with different letters and black and white are used for the scoring pegs).  I would allow repetitions, because the wikipedia page doesn't specify whether repetition is allowed in guesses when it's disallowed in secret codes</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210081357,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600132165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>(btw I'm a he; I just don't know how to change my zulip name)</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210081431,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600132232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also I propose to call matches in color + position \"strong\" matches, and matches in color but not position \"weak\" matches (there are probably better names --exact vs loose?--; my point is let's agree upon some convention).</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210082142,
            "is_me_message": false,
            "last_edit_timestamp": 1600178483,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600133143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>...and the MVP would be a one-off game where the computer always plays codemaker, as opposed to the original rules where the two players take turns</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210084569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600136332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is the skeleton for Mastermind as spec'ed above.  I left out the interesting parts and just made some trivial (but still debatable) choices to make the problem more concrete:</p>\n<p>[P.S. -- <em>spoiler alert</em>: in retrospect I realize that the data model is only \"trivial\" if you're used to modeling problem domains with plain data as opposed to class hierarchies or other forms of data manipulation API. Also, the way to run an interactive game in the REPL was all but obvious to me until I got my hands dirty and tried some things. Finally, I forgot to limit the number of guesses.]</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">mm</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">;;; core logic</span>\n\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">colors</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"ss\">:b</span> <span class=\"ss\">:g</span> <span class=\"ss\">:o</span> <span class=\"ss\">:p</span> <span class=\"ss\">:r</span> <span class=\"ss\">:y</span><span class=\"p\">})</span>\n\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">code-length</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; all core logic elided.  below the following is assumed:</span>\n<span class=\"c1\">;; a code is of the form [:r :g :y :b]</span>\n<span class=\"c1\">;; a game is of the form {:secret-code [:g :g :b :p], :guesses [{:guess [:r :r :r :r] :score {:strong 0 :weak 0}} ...]]}</span>\n\n<span class=\"c1\">;; xs is the secret code and ys is a guess.. or vice versa, since order doesn&#39;t matter</span>\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">score</span> <span class=\"p\">[</span><span class=\"nv\">xs</span> <span class=\"nv\">ys</span><span class=\"p\">]</span>\n  <span class=\"p\">{</span><span class=\"ss\">:strong</span> <span class=\"p\">(</span><span class=\"nf\">strong-match-count</span> <span class=\"nv\">xs</span> <span class=\"nv\">ys</span><span class=\"p\">)</span>\n   <span class=\"ss\">:weak</span> <span class=\"p\">(</span><span class=\"nf\">weak-match-count</span> <span class=\"nv\">xs</span> <span class=\"nv\">ys</span><span class=\"p\">)})</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">new-game</span> <span class=\"p\">[]</span>\n  <span class=\"p\">{</span><span class=\"ss\">:secret-code</span> <span class=\"p\">(</span><span class=\"nf\">random-code</span><span class=\"p\">)</span>\n   <span class=\"ss\">:guesses</span> <span class=\"p\">[]})</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">add-guess</span> <span class=\"p\">[{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">secret-code</span><span class=\"p\">]</span> <span class=\"ss\">:as</span> <span class=\"nv\">game</span><span class=\"p\">}</span> <span class=\"nv\">guess</span><span class=\"p\">]</span>\n  <span class=\"c1\">;; alternatively, I could calculate scores on the fly while printing them out.</span>\n  <span class=\"c1\">;; I chose this because this way we can send guesses to dumb clients without</span>\n  <span class=\"c1\">;; sending them the secret code</span>\n  <span class=\"p\">(</span><span class=\"nf\">update</span> <span class=\"nv\">game</span> <span class=\"ss\">:guesses</span> <span class=\"nb\">conj </span><span class=\"p\">{</span><span class=\"ss\">:guess</span> <span class=\"nv\">guess</span> <span class=\"ss\">:score</span> <span class=\"p\">(</span><span class=\"nf\">score</span> <span class=\"nv\">guess</span> <span class=\"nv\">secret-code</span><span class=\"p\">)}))</span>\n\n\n<span class=\"c1\">;;; display utils</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">print-3-cols</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">cols</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">printf</span> <span class=\"s\">&quot;%20s%20s%20s\\n&quot;</span> <span class=\"nv\">cols</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">print-guess</span> <span class=\"p\">[{</span><span class=\"nv\">g</span> <span class=\"ss\">:guess</span>\n                    <span class=\"p\">{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">strong</span> <span class=\"nv\">weak</span><span class=\"p\">]}</span> <span class=\"ss\">:score</span><span class=\"p\">}]</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-3-cols</span> <span class=\"nv\">g</span> <span class=\"nv\">strong</span> <span class=\"nv\">weak</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">strong</span> <span class=\"nv\">code-length</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">println</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">print-3-cols</span> <span class=\"s\">&quot;\u00b0\u00ba\u00a4\u00f8,\u00b8\u00b8,\u00f8\u00a4\u00ba\u00b0`\u00b0\u00ba\u00a4\u00f8,\u00b8&quot;</span> <span class=\"s\">&quot;  *** YOU WON!! ***  &quot;</span> <span class=\"s\">&quot;\u00a4\u00ba\u00b0`\u00b0\u00ba\u00a4\u00f8,\u00b8\u00b8,\u00f8\u00a4\u00ba\u00b0`\u00b0\u00ba\u00a4\u00f8,\u00b8&quot;</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">print-game</span> <span class=\"p\">[{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">guesses</span><span class=\"p\">]}]</span>\n  <span class=\"p\">(</span><span class=\"nf\">println</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-3-cols</span> <span class=\"s\">&quot;Guess&quot;</span> <span class=\"s\">&quot;Strong Matches&quot;</span> <span class=\"s\">&quot;Weak Matches&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-3-cols</span> <span class=\"s\">&quot;-----&quot;</span> <span class=\"s\">&quot;--------------&quot;</span> <span class=\"s\">&quot;------------&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">g</span> <span class=\"nv\">guesses</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"nf\">print-guess</span> <span class=\"nv\">g</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">print-last-guess</span> <span class=\"p\">[{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">guesses</span><span class=\"p\">]}]</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-guess</span> <span class=\"p\">(</span><span class=\"nb\">last </span><span class=\"nv\">guesses</span><span class=\"p\">)))</span>\n\n\n<span class=\"c1\">;;; PLAY HERE</span>\n\n<span class=\"c1\">;; start new game by evaluating this `do` block</span>\n<span class=\"p\">(</span><span class=\"nf\">do</span>\n  <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">g</span> <span class=\"p\">(</span><span class=\"nf\">new-game</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-game</span> <span class=\"nv\">g</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; make a guess by editing the vector and evaluating the `do` block</span>\n<span class=\"p\">(</span><span class=\"nf\">do</span>\n  <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">g</span> <span class=\"p\">(</span><span class=\"nf\">add-guess</span> <span class=\"nv\">g</span> <span class=\"p\">[</span><span class=\"ss\">:y</span> <span class=\"ss\">:y</span> <span class=\"ss\">:o</span> <span class=\"ss\">:o</span><span class=\"p\">]))</span>\n  <span class=\"p\">(</span><span class=\"nf\">print-last-guess</span> <span class=\"nv\">g</span><span class=\"p\">))</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210088305,
            "is_me_message": false,
            "last_edit_timestamp": 1600178290,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1600142229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://aphyr.com/posts/353-rewriting-the-technical-interview\">https://aphyr.com/posts/353-rewriting-the-technical-interview</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210212933,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "santiago.gepigon@gmail.com",
                        "full_name": "Santiago Gepigon III (he) (S2'18)",
                        "id": 120074
                    },
                    "user_id": 120074
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathanisom27@gmail.com",
                        "full_name": "Nathan Isom (he) (W2'20)",
                        "id": 255190
                    },
                    "user_id": 255190
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Aphyr <3",
            "submessages": [],
            "timestamp": 1600219829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Sorry folks, I dropped off the grid and missed the book club meetings. I'm afraid it's going to be like that now... life / work / everything...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211348121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601106667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>hey, that's how life goes sometimes, it's all good</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211362723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601130748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Sorry to miss you <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>  and thanks for letting us know, hope to catch you at a better time in the future!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211362807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601130870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/LnTHYKB5f5GSpoBr3HBTx_YQ/IMG_1662.PNG\">IMG_1662.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/LnTHYKB5f5GSpoBr3HBTx_YQ/IMG_1662.PNG\" title=\"IMG_1662.PNG\"><img src=\"/user_uploads/13/LnTHYKB5f5GSpoBr3HBTx_YQ/IMG_1662.PNG\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211418262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601215714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I\u2019d really like to work through the lazy quicksort example in chapter 6 with the group today. Is anyone else up for that? Reminder in this screenshot. ^^^</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211418265,
            "is_me_message": false,
            "last_edit_timestamp": 1601215745,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601215725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"/user_uploads/13/LP5UqW9N2eMgBhSGnDpYvMsq/IMG_1663.PNG\">IMG_1663.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/LP5UqW9N2eMgBhSGnDpYvMsq/IMG_1663.PNG\" title=\"IMG_1663.PNG\"><img src=\"/user_uploads/13/LP5UqW9N2eMgBhSGnDpYvMsq/IMG_1663.PNG\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211418343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601215888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I\u2019d like to fully understand this diagram, too.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211418348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601215901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hmm, it's asking for a host to start the meeting in Sammet. Did something change about the Zoom setup? I could use my own Zoom room if necessary.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601218996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Did other people manage to get in? If not, let's switch to mine here:<br>\n<a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>I\u2019m also getting \u201cwaiting for the host to join the meeting\u201d</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Trying <a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a> now...</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a> says waiting for host to let me in</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I think I just disabled the waiting room and let you in?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> <span class=\"user-mention\" data-user-id=\"2903\">@Luke Barone-Adesi (he) (F'13)</span> In case ya'll want to join, we're getting going late here: <a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211420517,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601219502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>All! In today's session, <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span>, <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span>, and I went over Chapter 6, mostly, by working through the \"qsort\" (lazy-seq quicksort) example at the end of Chapter 6. We learned a lot! We've decided that since Chapter 7 was very juicy indeed and we didn't even get to it, we're <strong>pausing reading</strong> for the next two weeks. Next week, we're going to work off the Mastermind example that <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span> started, to use our learnings from chapters 1-7 to build out Mastermind into a working set of functions &amp; CLI (or, at least, as far as we can get in an hour). If people want to work on the problem themselves until then, that's fine. Also, if you're eager for some reading, and you own the original book \"Elements of Clojure\" that started all of this, I think, at this point, with Chapters 1-7 of Joy of Clojure behind you, Chapter 1 of \"Elements of Clojure\" will make more sense. So feel free to read (or re-read) that.</p>\n<p>Concrete take-aways:</p>\n<ul>\n<li>No required reading for next two weeks. If you fell behind on Chapters 1-7 of Joy of Clojure, this is your chance to catch up!</li>\n<li>Next session (two weeks from today) will be entirely pairing on the Mastermind problem.</li>\n<li>If you had life issues that prevented you from joining past sessions, <strong>feel free</strong> to jump in for our next session anyway -- I'm sure you'll get something out of following along as we work through a code example from scratch.</li>\n<li>Feel free to play around with the MM problem on your own in the meanwhile. I'll see if I can get a \"minimal\" skeleton of the problem in a GitHub gist in case folks are looking for a starting point.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211422973,
            "is_me_message": false,
            "last_edit_timestamp": 1601223226,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1601223169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hey all! We are meeting at 11am ET today to finish our discussion of Chapter 7 and to pair on the Mastermind problem together.</p>\n<p>If you have a few minutes before the start, please install tmate, as we'll use that for terminal sharing in a pinch. It's also just a handy tool to have in your toolbox.</p>\n<p><a href=\"https://tmate.io/\">https://tmate.io/</a></p>\n<p>Also, the meeting will be in my Zoom here:</p>\n<p><a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212967371,
            "is_me_message": false,
            "last_edit_timestamp": 1602426186,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1602426157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Link with password. Sorry. Zoom keeps changing the ballgame:</p>\n<p><a href=\"https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09\">https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212968565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1602428516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Just adding a cc here for folks from prior meetings since the Zoom room has a password:</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212968817,
            "is_me_message": false,
            "last_edit_timestamp": 1602428900,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1602428889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>cc <span class=\"user-mention\" data-user-id=\"255190\">@Nathan Isom (he) (W2'20)</span> <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"100518\">@Nandaja Varma N (she) (SP1'17)</span> <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span> <span class=\"user-mention\" data-user-id=\"2903\">@Luke Barone-Adesi (he) (F'13)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212968832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1602428949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>/poll For next time, we can either spend the full hour pairing on Mastermind via tmate, or charging ahead and reading Chapter 8 on Macros from Joy of Clojure. What would you prefer?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212971391,
            "is_me_message": false,
            "last_edit_timestamp": 1602433180,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [
                {
                    "content": "{\"widget_type\": \"poll\", \"extra_data\": {\"question\": \"\\\"For next time, we can either spend the full hour pairing on Mastermind via tmate, or charging ahead and reading Chapter 8 on Macros from Joy of Clojure. What would you prefer?\\\" \\\"Pairing for an hour\\\" \\\"Discussing Ch. 8 macros for an hour\\\"\", \"options\": []}}",
                    "id": 39967,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 247727
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":1,\"option\":\"Pairing for an hour\"}",
                    "id": 39968,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 247727
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":2,\"option\":\"Discussing Ch. 8 on macros for an hour\"}",
                    "id": 39969,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 247727
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"247727,1\",\"vote\":1}",
                    "id": 39970,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 247727
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"247727,1\",\"vote\":1}",
                    "id": 39971,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 910
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"247727,1\",\"vote\":1}",
                    "id": 39975,
                    "message_id": 212971391,
                    "msg_type": "widget",
                    "sender_id": 7059
                }
            ],
            "timestamp": 1602433106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> This is the YouTube video on macros I mentioned briefly. \"Deep Walking Macros\". It's a really cool presentation: <a href=\"https://www.youtube.com/watch?v=HXfDK1OYpco\">https://www.youtube.com/watch?v=HXfDK1OYpco</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HXfDK1OYpco\" href=\"https://www.youtube.com/watch?v=HXfDK1OYpco\"><img src=\"https://i.ytimg.com/vi/HXfDK1OYpco/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212971462,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1602433231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Just tried joining <a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a> from my browser and got prompted for a meeting passcode, which I don't have. Is that just because I'm a few minutes early, or is there actually a passcode?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214493528,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                }
            ],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1603637816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Still getting prompted for a passcode and don't know what it is.</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214494186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1603638585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c1541d2cc5bebcb7dcfef54a3e5a127?d=identicon&version=1",
            "client": "website",
            "content": "<p>same here</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214494959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "euccastro@gmail.com",
            "sender_full_name": "Estevo U. Caamanho Castro (he) (W'12)",
            "sender_id": 7059,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1603639468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09\">https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09</a> as Andrew already posted previously <img alt=\":facepalm:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/15905.png\" title=\"facepalm\"></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214495094,
            "is_me_message": false,
            "last_edit_timestamp": 1603639668,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1603639650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span>  Did we miss each other today?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214495644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1603640355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>trimmed this chat into a reminder blog post: <a href=\"https://notes.neeasade.net/reduce.html\">https://notes.neeasade.net/reduce.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215668435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "newbie using loop recur everywhere",
            "submessages": [],
            "timestamp": 1604547651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span>, hope all's okay with you and yours!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215976165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604787471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> Hey Josh! Yes, I'm well. Sorry about missing the meeting 2 weeks ago. My wife and I decided to \"get out of dodge\" (visit a friend on a farm in upstate NY) and I forgot that I had this scheduled back then. I still plan to check in on Sunday!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215976659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604788172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Great, look forward to catching you tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215977320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604789385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/588ed93f75988b1639513ccd77a2f1930ed980a1?x=x&version=4",
            "client": "website",
            "content": "<p>Just to confirm, I assume we'll use the <a href=\"https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09\">https://parsely.zoom.us/my/amontalenti?pwd=ck5nUEVyZStyTXlkUXp2eW1wK0I2Zz09</a> link to join again today, not the <a href=\"https://zoom.us/my/amontalenti\">https://zoom.us/my/amontalenti</a> link that still appears in <a href=\"https://www.recurse.com/calendar/12100\">https://www.recurse.com/calendar/12100</a>, right?</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216005784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "jabronson@gmail.com",
            "sender_full_name": "Josh Bronson (he) (m1'17)",
            "sender_id": 910,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604839450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Perfect! <span class=\"user-mention\" data-user-id=\"344229\">@Gabriele Simeone (he) (F2'20)</span>, I know we chatted via email but I never sent you stuff, but if you're up for it, feel free to join today!</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216012045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604850143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span></p>\n<p><a href=\"https://tmate.io/\">https://tmate.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216012848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604851498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span> </p>\n<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216012921,
            "is_me_message": false,
            "last_edit_timestamp": 1604855215,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604851615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>[deleted]</p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216013086,
            "is_me_message": false,
            "last_edit_timestamp": 1604855225,
            "reactions": [],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604851896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Great session today, guys! Here's the latest committed state of our pairing, starting from Estevo's initial code.</p>\n<p><a href=\"https://github.com/amontalenti/mastermind-clj/blob/pairing-estevo/src/mastermind/estevo.clj#L13-L32\">https://github.com/amontalenti/mastermind-clj/blob/pairing-estevo/src/mastermind/estevo.clj#L13-L32</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"910\">@Josh Bronson (he) (m1'17)</span> <span class=\"user-mention\" data-user-id=\"7059\">@Estevo U. Caamanho Castro (he) (W'12)</span></p>",
            "content_type": "text/html",
            "display_recipient": "clojure",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216015469,
            "is_me_message": false,
            "last_edit_timestamp": 1604855257,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "euccastro@gmail.com",
                        "full_name": "Estevo U. Caamanho Castro (he) (W'12)",
                        "id": 7059
                    },
                    "user_id": 7059
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jabronson@gmail.com",
                        "full_name": "Josh Bronson (he) (m1'17)",
                        "id": 910
                    },
                    "user_id": 910
                }
            ],
            "recipient_id": 20136,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 18946,
            "subject": "Elements of Clojure (book club?)",
            "submessages": [],
            "timestamp": 1604855248,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
