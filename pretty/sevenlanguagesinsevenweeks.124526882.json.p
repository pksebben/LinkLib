{
    "anchor": 124526882,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>I don't know about other people, but I haven't had time to work on the Erlang chapter at all. So I'm not planning to be at the meeting tomorrow.</p>",
            "content_type": "text/html",
            "display_recipient": "seven languages in seven weeks",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124373828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102158,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 100488,
            "subject": "Erlang",
            "submessages": [],
            "timestamp": 1522341622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aabd3f5b0d85a5cd43367315223e784a0b18b740?x=x&version=2",
            "client": "website",
            "content": "<p>Here is how I did the tic-tac-toe exercise, using some functional features that weren't discussed in the book:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">Piece</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">flip</span><span class=\"k\">:</span> <span class=\"kt\">Piece</span> <span class=\"o\">=</span>\n    <span class=\"k\">this</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"n\">X</span> <span class=\"k\">=&gt;</span> <span class=\"n\">O</span>\n      <span class=\"k\">case</span> <span class=\"n\">O</span> <span class=\"k\">=&gt;</span> <span class=\"n\">X</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"k\">final</span> <span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">X</span> <span class=\"k\">extends</span> <span class=\"nc\">Piece</span>\n<span class=\"k\">final</span> <span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">O</span> <span class=\"k\">extends</span> <span class=\"nc\">Piece</span>\n\n<span class=\"k\">sealed</span> <span class=\"k\">trait</span> <span class=\"nc\">GameStatus</span>\n<span class=\"k\">final</span> <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Won</span><span class=\"o\">(</span><span class=\"n\">player</span><span class=\"k\">:</span> <span class=\"kt\">Piece</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">GameStatus</span>\n<span class=\"k\">final</span> <span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">Tied</span> <span class=\"k\">extends</span> <span class=\"nc\">GameStatus</span>\n<span class=\"k\">final</span> <span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">InProgress</span> <span class=\"k\">extends</span> <span class=\"nc\">GameStatus</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Board</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">contents</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Piece</span><span class=\"o\">]]])</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">winningConfigs</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"nc\">List</span><span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">firstOption</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])(</span><span class=\"n\">l</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">l</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n      <span class=\"k\">case</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"k\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"n\">firstOption</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">tail</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">fitsConfig</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)])</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Piece</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">matchingArea</span> <span class=\"k\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">col</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">contents</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">)(</span><span class=\"n\">col</span><span class=\"o\">)}</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matchingArea</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">==</span> <span class=\"n\">matchingArea</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">matchingArea</span><span class=\"o\">.</span><span class=\"n\">head</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"nc\">None</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">won</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Piece</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">firstOption</span><span class=\"o\">(</span><span class=\"n\">fitsConfig</span><span class=\"o\">)(</span><span class=\"n\">winningConfigs</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">getStatus</span><span class=\"k\">:</span> <span class=\"kt\">GameStatus</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">won</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Won</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"o\">{</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">isDefined</span><span class=\"o\">)})</span> <span class=\"o\">{</span>\n          <span class=\"nc\">Tied</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n          <span class=\"nc\">InProgress</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">squareToString</span><span class=\"o\">(</span><span class=\"n\">square</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Piece</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"n\">square</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;_&quot;</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;X&quot;</span>\n        <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;O&quot;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">contents</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"n\">row</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">squareToString</span><span class=\"o\">)</span> <span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">)}</span> <span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Board</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">private</span> <span class=\"k\">val</span> <span class=\"n\">emptyRow</span> <span class=\"k\">=</span> <span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"nc\">None</span><span class=\"o\">,</span> <span class=\"nc\">None</span><span class=\"o\">,</span> <span class=\"nc\">None</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Board</span><span class=\"o\">(</span><span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"n\">emptyRow</span><span class=\"o\">,</span> <span class=\"n\">emptyRow</span><span class=\"o\">,</span> <span class=\"n\">emptyRow</span><span class=\"o\">))</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">play</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"k\">:</span> <span class=\"kt\">Board</span><span class=\"o\">,</span> <span class=\"n\">row</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">col</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">piece</span><span class=\"k\">:</span> <span class=\"kt\">Piece</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Board</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n    <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">)(</span><span class=\"n\">col</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"k\">val</span> <span class=\"n\">newRow</span> <span class=\"k\">=</span> <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">).</span><span class=\"n\">updated</span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"o\">,</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">piece</span><span class=\"o\">))</span>\n        <span class=\"k\">val</span> <span class=\"n\">newContents</span> <span class=\"k\">=</span> <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">newRow</span><span class=\"o\">)</span>\n        <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Board</span><span class=\"o\">(</span><span class=\"n\">newContents</span><span class=\"o\">))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">None</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">getValidInt</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">scala.io.StdIn.readInt</span>\n    <span class=\"k\">var</span> <span class=\"n\">i</span> <span class=\"k\">=</span> <span class=\"n\">readInt</span><span class=\"o\">()</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">&quot;Choose a number between 0 and 2: &quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span> <span class=\"k\">=</span> <span class=\"n\">readInt</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">i</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">var</span> <span class=\"n\">board</span> <span class=\"k\">=</span> <span class=\"n\">empty</span>\n  <span class=\"k\">var</span> <span class=\"n\">piece</span><span class=\"k\">:</span> <span class=\"kt\">Piece</span> <span class=\"o\">=</span> <span class=\"n\">X</span>\n  <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">getStatus</span> <span class=\"o\">==</span> <span class=\"nc\">InProgress</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">println</span><span class=\"o\">()</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">)</span>\n    <span class=\"n\">printf</span><span class=\"o\">(</span><span class=\"s\">&quot;It&#39;s %s&#39;s turn.\\n&quot;</span><span class=\"o\">,</span> <span class=\"n\">piece</span><span class=\"o\">)</span>\n\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">&quot;Row to play: &quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">row</span> <span class=\"k\">=</span> <span class=\"n\">getValidInt</span><span class=\"o\">()</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">&quot;Col to play: &quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">col</span> <span class=\"k\">=</span> <span class=\"n\">getValidInt</span><span class=\"o\">()</span>\n\n    <span class=\"n\">play</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">,</span> <span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">col</span><span class=\"o\">,</span> <span class=\"n\">piece</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;That space is taken.&quot;</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">newBoard</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">board</span> <span class=\"k\">=</span> <span class=\"n\">newBoard</span>\n        <span class=\"n\">piece</span> <span class=\"k\">=</span> <span class=\"n\">piece</span><span class=\"o\">.</span><span class=\"n\">flip</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">getStatus</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "seven languages in seven weeks",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124526882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102158,
            "sender_email": "levimroth@gmail.com",
            "sender_full_name": "Levi Roth (he) (W2'18)",
            "sender_id": 105051,
            "sender_realm_str": "recurse",
            "stream_id": 100488,
            "subject": "Scala",
            "submessages": [],
            "timestamp": 1522675668,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
