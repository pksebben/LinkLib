{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>Woohooooo! Here's a pdf copy of CSAPP <a href=\"http://en.tjcities.com/wp-content/uploads/Books/CSPP.pdf\" target=\"_blank\" title=\"http://en.tjcities.com/wp-content/uploads/Books/CSPP.pdf\">http://en.tjcities.com/wp-content/uploads/Books/CSPP.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6433859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370285695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6433868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370285713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>yoyoyo</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6433924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370285810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>i have the HS paper copy at my desk. reading it now. if anyone wants to do problems together, i'm definitely down xo</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6433938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370285838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm down.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6433998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370286000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>trying to get something finished over the next ~1 hr. to call today a \"success\" and then get back to socializing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370286021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>awesome. no rush~</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370286157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey! i swung by to talk to sunil in person. would other people be interested in getting in pairs and working through the malloc lab <a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f10/www/labs/malloclab-writeup.pdf\" target=\"_blank\" title=\"http://www.cs.cmu.edu/afs/cs/academic/class/15213-f10/www/labs/malloclab-writeup.pdf\">http://www.cs.cmu.edu/afs/cs/academic/class/15213-f10/www/labs/malloclab-writeup.pdf</a> on wednesday?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6434813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370287176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Me!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6435545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370288645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be interested in joining too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6435592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370288740,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes. ah humbug.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370290347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Sunil Abraham</strong> you working a bit through the book still? finished up the thing i was working on (and added more github issues than i resolved ... bah!) -- looking to work through something less boring than VAST XML now!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6436724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370290953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey definitely working through the book</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6437638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370292689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm just reading through it -- wanna stop by and chat? i'm at steele</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6437687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370292762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>i wouldn't have expected that when allocating a new page of virtual memory it goes to disk first, then later into the cache. am i following that right?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6472019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370370359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>When you allocate a new page of virtual memory it's \"blank\", so it doesn't need to go to disk. Either the OS directly allocates a physical frame for it, or it defers that until the page is first referenced. Either way: implementation detail.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6472276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1370370716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>can anyone explain this -- imagine expecting user input for dates and receiving \"08\" for August --</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mo\">02</span><span class=\"p\">;</span> <span class=\"c1\">// radical!</span>\n  <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">08</span><span class=\"p\">;</span> <span class=\"c1\">// gnarly! error: invalid digit &quot;8&quot; in octal constant</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6509150,
            "is_me_message": false,
            "last_edit_timestamp": 1370448553,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370448395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>(edited original msg above)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6509175,
            "is_me_message": false,
            "last_edit_timestamp": 1370448576,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370448431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>@<strong>Tom Buchok</strong> I think the 0-prefixed constants are being treated as octal (base 8), and only 00-07 would be valid (for single digit octals). if you wanted to validate user input I think you'd want to take a string and parse out the 0-prefixed months (my C is rusty, this might be off)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6509392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370448748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>thx, @<strong>Aki Yamada</strong>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6509407,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370448827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a04b9dcd66595ebe5cdaa7a28411daae?d=identicon&version=1",
            "client": "website",
            "content": "<p>From the book I'm reading:</p>\n<p>\"The C preprocessor provides the tools that enabled you to develop programs that are  easier to develop, easier to read, easier to modify, and <strong>easier to port to a different computer system</strong>.\"</p>\n<p>Right.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6816090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tom@buchok.com",
            "sender_full_name": "Tom Buchok (S'13)",
            "sender_id": 2112,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1371156969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ca250b3897c1884a44c9bca70f048261?d=identicon&version=1",
            "client": "website",
            "content": "<p>going to do the malloc lab now -- anyone interested in pairing?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6843301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "s.abraham@gmail.com",
            "sender_full_name": "Sunil Abraham (S'13)",
            "sender_id": 2122,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1371223193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why not :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6845555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "malloc",
            "submessages": [],
            "timestamp": 1371227464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>does everybody who wants a repl occasionally just use gdb or cling? which one? why? something else? anyone wanna write a repl with me? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7180379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1372051678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>@<strong>Maggie Zhou</strong> I've been thinking a bit about C REPLs lately and come to the conclusion that it's probably more trouble than it's worth. I'd be happy to explain why (and hopefully have these reasons challenged!)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 7190042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "repl",
            "submessages": [],
            "timestamp": 1372078544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been seeing both of these styles. What is the difference? Is one more proper? </p>\n<p>struct string_obj<br>\n{<br>\n    int len;<br>\n    long hash;<br>\n    char* str;<br>\n};</p>\n<p>//vs. </p>\n<p>typedef struct <br>\n{<br>\n    int len;<br>\n    long hash;<br>\n    char* str;<br>\n} string_obj; </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8044373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "struct syntax",
            "submessages": [],
            "timestamp": 1374000703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>The latter is more syntatical sugar because you're declaring a type as an \"alias\" for the underlying struct  - that is, you can simply declare / init a variable of type \"string_obj myStringObject\" .   With the former, you'd be typing \"struct string_obj myStringObject\"  to declare / init a variable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8044756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "struct syntax",
            "submessages": [],
            "timestamp": 1374001225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure if that was an entirely correct explanation or made sense, but I  justrealized I'm sitting one row in front of you, so stop by anytime for clarification. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8044788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "struct syntax",
            "submessages": [],
            "timestamp": 1374001309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd love a code review for my C hash table. Currently it uses a horrible linear probing algorithm for resolving collisions and does not make use of caching. Working on implementing quadratic probing. Other suggestions for probing algorithms?<br>\n<a href=\"https://github.com/doronrk/HashTable.git\" target=\"_blank\" title=\"https://github.com/doronrk/HashTable.git\">https://github.com/doronrk/HashTable.git</a></p>\n<p>Also posted this in 'code review' stream but just in case...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8081172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "hash table",
            "submessages": [],
            "timestamp": 1374083535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Does anyone know how thread ids are assigned on UNIX? Everytime <span class=\"user-mention\" data-user-email=\"mlauria@caltech.edu\">@Michael Lauria</span> and I run our program which calls <code>pthread_self</code>, it returns the same thing, and we are wondering why? If we fork another thread using <code>pthread_create</code>, it gets a different id everytime, but the main process always has the same thread id which is not the PID.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8605501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pthread_self",
            "submessages": [],
            "timestamp": 1375307143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have this code:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">if</span> <span class=\"n\">some_condition</span> <span class=\"p\">{</span>\n    <span class=\"k\">goto</span> <span class=\"n\">label_name</span>\n    <span class=\"p\">}</span>\n<span class=\"nl\">label_name:</span>\n    <span class=\"n\">some_things_happen</span>\n</pre></div>\n\n\n<p>if some_condition is *false*, then some_things_happen does *not* execute.  Correct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375984866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>I think <code>some_things_happen</code> will still execute</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375984943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>maybe I misunderstood? here's what I tested:</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">void</span> <span class=\"nf\">some_things_happen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;some_things_happen is executing</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;some_condition was truthy</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">goto</span> <span class=\"n\">label_name</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n <span class=\"nl\">label_name:</span>\n    <span class=\"n\">some_things_happen</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre>$ cc scratch.c\n$ ./a.out\nsome_things_happen is executing\n$ ./a.out 1\nsome_condition was truthy\nsome_things_happen is executing\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think <span class=\"user-mention\" data-user-email=\"spacemanaki@gmail.com\">@Aki Yamada</span>  is right but i am no expert---a label is not control flow, but a marker (or that's how i think about it)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, sorry I should have explained -- that's how I think of it too (also not an expert)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893262,
            "is_me_message": false,
            "last_edit_timestamp": 1375985314,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>Say for example I have a struct that stores an integer, but when initialized the int should be null. However, null is a pointer, and I get a warning  \"assignment makes integer from pointer without a cast\". </p>\n<p>I understand why this might be improper, but what is the alternative? To store a pointer to an int on my sturct instead? What if I don't want to do that?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> In your example, the if statement's true branch ends with a goto to its fall-through branch, so <code>some_things_happen</code> either way</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok, cool.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Labels are just names for places in the resulting assembly code. It will get run either because of an explicit goto or an implicit fall-through</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>A situation when that behavior is both useful and desired is when you need to break out of several nested loops; just \"goto end\" ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that's basically the only time i've seen <code>goto</code> in code i've read---used to get out of nested loops/if statements for error handling </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi</span> Yeah, error handling is an especially good point--the enemies of goto want you to duplicate your error handling code at *every* exit point from the function!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893414,
            "is_me_message": false,
            "last_edit_timestamp": 1375985554,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though if you just need it to do some cleanup i prefer using some <a href=\"https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\">RAII</a> if i am in c++</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, in C++ it's a different story... I suspect goto's behavior may mess with destructors</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>I believe that's when you get to the \"blow your whole leg off\" part of </p>\n<blockquote>\n<p>C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off. <a href=\"http://www.stroustrup.com/bs_faq.html#really-say-that\" target=\"_blank\" title=\"http://www.stroustrup.com/bs_faq.html#really-say-that\">1</a></p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doronr@sas.upenn.edu\">@Doron Roberts-Kedes</span> The reason for the warning is, first off, that <code>NULL</code> is usually defined as <code>(void*)0</code>, meaning that it actually has pointer size (32 bits on 32-bit systems, 64 bits on 64-bit systems) whereas the int will (generally) be 32 bits wide either way. So, on a 64-bit system, the compiler is warning you that you are possibly truncating a 64-bit value to 32 bits, even though it's perfectly safe in the case of NULL.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>aha. got it thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doronr@sas.upenn.edu\">@Doron Roberts-Kedes</span>, setting an integer to NULL is effectively setting it to zero. Just set it to zero instead.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893581,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems to me that you need a value to mark the integer as \"invalid\"--is there any subset of the possible values that you aren't using, such as negative numbers? You may get away with for example -1, though I'd generally discourage this practice.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're not overly concerned about space usage (which you generally shouldn't be), I'd probably use an extra field to mark validity.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893607,
            "is_me_message": false,
            "last_edit_timestamp": 1375985832,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>Say I wanted to store a list of numbers of any value. If I checked whether the int being stored is null, it would return true if it was 0?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>okay. extra field seems reasonable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>int i = 0;<br>\ni == NULL // =&gt; true</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>May I ask what you're trying to do?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>typedef struct<br>\n{ <br>\n    int value;<br>\n    struct tree *leftTree;<br>\n    struct tree *rightTree;<br>\n} tree;</p>\n<p>beginning to implement balanced binary search tree in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>how do I represent the empty tree?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, where's that from? :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375985967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>A null pointer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>^this</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>as opposed to a tree with a single node of value 0</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, definitely</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375985997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>got it. that makes the most sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>It will be a lot more painful to work with</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>which will be more painful</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893762,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Using a dummy node with a special value</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>indeed. thanks for your help</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Stroustrup quote but not sure where i first heard it, see the footnote :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375986083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh look, you put a little footnote in there. Sorry, I'm blind.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "goto",
            "submessages": [],
            "timestamp": 1375986089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>if the empty tree is a NULL pointer, do I have to malloc in my insert function when I get to the empty tree? that seems weird.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doronr@sas.upenn.edu\">@Doron Roberts-Kedes</span> I'm not sure what you mean. Can you write out some pseudo-code using the tree's API?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure. </p>\n<p>void insert(tree *t, int value) {<br>\n    switch(t==NULL)<br>\n    {<br>\n        case 1: <br>\n            t-&gt;value = value;<br>\n        case 0:<br>\n            switch(t-&gt;value &lt; value)<br>\n            {<br>\n                case 1: insert(t-&gt;leftTree, value);<br>\n                case 0: insert(t-&gt;rightTree, value);<br>\n            }<br>\n    }<br>\n}</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh crap, how can I keep the tabs?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Wrap it in 3 tildes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>~~~void insert(tree *t, int value) {<br>\n    switch(t==NULL)<br>\n    {<br>\n        case 1: <br>\n            t-&gt;value = value;<br>\n        case 0:<br>\n            switch(t-&gt;value &lt; value)<br>\n            {<br>\n                case 1: insert(t-&gt;leftTree, value);<br>\n                case 0: insert(t-&gt;rightTree, value);<br>\n            }<br>\n    }<br>\n}~~~</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>... :(</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>shit</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The tildes need to be on separate lines</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>void insert(tree *t, int value) {\n    switch(t==NULL)\n    {\n        case 1: \n            t-&gt;value = value;\n        case 0:\n            switch(t-&gt;value &lt; value)\n            {\n                case 1: insert(t-&gt;leftTree, value);\n                case 0: insert(t-&gt;rightTree, value);\n            }\n    }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>:)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically if the case where the tree is empty is a NULL pointer, how do I handle this in insert?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8893967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>You could do something like return the pointer to the tree's root. <code>root = insert(root, value);</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm confused. insert doesn't return anything. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>Normally when you insert into an empty tree, you would just set its value to the value being inserted, which something like t-&gt;value = value; </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>but since t==NULL, there is no such thing as t-&gt;value.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>even though the struct is </p>\n<div class=\"codehilite\"><pre>typedef struct\n{ \n    int value;\n    struct tree *leftTree;\n    struct tree *rightTree;\n} tree;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>If you're inserting a value, you need to create a new node and link to it from the existing tree.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I will malloc inside the insert function</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doronr@sas.upenn.edu\">@Doron Roberts-Kedes</span> I'd stay away from <code>switch</code>for simple binary conditions; use <code>if</code>/<code>else</code> instead; also, you're missing <code>break</code> after your cases, so *both* your <code>insert</code> calls will happen!!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span> cool, will do!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894140,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah, that's probably reasonable. If you have a <code>remove</code> function, it will call <code>free</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's how to write a safe <code>switch</code>:</p>\n<div class=\"codehilite\"><pre>switch (thing) {\n    case SOMETHING: do_stuff(); break // &lt;--- !\n    case OTHER: do_other(); break;\n    case FOO: // fall through to bar!\n    case BAR:\n        do_foo_or_bar();\n        break;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894184,
            "is_me_message": false,
            "last_edit_timestamp": 1375986748,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c2391d31983698715db52fca31968526?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span>  *thumbs up!*</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doronr@sas.upenn.edu",
            "sender_full_name": "Doron Roberts-Kedes (S'13)",
            "sender_id": 2120,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986760,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fall-through behavior is sometimes useful; see for example <a href=\"https://github.com/mtornwall/juza/blob/master/src/juza/jz_eval.c#L76\" target=\"_blank\" title=\"https://github.com/mtornwall/juza/blob/master/src/juza/jz_eval.c#L76\">https://github.com/mtornwall/juza/blob/master/src/juza/jz_eval.c#L76</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375986800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span> I find fall-through behavior really unreadable when it's mixed in with not fall-through. but i've seen it all the time. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you consider the code linked above unreadable? If so, why do you think so and how would you change it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Basically, will you mini-review 3 lines?;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I dislike fall-through by default. I like that Go made it explicit with a <code>fallthrough</code> keyword.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you think that's unreadable, have a look at Duff's device: <a href=\"http://en.wikipedia.org/wiki/Duff's_device\" target=\"_blank\" title=\"http://en.wikipedia.org/wiki/Duff's_device\">http://en.wikipedia.org/wiki/Duff's_device</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894603,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span> you have all your fallthroughs at the end, that's totally more readable. an example pseudocode of what would be unreadable (IMO): </p>\n<div class=\"codehilite\"><pre>case blah:\n     return &quot;stuff&quot;\ncase blah2:\ncase blah3:\n    return &quot;stuff2&quot;\ncase blah4:\n    print &quot;stuff4&quot;\n    break;\ndefault:\n    print &quot;default&quot;\n    break;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, ok</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"clemmer.alexander@gmail.com\">@Alex Clemmer</span> Haha, wow, brain melt</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>how about </p>\n<div class=\"codehilite\"><pre><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">var</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">SOME_CONST</span> <span class=\"o\">|</span> <span class=\"n\">OTHER_CONST</span><span class=\"p\">))</span>\n    <span class=\"n\">do_stuff</span><span class=\"p\">();</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894641,
            "is_me_message": false,
            "last_edit_timestamp": 1375987612,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wat?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf</span> everyday i discover something else to love about Go. #fangirl</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>edited</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't get it :(</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894765,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I think it's ensuring that both bit flags are set on var.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Assuming the constants are bit flags <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I think it basically checks that those two bit flags are set. Shorter than</p>\n<div class=\"codehilite\"><pre><span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">var</span> <span class=\"o\">&amp;</span> <span class=\"n\">SOME_CONST</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n     <span class=\"p\">(</span><span class=\"n\">var</span> <span class=\"o\">&amp;</span> <span class=\"n\">OTHER_CONST</span><span class=\"p\">))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>That checks if either bit flag is set</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894797,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>context!<br>\n(not my code, this is python)</p>\n<div class=\"codehilite\"><pre>        WHY_NOT =       0x0001, /* No error */\n        WHY_EXCEPTION = 0x0002, /* Exception occurred */\n        WHY_RETURN =    0x0008, /* &#39;return&#39; statement */\n        WHY_BREAK =     0x0010, /* &#39;break&#39; statement */\n        WHY_CONTINUE =  0x0020, /* &#39;continue&#39; statement */\n        WHY_YIELD =     0x0040, /* &#39;yield&#39; operator */\n        WHY_SILENCED =  0x0080  /* Exception silenced by &#39;with&#39; */\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, true <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>urp, yeah </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You need <code>if ((var &amp; (FLAG1|FLAG2|...|FLAGN)) == FLAG1|FLAG2|...|FLAGN)</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894857,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><img alt=\":fireworks:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/fireworks.png\" title=\":fireworks:\"> bit flags! <img alt=\":trophy:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/trophy.png\" title=\":trophy:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894859,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>For those too lazy to click on the link, Duff's device unrolls the following loop:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>in the following way:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">from</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"k\">register</span> <span class=\"kt\">short</span> <span class=\"o\">*</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"p\">;</span>\n<span class=\"k\">register</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">register</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span>: <span class=\"k\">do</span> <span class=\"p\">{</span>    <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">7</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">6</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">5</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">4</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">3</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">2</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span>:         <span class=\"o\">*</span><span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">from</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Completely legal, and completely frightening.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int, null question",
            "submessages": [],
            "timestamp": 1375987905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>julia&gt; bits(2)\n&quot;0000010&quot;\njulia&gt; bits(8)\n&quot;0001000&quot;\njulia&gt; bits(10)\n&quot;0001010&quot;\njulia&gt; bits(20)\n&quot;0010100&quot;\njulia&gt; bits(40)\n&quot;0101000&quot;\njulia&gt; bits(80)\n&quot;1010000&quot;\n~~~~\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>I should have done the matasano crypto challenges in Julia.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> But the numbers in the Python source are hex</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375987986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>0x0010 != 10; 0x0010 = 0b00010000</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha, excellent point <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was like \"hmm, ten is an odd choice\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894959,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> It's easy to get number formats mixed up :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8894962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> Yeah, I agree-- I think a better notation is:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">enum</span> <span class=\"n\">Flags</span> <span class=\"p\">{</span>\n    <span class=\"n\">FOO</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"n\">BAR</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">BAZ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895006,
            "is_me_message": false,
            "last_edit_timestamp": 1375988128,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "website",
            "content": "<p>You guys should add .c after the ~~~ to get syntax highlighting. Just sayin'.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ian@theknown.net\">@Ian Whitlock</span> Barbarian northerner no understand this \"hum bug\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lfranchi@kde.org\">@Leo Franchi</span> someone did, I think</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f0ec11be62f8c5fefb9ffe4497c81bac?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it would have been waaay less painful than clojure. And maybe then i would have finished :P</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895177,
            "is_me_message": false,
            "last_edit_timestamp": 1375988369,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lfranchi@kde.org",
            "sender_full_name": "Leo Franchi (he) (F'12)",
            "sender_id": 806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>sheesh, I found that really hard to reason about (given that why can take on any of the values).  And then the equivalent python is:<br>\n<code>if why in (continue, return):</code><br>\nless efficient, etc., grumble</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> It may help to write down the constants in binary notation and doing the bitwise ops by hand</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>An important thing to keep in mind is that anything that is not 0 is truthy in C</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I had to do </p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mh\">0x1</span><span class=\"p\">,</span> <span class=\"mh\">0x2</span><span class=\"p\">,</span> <span class=\"mh\">0x8</span><span class=\"p\">,</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span> <span class=\"mh\">0x20</span><span class=\"p\">,</span> <span class=\"mh\">0x40</span><span class=\"p\">,</span> <span class=\"mh\">0x80</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>     <span class=\"k\">print</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and then think about <code>and</code> and <code>or</code> for a minute</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>A nice trick for dealing with hex numbers is to break bytes into nibbles and memorize the binary/hex conversion tables for 4 bits</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375988963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can learn to quickly encode/decode even 64-bit literals this way</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375989009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>/4 bits/. <span class=\"user-mention\" data-user-email=\"ertysdl@gmail.com\">@Erty Seidel</span> recommended memorizing the tables for 1 bit last week when i asked him about how to get better at bit math. 4 bits added on my list to write down and keep in my wallet.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 8895894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "&",
            "submessages": [],
            "timestamp": 1375989445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm reading <code>register PyObject **stack_pointer</code> as \"stack_pointer is a pointer to a pointer to a PyObject; note we'll be using it quite a lot\".  Correct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9140149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers & arrays",
            "submessages": [],
            "timestamp": 1376583073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Right.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9140279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers & arrays",
            "submessages": [],
            "timestamp": 1376583359,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>What do the parens around <code>int</code> mean here? </p>\n<div class=\"codehilite\"><pre><span class=\"cp\">#define STACK_LEVEL()     ((int)(stack_pointer - f-&gt;f_valuestack))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145761,
            "is_me_message": false,
            "last_edit_timestamp": 1376593376,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>looks like a cast to int</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically treat whatever is to the right of <code>(int)</code> as an int, in this case <code>(stack_pointer - f-&gt;f_valuestack)</code> regardless of whether its actually a float, char, whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145849,
            "is_me_message": false,
            "last_edit_timestamp": 1376593576,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>f-&gt;f_valuestack and stack_pointer are both pointers to pointers to PyObjects.  So we're taking the difference between those two memory addresses and, what, dividing by four, effectively?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>the <code>p1-p2</code> subexpression produces a <code>ptrdiff_t</code>, which should be some integer type. Not sure why they'd cast that to int in particular.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Some signed integer type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>IIRC pointer to integer casts are literally just \"interpret these bits as an integer\" (no division). I could be wrong though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>And yes, the division by sizeof happens when it does the subtraction -- the cast doesn't affect that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see it the same way James does, but I could also be wrong about that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Careful, on a 64-bit system you'd be dividing by 8, not 4.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9145982,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is basically what Darius said, <a href=\"http://stackoverflow.com/a/3599672/558478\" target=\"_blank\" title=\"http://stackoverflow.com/a/3599672/558478\">http://stackoverflow.com/a/3599672/558478</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Rob and James, you're missing that subtraction like <code>pointer1 - pointer2</code> results in an integer type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nothing wrong with casting an int to an int....I hope, but you're correct I didn't know what type pointer subtraction resulted in.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146106,
            "is_me_message": false,
            "last_edit_timestamp": 1376594080,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376593973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>The idea behind pointer subtraction is that if you have a pointer, say <code>SomeObject *p;</code>, then:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">SomeObject</span> <span class=\"o\">*</span><span class=\"n\">fourth</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"n\">fourth</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">;</span>  <span class=\"cm\">/* yields 3 */</span>\n</pre></div>\n\n\n<p>You can have a pointer into an array and get the index back.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not certain, but I think the standard allows ptrdiff_t to be a larger int type than plain old int, and then you'd lose bits. Not that that happens on any systems that I know about.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> Can you take out the <code>(int)</code> cast, recompile, and exercise the relevant code in some way? What happens?</p>\n<p>From my C experience, I kind of suspect the cast may do nothing in practice but be used to silence a compiler warning.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney</span> this is the Python source, so that's not feasible at the moment - I'd have to cook up a smaller example</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure I understand why it isn't feasible...? What's the hard part? Compiling, or figuring out how to exercise that specific code?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney</span> the hard part is \"exercise the relevant code in some way\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>we're deep in the internals, and I don't have a good enough understanding of what it's doing in the first place and what kind of breaking I might expect</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146455,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, it looks to be in some very core interpreter code. If you ran nontrivial Python programs and they worked right, it would probably mean removing the cast was fine.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376594633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>weird I don't get any errors from this with <code>gcc -pedantic -O3 -Wall -Wextra</code>:</p>\n<div class=\"codehilite\"><pre><span class=\"cp\">#include &lt;stdlib.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">));</span>\n    <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">));</span>\n\n    <span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Odd, I do (though not about the ptrdiff_t \u2192 int conversion):</p>\n<div class=\"codehilite\"><pre>$ gcc -Wextra -Wall -pedantic -o foo foo.c\nfoo.c: In function \u2018main\u2019:\nfoo.c:8:5: warning: ISO C90 forbids mixed declarations and code [-pedantic]\nfoo.c:8:9: warning: unused variable \u2018res\u2019 [-Wunused-variable]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>well i get those errors but like you say they're not related</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>add <code>--std=c99</code> to get rid of one</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe there is a different CPU or compiler or version of gcc that warns about it, or maybe the programmer just put the <code>(int)</code> cast in that Python code out of an abundance of caution and to more clearly document the expression's type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9146942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah haha, \"python coding standard Rule 0: cast for great good.\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9147042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1376595622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"cp\">#define NB_BINOP(nb_methods, slot) \\</span>\n<span class=\"cp\">        (*(binaryfunc*)(&amp; ((char*)nb_methods)[slot]))</span>\n</pre></div>\n\n\n<p>OK, I know we should use the clockwise-spiral rule.  We start with the unknown thing, which is <code>binary_func</code>.  Then I fall down: how do we read <code>binary_func*</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9277266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "clockwise spiral",
            "submessages": [],
            "timestamp": 1376927128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><code>(binary_func*)</code> is a cast to the type: pointer to binary_func</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9277615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "clockwise spiral",
            "submessages": [],
            "timestamp": 1376927675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> I don't think this is actually a case of the clockwise-spiral rule. As Darius says, <code>binaryfunc</code> is a type. I would read this as:</p>\n<ul>\n<li>treating <code>nb_methods</code> as a pointer to/array of char (<code>(char*)</code>),</li>\n<li>take byte number <code>slot</code> (<code>[slot]</code>)</li>\n<li>take its address (<code>&amp;</code>)</li>\n<li>treat that address as a pointer to/array of binaryfunc (<code>(binaryfunc*)</code>)</li>\n<li>dereference the pointer</li>\n</ul>\n<p>So the result is the contents of memory starting <code>slot</code> bytes after the <code>nb_methods</code> pointer, and going on for however many bytes a <code>binaryfunc</code> is. You'd have to look for where <code>binaryfunc</code> is typedef'd to see what that is.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9278449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "clockwise spiral",
            "submessages": [],
            "timestamp": 1376929399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney</span> ah, excellent.  That fits the context.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 9278613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "clockwise spiral",
            "submessages": [],
            "timestamp": 1376929716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>are there any good linters for C? I don't much care exactly what style guidelines are enforced; I would just like to stay consistent</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15115443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389208431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>although K&amp;R would be preferable</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15115501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389208473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> I would consider a linter and a formatter to be different things. For formatting, I prefer AStyle. GNU Indent is another choice. I'm not as familiar with linters. I typically just crank up the warnings that gcc will produce. A tool like Valgrind can do some additional static analysis on things like memory management.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15125833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389223055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I'm using GNU indent and pretty happy with it so far; thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>also i found emacs flycheck supports c out of the box, which is cool</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>What indent style did you settle on? To be honest, I don't think I like any of its defaults.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>K&amp;R but only because my partner on this class project prefers it and I don't really have a strong opinion either way</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/851b10ee6cbae8c616eb32ac8ed3664c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Historically, and for BSDs, the answer is lint! (and they're for pointing out likely bugs and programming mistakes, like Jay points out)</p>\n<p>splint I think is well-regarded for the Linux C programmings!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alex.rudnick@gmail.com",
            "sender_full_name": "Alex Rudnick (he)",
            "sender_id": 2937,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>ahh I see. the python world has confused me on terms; I think because the emphasis on style is so strong that its almost considered as bad as having syntax errors to have style errors :P (and in fact I use one tool to check for both and always just called it a \"linter\", although apparently this is incorrect). What I was looking for was a formatter; flycheck does just fine for linting.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 15127461,
            "is_me_message": false,
            "last_edit_timestamp": 1389225708,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1389225693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"leah_steinberg@brown.edu\">@Leah Steinberg (W'14)</span> <span class=\"user-mention\" data-user-email=\"bhushanlodha@gmail.com\">@Bhushan Lodha (W'14)</span> Let me know if you want to look at writing a parser together, this would be fun! Or the interpreter!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18958597,
            "is_me_message": false,
            "last_edit_timestamp": 1395775694,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "interpreter",
            "submessages": [],
            "timestamp": 1395775427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70e5a7a1d554485e487108988f393ac739212b1b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sure, tomorrow morning?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 18964032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bhushanlodha@gmail.com",
            "sender_full_name": "Bhushan Lodha (W'14)",
            "sender_id": 5022,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "interpreter",
            "submessages": [],
            "timestamp": 1395781015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ffbae1bce3720e05537f5ff9e9b5887d?d=identicon&version=1",
            "client": "website",
            "content": "<p>As can be seen from the above blaggerator, I'm playing with Redis, trying to write data as fast as possible.<br>\nAt some point I remembered reading that ZMQ has lower latency than raw TCP.</p>\n<p>I spent some time today reading more about ZMQ, and it's pretty cool.<br>\nThe latency appears to be due to some clever buffering, but it also does a lot of other cool things.</p>\n<p>A nice Monty Python reference:<br>\n<a href=\"http://zeromq.org/topics:omq-is-just-sockets\" target=\"_blank\" title=\"http://zeromq.org/topics:omq-is-just-sockets\">http://zeromq.org/topics:omq-is-just-sockets</a></p>\n<p>So I started thinking, could I hack Redis and make it listen on a ZMQ socket?<br>\nIt already supports TCP and UNIX domain sockets, but unifying the two event  loops might be tricky.<br>\nI looked at the Redis source, and it's a bit out of my comfort zone, so that means I should do it, right?</p>\n<p>Apart from the latency, it would also allow interesting topologies.<br>\nYou could write a Redis proxy or load balancer in a couple of lines!</p>\n<p>I have two questions. One, am I insane, or is this actually a good idea? Two, anyone interested in remote pairing?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 20602260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pepijndevos@gmail.com",
            "sender_full_name": "Pepijn de Vos (he) (S'12)",
            "sender_id": 906,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Redis + ZMQ",
            "submessages": [],
            "timestamp": 1398362557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> clang now has a tool called clang-format. you create a .clang-format in your project root, or else rely on one of the builtin styles (LLVM, Google, Chromium, Mozilla, WebKit).  then run clang-format -style=file -i \"$@\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24812686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405455820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>happy to answer questions if this interests you!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24812763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405455886,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d4e1d473a995ef37b3e03e9e6006c3e3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I started using clang-format recently and it's great. Now I need the same tool for python :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24812878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "majek04@gmail.com",
            "sender_full_name": "Marek Majkowski (W'13)",
            "sender_id": 824,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405456003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"darius@wry.me\">@Darius Bacon (F'12)</span> on OSX int is 4 bytes while void* and ptrdiff_t are 8 bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24818955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "parens",
            "submessages": [],
            "timestamp": 1405462533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>it's unfortunately that python source can't be unambiguously machine formatted due to the whitespace thing *grumble grumble*</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24838450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405495790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a59c708d63d6e411127984a042dfe273ce90e04?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> couldn't a Python formatter just leave indentation alone (effectively treating indentation like the braces in a non-whitespace-sensitive curly brace lang) and then format everything else? I've never really used formatters so maybe I'm confused about what they're mainly used for, but the parser-noob in me is curious about this, OTOH I have no idea how parsers for langs like this work either</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24848460,
            "is_me_message": false,
            "last_edit_timestamp": 1405518371,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "spacemanaki@gmail.com",
            "sender_full_name": "Aki Yamada (S'13)",
            "sender_id": 2118,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405518327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>it could, but one of the main things I want a formatter to do for me is indent my code properly without me having to think about it. in practice most of them (well, at least the emacs mode) tries to guess what indentation you want. this works ok for small regions of code, but i like being able to mark the whole buffer and whack TAB and have everything formatted properly. if you do that in python mode with a reasonably large file it sometimes  causes the code to be incorrect in my experience</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24887991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405572354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>yup, emacs always clobbers my python when I indent the whole file ^_^</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 24889336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linter?",
            "submessages": [],
            "timestamp": 1405575158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I want to learn a little bit more about assembly. I've been compiling simple C programs to x86 and looking at what the compiled program looks like. Would anyone be up for poking at this with me?  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406144568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>As a next step, I also want to try to put some inline assembly into a C program. If anyone could help me get started with that, that would be awesome.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406144877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dsniezko@sonic.net\">@Dana Sniezko (S'14)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>hm who else..</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204616,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>I was curious so just started reading <a href=\"http://stackoverflow.com/questions/1154937/how-do-i-start-learning-assembly\" target=\"_blank\" title=\"http://stackoverflow.com/questions/1154937/how-do-i-start-learning-assembly\">http://stackoverflow.com/questions/1154937/how-do-i-start-learning-assembly</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>It suggests <code>gcc -S -O0 helloworld.c</code>as a way to get started (just to share, it sounds like <span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> is past this)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>oh and then <code>gcc helloworld.s</code> to run it, but you can edit it first</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> I'd be happy to look at it later!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25204929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"eric.shyong@gmail.com\">@Eric Shyong (S'14)</span> Cool. Thanks! Just let me know when you're free.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9b2076f73b4bfd3b3a0c52570555d054204fccc?x=x&version=1",
            "client": "website",
            "content": "<p>I started with <a href=\"http://www.nongnu.org/avr-libc/user-manual/inline_asm.html\" target=\"_blank\" title=\"http://www.nongnu.org/avr-libc/user-manual/inline_asm.html\">AVR assembly</a>, flipping bits on I/O ports to turn LEDs on and off so I could have some visual feedback. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dsniezko@sonic.net",
            "sender_full_name": "Dana Sniezko (S1'14)",
            "sender_id": 5862,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406145777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9b2076f73b4bfd3b3a0c52570555d054204fccc?x=x&version=1",
            "client": "website",
            "content": "<p>Alex and I implemented a basic <a href=\"https://github.com/danasf/simplepixel/blob/master/simplecolor.ino\" target=\"_blank\" title=\"https://github.com/danasf/simplepixel/blob/master/simplecolor.ino\">Neopixel library</a> . It was fun but I feel like I've had my fill of assembly for a bit :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dsniezko@sonic.net",
            "sender_full_name": "Dana Sniezko (S1'14)",
            "sender_id": 5862,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406146004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>Oh whoa that's cool <a href=\"https://github.com/danasf/simplepixel/blob/master/simplecolor.ino#L136\" target=\"_blank\" title=\"https://github.com/danasf/simplepixel/blob/master/simplecolor.ino#L136\">https://github.com/danasf/simplepixel/blob/master/simplecolor.ino#L136</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406146259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9b2076f73b4bfd3b3a0c52570555d054204fccc?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks! It's a fun challenge. There's lots of (other) well annotated example code if you get stuck. And your reward is colorful LEDS!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205805,
            "is_me_message": false,
            "last_edit_timestamp": 1406146430,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dsniezko@sonic.net",
            "sender_full_name": "Dana Sniezko (S1'14)",
            "sender_id": 5862,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406146374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9b2076f73b4bfd3b3a0c52570555d054204fccc?x=x&version=1",
            "client": "website",
            "content": "<p>and the <a href=\"http://wanderinginny.tumblr.com/post/92458887640/talking-to-neopixels\" target=\"_blank\" title=\"http://wanderinginny.tumblr.com/post/92458887640/talking-to-neopixels\">blog post</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25205875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dsniezko@sonic.net",
            "sender_full_name": "Dana Sniezko (S1'14)",
            "sender_id": 5862,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406146457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I highly recommend reading the relevant parts of 'Computer Systems: A Programmer's Perspective', if there's a copy in the HS library.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25220536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406164455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>everything I know about assembly and below I learned from that book</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25220550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406164510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> Thanks! I'll check it out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25223764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406170458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8c80f39c83329ca6845918f4acccca91?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> I also have a PDF copy if you prefer that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25223774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "eric.shyong@gmail.com",
            "sender_full_name": "Eric Shyong (S1'14)",
            "sender_id": 5884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406170526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"eric.shyong@gmail.com\">@Eric Shyong (S'14)</span> Thanks! I'll check for a hard copy first, but if I can't find one, the pdf would be great.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25223923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Assembly",
            "submessages": [],
            "timestamp": 1406170829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>I have permissions to add people to streams on Zulip (not sure if everyone has this, or just <code>@hackerschool</code> people) so I'm going to do it a bit with people who I know are doing C things.</p>\n<p><span class=\"user-mention\" data-user-email=\"brent.atkinson@gmail.com\">@Brent Atkinson (S'14)</span> <span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> <span class=\"user-mention\" data-user-email=\"westleyargentum@gmail.com\">@Westley Argentum Hennigh (S'14)</span> <span class=\"user-mention\" data-user-email=\"sindhus@gnome.org\">@Sindhu Sundar (S'14)</span> </p>\n<p>Feel free to mute this stream (or unsubscribe) if you're not interested, just adding you because you listed C in your profile. Check out the long list of streams under the gear icon (near the top left corner) to sign up for others!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25241115,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Adding people to this stream",
            "submessages": [],
            "timestamp": 1406208258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>How does one write a Makefile for gcc that takes in *.c and outputs &lt;program_name&gt;.o and &lt;program_name&gt; executable files..one for each program it finds in the current dir?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25422200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C-Makefiles",
            "submessages": [],
            "timestamp": 1406560454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a snippet in a Makefile that does something similar:</p>\n<div class=\"codehilite\"><pre>$(OBJDIR)/%.asm.o: src/%.asm\n    mkdir -p $(OBJDIR)\n    $(NASM) -f elf32 -o $@ $&lt;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25422321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C-Makefiles",
            "submessages": [],
            "timestamp": 1406560606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/80c37b7308df099b8b9ec660146cf3da?d=identicon&version=1",
            "client": "website",
            "content": "<p>from <a href=\"https://github.com/jvns/puddle/blob/master/Makefile\" target=\"_blank\" title=\"https://github.com/jvns/puddle/blob/master/Makefile\">https://github.com/jvns/puddle/blob/master/Makefile</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25422323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julia@jvns.ca",
            "sender_full_name": "Julia Evans (she) (W1'20)",
            "sender_id": 2863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C-Makefiles",
            "submessages": [],
            "timestamp": 1406560612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I wrote a little server and client yesterday, today I refactored the server, now the client doesn't connect anymore -- but telnet can still connect to the server. If anyone is up for helping me find my mistake, I'd be SOOOO grateful.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25480497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Sockets",
            "submessages": [],
            "timestamp": 1406653828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have recommendations for writing tests for C code? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25603141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406846962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>I've used check before but . . . found it pretty obtuse  \u00af\\_(\u30c4)_/\u00af</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25614574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406865887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>im not sure there really is a good testing framework for C :/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25614582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406865900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0fc5778d097c3ce0d085a4e5d2115fdf89a5ce55?x=x&version=1",
            "client": "website",
            "content": "<p>I used \"unity\", the test framework recommended in \"Test-Driven Development for Embedded C\", which should be in the HS library.  It's not super sophisticated, but it's very simple and compiles easily for strange architectures, which was a big must for me.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25629439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mindy.preston@yomimono.org",
            "sender_full_name": "Mindy Preston (she) (F2'19)",
            "sender_id": 4994,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406899773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0fc5778d097c3ce0d085a4e5d2115fdf89a5ce55?x=x&version=1",
            "client": "website",
            "content": "<p>It also has some more sophisticated cousins which I can't vouch for.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25629450,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mindy.preston@yomimono.org",
            "sender_full_name": "Mindy Preston (she) (F2'19)",
            "sender_id": 4994,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406899798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Great, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25631321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406903063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I'm (trying to) write a multi-threaded FTP-server. Can anyone help me understand how my main thread should respond when other threads exit? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25641926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Threading",
            "submessages": [],
            "timestamp": 1406917180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"punchagan@muse-amuse.in\">@Puneeth Chaganti (S'14)</span> I use MinUnit for personal projects because it's super light-weight, the original implementation is three lines of code.<br>\n- original: <a href=\"http://www.jera.com/techinfo/jtns/jtn002.html\" target=\"_blank\" title=\"http://www.jera.com/techinfo/jtns/jtn002.html\">http://www.jera.com/techinfo/jtns/jtn002.html</a><br>\n- improved: <a href=\"https://github.com/siu/minunit\" target=\"_blank\" title=\"https://github.com/siu/minunit\">https://github.com/siu/minunit</a><br>\n<span class=\"user-mention\" data-user-email=\"mindy.preston@yomimono.org\">@Mindy Preston (W'14)</span> Do you have a link to Entity? I can't seem to find it on the wiki (assuming that's what you meant by library). Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25657207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406936509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"robert.buonpastore@gmail.com\">@Robert Buonpastore (S'13)</span> I think <span class=\"user-mention\" data-user-email=\"mindy.preston@yomimono.org\">@Mindy Preston (W'14)</span> said <a href=\"https://github.com/ThrowTheSwitch/Unity/\" target=\"_blank\" title=\"https://github.com/ThrowTheSwitch/Unity/\">Unity</a> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25657269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406936587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aa92b21f4a06f87dae635ed43f9595f5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oops, I used to be able to read. Thanks</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25657528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert.buonpastore@gmail.com",
            "sender_full_name": "Robert Buonpastore (S'13)",
            "sender_id": 2126,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406937121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the MinUnit recommendation!  It seems perfect for personal projects! </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25657637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tests",
            "submessages": [],
            "timestamp": 1406937294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Anyone want to help me figure out why my FTP server refuses to understand my computer's built-in FTP client? I think it has to do with string encoding (?).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25774895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "weird encoding stuff",
            "submessages": [],
            "timestamp": 1407186582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>So... I just broke my whole program. I think the problem is with a function pointer overwriting other variables or something. If anyone has a minute to look at my code with me, I'd really appreciate it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26096559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407772496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> I was just reading pointers to functions from zed shaw's learn c the hard way, can i take a look ? or did you figure it out?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26108848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407787797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sindhus@gnome.org\">@Sindhu Sundar (S'14)</span>  Yeah I eventually figured it out. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26108916,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407787860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> how did you fix it? if you committed the code, can I see it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26108931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407787889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The problem wasn't actually the function pointer -- it was another piece of memory that the function pointer was overwriting sometimes... I think.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26109285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407788310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>cool!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 26112721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1407793107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I took a break from my other project to work on a Game of Life simulator (which will eventually record statistics, but I'm starting with the basics). After much wailing and gnashing of bits, I finally got it to simulate a couple steps... on a 2x2 world. (It's actually 4x4 but only the inner 2x2 cells change, though the outer ring can affect the inner section.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27180314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Game of life",
            "submessages": [],
            "timestamp": 1409781322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not much of an accomplishment, but it's always satisfying to watch life move! (Even if it has a period of 3 ticks.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27180338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Game of life",
            "submessages": [],
            "timestamp": 1409781354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Next step: make it a torus, build a glider, and make sure the glider glides</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27180396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Game of life",
            "submessages": [],
            "timestamp": 1409781422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Curious what people use for C dev work.  I've mostly used Vim for this but I'd like to learn the language much more comprehensively and I'm wondering if that merits the switch to an IDE, and if so, which one do people like?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410120980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I use Vim. I hate IDEs for most languages other than Smalltalk; I'm yet to see one for C that I can stand.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>In practice, most C people I know use vim.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not a great option, but most of the alternatives are worse. :/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lol, alright, I've been happy with Vim thusfar but I didn't know if there was some IntelliJ style all-knowing program that would make my life easier when it comes to larger programs. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nope; in Java, an IDE is the least-bad tradeoff. In C, it's not. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>There are various things like ctags, etc, that a lot of people use; I honestly haven't really bothered.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>But if you care about particular IDE features, there's probably a way to get a fair number of them in vim.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>For the time being not really</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Whether it's worth the bother depends on how much you care about the feature; in practice, a fairly vanilla vim + grep got me through 3 months of Libav work.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, yeah, that should be entirely suitable for what I'm doing, and I default to using the CL a lot anyway if I need to solve something</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Now I need to get my vimrc to play nice with other languages, the Ruby 2-space tabs seem to pop up everywhere despite my best efforts to <code>autocmd</code> them out</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Makes sense. Similarly, the canonical build systems are Makefiles, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aye, I always google for stuff like that - trailing whitespace is another thing to watch out for, as is the tab convention of whatever project you're on.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a606e9bf03e17f889b759d952465d3f9?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "rmcase@gmail.com",
            "sender_full_name": "Ryan Case (S1'14)",
            "sender_id": 5881,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>No problem. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 27355397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Editor",
            "submessages": [],
            "timestamp": 1410121671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Does anyone know of good resources for learning gdb?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411586809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"scdgrapefruit@gmail.com\">@Sophia Davis (S'14)</span> have you seen <a href=\"https://www.hackerschool.com/blog/5-learning-c-with-gdb\" target=\"_blank\" title=\"https://www.hackerschool.com/blog/5-learning-c-with-gdb\">Alan's blog post</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411587174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>awesome! Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28179876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411587209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>O'Reilly published books on gdb, you may be able to find PDF's of those.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28185353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411594009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, working through the Hacking: Art of exploitation book taught me and <span class=\"user-mention\" data-user-email=\"stephaniecmu@gmail.com\">@Stephanie Losi (S'14)</span> a bunch about using gdb. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28201175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411622064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70e5a7a1d554485e487108988f393ac739212b1b?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>First couple of chapters of Hacking: Art of exploitation is good introduction to gdb, there are few copies in library</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28201210,
            "is_me_message": false,
            "last_edit_timestamp": 1411622179,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bhushanlodha@gmail.com",
            "sender_full_name": "Bhushan Lodha (W'14)",
            "sender_id": 5022,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "GDB",
            "submessages": [],
            "timestamp": 1411622164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed4677a9be5f7584797c62e0151414d1?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I just want to confirm that I can ignore the \"HEAP SUMMARY\". As long as I see all 0's in the \"LEAK SUMMARY\" (and no errors), my program doesn't have any memory leaks. Is that true?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28279350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scdgrapefruit@gmail.com",
            "sender_full_name": "Sophia Davis (S2'14)",
            "sender_id": 6172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind on a mac",
            "submessages": [],
            "timestamp": 1411754753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a function that takes a <code>struct</code> but all I have to work with is a <code>const struct</code>, which the compiler doesn't like. I don't think I want to cast it because then I'd be killing the constiness. Is this what <code>memcpy</code> is for?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28410402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1412022070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I think it'd be OK to cast it, in fact.  I believe a copy of the struct is passed in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28410724,
            "is_me_message": false,
            "last_edit_timestamp": 1412022406,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1412022394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, thanks <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28410736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1412022418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f1c30b34843592830dd7a04fc742e43?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>gcc linker is telling me that I'm defining some functions and variables multiple times. Anyone wanna help me figure it out?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28820713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tjarjour@iupui.edu",
            "sender_full_name": "Tyler Jarjoura (F2'14)",
            "sender_id": 6699,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error: multiple definitions",
            "submessages": [],
            "timestamp": 1412784649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could help. Where are you?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28820799,
            "is_me_message": false,
            "last_edit_timestamp": 1412784773,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error: multiple definitions",
            "submessages": [],
            "timestamp": 1412784765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f1c30b34843592830dd7a04fc742e43?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>in front of lovelack with the bose headphones</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28820808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tjarjour@iupui.edu",
            "sender_full_name": "Tyler Jarjoura (F2'14)",
            "sender_id": 6699,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error: multiple definitions",
            "submessages": [],
            "timestamp": 1412784784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5f1c30b34843592830dd7a04fc742e43?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>lovelace*</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28820813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tjarjour@iupui.edu",
            "sender_full_name": "Tyler Jarjoura (F2'14)",
            "sender_id": 6699,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error: multiple definitions",
            "submessages": [],
            "timestamp": 1412784790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffblagdon@gmail.com\">@Jeff Blagdon (F'13)</span> , <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> i believe this is undefined behavior, which for practical purposes means it will seem to work and then one day you will find that your compiler is making crazy assumptions in -O3 only and you will have bugs. this happened to me two months ago, and it was funny because there were comments in the code that said \"TODO: const correctness?\" from nine months ago. my recommendation is don't cast unless you are absolutely positive it is well-defined (mutable -&gt; const is not); in my most recent projects i actually define a cast(type, val) macro so that i can do a global search and audit them.<br>\njeff, as a general strategy i recommend a) trying to reformulate your function signatures so that the const types propagate correctly, or if that fails b) using malloc and memcpy to create a non-const copy (which you must then free). in my case, i found that i had defined a string type (len, const ptr) and a bunch of functions for it; i had one use case where the string was meant to be mutabel. i finally recognized that either the ptr field was a const type or not, and i couldn't have it both ways. my solution was to leave it const, and then in my one case where i needed to mutate string contents, just not use the type and use raw pointers; the alternate was abandon constness, and to take every const input string (all literals, all argv values) and copy them up front.<br>\nanyway, hope that helps!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28961837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413040799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'd argue that casting is actually fine in Jeff's case ? Or did I misunderstand your point?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28965688,
            "is_me_message": false,
            "last_edit_timestamp": 1413050023,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413049879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I agree with <span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span>. If changing the function signatures isn't an option (e.g. you're gluing two pieces of code you don't control together), then I think it's safest to make a copy.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28965970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413050571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>mmh, do you guys actually mean that this is bad ?</p>\n<div class=\"codehilite\"><pre>const int i =10;\n\nint plus (int a, int b)\n{\nreturn( a+b);\n}\nint test_plus (int x)\n{\n return plus(x, i);\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966072,
            "is_me_message": false,
            "last_edit_timestamp": 1413050851,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413050821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>-Wall doesn't seem to complain about it :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413050991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>That example will pass the integers by value. The original will not be mutated.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413050994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>-Wall also likes this :</p>\n<div class=\"codehilite\"><pre>struct Foo\n{\n  int x;\n  int y;\n};\n\nconst struct Foo f = {2, 5};\n\nint plus (int a, struct Foo b)\n{\nreturn( a+ b.x + b.y);\n}\nint test_plus (int x)\n{\n return plus(x, f);\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>That too will pass by value. <code>const</code> is usually used with pointers. Change <code>plus</code> to take a pointer to a <code>struct Foo</code> and that is probably closer to the scenario that Jeff has.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966302,
            "is_me_message": false,
            "last_edit_timestamp": 1413053461,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I would expect this to have some compilation problems.</p>\n<div class=\"codehilite\"><pre>struct Foo\n{\n  int x;\n  int y;\n};\n\nconst struct Foo f = {2, 5};\n\nint plus (int a, struct Foo *b)\n{\nreturn( a+ b-&gt;x + b-&gt;y);\n}\nint test_plus (int x)\n{\n return plus(x, &amp;f);\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Jeff didn't ask about pointers ..</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>It's implied. <code>const</code> doesn't really seem useful in a function signature if there isn't a pointer involved.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Agree with Jay and co about the const thing. Also, I think that assuming that undefined behavior will be ok because <code>-Wall</code> doesn't complain is dangerous and will eventually cause problems.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28966471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413051812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Are we sure it is actually undefined behavior to pass a const by value?  There's an implied memcpy, which doesn't care if the source is const.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28970485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413061360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I believe the thing that's undefined is taking a pointer to a const struct and then casting away the const-ness. I'm actually not clear on what was meant by the original question, and people seem to have different interpretations.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28971182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413063210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>I don't think that's undefined at the language level: you are giving out explicit permission to modify something you previously promised would not be modified.  Casting <code>const *T</code> to <code>*T</code> is almost always horribly wrong and dangerous, the few exceptions being cases being indications that the code you're working with is a mess.  At the very least, such a cast requires unmissable documentation.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28976576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413075770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://c0x.coding-guidelines.com/6.7.3.html\" target=\"_blank\" title=\"http://c0x.coding-guidelines.com/6.7.3.html\">This is from the the c0x, and I believe c99 says the same thing</a>: If an attempt is made to modify an object defined with a const-qualified type through use of an lvalue with non-const-qualified type, the behavior is undefined.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28989635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413103588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span>  I was curious what would actually happen if I did this, so <a href=\"https://github.com/danluu/dump/tree/master/const-non-const\" target=\"_blank\" title=\"https://github.com/danluu/dump/tree/master/const-non-const\">here's a simple example</a>.</p>\n<div class=\"codehilite\"><pre>#include &lt;stdio.h&gt;\nvoid wat(int* mutable) {\n  *mutable += 1;\n}\nvoid wat2(int* mutable) {\n  *mutable = 100;\n}\nint main() {\n  const int immutable = 10;\n  printf(&quot;%i\\n&quot;, immutable);\n  wat((int*) &amp;immutable);\n  printf(&quot;%i\\n&quot;, immutable);\n  wat2((int*) &amp;immutable);\n  printf(&quot;%i\\n&quot;, immutable);\nreturn 0;\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre>$ gcc -Wall -Wextra deconst.c\n$ ./a.out\n10\n11\n100\n</pre></div>\n\n\n<div class=\"codehilite\"><pre>$ clang -Wall -Wextra deconst.c\n$ ./a.out\n10\n10\n10\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28998194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413127400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>That's not unexpected. You're allowed to cast, it's just (usually) bad coding to do so, and the behavior if you do is perfectly well defined. Something like lint, which is paid to express opinions, probably does complain. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28998879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413129287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If it's not undefined/implementation defined then there's a bug in at least one of (gcc, clang), since they behave differently, but from the c99 and c0x specs it seems like it really is undefined.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28999313,
            "is_me_message": false,
            "last_edit_timestamp": 1413130428,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413130408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks for the demo <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span>. It's a little disappointing that neither gcc nor clang made a peep about the potential doom.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29002183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413138003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>You will get  the warning if you <strong>don't</strong> do the cast.  The purpose of the cast is to suppress the warning.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29012240,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413162532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Ahh, <span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span>, <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> , I see what's happening here.  The part that's undefined is the treatment of <strong>const literals on the stack</strong>.  The compiler is allowed to put them anywhere, including regions that can't be modified and regions where modification will cause a segfault.<br>\nI verified that if you</p>\n<div class=\"codehilite\"><pre>  const int *j = malloc(sizeof(int));\n  memcpy((int*)j,&amp;immutable,sizeof(int));\n</pre></div>\n\n\n<p>and then pass <code>j</code> to the <code>wat</code>s, both clang and gcc behave identically, generating warnings if the cast is left off and in all cases modifying the value of <code>*j</code>.</p>\n<p>Getting back to <span class=\"user-mention\" data-user-email=\"jeffblagdon@gmail.com\">@Jeff Blagdon (F'13)</span>'s original question, if you \"find yourself \"having only a <code>const struct</code> to work with, it really has to be a pointer to the struct, as returned by some other function (rather than a const literal struct you built on the stack in your own code but forgot about)  and, as such, it will be a pointer into the heap.  In this case, the behavior is neither officially nor actually undefined.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29013470,
            "is_me_message": false,
            "last_edit_timestamp": 1413165183,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413165081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Still disagree. The C standard (quoted above) seems pretty straightforward, unless I'm misreading it. The C++ standard says</p>\n<div class=\"codehilite\"><pre>Except that any class member declared mutable (7.1.1) can be modified, any attempt to modify a const object during its lifetime (3.8) results in undefined behavior\n</pre></div>\n\n\n<p>3.8 is used to indicate that it's not undefined to modify a const object in its constructor or destructor, but that it's otherwise undefined.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29013972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413166074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>That something works with some particular version of two compilers doesn't make it not undefined. It's just an undefined thing that happens to work the same way in two instances.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29014019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413166107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>\"I believe the thing that's undefined is taking a pointer to a const struct and then casting away the const-ness. I'm actually not clear on what was meant by the original question, and people seem to have different interpretations.\"</p>\n</blockquote>\n<p>Dan's right, that's exactly what I'm asking about. Good to know that the behavior is undefined, guess I need to go back and make a copy. George, thanks a lot for the pointers.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29015936,
            "is_me_message": false,
            "last_edit_timestamp": 1413167478,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413166926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>I can't argue with what the standard says or assert that I've proved anything. But, I can say that I have seen thousands of consts in dozens of compilers cast away in my life, and never once observed mysterious behavior on the part of the compiler. </p>\n<p>The reason that deconsting is not, in practice, mysterious is that examples where the compiler sees both the declaration and the cast are contrived. If you have a struct pointer returner from another procedure, it cannot possibly point into the stack. What it points to is a block of memory originally returned as non-const by malloc, with the const label added after the fact. If you subsequently remove the const, it's still pointing to the same place. </p>\n<p>It remains true that casting away const is at best ugly and often dangerous, because there are tremendous amounts of <br>\non mysterious mysterious and undefined behavior created by programs and libraries when one part of the code assumes that another part has lied.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29019712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413171029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Also, and important for Jeff: copying the structure is only safe if you are certain that the struct itself contains no pointers. </p>\n<p>(Apologies for typos and unlinked names. I'm on the mobile client.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29019774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413171198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm willing to believe that this actually works in practice on all current compilers, but I believe one reason that modifying a const thing is undefined is so that compilers can optimize out const accesses with constant propagation plus other magic. It's possible that malloc'ing something makes that optimization currently (and perhaps permanently) impractical, but I'm risk averse enough about these kinds of bugs that I wouldn't bet on it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29020185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413172199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Poking around the disassembly of the code I posted above, clang literally makes the <code>wat</code> function calls NOPs. I'll have to try your version, but I don't see any reason, in principle, that the same optimization shouldn't apply. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29020233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413172285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "ZulipiOS",
            "content": "<p>Yeah, I saw the NOP too. I also managed to create a few examples where the clang code core dumps. </p>\n<p>No matter how risk averse you are, there are still times when you have no choice. There's still old X11 code in service, as well as pre-rvalue constructors that cast for performance. Even if you don't interface with such code, the fact that it still exists and isn't allowed to break means that, for the next few decades, compiler writers have no choice either. </p>\n<p>If all the code in question is your own, I completely agree with you. Never, ever cast away const. If it's not all yours, then what exactly it does do is a far greater source of uncertainty than how the compiler behaves in nominally undefined situations. Eg. you could dutifully deep-copy the whole struct, only to discover that there are addresses buried in byte arrays, or some home brewed  gc that counts on addresses not changing. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29041607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413201265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>just caught up on this thread... i saw this post a while ago that illustrates just  how far modern compilers take \"undefined behavior.\": <a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx\" target=\"_blank\" title=\"http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx\">http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx</a><br>\n<span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> regarding old code, i would not be so sure that compilers will opt on the safe side; my general impression of how clang treats this is if you go above -O1 you better be following the standard to the third decimal place. my most recent experience was casting away the const on main's argv strings; i wasn't mutating them,  just taking slices of them with a struct declared as { int len; char* ptr; }. the omission of the const on the char* struct declaration led to stack corruption somewhere; it seemed ridiculous but when i fixed the struct declaration it stopped crashing. this only appeared in my optimized  build, using -fstrict-aliasing and -Ofast.<br>\ni've never quite understood the rationale for letting the compiler make assumptions in the presence of undefined behavior; it seems to me that it should just raise an error rather than make ludicrous assumptions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29106785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413313839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>The trouble is that it's hard to see which assumptions are \"ludicrous\" and which are not, especially after the code has already been through a large number of optimization passes. <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\" target=\"_blank\" title=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\">http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html</a> has a good overview of this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29106907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413314043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes you are right; what i really mean by ludicrous is that if (char*)argv[0] is going to cause stack smashing then why doesn't the frontend immediately error? put another way, when is casting away constness well-defined?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29107109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413314320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>(on clang -std=c11, for the sake of argument)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29107120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413314352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> The distinction may seem academic, but I'd bet that the <code>argv</code> issue is in the same class as string literals: the compiler is allowed to put arguments anywhere it damn well pleases, and I'd bet further that somewhere down the line the string was being (perhaps pointlessly) modified, e.g. via <code>strtok</code>.</p>\n<p>The reason I'm so sure about this is that C is required to interoperate with any language that uses the same call stack conventions, and the call stack conventions are oblivious of const.   You can't make it impossible to call Fortran or assembler routines, even though the C translations of their function signatures contain only non-const pointers.  It's extremely common to write C header files that provide properly const-ed signatures for externs that are simply the code address of a function in an object compiled from Fortran or C.  The function doesn't what language it will be called from, and the caller doesn't know what language the function is written in.   This interoperability is absolutely fundamental, and not merely a matter of happy convention.</p>\n<p>Still, the right to cast away const comes with many caveats.  First, it counts on the non-const function being so only due to accidental omission or to shortcomings of the language; if the function really does modify memory, then you expect all hell to break loose.  Second, it doesn't work when a single compiler invocation has access to both caller and function source, as would be the case if both were in the same file, or if there were some fancy IPO.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29110174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413318360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> Thanks for the insight, I want to understand this, and it's not academic to me, having spent a day chasing the crash.<br>\nI think the point about calling conventions is interesting; I didn't realize that const qualification is not expressed there. However my case has only static functions in a single compilation unit, and the resulting -Ofast ll code is full of <code>internal fastcc</code> declarations, <code>tail call</code>, etc. so the standard calling convention is long gone. Moreover, I am pushing the compiler even more aggressively with -fstrict-aliasing, which as far as I understand tells the compiler to make aggressive assumptions that pointers of different types cannot alias each other. I believe that constness counts as 'different', suggesting that the whole-program alias analysis could change dramatically with a single cast. <br>\nIn my case, the bug was certainly not a simple case of my writing into read-only memory. The symptoms were unpredictable crashes in parsing code, which does not modify the source string at all;  my 'fix', consisted of:<br>\n\u2022\u00a0*adding* const qualification here: <code>typedef { int len; const char* ptr} Str; // string slice type</code><br>\n\u2022 *removing* old casts previously required to reference argv values in Str instances; <br>\n\u2022\u00a0changing the one, independent use case where I was using Str as a buffer to accumulate chars to not use the Str type at all.<br>\nMy theory was that my casts of argv were causing a UB-related problem; after the patch the crashes went away. However it's entirely possible that there was some other corruption that went back into hiding because I shifted things around, or perhaps a bug in the code for that one \"Str as an accumulation buffer\" case (but I just read it again!). Lastly, although I hesitate to shift blame, I cannot reproduce the error prior to that commit any more, and so having upgraded from clang 3.4.x to 3.5 it might have been a compiler bug. </p>\n<p>In the end, I'm still not satisfied: I really want to know in what cases it is safe to cast away const, given:<br>\n\u2022\u00a0single compilation unit<br>\n\u2022\u00a0strict aliasing</p>\n<p>Maybe I'll post this on stack overflow today...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29142615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413381924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> It sounds like you're in exactly the situation where it's not safe to cast away const, the chief issue being the single compilation unit.  I believe it is safe to cast when:<br>\n1. The only thing that's done with the casted pointer is including it in the argument list of an opaque external function, about which the compiler knows nothing but the signature<br>\n2. The external function indeed doesn't modify the memory.<br>\n3. The external function expects the alignment/aliasing  that you're using.<br>\n(The last is a more general requirement for calling anything, irrespective of cast.)<br>\nFortunately, these restrictions correspond well to the situation where you need to cast, namely that you need to interoperate with a library that, for one reason or another, doesn't implement const hygiene.  If you have complete control over all the source, then there's both no need to lie and no reason to expect that the lie will be harmless. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29143472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413383192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> thanks, that makes a lot lot of sense. so then my question is, why can't clang figure this out and warn me that the cast is going to be a disaster?<br>\none last question: what about when an external function returns a char* that you know is actually const?</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">strchr</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"sc\">&#39;x&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// declared to take const char*, returns char*</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">p</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>it seems like we should add the const back on because we know that p points into read-only memory. it seems like -fstrict-aliasing would have to respect this case, or else strchr would be practically useless, but at this point i'm not making any assumptions!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29152376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413393608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Think of casts as the way you tell the C to shut up and do what it's told.  Clang doesn't warn you, because you instructed it not to.  The following will compile without error or warning:</p>\n<div class=\"codehilite\"><pre>  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span> <span class=\"n\">exp</span><span class=\"p\">;</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%f</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">double</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"kt\">double</span><span class=\"p\">))</span> <span class=\"n\">a</span><span class=\"p\">)(</span><span class=\"mf\">2.0</span><span class=\"p\">));</span>\n  <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">memcpy</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%f</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">double</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"kt\">double</span><span class=\"p\">))</span> <span class=\"n\">a</span><span class=\"p\">)(</span><span class=\"mf\">2.0</span><span class=\"p\">));</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29153812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413395211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span>  ^^ vv<br>\nAnd: casting const onto a returned non-const pointer returned from an external function should be fine.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29155302,
            "is_me_message": false,
            "last_edit_timestamp": 1413396857,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413396838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks peter!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29155491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413396988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"george.w.king@gmail.com\">@George King (S'14)</span> What are you doing, by the way?  It sounds interesting!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29210784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413483612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"pnf@podsnap.com\">@Peter Fraenkel (S'13)</span> working on this bootstrapping interpreter called ploy... <a href=\"http://github.com/gwk/ploy\" target=\"_blank\" title=\"http://github.com/gwk/ploy\">github.com/gwk/ploy</a>. recently i've been feeling simultaneously elated that i can finally write some code in ploy, and also slightly repulsed by what it actually looks like. progress?! there is a zulip ploy channel where i talk to myself sometimes; please join the conversation :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29254441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Going from const struct to struct",
            "submessages": [],
            "timestamp": 1413559034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I want to learn C (hha), and I prefer to learn by writing code. I'm currently going through <a href=\"http://c.learncodethehardway.org/book/\" target=\"_blank\" title=\"http://c.learncodethehardway.org/book/\">http://c.learncodethehardway.org/book/</a>, but it has some... idiosyncrasies I don't quite enjoy. I'd appreciate any suggestions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29486112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1413998087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>my understanding is that reading <a href=\"https://en.wikipedia.org/wiki/The_C_Programming_Language\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/The_C_Programming_Language\">K&amp;R</a> is the canonical way. I've never read it so I can't speak to it personally but a lot of people say it's great.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29486626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1413998744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>Seconded. After learning Scheme from SICP, do you really want to lower the bar by going with something other than K&amp;R for C? :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29487524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1413999819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p><img alt=\":laughing:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/laughing.png\" title=\":laughing:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29487750,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414000051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lohmataja@gmail.com\">@Liuda Nikolaeva (S'14)</span> K&amp;R, or <a href=\"http://www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441\" target=\"_blank\" title=\"http://www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441\">Hacking</a> - more unixy stuff in the latter but I think it's more fun</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29489383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414001943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you go with Hacking, I recommend working through it, not just reading it - it comes with a compromised VM you can exploit <img alt=\":smile_cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29489399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414001972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "website",
            "content": "<p>interesting. I remember this book mentioned re Jessica's talk, but I would never think about it as \"a book for learning C\". :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29489549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414002137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/72d03dbb9ec7ac92767a0db7ac17250842ba370b?x=x&version=1",
            "client": "website",
            "content": "<p>I think stephanie worked through 'hacking' to learn C, and she only had good things to say about the book.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29490212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "samer@samertm.com",
            "sender_full_name": "Samer Masterson (S1'14)",
            "sender_id": 5874,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414002889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492176,
            "is_me_message": false,
            "last_edit_timestamp": 1414005174,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>I did learncthehardway during my batch, if anyone would like to go over the exercises again, i'd love to! it's super messy the way I did them (i named the files hapazardly) But here are the exercise solutions <a href=\"https://github.com/sindhus/learncthehardway/tree/master/c_shaw\" target=\"_blank\" title=\"https://github.com/sindhus/learncthehardway/tree/master/c_shaw\">https://github.com/sindhus/learncthehardway/tree/master/c_shaw</a> and now i am going over K &amp; R's book for the fun, I am a part of a awesome study group too <a href=\"https://community.hackerschool.com/t/study-groups-outside-hs/296\" target=\"_blank\" title=\"https://community.hackerschool.com/t/study-groups-outside-hs/296\">https://community.hackerschool.com/t/study-groups-outside-hs/296</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stephaniecmu@gmail.com\">@Stephanie Losi (S'14)</span> worked through Hacking - The Art of Exploitation book which is awesome too!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Nice, thanks for sharing. How did you like learncthehardway? I thought it starts kind of slow and not super-exciting. Does it get better later?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>To me it seemed verbose..some chapters like the one about C Pre Processors I didn't understand at all from his writings, I had to look it up from the Internet, the page on gnugcc website is more clear. I have done till Chapter 21, it's OK.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>Chapter 22 onwards looks exciting</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p>I kept some notes when i was learning each chapter from zed's book, here's the one about C's pre processors <a href=\"https://github.com/sindhus/shortlog/blob/master/hs_s1_2014/code_programming_log/cpp_macros.md\" target=\"_blank\" title=\"https://github.com/sindhus/shortlog/blob/master/hs_s1_2014/code_programming_log/cpp_macros.md\">https://github.com/sindhus/shortlog/blob/master/hs_s1_2014/code_programming_log/cpp_macros.md</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29492992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414005943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<blockquote>\n<p>Zed's explanation can be too full of themselves with exaggeration</p>\n</blockquote>\n<p>Well-said! <img alt=\":laughing:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/laughing.png\" title=\":laughing:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29493087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414006067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p><img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29493147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414006111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c35ca5c26afe5ce2b62e0d25c9af7c50a096323c?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Some of us are working our way through these exercises to build a <a href=\"http://facultyweb.cs.wwu.edu/~phil/classes/f14/352/\" target=\"_blank\" title=\"http://facultyweb.cs.wwu.edu/~phil/classes/f14/352/\">shell</a>.<br>\nOnce you get some facility with the language, I think it might be worthwhile to try at least some of these assignments.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29494159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joppeschwartz@gmail.com",
            "sender_full_name": "Joe Schwartz (F1'14)",
            "sender_id": 6418,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414007299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a3db14a3fb09af8d319d5b4e36c258f4626befb5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"joppeschwartz@gmail.com\">@Joe Schwartz (F1'14)</span> <span class=\"user-mention\" data-user-email=\"eric.shyong@gmail.com\">@Eric Shyong (S'14)</span> had suggested me this course <a href=\"http://sipb.mit.edu/iap/6.828/lab/shell/\" target=\"_blank\" title=\"http://sipb.mit.edu/iap/6.828/lab/shell/\">sipb.mit.edu/iap/6.828/lab/shell/</a> when I started out</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29495528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sindhus@live.in",
            "sender_full_name": "Sindhu Sundar (she) (S2'14)",
            "sender_id": 6183,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414008598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lohmataja@gmail.com\">@Liuda Nikolaeva (S'14)</span> What do you want to learn about C? Enough to write, say, a shell, read people's code, spot common mistakes, etc? The suggestions so far seem pretty sane, but your goals could add some flavor to side stuff. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29505540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414020836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Yeah, something like that (mainly I'm just trying to distract myself from job search). I learn best when I have a task (like, implement a shell tool), and use the book to find things that are relevant to the task at hand. Reading trhough 200 pages doesn't really do it for me.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29507993,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414024668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7b38a0745ab079cc09b97aa68d03607b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I went through parts of the Hacking book along with <span class=\"user-mention\" data-user-email=\"stephaniecmu@gmail.com\">@Stephanie Losi (S'14)</span> and it is definitely a great resource.  Knowing that you enjoyed playing around with byte-code for optimizing recursion, I think you'll enjoy this book.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29542611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "punchagan@muse-amuse.in",
            "sender_full_name": "Puneeth Chaganti (he) (S1'14)",
            "sender_id": 5868,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414085037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I started reading it last night, and I like it. I think I like it because intro to C is treated as a side thing, so you are assumed to already understand programming, and not need a 10-page intro to what an integer is etc.. So it's really good pace-wise.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29543427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414085920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I am kind of glad I asked this question on zulip! Yay <img alt=\":hackerschool:\" class=\"emoji\" src=\"https://external-content.zulipcdn.net/1fd50dd9cd66190492ee5c1f3c82b49a5f6fdf45/687474703a2f2f7765622e6d69742e6564752f6a657373746573732f7777772f7265616c6d656d6f6a692f6861636b65727363686f6f6c2e706e67\" title=\":hackerschool:\"> !</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29543439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414085958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"lohmataja@gmail.com\">@Liuda Nikolaeva (S'14)</span> I really liked the book.  Make sure you don't skip anything if you're following along - if I recall correctly, there are some places where he sets the permissions needed to do a thing and then actually does the thing several pages later.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29544730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414087397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>ping me if you get stuck, my copy is all marked up :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29544733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414087407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c18f60acffcf8b205f8c940d50e4859d?d=identicon&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"allison@hackerschool.com\">@Allison Kaptur</span> Thanks for the heads up, and for the offer - I may take you up on that!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29546252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lohmataja@gmail.com",
            "sender_full_name": "Liuda Nikolaeva (SP1'18)",
            "sender_id": 6168,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "fast \"hands-on\" way to learn c",
            "submessages": [],
            "timestamp": 1414089015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Write another program using fork(). The child process should<br>\nprint \u201chello\u201d; the parent process should print \u201cgoodbye\u201d. You should<br>\ntry to ensure that the child process always prints first; can you do<br>\nthis without calling wait() in the parent?</p>\n<p>Apart from calling sleep or using overkill synchronization mechanisms such as locks,  any sees another option ?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29549678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS: Three Easy Steps",
            "submessages": [],
            "timestamp": 1414092889,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>pipe()</code> would be a good option, I think</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29549844,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS: Three Easy Steps",
            "submessages": [],
            "timestamp": 1414093132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>(open the pipe in the parent before forking, then have the child write on the pipe once it's done printing, and let the parent block on a <code>read()</code> on the pipe)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29549930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS: Three Easy Steps",
            "submessages": [],
            "timestamp": 1414093241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>you mean having the parent process block on pipe() and wait for his child to print \"hello\" and then use the pipe to signal he's fnished ?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29549936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS: Three Easy Steps",
            "submessages": [],
            "timestamp": 1414093251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05737f7353d71ece81912e75bd95cf17?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29549946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adrien.guillo@gmail.com",
            "sender_full_name": "Adrien Guillo (S1'17)",
            "sender_id": 6676,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS: Three Easy Steps",
            "submessages": [],
            "timestamp": 1414093264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1380ded36dafac0d6f808b9b7b6c4e85266428a1?x=x&version=1",
            "client": "website",
            "content": "<p>I sense this is a long-shot asking here, but running the <code>pa_dev</code> program isn't showing any devices, although ALSA is showing the card and programs like <code>play</code> work as expected.  To make things weirder, I'm running debian from a chroot. Any ideas?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29582365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "travis@mcdem.us",
            "sender_full_name": "Travis McDemus (S'13)",
            "sender_id": 2139,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "portaudio",
            "submessages": [],
            "timestamp": 1414150874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/61f7402a76ff0aff964da46bd7948ca20279ae1f?x=x&version=1",
            "client": "website",
            "content": "<p>Figured it out how to compile my first Nginx module! <a href=\"https://gist.github.com/wallyqs/804a504b4b73cdec0c45\" target=\"_blank\" title=\"https://gist.github.com/wallyqs/804a504b4b73cdec0c45\">https://gist.github.com/wallyqs/804a504b4b73cdec0c45</a><br>\n(personal victory..)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 30765202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "waldemar.quevedo@gmail.com",
            "sender_full_name": "Waldemar Quevedo (F2'14)",
            "sender_id": 6706,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "nginx-module-hello-world",
            "submessages": [],
            "timestamp": 1416026090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0158ae52d44e0cb741cfe26d6d825bb4?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Congrats <img alt=\":fireworks:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/fireworks.png\" title=\":fireworks:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31047545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tristan.fisher@gmail.com",
            "sender_full_name": "Tristan Fisher (S2'14)",
            "sender_id": 6173,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "nginx-module-hello-world",
            "submessages": [],
            "timestamp": 1416486121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey y'all finally learning C.  I have a probably googlable question but I'd rather ask it here to see if I'm right about something re: compilers.</p>\n<p>Are <code>#</code> lines such as <code>#define FLOP  \"thingy\"</code>  and <code>#include &lt;thingy.h&gt;</code> interpreted by the compiler as an instruction to do a thing (either go grab a header file for #include, or run a quick substitution on the text of the source to replace FLOP with \"thingy\") before actually compiling it?</p>\n<p>Yay C! makes so much more sense than the first time I tried to learn it back when I knew <code>$knowledge - n</code> last time <img alt=\":grin:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/grin.png\" title=\":grin:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417886944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c35ca5c26afe5ce2b62e0d25c9af7c50a096323c?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> Lines beginning with <code>#</code> are precompiler directives. As you surmised, <code>#define</code> basically performs a search and replace before invoking the compiler. Likewise, you can think of <code>#include [header]</code>as telling the compiler to process the named header file before compiling the source file containing the <code>#include</code> directive.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joppeschwartz@gmail.com",
            "sender_full_name": "Joe Schwartz (F1'14)",
            "sender_id": 6418,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>These are instructions to the C preprocessor, which munges the text of your program and spits out something way more verbose that the C compiler actually sees.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>awesome, that's what I thought, thanks  y'all. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Like Joe said, <code>#define FLOP \"thingy\"</code> causes cpp to replace all instances of <code>FLOP</code> with <code>\"thingy\"</code>. <code>#include &lt;thingy.h&gt;</code> causes cpp to insert the contents of <code>thingy.h</code> into your program right here.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>C feels like driving an old tank or something! huge and powerful and harder to drive than a bike.  </p>\n<p>are there a lot of other <code>#</code> directives or are there only a few?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>There's a ton, but the other important ones are <code>#ifdef</code>/<code>#else</code>/<code>#endif</code>, etc. Those let you conditionally include or exclude lines of code. Ugly but handy for portability.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>ahh very good... it is interesting to be so close to the compiler to be thinking of those in that way now...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The difference between <code>#include \"thingy.h\"</code> and <code>#include &lt;thingy.h&gt;</code> is that they use different search paths to find files. The quote version is for \"local project files\" while the angle bracket version is for system header files.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>can I precompile a source to an intermediary step? say I want to see what a preprocessed source looks like before it gets binaried... </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It may be informative to manually invoke <code>cpp</code> and see what it outputs. The whole C preprocessor thing becomes much easier to reason about once you realize how low-level and primitive it is \u2013\u00a0the fact that it's literally filtering your code and producing a different C program that is what's actually compiled.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, I forget the details of how to invoke it but <code>cpp</code> is the name of the program</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417887976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>great that is very useful. I've been putting off C because of its complexity and my experience level, but I think it's going to do me a world of good</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Sometimes it's handy to do that because there are so many layers of <code>#define</code>s and other nonsense that you have no idea what a definition actually says on your system. You can run it through the preprocessor and then find the definition in the usually voluminous output and see what everything boils down to.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also tell gcc to save temps, and do a normal compilation but have all the various asm files around, etc, with -save-temps.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It's really not that complicated \u2013\u00a0it's more like a very sharp knife \u2013\u00a0simple but easy to cut yourself.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The biggest hurdle for people seems to be pointers, which are really not complicated \u2013 they are just addresses in RAM.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Ah, nice tip, <span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span>. Didn't know about that. Very handy.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yes thanks <span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span>  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>It is; I only learned about it a few months ago. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>(When tracking down a bug in a c compiler while compiling libav, which would've been tedious to try to do by hand).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I do find it very interesting how simple C is when you know what it is actually doing, and how complicated it is if you don't, hence the pointer confusion (I got that out of the way early by slamming my head against nand2tetris for a few weeks before my batch, thansk <span class=\"user-mention\" data-user-email=\"rose@happyspork.com\">@Rose Ames (W'14)</span> )</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> One important thing to note: <code>#include</code> doesn't actually do any kind of checking to see that the file you're including is valid code. For example, you can do something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"c1\">// semicolon.c</span>\n<span class=\"p\">;</span>\n\n<span class=\"c1\">// main.c</span>\n<span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span>\n<span class=\"cp\">#include &quot;semicolon.c&quot;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>More practically, if you get an incomprehensible error in your main file about a bracket not being closed, look in your headers too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937965,
            "is_me_message": false,
            "last_edit_timestamp": 1417888269,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think C is ridiculously complicated, fwiw. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888271,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>syntactically, it's so tiny, in practice, I agree with you ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31937974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Syntactically, I'm a smug lisp weenie, or in a pinch a smalltalker. ;-) I've been in places where it'd be useful to write a C parser a few times; it's... surprisingly big. :-D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"kt\">void</span> <span class=\"n\">main</span>\n<span class=\"cp\">#include &quot;openParen.c&quot;</span>\n<span class=\"cp\">#include &quot;closeParen.c&quot;</span>\n<span class=\"cp\">#include &quot;openBrace.c&quot;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span>\n<span class=\"cp\">#include &quot;semicolon.c&quot;</span>\n<span class=\"cp\">#include &quot;closeBrace.c&quot;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Well, the complicated stuff is not the stuff that beginners have trouble with though. The undefined behaviors, the vague specification of what size <code>int</code> is, the fact that signedness of <code>char</code> is implementation-dependent. All that stuff is really complicated, but not things that you encounter when you're starting to code in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>haha alyssa I was just going to make that joke </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Writing really simple stuff in C so that it runs without falling over most of the time isn't that bad, though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stefan@karpinski.org\">@Stefan Karpinski</span> Yes. There's something like 190 undefined behaviors in C99 or C11. And then there are the weird platforms; I know people who write on a platform where sizeof(char) == sizeof(int) (both are two bytes), which breaks some idioms in interesting ways...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stefan@karpinski.org\">@Stefan Karpinski</span>  it is, however, the stuff I'm most interested in getting out of learning it, so I am looking forward to getting to the point where those things become salient</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Jeff: <a href=\"http://blog.regehr.org/\" target=\"_blank\" title=\"http://blog.regehr.org/\">http://blog.regehr.org/</a> is amazing, then. And you'll want to bang your head against unions for a while.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>In practice, everyone just ignores undefined behaviors because in practice most compilers do the same things these days. It's not defined as such, but <code>int</code> is 32-bits and <code>long</code> is the same size as your pointers (except on Win64, where <code>long</code> is 32-bits \u2013\u00a0damn you, Windows!).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/21aeae1f260365557523718bc19640f7?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Oh gawd, that <code>sizeof(char) == sizeof(int)</code> thing is horrible.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stefan@karpinski.org",
            "sender_full_name": "Stefan Karpinski",
            "sender_id": 892,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Argh, no. No. No. <a href=\"http://blog.regehr.org/archives/970\" target=\"_blank\" title=\"http://blog.regehr.org/archives/970\">http://blog.regehr.org/archives/970</a> and worse.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>(re: undefined behavior). It's really not safe to ignore it, and hasn't been for years; optimizing compilers + undefined behavior = a world of horrible bugs.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>this might be a bit open ended, but... how many different architectures are common practice compilation targets? Could you in theory write a compiler that targets any kind of architecture you want? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Depends; for desktop software, often 1; for unixy/servery things, often 1-a few dozen; for rather portable things like Perl, I think a bit over a hundred but my memory of this is fuzzy and years out of date...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>GCC targets a lot of architectures in practice; lots of people use it for all kinds of microprocessors neither of us have ever heard of.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Compilers like GCC or LLVM have a front-end that does parsing/etc, an intermediate representation of code, and a bunch of back-ends for different architectures; adding new back ends is frequently done.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>You -could- target really weird chips with them too, but it tends to involve some ugly tradeoffs (they won't model some chip-specific details about registers/parallelism/etc, and they're not the right kind of heroic compiler to produce _good_ code for VLIW chips, etc).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>So - there are compilers for pretty much any kind of architecture that's out there, but no compiler is great at targeting all of them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>great stuff, thanks y'all. </p>\n<p>my current \"bang your head against this\" list is K and R -&gt; <a href=\"http://www.buildyourownlisp.com/\" target=\"_blank\" title=\"http://www.buildyourownlisp.com/\">http://www.buildyourownlisp.com/</a> (because toy language design looks like super fun) and then -&gt; <a href=\"http://csapp.cs.cmu.edu/\" target=\"_blank\" title=\"http://csapp.cs.cmu.edu/\">computer systems, a programmers perspective</a> which was recommended to me by a coworker.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I will probably be on here periodically! your help is appreciated</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417888993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Good luck, I've been meaning to go through a couple of those. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417889077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c35ca5c26afe5ce2b62e0d25c9af7c50a096323c?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Wow, excellent thoughts all! Yes, <span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span>  is right that <code>#include</code> does nothing in the way of checks, so you can also have two files that include each other leading to a circular dependency that today's compilers will warn you about. (I remember when you knew you might have  a circular <code>#include</code> dependency problem because the machine just because unresponsive, which wasn't all that different from its state while compiling.) You can avoid this problem with appropriate  <code>#define</code> and <code>#ifdef</code> directives. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31938521,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joppeschwartz@gmail.com",
            "sender_full_name": "Joe Schwartz (F1'14)",
            "sender_id": 6418,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417889534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>on a related note: computers are so freaking interesting. ok bai <img alt=\":doge:\" class=\"emoji\" src=\"https://external-content.zulipcdn.net/794fc4f9882683f4e056cce657d152f048eed55f/687474703a2f2f7765622e6d69742e6564752f6a657373746573732f7777772f646f67652e706e67\" title=\":doge:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31940246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417893813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/75a771f7ca59387bc1f310e55d66ac1c?d=identicon&version=1",
            "client": "Unspecified",
            "content": "<p><a href=\"https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif\" target=\"_blank\" title=\"https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif\">https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif\" target=\"_blank\" title=\"https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif\"><img src=\"https://s3.amazonaws.com/giphymedia/media/w40yQgSXwjOQo/giphy.gif\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 31940247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "puppy-bot@students.hackerschool.com",
            "sender_full_name": "Puppy Bot",
            "sender_id": 6901,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Finally learning C",
            "submessages": [],
            "timestamp": 1417893814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I've vanquished my first compiler dragon <img alt=\":dragon_face:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/dragon_face.png\" title=\":dragon_face:\"> </p>\n<p>After banging my face against <a href=\"http://stackoverflow.com/questions/3020031/kr-exercise-1-21-mental-incomprehension\" target=\"_blank\" title=\"http://stackoverflow.com/questions/3020031/kr-exercise-1-21-mental-incomprehension\">k-r's exercise 1-21</a> for longer than I'd like to admit, <a href=\"https://github.com/urthbound/krc/blob/master/1-21.c\" target=\"_blank\" title=\"https://github.com/urthbound/krc/blob/master/1-21.c\">it FINALLY works!</a> </p>\n<p>I'm going to celebrate this moment of respite by watching anime and drinking tea. </p>\n<p>\u3084\u3063\u305f\uff01\u0b67\u0f3c\u0298\u0306\u06ba\u0298\u0306\u0f3d\u0b68</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32100003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Small Victories",
            "submessages": [],
            "timestamp": 1418184904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0fc5778d097c3ce0d085a4e5d2115fdf89a5ce55?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":confetti_ball:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/confetti_ball.png\" title=\":confetti_ball:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32204222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mindy.preston@yomimono.org",
            "sender_full_name": "Mindy Preston (she) (F2'19)",
            "sender_id": 4994,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Small Victories",
            "submessages": [],
            "timestamp": 1418351145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9255b40357bf538ea5e4f7d552ef5cdd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I took a class that taught me gobs about C, how computers work, and how to make them run fast. I've put together my favorite project in the class, as I heard there was interest <span class=\"user-mention\" data-user-email=\"stan@schwertly.com\">@Stan Schwertly (F2'14)</span> <span class=\"user-mention\" data-user-email=\"rob.moore@gmail.com\">@Rob Moore (F2'14)</span>. I put a link in the wiki so hopefully others will find it :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32263800,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chaselambda@gmail.com",
            "sender_full_name": "Chase Lambert (F2'14)",
            "sender_id": 6690,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Learn Performance Engineering!",
            "submessages": [],
            "timestamp": 1418458968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9255b40357bf538ea5e4f7d552ef5cdd?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://bitbucket.org/theicfire/bitflip\" target=\"_blank\" title=\"https://bitbucket.org/theicfire/bitflip\">https://bitbucket.org/theicfire/bitflip</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32263803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chaselambda@gmail.com",
            "sender_full_name": "Chase Lambert (F2'14)",
            "sender_id": 6690,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Learn Performance Engineering!",
            "submessages": [],
            "timestamp": 1418458985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/91cc86cc769fecbf422b82bd246c58ea?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>thats awesome! thanks chase!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32408385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sfkrieger@gmail.com",
            "sender_full_name": "Sammy Krieger (F2'14)",
            "sender_id": 6701,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Learn Performance Engineering!",
            "submessages": [],
            "timestamp": 1418753762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9255b40357bf538ea5e4f7d552ef5cdd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I made a function called \"step\" today in a file that I was working on. Everything compiled cleanly but I got a segfault when I ran it. I eventually found there's a \"step\" function in misc/regexp.c. Is there a way I could have been notified of this before run time?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32461362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chaselambda@gmail.com",
            "sender_full_name": "Chase Lambert (F2'14)",
            "sender_id": 6690,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "getting errors when redefining functions",
            "submessages": [],
            "timestamp": 1418842133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>Anything unusual about how it was built? Unless we're talking dynamic loading or weak symbols, the linking should have failed due to multiple definitions. And even with DL or weak symbols the duplicate definitions would just be shadowed without causing a segfault.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32471382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "getting errors when redefining functions",
            "submessages": [],
            "timestamp": 1418853583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ecc102c3cee58ab6ed566b2eb95ee969bab6fb1?x=x&version=1",
            "client": "website",
            "content": "<p>I guess calling something from (or just loading) a shared library built without -fpic would segfault, but that's pretty much the only thing that comes to mind.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32471941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alex@evectant.com",
            "sender_full_name": "Alex Alekseyev (F1'14)",
            "sender_id": 6430,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "getting errors when redefining functions",
            "submessages": [],
            "timestamp": 1418853916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d495685876a5a195b6ef5fb9a269b6d0dcd5c5fe?x=x&version=1",
            "client": "website",
            "content": "<p>Unfortunately, this is the way it's supposed to work.  You're allowed to override symbols by putting their libraries earlier in the search path.  For example, there are libraries that provide an alternate <code>malloc</code> without requiring you to first scrub it from <code>libc</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32501036,
            "is_me_message": false,
            "last_edit_timestamp": 1418911889,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pnf@podsnap.com",
            "sender_full_name": "Peter Fraenkel (he) (S'13)",
            "sender_id": 2142,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "getting errors when redefining functions",
            "submessages": [],
            "timestamp": 1418911869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are there any tools that will turn sequential-looking code into callbacks / state machines behind the scenes in C?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33697623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421295030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on an embedded project, and need to send a few messages over a serial line to another chip. I want to wait for the chip to reply \"OK\" before I send the next message</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33697632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421295063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I'd prefer not to have to make an explicit state machine (with states \"Waiting for reply A, Waiting for reply B, Waiting for reply C, ...\")</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33697639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421295096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like Clojure core.async's <code>go</code> macro would be great. Then I could just write:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nf\">go</span>\n  <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">serial-line</span> <span class=\"s\">&quot;message A&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">&lt;!</span> <span class=\"nv\">serial-line</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">&gt;!</span> <span class=\"nv\">serial-line</span> <span class=\"s\">&quot;message B&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">&lt;!</span> <span class=\"nv\">serial-line</span><span class=\"p\">)</span>\n  <span class=\"nv\">...</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and not have to bother with naming the intermediate states between the lines</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33697694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421295204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I looked at Ragel (<a href=\"http://www.colm.net/open-source/ragel/\" target=\"_blank\" title=\"http://www.colm.net/open-source/ragel/\">http://www.colm.net/open-source/ragel/</a>) but don't know if there are other solutions</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33697740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421295275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>maybe relevant? <a href=\"http://swtch.com/libtask\" target=\"_blank\" title=\"http://swtch.com/libtask\">http://swtch.com/libtask</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33719850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421338324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I'm not very familiar with CSP / core.async so this may be off base, but the standard way of dealing with asynchronous operations in an embedded environment is to use an RTOS like VxWorks ($$$) or FreeRTOS (open source) that gives you preemptive task scheduling, message queues, and semaphores.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33910423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421717810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5aac52dfb927229e729a553ff79edd8bf8cb9466?x=x&version=1",
            "client": "website",
            "content": "<p>So with an RTOS your example could look like this:</p>\n<div class=\"codehilite\"><pre>// send &quot;message A&quot;\n// wait on semaphore or message queue (with timeout, if needed)\n// send &quot;message B&quot;\n// wait on semaphore or message queue (with timeout, if needed)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33910434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "qqrsmith@gmail.com",
            "sender_full_name": "Russell Smith (W'13)",
            "sender_id": 854,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421717848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"qqrsmith@gmail.com\">@Russell Smith (W'13)</span> I hadn't seen FreeRTOS before --- this looks like it could be *very* helpful. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33936328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421773016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>To follow up, I looked at Ragel yesterday for about 2 hours, but I couldn't figure out how to feed it events one at a time (rather than having it slurp chars from a string)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33936436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421773144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It should be possible, but my C-fu is weak --- for now I will stay with my handwritten state machine.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33936465,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421773190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> Psssh the solution here is obviously to compile core.async into C!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33945687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "CSP / implicit state machine pre-processor?",
            "submessages": [],
            "timestamp": 1421784555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I wrote a story about ralloc()!</p>\n<blockquote>\n<p>You want to go to a restaurant with friends, but you don\u2019t know how many will show up. When the hostess asks you how many people, you say, \u201cfour.\u201d</p>\n<p>The hostess places you in a table with four chairs, and you sit there by yourself, feeling guilty for taking up so much space in the restaurant.</p>\n<p>Eventually, three of your friends join you and everything\u2019s awesome, because you're utilizing the space allocated to you at maximum efficiency. However, when a fifth arrives, the hostess is annoyed, because she has to find you a new table, this one with six chairs. When she does so, everyone at the table has to move, taking all of their plates, silverware and cutlery with them. When a seventh person arrives, she has to find you yet another table, this time with eight chairs, and yet again everyone has to move their plates, silverware, and cutlery.</p>\n<p>The next time you go to the restaurant, you tell the hostess you\u2019re a party of twelve. None of your friends show up, but the hostess isn\u2019t annoyed, since the restaurant has millions of chairs, and allocating them to you in advance isn\u2019t nearly as difficult as moving everything around when more friends show up.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>(In case any other dynamic programmers are trying to grok low level memory allocation in C...)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>haha :) I liked that. restaurant tables and hotel rooms are so much easier to deal with in computer and math stories!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Great analogy.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I was talking to friends and some of them don't know C that well but pretend they do and were like, \"Oh, no, whether or not an array is contiguous always depends on the compiler and all of these things,\" until an actual computer scientist jumped in.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>would that have been a well actually? P:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Yes, but in this case, I was specifically asking about the distinction.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> Cool story, but what's <code>ralloc</code>? I know <code>malloc</code>, <code>realloc</code>, <code>calloc</code> and <code>alloca</code>, but I haven't heard of <code>ralloc</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I was using ralloc to increase memory allocations to dynamically-sized arrays.  Probably the same as realloc?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I've just learned this today, so I am by no means an expert.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>What OS?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Linux.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Basically, chapter 17 of Zed Shaw's Learn C the Hard Way is about creating a database, where you explicitly set the maximum amount of records and then take up as much room as it takes to store the maximum amount of records, even if you only have one.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p><a href=\"http://c.learncodethehardway.org/book/ex17.html\" target=\"_blank\" title=\"http://c.learncodethehardway.org/book/ex17.html\">http://c.learncodethehardway.org/book/ex17.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809875,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>And I felt like that was bad because I didn't want to have space for 100 records when I only wanted to store 10, or even have to know the number of records in advance.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35604963,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424809923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I don't see a man page for <code>ralloc</code> at all on my system strangely</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605712,
            "is_me_message": false,
            "last_edit_timestamp": 1424810702,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810694,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I might have gotten the name wrong. :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>It's actually realloc.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p><a href=\"http://weknowmemes.com/wp-content/uploads/2011/12/ive-made-a-huge-mistake.gif\" target=\"_blank\" title=\"http://weknowmemes.com/wp-content/uploads/2011/12/ive-made-a-huge-mistake.gif\">http://weknowmemes.com/wp-content/uploads/2011/12/ive-made-a-huge-mistake.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"http://weknowmemes.com/wp-content/uploads/2011/12/ive-made-a-huge-mistake.gif\" target=\"_blank\" title=\"http://weknowmemes.com/wp-content/uploads/2011/12/ive-made-a-huge-mistake.gif\"><img src=\"https://external-content.zulipcdn.net/6edb2a1aa1ec123ba8ed72114c6cda533684b48a/687474703a2f2f77656b6e6f776d656d65732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031312f31322f6976652d6d6164652d612d687567652d6d697374616b652e676966\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605841,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I didn't even notice the 'e' was missing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah at first I assumed that I was misremembering <code>realloc</code> because it's been so long since I've written any C</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35605882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424810887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>This is a brilliant story</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>/me awards <span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> a putlizer</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606588,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Yay, I can cross that off the bucket list!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>There's actually a sequel now; my kernel programmer friend asked me what I would do in an embedded system where memory actually is an issue, and I wrote a story about a super trendy restaurant with three tables and  a line around the block.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606693,
            "is_me_message": false,
            "last_edit_timestamp": 1424811900,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811881,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>(The hostess is just kind of mean there.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I have an easier time forming a mental image of the trendy place than I do of the place with an infinite number of tables</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Are you a native New Yorker?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Do you know the paradox of Hotel Infinity? reminds me of that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>hahahaha no, no i am not, but that shit's funny</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424811994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It's a thought experiment meant to illustrate the \"levels\" of infnity</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812023,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Link?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>You have a hotel which extends into a black hole,  so you have countably infinite number of rooms</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I was unschooled so I miss out on all the fun things like that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Is that how black holes really work?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>this is going to hurt my brain, I can feel it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>wait</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606888,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>countably infinite?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>ie, if you're booked up and a new guest arrives, all you hvae to do is bump everyone into room number $(n+1) and now you have an extra room for the new guest</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>/me mutters something about infinity being stupid</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606910,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but what if you have an infinite number of guests arrive!? oh no!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>How could you ever be booked up in an infinite hotel?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>well, that's easy: just double everyone's room number, and now all of the odd rooms are free</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://en.wikipedia.org/wiki/Hilbert%27s_paradox_of_the_Grand_Hotel\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hilbert%27s_paradox_of_the_Grand_Hotel\">https://en.wikipedia.org/wiki/Hilbert%27s_paradox_of_the_Grand_Hotel</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I'll never understand infinity.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>#MathWorldProblems</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>seems like this hotel will get an infinite number of one-star reviews for curtly ordering guests to move to different rooms</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>countably infinite means you can give a number to each... number, without missing any</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35606985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>ie 0, 1, 2, 3, etc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah just had to review that myself <span class=\"user-mention\" data-user-email=\"nikkicubed@gmail.com\">@Nikki Bee (SP1'15)</span> -- wiki link since I have it open <a href=\"https://en.wikipedia.org/wiki/Countable_set\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Countable_set\">https://en.wikipedia.org/wiki/Countable_set</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607017,
            "is_me_message": false,
            "last_edit_timestamp": 1424812235,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>They're also on the other side of the event horizon of a black hole, so there are some other problems to work out as well</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>if you try to count like, irrational numbers, you can't, because there's edge room for more inbetween anything you counted :o</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>the guests can give as many bad reviews as they want, but nobody else will ever get to read them :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>also lol <span class=\"user-mention\" data-user-email=\"scott@scott.mn\">@Scott Feeney (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I don't know what other infinitynesses of infinity there are. it gets very head throbby though</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> to piggyback off of <span class=\"user-mention\" data-user-email=\"nikkicubed@gmail.com\">@Nikki Bee (SP1'15)</span> ,  all counting is is simply a one-to-one correspondence between two sets</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>generally when we count, the first set is the set {1, 2, 3, ...}</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but you can count using any initial you want</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I'm only inferring the formal definition of a set through your examples.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>(including sets that don't exist, but that's where things get really weird....)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Isn't the definition of a set just a group of numbers or an empty set?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>basically, tons of people in history have spent too much time thinking about consequences of numbers, and people will sum up centuries of thoguht in a sentence</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>not really - groups are different</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>also sets can contain things other than numbers</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> Just think of a set in CS. Either something belongs to a set, or it doesn't. Also, there is no order in a set.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nikkicubed@gmail.com\">@Nikki Bee (SP1'15)</span> If I remember correctly, we are aware of three infinities. It is unknown whether there are any more, or whether there is any infinity \"between\"the first and the second</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I don't have a CS background either. :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>what's the 3rd?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><a href=\"https://en.wikipedia.org/wiki/Aleph_number\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Aleph_number\">https://en.wikipedia.org/wiki/Aleph_number</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> I'd also recommend reading the Simple English wikipedia: <a href=\"https://simple.wikipedia.org/wiki/Infinity#The_arithmetic_of_infinity\" target=\"_blank\" title=\"https://simple.wikipedia.org/wiki/Infinity#The_arithmetic_of_infinity\">https://simple.wikipedia.org/wiki/Infinity#The_arithmetic_of_infinity</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Nice!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> It sounds condescending but I swear it's not - the Wikipedia pages on math can be really dense if you're not familiar with the jargon already</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I like how only one Aleph has a number attached to it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Haha, no, I'm not insulted at all.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>whereas Simple Englihs was literally created because Wikipedia editors were divided on whether Wikipedia should be for \"normal people\" or for \"domain experts\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>also: <a href=\"https://xkcd.com/547/\" target=\"_blank\" title=\"https://xkcd.com/547/\">https://xkcd.com/547/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>wikipedia: the free encyclopedia for everyone. except for people who don't already understand what they're reading</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>That's one of the biggest barriers to understanding of higher-level mathematics.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>The texts are written in a foreign language.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"aditya@adityamukerjee.net\">@Aditya Mukerjee (SP1'15)</span> would it also be valid to define a set as a function, much like a vector space in linear algebra?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607461,
            "is_me_message": false,
            "last_edit_timestamp": 1424812915,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(and yes, I forgot that sets aren't always limited to numerical values)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>And then you get really nice efforts like this <a href=\"http://worrydream.com/AlligatorEggs/\" target=\"_blank\" title=\"http://worrydream.com/AlligatorEggs/\">http://worrydream.com/AlligatorEggs/</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>But they don't actually bridge the gap between formal and intuitive understanding because they assume the person reading the article actually knows the theory and is trying to teach children...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ian@theknown.net\">@Ian Whitlock (S'13)</span> I can't say \"no\", because according to the lambda calculus, there's no such thing even as a number - everything's a function</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>but I'm also not familiar with the formal definition of a vector space as a function</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d46121e9a899e151cfcd0e59aa9e9f8a78989e8?x=x&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>keep in mind, it's been a while since I studied theoretical linear algebra - almost everything I do is applied, which means we're allowed to wave our hands over the exact definitions :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "aditya@adityamukerjee.net",
            "sender_full_name": "Aditya Mukerjee (he) (SP1'15)",
            "sender_id": 7644,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah, I'm really super rusty at it myself</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35607675,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424812967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>here's an exploration of set theory presented from within the lambda calculus <a href=\"http://www.diku.dk/~grue/\" target=\"_blank\" title=\"http://www.diku.dk/~grue/\">http://www.diku.dk/~grue/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35608781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424814170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i know generally speaking all mathematics can be defined by sets</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35608820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424814223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>with a given function defined as a mapping  between two sets</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35608838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424814243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42e5e35fcf7a07bfbbd83456efe5c6821f87c9bc?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>here's a good intro to set theory if anyone's actually interested :P <a href=\"http://www.unc.edu/~normanp/890part1.pdf\" target=\"_blank\" title=\"http://www.unc.edu/~normanp/890part1.pdf\">http://www.unc.edu/~normanp/890part1.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35608882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "virajosinha@gmail.com",
            "sender_full_name": "Viraj Sinha (SP1'15)",
            "sender_id": 7634,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424814264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Thanks, <span class=\"user-mention\" data-user-email=\"virajosinha@gmail.com\">@Viraj Sinha (SP1'15)</span>, this is a good intro!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35609380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ralloc()",
            "submessages": [],
            "timestamp": 1424814798,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Anyone wanna playtest Malloc: The Game?  (You do manaully memory allocation at the bit level because you can.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35652306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Malloc: The Game",
            "submessages": [],
            "timestamp": 1424885578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>How does that work?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35655208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Malloc: The Game",
            "submessages": [],
            "timestamp": 1424889002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>It gives you something like:</p>\n<div class=\"codehilite\"><pre>int x = 42;\n</pre></div>\n\n\n<p>And then you decide how many bits to allocate, then check/uncheck that many checkboxes to represent that value in binary.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35656207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Malloc: The Game",
            "submessages": [],
            "timestamp": 1424890203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>How could I theoretically make my own custom variable type, like an 8-bit shortint so I can just be like, <code>shortint x = 255;</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709614,
            "is_me_message": false,
            "last_edit_timestamp": 1424968201,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>All the people on the web forums in Google are just like, \"Don't, you will never need to do this ever.\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>yeah this sounds like it'd just get tricky to maintain and confusing to other people reading your code</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I think that's probably the reason for the web forum people</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you want any number of bits, so you could make, like, an 11-bit variable? Or do you just want that one thing in particular? <code>uint8_t</code> or <code>uint8</code> are often defined (uhh, with the right includes), so you can typedef to those.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>I just want to know how to create an arbitrary new type with any number of bits.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709916,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>And yeah, <span class=\"user-mention\" data-user-email=\"ian@theknown.net\">@Ian Whitlock (S'13)</span>, obviously it would be terrible to maintain, but the point of Hacker School doesn't seem to be writing production-quality, mainstream, easy to maintain code. :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>(At least I really hope not, otherwise I'm doing it wrong.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35709944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968507,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>AFAIK, you can't really do that in C without modifying the compiler. I mean, you could have helper functions or macros to basically accomplish the same thing, but you can't have a (for example) 11-bit type that you can treat as an int and do all normal operations on. By which I mean, you can't define <code>+</code> for your custom type, but you could define <code>shortint_plus</code> that does the same thing for an arbitrary bit width.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35710123,
            "is_me_message": false,
            "last_edit_timestamp": 1424970904,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could do it in C++, though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35710131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/842e08a228d86d5163ac24f95b6a92d321fc7193?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>lol nope, sounds like you're doing it right <span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35710168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ian@theknown.net",
            "sender_full_name": "Ian Whitlock (S'13)",
            "sender_id": 2119,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424968777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>yeah that sounds fun to me. I can't stand internet comments on... well, anything about programming / computers. \"I've never wanted to do this, so you shouldn't either!\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35710514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424969146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>I'd be down for making like, really tiny number range values in C. I thought for a while that's what short int was but it's not</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35710572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424969190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>My life would be a lot easier if people changed \"You don't want to do this\" to \"You probably don't want to do this but...\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35711456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424970262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>What problem is it you're trying to solve?<br>\nYou wouldn't be able to use built-in operators, but it would probably be a really instructive exercise. (And implementing bignums, as well.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35712535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424971635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Small-bit numeric types aren't that unusual in embedded C, like 7-bit I2C identifiers or 10-bit reads from ADCs, but they usually only need a few limited operators or get mapped to/from other numeric types at a library interface.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35712636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424971743,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>You can use <code>signed char</code> / <code>unsigned char</code> as an 8-bit integer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35718011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424977159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>And even <code>typedef signed char shortint;</code> if you want to.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35718023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424977176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>ooh, that's clever!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35718071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424977208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d84e3106fff0d257cc5a95ca9ea44405?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"msteigerwalt@gmail.com\">@Michelle Steigerwalt (SP1'15)</span> there essentially two things you can do to \"make your own numeric type\":<br>\n1: create a type alias (typedef) for a primitive, e.g.: <code>typedef unsigned char Byte;</code><br>\n2: create a struct that contains some other types, e.g.:</p>\n<div class=\"codehilite\"><pre>// 128 bit unsigned struct type, stored in 2 64 bit words.\ntypedef struct {\n  uint64_t low;\n  uint64_t high;\n} U128; // this is the name of our new type.\n</pre></div>\n\n\n<p>in the first case, you are just creating a new name for the existing type <code>unsigned char</code>, which is 8 bits. in the second case, your struct type will have a width of 128 bits, but none of the arithmetic operators will work; you will need to define your own functions, e.g. <code>U128 addU128(U128 a, U128 b);</code><br>\nif you want to create types with weird bit widths like 7, it is important to recognize that the only sane way to actually use these on most architectures is to fit them within the normal power-of-two sizes. most people would not bother, but if you want to create a type-safe system you can. for example, to do 7 bit unsigned arithmetic safely, define a struct that contains at least that many bits (in our case one 1 byte), and define the functions:</p>\n<div class=\"codehilite\"><pre>typedef uint8_t U8; // i like the short, nonstandard name for brevity.\ntypedef struct {\n  U8 i;\n} U7;\nU7 addU7(U7 a, U7 b) {\n  U8 sum = a.i + b.i;\n  if (sum &gt; 127) error(&quot;addU7: overflow&quot;)\n  return (U7){.i=sum};\n}\n</pre></div>\n\n\n<p>since you are using a struct type, the compiler will enforce that you don't use the regular numeric types instead when calling addU7. In C++ you can do more complicated things like operator overloading. If you want to discuss more, i'm at HS today :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35718579,
            "is_me_message": false,
            "last_edit_timestamp": 1424977839,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "george.w.king@gmail.com",
            "sender_full_name": "George King (he) (S'13)",
            "sender_id": 2153,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424977764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Awesome write-up, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35719914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424979033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c55d5b0f6b48fe10eae3bd82fdc9ec479c66f7b7?x=x&version=1",
            "client": "desktop app Windows 0.4.4",
            "content": "<p>Right now I'm actually trying to get a little web game done before presentation time.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35719926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "msteigerwalt@gmail.com",
            "sender_full_name": "Michelle Steigerwalt (she/her) (W2'17)",
            "sender_id": 7655,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Custom type definitions",
            "submessages": [],
            "timestamp": 1424979056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>I just learned about <a href=\"https://en.wikipedia.org/wiki/Duff%27s_device\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Duff%27s_device\">https://en.wikipedia.org/wiki/Duff%27s_device</a> which I think is really cool. maybe outdated, but it's quite interesting to understand how it did work :) unrolling is pretty counter-intuitive to me, but it makes sense!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35936228,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Duff's Device",
            "submessages": [],
            "timestamp": 1425335518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>it also makes me appreciate much more the fall-through in switch statements</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35936295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Duff's Device",
            "submessages": [],
            "timestamp": 1425335572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>Wow, I remember my dad telling me about how a \"switch statement could be used to implement a fast for loop\" and I never could figure out how, until now. thanks for sharing this!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35937001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Duff's Device",
            "submessages": [],
            "timestamp": 1425336328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>glad to :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35937073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Duff's Device",
            "submessages": [],
            "timestamp": 1425336383,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Is it possible to typedef new multiword type names in C, such as \"long long\"? I know I probably *shouldn't*, I'm just curious. (The IOCCC may be involved.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36032184,
            "is_me_message": false,
            "last_edit_timestamp": 1425477624,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425477579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>e.g.:    typedef (long long) (honk honk);</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36032198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425477596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>A friendly gcc dev I asked says nope.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36032351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425477794,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Okay. Thanks for asking.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36032475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425477975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> for my mischievious purposes, <code>#define honk long</code> is sufficient</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36055622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425502955,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Excellent.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36055777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multi-word type names",
            "submessages": [],
            "timestamp": 1425503124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "website",
            "content": "<p>I just found out you can make the cursor line in bash move up lines by reading in key presses as strings and trying to print them</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 36386083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "c input",
            "submessages": [],
            "timestamp": 1426000591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>I've been seeing a lot of conflicting advice on using <code>int</code> (or <code>unsigned int</code>) vs. <code>size_t</code> types for array index variables (e.g., <code>for (int i = 0; i &lt; count; i++) {...}</code>):</p>\n<p>Arguments for <code>int</code> (or <code>unsigned int</code>) are: it's more canonical C style, <code>int</code> is generally a good width on your system, and <code>size_t</code> should only be reserved for things that are counts of bytes / deal with <code>sizeof</code> (since <code>size_t</code> is by definition the type of what <code>sizeof</code> returns).</p>\n<p>Arguments for <code>size_t</code> are basically: indexing arrays is essentially about counting bytes or groups of bytes, which is what <code>size_t</code> is for.</p>\n<p>Any C coders more experienced than I am have strong opinions? :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47363068,
            "is_me_message": false,
            "last_edit_timestamp": 1442868705,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442868689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>(BTW, I know <code>size_t</code> is unsigned.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47363125,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442868748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe the more important thing here is signaling/intent? Like how <code>unsigned char</code> and <code>uint8_t</code> are the same size, but you wouldn't use a <code>unsigned char</code> to define something you're using numerically, because the <code>uint8_t</code> is a better indicator that you care about the numerical value vs. the ASCII equiv.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47363154,
            "is_me_message": false,
            "last_edit_timestamp": 1442869024,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442868825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think most of the things you've said (especially uint8_t vs unsigned char) are right on the money</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>one of the reasons people prefer char even for strings of bytes is that char seems to be almost always 1 byte wide</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>things like short, int and long vary a lot more in width, so if you need to know for sure that you're getting variables of a given size (like parsing a binary internet protocol or something), it's a lot easier to use uint{16,32,64}_t etc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>among other things, I am 95% sure that <code>sizeof(size_t)</code> is always the same size as <code>sizeof(void *)</code> which means that it is 4 bytes on most 32 bit systems and 8 bytes on most 64 bit systems. This is often way more than you need.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>especially if you're just looping over a small buffer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, that makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>That said, <code>int</code> is often 4 bytes on 64 bit systems, and that is probably also larger than you need for most <code>for (i = 0; i &lt; whatever; i++)</code> loops</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>but int seems to win out by convention</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If he's willing to chime in, <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span> probably has more insight and knowledge than I do on the subject.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Are there concerns around optimization here? For example, if <code>FOO_MAX</code> is always 1000, and my counter will never exceed that, are there any wins/losses to using <code>uint8_t</code>vs. simply <code>int</code> (if going with the conventional default)?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47365937,
            "is_me_message": false,
            "last_edit_timestamp": 1442872751,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>I am thinking less about \"you don't need a counter that big\" and more about \"the compiler/processor/whatever likes X better\" (like when you pick something that is the natural width of the system).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the only win would be a bit of stack space.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366040,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>But the loss would be people have to wonder why you're not using int</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>That said, if you use a super small counter and then your thing grows later and you forget to update the counter, you very well may run into bugs.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>for instance:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">uint8_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Yup</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You shouldn't do this because strlen will be run a whole bunch of times (once per loop iteration)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366140,
            "is_me_message": false,
            "last_edit_timestamp": 1442873012,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442872964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>storing the result of strlen already makes it a bit more likely that you'll notice the issue:</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">size_t</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">uint8_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442873036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then you think \"hmm, len is a <code>size_t</code>, maybe i should be bigger\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442873062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>but the odds that you have a string longer than 2^32 (a 4 byte <code>int</code>, 4 GB, is low)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442873099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the chat; very helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442873461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Also curious what <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span> thinks... and h/t for using the <code>assert(test &amp;&amp; \"error str\");</code> pattern, which I picked up from looking at your C code on GitHub. <img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47366492,
            "is_me_message": false,
            "last_edit_timestamp": 1442873595,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442873550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I've only ever seen <code>int</code> used for index variables,  it just needn't be more complicated usually.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442876669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> Agreed in general, but:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442877434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>A benefit of using <code>size_t</code> is that since it's the result type of <code>sizeof</code> it's large enough to index into any array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442877488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you expect your array to get really large (billions of indices) you may as well declare the index to be <code>size_t</code> to begin with.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442877540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>C# (frustratingly) has both a <code>Length</code> and a <code>LongLength</code> property for its arrays. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368611,
            "is_me_message": false,
            "last_edit_timestamp": 1442877564,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442877555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Regarding optmization, I wouldn't bother picking a smaller type (than <code>int</code>) unless there are severe memory constraints.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442878000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Possibly with the exception of some 8-bit embedded platforms, where <code>int</code> (minimum of 16 bits) may require additional instructions to manipulate.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442878086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>But in a server/desktop/mobile setting <code>int</code> can basically be read as \"reasonably sized word the processor can manipulate conveniently\". :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47368890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442878167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>So my recommendation is:<br>\n1. Think about the maximum size the array should be able to have.<br>\n2. Consistently use one size type for the same object (i.e., no <code>int size = &lt;expression of type size_t&gt;;</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47369081,
            "is_me_message": false,
            "last_edit_timestamp": 1442878534,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442878499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre>/mnt/git/linux_kernel$\u00a0git grep -E &quot;^(\\W)int i;$&quot; | wc -l\n17445\n/mnt/git/linux_kernel$\u00a0git grep -E &quot;^(\\W)unsigned int i;$&quot; | wc -l\n2229\n/mnt/git/linux_kernel$\u00a0git grep -E &quot;^(\\W)unsigned i;$&quot; | wc -l \n550\n/mnt/git/linux_kernel$\u00a0git grep -E &quot;^(\\W)size_t i;$&quot; | wc -l\n183\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47371672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442883611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the comments, <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span> and <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span>. I think I have a much better understanding of this now.</p>\n<p>And well put, <span class=\"user-mention\" data-user-email=\"chris@printf.net\">@Chris Ball (SP2'15)</span>. <img alt=\":wink:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/wink.png\" title=\":wink:\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47371779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442883777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I have explicitly used <code>uint8_t</code>s most often when doing Arduino stuff, <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span>, which makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47371790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442883807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span> What? C# had <code>LongLength</code>? I've never seen this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47379049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442899650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>After looking this up, I <a href=\"http://stackoverflow.com/questions/2338778/what-is-the-maximum-length-of-an-array-in-net-on-64-bit-windows\" target=\"_blank\" title=\"http://stackoverflow.com/questions/2338778/what-is-the-maximum-length-of-an-array-in-net-on-64-bit-windows\">found something that seems even weirder</a>. Even though you can get a <code>LongLength</code> for .NET arrays, arrays indexed by int (even in 64-bit code). But that's not even the limiting factor on array size! All .NET objects are capped at 2GB, so the limit is even smaller than you'd expect for something indexed by an int. Although .NET 4.5 with <code>gcAllowVeryLargeObjects</code> relaxes the 2GB limit for arrays, making the limit higher. However, it's still not quite you'd expect from int addressing -- the maximum array size is  <code>0x7FEFFFFF</code>with the special case workaround.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47380851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442904031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> Huh! Thanks for sharing this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47391572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442928096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that the general practice is to use int for loop counters even when those counters will be used as array indexes, and even when you don't need [approximately 4 bytes] of space, unless you know the array might be &gt; 2G objects.  The good thing about this is that the compiler author will have chosen a natural size for your processor, so it will be plenty fast.  That is not the place to sweat about memory usage (except on very very tiny embedded systems).  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47426518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442988264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also agree that the general practice is *weird*, because these days an int might occasionally nto be big enough.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47426523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "int vs. size_t",
            "submessages": [],
            "timestamp": 1442988291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/103b2c81eabb9394126eddd993df33ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>an unintended side effect that you might find interesting <a href=\"http://www.openwall.com/lists/oss-security/2015/09/17/5\" target=\"_blank\" title=\"http://www.openwall.com/lists/oss-security/2015/09/17/5\">http://www.openwall.com/lists/oss-security/2015/09/17/5</a> <span class=\"user-mention\" data-user-email=\"nikkicubed@gmail.com\">@Nikki Bee (SP1'15)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47614278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "csdrane@gmail.com",
            "sender_full_name": "Chris Drane (W2'15)",
            "sender_id": 7080,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "c input",
            "submessages": [],
            "timestamp": 1443371691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/df9e8700a8e4136c62edb59ca1bb090893914a8b?x=x&version=3",
            "client": "desktop app Windows 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"csdrane@gmail.com\">@Chris Drane (W2'15)</span> woah, that sounds pretty serious</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47624082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikkicubed@gmail.com",
            "sender_full_name": "Nikki Bee (she) (SP1'15)",
            "sender_id": 7636,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "c input",
            "submessages": [],
            "timestamp": 1443394787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7434fb7a6fe0a9c13487d68ac5a38e1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey everyone, I'm working my way through <a href=\"http://c.learncodethehardway.org/book/\" target=\"_blank\" title=\"http://c.learncodethehardway.org/book/\">http://c.learncodethehardway.org/book/</a>, if anyone is interested in studying &amp; hacking with C this Fall :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47706093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "davidnmfarrell@gmail.com",
            "sender_full_name": "David Farrell (F2'15)",
            "sender_id": 8679,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "learncthehardway",
            "submessages": [],
            "timestamp": 1443550081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>I've been using [<code>srandom(time(NULL))</code> + <code>random() % N</code>] to generate random integers from 0 to N-1 inclusive. When I first learned C I knew <code>rand()</code>, but then I read about how/why <code>rand() % N</code> would leave you with a non-uniform distribution of ints.</p>\n<p>Question: I feel like (anecdotally) <code>random() % N</code> has still been giving me lots of repeats. I'm seeding once with <code>srandom()</code>, then calling <code>random()</code> maybe 4-5 times in a row:</p>\n<p><a href=\"https://github.com/workmajj/zulip-cronmoji/blob/master/src/tpl.c\" target=\"_blank\" title=\"https://github.com/workmajj/zulip-cronmoji/blob/master/src/tpl.c\">https://github.com/workmajj/zulip-cronmoji/blob/master/src/tpl.c</a> (cf. FIXMEs)</p>\n<p>Is there anything I should be aware of here, or another approach I should take? Things that occurred to me were: a) call <code>random()</code> once and then use different chunks of the output for the 4-5 values I need; b) switching to a better lib (e.g., pcg32).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47997909,
            "is_me_message": false,
            "last_edit_timestamp": 1444160015,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444159822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>not sure why <code>random() % N</code> would not be non-uniform, care to elaborate?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48003964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444164051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, if you call srandom(time()) before every random() you will get the result will only change every second</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48004057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444164125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyway with such a small modulo, the uniformness skew should be pretty irrelevant</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48004133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444164192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>it might just be that humans are bad at recognizing randomness ^^ random picks have repetitions</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48004165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444164225,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> I had read that <code>rand() % N</code> (not <code>random() % N</code>) provided non-uniform distribution on some platforms because the lower-order bits aren't super random. But I'm using <code>random() % N</code> and only seeding once per program run.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48006427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444165926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>That said, maybe it's just my perception. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48006476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444165968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>I was just very surprised to get three of the same numbers in a row across three days, though I do recognize that on a truly random platform that should be as likely as three totally different numbers. <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48006528,
            "is_me_message": false,
            "last_edit_timestamp": 1444166044,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444166022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not sure if rand() distribution is bad per-se, but random() % N, where N is not a divisor of RAND_MAX will be skewed</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48007851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444166967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Think a random() that returns 0-20 and you call random() % 8</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48007894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>you will get</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48007909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>for each possible value of random()</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48007973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48008023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can see that 0 - 3 is a bit more likely than the rest</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48008056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>But this long rant is essentially only relevant with big N / RAND_MAX</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48008093,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>And it should be 100% undetectable in your case</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48008111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167113,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, umh, yeah I guess I'm not making any point here xD just telling you about something I found interesting</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48008201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444167158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><img alt=\":thumbsup:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/thumbsup.png\" title=\":thumbsup:\"> Interesting stuff == best part of RC <img alt=\":smiley:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smiley.png\" title=\":smiley:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48010579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444169008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>My 2 cents here, I think that getting a seed for a random number generator is an OS-specific task. For example on linux just read from /dev/urandom. On Windows use CryptGenRandom. Once you have a seed, implement something like Mersenne Twister, which depending on how you implement it gives you a guaranteed number of bits of randomness such as 32. The problem with random() and rand() is that they operate on global state. To get even distribution in a range such as [0, N), you can treat the 32 bits of randomness as an unsigned integer, convert to float, divide by 2 ^ 32 + 1, then multiply by N, then cast back to integer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48023760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444180533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"johnjworkman@gmail.com\">@John J. Workman (S'11)</span> : see section 3 of <a href=\"http://www.cs.berkeley.edu/~stephentu/writeups/passgen.pdf\" target=\"_blank\" title=\"http://www.cs.berkeley.edu/~stephentu/writeups/passgen.pdf\">http://www.cs.berkeley.edu/~stephentu/writeups/passgen.pdf</a> for a elaboration of why <code>rand() % N</code> is not uniform, and for one approach to sampling uniformly from a discrete set </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48034922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444191273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> hit it right on</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48035523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444191876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span>: that feels scary, I usually just discard and retry if I get a result higher than (MAX_RAND // N) * N</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48035635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444192001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"filippo.valsorda@gmail.com\">@Filippo Valsorda (F'13)</span> I'm not sure exactly what you mean. Here's what I proposed:</p>\n<div class=\"codehilite\"><pre>static int rand_range(int n) {\n    uint32_t rnd_val = get_random_uint32();\n    return (rnd_val / (((float)UINT32_MAX)+1.0f)) * n;\n}\n</pre></div>\n\n\n<p>Are you suggesting to change that to...</p>\n<div class=\"codehilite\"><pre>static int rand_range(int n) {\n    uint32_t rnd_val = UINT32_MAX;\n    while (rnd_val == UINT32_MAX)\n        rnd_val = get_random_uint32();\n    return (rnd_val / ((float)UINT32_MAX)) * n;\n}\n</pre></div>\n\n\n<p>...in order to get rid of the <code>+1.0f</code>?</p>\n<p>If so, I think that seems reasonable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038477,
            "is_me_message": false,
            "last_edit_timestamp": 1444195053,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>I meant this:</p>\n<div class=\"codehilite\"><pre>static int rand_range(int n) {\n    uint32_t rnd_val = UINT32_MAX;\n    while (rnd_val &gt;= (UINT32_MAX / n) * n)\n        rnd_val = get_random_uint32();\n    return rnd_val % n;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>Mostly because I never really learned floats binary representation enough to wrap my mind around casting them</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/044b59a59f2bfb736b3142db2cd025ca?d=identicon&version=1",
            "client": "website",
            "content": "<p>For example reading your code I wouldn't know if the intermediate float retained enough precision, and if multiplying a 0-1 float and N made the distribution uniform in N. (Not saying that it doesn't, just things I don't understand enough)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038814,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hi@filippo.io",
            "sender_full_name": "Filippo Valsorda (F2'17)",
            "sender_id": 2884,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>I see. You're re-rolling if the random value falls in the range that would cause nonuniformity. I agree it's a lot more clear that code is trustworthy than mine. Nice!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48038842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Either way, my main point here is that getting the seed from the OS's entropy pool is a better solution than <code>srand(time(NULL))</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48039005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>dank line wrapping, yo. ![](<a href=\"http://i.imgur.com/FdM3X1o.png\" target=\"_blank\" title=\"http://i.imgur.com/FdM3X1o.png\">http://i.imgur.com/FdM3X1o.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"http://i.imgur.com/FdM3X1o.png\" target=\"_blank\" title=\"http://i.imgur.com/FdM3X1o.png\"><img src=\"https://external-content.zulipcdn.net/0d42dea9d935253c434c5bce46913992814d6765/687474703a2f2f692e696d6775722e636f6d2f46644d3358316f2e706e67\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48039076,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "srandom()",
            "submessages": [],
            "timestamp": 1444195684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I'm looking for a unittest frameowork to use in my C project. In the past I've used minunit: <a href=\"http://www.jera.com/techinfo/jtns/jtn002.html\" target=\"_blank\" title=\"http://www.jera.com/techinfo/jtns/jtn002.html\">http://www.jera.com/techinfo/jtns/jtn002.html</a> put it's functionality is useful though...minimal. Are there any more useful test frameworks for C?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48380656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444849278,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>The project I'm building is a slab allocator so a framework that forks a process to run the unit under test would probably be beneficial.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48380802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444849484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7434fb7a6fe0a9c13487d68ac5a38e1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe <a href=\"http://developer.gimp.org/api/2.0/glib/index.html\" target=\"_blank\" title=\"http://developer.gimp.org/api/2.0/glib/index.html\">Glib</a> ? It has a Testing library, but the docs are sparse</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48384503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "davidnmfarrell@gmail.com",
            "sender_full_name": "David Farrell (F2'15)",
            "sender_id": 8679,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444855016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"davidnmfarrell@gmail.com\">@David Farrell (F2'15)</span> looks like they have an object cache similar to what I'm building: <a href=\"http://developer.gimp.org/api/2.0/glib/glib-Memory-Slices.html\" target=\"_blank\" title=\"http://developer.gimp.org/api/2.0/glib/glib-Memory-Slices.html\">http://developer.gimp.org/api/2.0/glib/glib-Memory-Slices.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7434fb7a6fe0a9c13487d68ac5a38e1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah but is it called \"hickory\"?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "davidnmfarrell@gmail.com",
            "sender_full_name": "David Farrell (F2'15)",
            "sender_id": 8679,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Maybe I'll be able to reuse there tests...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>lol</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>no it's not</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7434fb7a6fe0a9c13487d68ac5a38e1c?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh yeah, haha</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48385310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "davidnmfarrell@gmail.com",
            "sender_full_name": "David Farrell (F2'15)",
            "sender_id": 8679,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1444856331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't expect this behavior:</p>\n<div class=\"codehilite\"><pre>int main() {\n  bool wat = false;\n  printf(&quot;%d&quot;, wat);\n  ++wat;\n  printf(&quot;%d&quot;, wat);\n  ++wat;\n  printf(&quot;%d&quot;, wat);\n  ++wat;\n  --wat;\n  printf(&quot;%d&quot;, wat);\n}\n</pre></div>\n\n\n<p>Output:</p>\n<div class=\"codehilite\"><pre>0110\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48827779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1445837192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also unexpected to me is that it's legal in C to <code>--</code> a bool, but not in C++ (although you can <code>++</code> it, at least until C++17).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48827783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1445837231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b0aaf017ede1c6cd8f546531ead124bbed75fabe?x=x&version=4",
            "client": "website",
            "content": "<p>Does this actually compile down to anything relevant at the machine level? At least the second <code>++wat</code> when <code>wat</code> is already <code>true</code>??</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48955849,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "brad@isbrad.com",
            "sender_full_name": "Bradley Boccuzzi (he/they) (S1'15)",
            "sender_id": 8094,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446077989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I can kind of intuit what it's doing. <code>bool</code> is (or at least was) an <code>int</code> under the hood. The result of <code>++</code> and <code>--</code> is probably being clamped to 0 and 1. It'd be interesting to see what happens in an older compiler that doesn't treat <code>bool</code> as a first-class type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48956547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446079422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I agree that's what's happening, but it seems weird that someone would make that choice. For me, here's the list of possible options in decreasing order of intuitiveness.<br>\n1. Not allowing any sort of addition or subtraction.<br>\n2. Allowing <code>+</code> and <code>-</code>, with <code>+</code> as <code>or</code> and <code>-</code> as <code>and</code>.<br>\n3. Treating <code>bool</code> as<code>int</code><br>\n4. Treating <code>bool</code> as <code>int</code>, but making it 1 bit long, so <code>true++</code> overflows to <code>false</code>.<br>\n5. The actual behavior in C.<br>\n6. The actual behavior in C++.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48956723,
            "is_me_message": false,
            "last_edit_timestamp": 1446080123,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446079793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Maybe swap 2 and 3, or even bump it down to 4. But the actual behavior is definitely the last thing I expected.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48956872,
            "is_me_message": false,
            "last_edit_timestamp": 1446080061,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446080045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>Even though it's not ideal, 3 would have been my guess had I not seen the output.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48956922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446080163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>I now want to read the C99 spec, but apparently you have to pay for it? Jeez.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48956956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446080201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jay@jayschwa.net\">@Jay Weisskopf (W'13)</span> The pre-standardization working drafts are public, so the usual workaround is to read the final committee draft instead.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48959063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446084514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems the <code>bool</code> is being promoted to <code>int</code> when used in expressions, then converted back to <code>bool</code> when assigned.  Conversion to <code>bool</code> treats every non-zero value as true.  (I'm looking at sections 6.3.1.1 and 6.3.1.2 of <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\">WG14 N1256</a>.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 48959253,
            "is_me_message": false,
            "last_edit_timestamp": 1446085126,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "++bool",
            "submessages": [],
            "timestamp": 1446084904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgilbert@backtick.net\">@Benjamin Gilbert (F2'15)</span> Looks like significant overlap with the stuff we were discussing earlier: <a href=\"http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf\" target=\"_blank\" title=\"http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf\">http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49517314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "jpl c coding standard",
            "submessages": [],
            "timestamp": 1447266861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, interesting, it incorporates parts of <a href=\"https://en.wikipedia.org/wiki/MISRA_C\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/MISRA_C\">MISRA C</a> by reference.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49518073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "jpl c coding standard",
            "submessages": [],
            "timestamp": 1447268083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Yup!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49518081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "jpl c coding standard",
            "submessages": [],
            "timestamp": 1447268104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks for the link, BTW.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49518094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "jpl c coding standard",
            "submessages": [],
            "timestamp": 1447268126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span> This is what I ended up with after our chat yesterday:</p>\n<div class=\"codehilite\"><pre>CC = clang\nCFLAGS = -MD -Wall -Werror -std=c99 -I/usr/local/include\n\nLDFLAGS = -L/usr/local/lib\nLDLIBS = -lexif\n\nSRCS = $(wildcard src/*.c)\nOBJS = $(SRCS:.c=.o)\nDEPS = $(SRCS:.c=.d)\n\nexifcool: $(OBJS)\n    $(CC) $^ $(LDFLAGS) $(LDLIBS) -o $@\n\n%.o: %.c\n    $(CC) $*.c $(CFLAGS) -c -o $@\n\n-include $(DEPS)\n\n.PHONY: clean\nclean:\n    rm -f src/*.o src/*.d\n    rm -f exifcool\n</pre></div>\n\n\n<p>Does this seem reasonable? I've confirmed this works, and only recompiles files that have changed before linking.</p>\n<p>The <code>include</code> and <code>lib</code> dirs are for a third-party library (<code>libexif</code>) that I've installed with Homebrew.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49853515,
            "is_me_message": false,
            "last_edit_timestamp": 1447968750,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447968588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"johnjworkman@gmail.com\">@John J. Workman (S'11)</span> unless I'm misunderstanding something, you shouldn't need the <code>%.o: %.c</code> rule. Make has one of those built in. I also shy away from <code>$@</code> and <code>$^</code> and stuff like that because I don't remember what they mean (repeating exifcool and $(OBJS) in your first rule doesn't seem like such a big deal to me), That said, I'm a grouch and I think using them is fine.</p>\n<p>If it were me, I would probably just shove -lexif into LDFLAGS</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49855232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447970756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I still think there should be a built in rule of building a binary from a bunch of objects, using either $(CC) or $(LD) and $(LDFLAGS), but I don't know what it is</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49855281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447970804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>In case anyone's curious: <a href=\"https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules\" target=\"_blank\" title=\"https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules\">https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49859978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447978032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>OK, cool--the part I was missing was seeing what kinds of params/flags were automatically included with the implicit rules. I think I see how to simplify it now. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49860075,
            "is_me_message": false,
            "last_edit_timestamp": 1447978302,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447978190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>^ <span class=\"user-mention\" data-user-email=\"dave@hackerschool.com\">@David Albert</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49860138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447978292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p>OK, so I've gotten here (decided to keep <code>LDFLAGS</code> and <code>LDLIBS</code> separate, per the <code>make</code> docs):</p>\n<div class=\"codehilite\"><pre>CC = clang\nCFLAGS = -MD -Wall -Werror -std=c99 -I/usr/local/include\n\nLDFLAGS = -L/usr/local/lib\nLDLIBS = -lexif\n\nSRCS = $(wildcard src/*.c)\nOBJS = $(SRCS:.c=.o)\nDEPS = $(SRCS:.c=.d)\n\nexifcool: $(OBJS)\n    $(CC) $(OBJS) $(LDFLAGS) $(LDLIBS) -o exifcool\n\n.PHONY: clean\nclean:\n    rm -f exifcool $(OBJS) $(DEPS)\n</pre></div>\n\n\n<p>I think there should be a way to get the object-to-binary step (<code>exifcool</code>) for free, as you said, though I'm not sure what that looks like even after reviewing the docs.</p>\n<p>Maybe we can chat briefly tomorrow. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49862776,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1447981664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"johnjworkman@gmail.com\">@John J. Workman (S'11)</span> Read the \"Linking a single object file\" section of the catalog of rules docs. Looks like you can build exifcool out of multiple source files automatically, as long as one of them is named exifcool.c</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 49890710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "makefiles",
            "submessages": [],
            "timestamp": 1448041683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c7e287de43f7dfe3d5a83147b3578a9f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"jesse.dumond@gmail.com\">@Jesse DuMond (F2'15)</span>, I just ran into <a href=\"https://github.com/ThrowTheSwitch/Unity\" target=\"_blank\" title=\"https://github.com/ThrowTheSwitch/Unity\">Unity</a> and <a href=\"https://github.com/ThrowTheSwitch/CMock\" target=\"_blank\" title=\"https://github.com/ThrowTheSwitch/CMock\">CMock</a> (they work together), how did things go with the Glib code? Were you able to re-use come of their tests?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50278309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gon.bulnes@fastmail.com",
            "sender_full_name": "Gonzalo Bulnes Guilpain (he) (F2'15)",
            "sender_id": 8710,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1448920542,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I actually used minunit: <a href=\"http://www.jera.com/techinfo/jtns/jtn002.html\" target=\"_blank\" title=\"http://www.jera.com/techinfo/jtns/jtn002.html\">http://www.jera.com/techinfo/jtns/jtn002.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50278653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1448920980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6488322b94620c794292ed663657260?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It's a unit testing \"framework\" in 3 lines of code</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50278671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jesse.dumond@gmail.com",
            "sender_full_name": "Jesse DuMond (F2'15)",
            "sender_id": 8692,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1448921008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c7e287de43f7dfe3d5a83147b3578a9f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I like that : )</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50280360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gon.bulnes@fastmail.com",
            "sender_full_name": "Gonzalo Bulnes Guilpain (he) (F2'15)",
            "sender_id": 8710,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit testing framework",
            "submessages": [],
            "timestamp": 1448923315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey y'all, I'm at the point in my first substantial c project that I could probably benefit a lot from learning make... does anyone have some good resources for that or a fav tutorial or anything? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50348855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449023419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am of the opinion that finding a simple enough working Makefile on github, tweaking it to work for your project, and then copying it as a template is the way to go</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50349032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449023813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>sort of like latex templates</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50349033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449023817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>your mileage may vary</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50349036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449023830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tu.stephenl@gmail.com\">@Stephen Tu</span> : thanks I will try that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50349142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449024089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c35ca5c26afe5ce2b62e0d25c9af7c50a096323c?x=x&version=1",
            "client": "website",
            "content": "<p>For basic usage, I agree that fiddling with a working example is the way to start. In addition, in a previous life, I found <a href=\"http://www.oreilly.com/openbook/make3/book/index.csp\" target=\"_blank\" title=\"http://www.oreilly.com/openbook/make3/book/index.csp\">this book</a> to be quite useful.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50371222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joppeschwartz@gmail.com",
            "sender_full_name": "Joe Schwartz (F1'14)",
            "sender_id": 6418,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449065456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\">@Jeff Fowler (W'14)</span> Wow, really topical question--I just also spent time brushing up on my <code>make</code> skills. :-)</p>\n<p>I'm not sure where you're at with your projects; I was basically just using <code>make</code> to build my stuff blindly, focusing more on the C code than the build tools. When I got to bigger projects, though (more than a couple source files in a separate <code>src</code> dir), I realized I needed to check my understanding of what <code>make</code> was doing.</p>\n<p>If you happen to be in a similar spot, some things that helped me:</p>\n<ul>\n<li>\n<p>making sure I really understood the build process (i.e., compiling sources to objects, linking objects, how those make an executable, etc.) - I had developed some odd patterns (e.g., <code>include</code>-ing all the sources in one file, then compiling that to a big object, vs. compiling individual objects and then linking them only when dependencies changed) because I wasn't cognizant of what exactly was happening</p>\n</li>\n<li>\n<p>taking a look at all <code>make</code>'s implicit rules, so that I knew what commands were effectively being run in different situations</p>\n</li>\n<li>\n<p>wrapping my head around the idea of a Makefile as a dependency graph</p>\n</li>\n<li>\n<p>finally, taking a look at some simple Makefiles (on GitHub), then copying parts of them once I was sure I knew what was happening - in particular, I found looking at <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall (S'13)</span>'s projects really illustrative</p>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50374448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "make",
            "submessages": [],
            "timestamp": 1449071321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is TweetNaCl's implementation of \"safely compare two strings\":</p>\n<div class=\"codehilite\"><pre><span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">vn</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">u8</span> <span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"k\">const</span> <span class=\"n\">u8</span> <span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">u32</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">FOR</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">d</span> <span class=\"o\">|=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">^</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&amp;</span> <span class=\"p\">((</span><span class=\"n\">d</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I get the FOR loop.  But what's the return line doing?  Is it just <code>return d == 0</code>?  (If so, why not just use that?)</p>\n<p>Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50576167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449507949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It avoids a branch at the cost of four alu ops. I suspect that's not a good trade for most workloads.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50576885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449509181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50576899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449509200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>If d is 0, d-1 should be <code>111.....</code>. Ignoring the &gt;&gt; 8 for a second, if you do <code>&amp;1</code>, you'll get 1. Then if you subtract 1, you'll get 0. If d is</p>\n<p>If d is a non-zero value, only the lower 8 bits will be set. So I think you'll get 0, and then you'll subtract 1 to get <code>111111</code>? I should just run this code instead of thinking about it but I have a meeting starting right now.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50577060,
            "is_me_message": false,
            "last_edit_timestamp": 1449509641,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449509434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> By the way, the reason we're avoiding bailing out early is to resist timing attacks, so if d == 0 *isn't* constant time, that could explain it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50577402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449509959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, yeah, that makes sense. The bitwise ops aren't exactly constant time, but they should be less variable than a branch.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50577698,
            "is_me_message": false,
            "last_edit_timestamp": 1449510394,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449510370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> Thanks! Why is <code>return d == 0</code> a branch?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50578082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449511039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh wait, it returns 0 on success.  But I'm still not sure why we have to use a branch for anything.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50578137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449511150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Unless the compiler turns <code>==</code> into a <code>cmov</code>, I'd expect most <code>==</code> operations to turn into a comparison that sets some flag, and then a branch on the flag.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50578142,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449511192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't really kept up on microoptimizations, but I believe that <code>cmov</code> is only a significant advantage on K7 and K8 chips (and maybe various P4s?), so I wouldn't expect a compiler to try to sub <code>cmov</code> for a naive compare and branch.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50578402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449511505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm, I just compiled tweetnacl orig, and with the last line changed to <code>return d == 0</code>, and I don't see any new branches but I'm no good with asm.  Before:</p>\n<div class=\"codehilite\"><pre>.LFB5:\n        .cfi_startproc\n        pushq   %rbp\n        .cfi_def_cfa_offset 16\n        .cfi_offset 6, -16\n        movq    %rsp, %rbp\n        .cfi_def_cfa_register 6\n        movq    %rdi, -24(%rbp)\n        movq    %rsi, -32(%rbp)\n        movl    %edx, -36(%rbp)\n        movq    $0, -8(%rbp)\n        movq    $0, -16(%rbp)\n        jmp     .L16\n.L17:\n        movq    -24(%rbp), %rdx\n        movq    -16(%rbp), %rax\n        addq    %rdx, %rax\n        movzbl  (%rax), %ecx\n        movq    -32(%rbp), %rdx\n        movq    -16(%rbp), %rax\n        addq    %rdx, %rax\n        movzbl  (%rax), %eax\n        xorl    %ecx, %eax\n        movzbl  %al, %eax\n        orq     %rax, -8(%rbp)\n        addq    $1, -16(%rbp)\n.L16:\n        movl    -36(%rbp), %eax\n        cltq\n        cmpq    -16(%rbp), %rax\n        ja      .L17\n        movq    -8(%rbp), %rax\n        subq    $1, %rax\n        shrq    $8, %rax\n        andl    $1, %eax\n        subl    $1, %eax\n        popq    %rbp\n        .cfi_def_cfa 7, 8\n        ret\n        .cfi_endproc\n</pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre>vn:\n.LFB5:\n        .cfi_startproc\n        pushq   %rbp\n        .cfi_def_cfa_offset 16\n        .cfi_offset 6, -16\n        movq    %rsp, %rbp\n        .cfi_def_cfa_register 6\n        movq    %rdi, -24(%rbp)\n        movq    %rsi, -32(%rbp)\n        movl    %edx, -36(%rbp)\n        movq    $0, -8(%rbp)\n        movq    $0, -16(%rbp)\n        jmp     .L16\n.L17:\n        movq    -24(%rbp), %rdx\n        movq    -16(%rbp), %rax\n        addq    %rdx, %rax\n        movzbl  (%rax), %ecx\n        movq    -32(%rbp), %rdx\n        movq    -16(%rbp), %rax\n        addq    %rdx, %rax\n        movzbl  (%rax), %eax\n        xorl    %ecx, %eax\n        movzbl  %al, %eax\n        orq     %rax, -8(%rbp)\n        addq    $1, -16(%rbp)\n.L16:\n        movl    -36(%rbp), %eax\n        cltq\n        cmpq    -16(%rbp), %rax\n        ja      .L17\n        cmpq    $0, -8(%rbp)\n        sete    %al\n        movzbl  %al, %eax\n        popq    %rbp\n        .cfi_def_cfa 7, 8\n        ret\n        .cfi_endproc\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50578638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449511827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>(So the three new operations if you <code>return d == 0</code> are cmpq, sete, and movzbl, and none are branches and I dunno if they're constant time but probably?)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50579265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449512828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50579515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449513082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Setcc is basically the same as cmov. I'm surprised that's used there.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50579544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449513125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>From <a href=\"http://www.agner.org/optimize/instruction_tables.pdf\" target=\"_blank\" title=\"http://www.agner.org/optimize/instruction_tables.pdf\">this table</a> I see that it has 1 cycle latency and that you can do 2 per cycle. I didn't realize that was fast on Intel chips now.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50579634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449513240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got another theory from a friend:</p>\n<blockquote>\n<p>maybe it's a way of keeping the optimizer from inserting some (potentially timing-leaking) __builtin_whatvercmp() instead of the emitting function at all</p>\n</blockquote>\n<p>Security software is thorny huh.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50580308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449514227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW I'm compiling on a Skylake machine but I just did <code>gcc *.c</code>, no tuning or optimization flags.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50580965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1449515252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>to wit:</p>\n<div class=\"codehilite\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>\n<span class=\"cp\">#include &lt;stdlib.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">thing</span> <span class=\"o\">=</span>  <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n    <span class=\"o\">*</span><span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">thing</span><span class=\"p\">);</span>\n    <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">thing</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>results in: </p>\n<div class=\"codehilite\"><pre>8\n8\n</pre></div>\n\n\n<p>so,  I'm pointing at an <code>int</code> sized chunk of memory, assigning a value to it, and the printing it. when I free it, that means that I've just let the system know that that chunk can be recycled into the heap again, but it leaves the value at what I set it at, and since I still have a reference to that pointer I can read from it right after deallocation, but that that value is no longer definitely going to be there after more <code>malloc</code>s because the system may or may not reuse it. Is this correct?</p>\n<p>If so, I am continually amazed by c's unbounded opportunities for introducing subtle bugs in insidious ways. I both love and hate that. <img alt=\":heart_eyes_cat:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/heart_eyes_cat.png\" title=\":heart_eyes_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50640057,
            "is_me_message": false,
            "last_edit_timestamp": 1449620510,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449620492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Yes, that's correct.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50640487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449621223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Looks like someone started a Wikipedia page <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Dangling_pointer\">just on this issue</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50640556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449621353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\">@Pierre-Yves Baccou (F'13)</span> : ty for the sanity check!  I had heard the term <code>dangling pointer</code> before but assumed it meant a pointer pointing to something that no longer exists in memory at all, which it seems is only half right.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50641273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449622714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>One answer is to always set a pointer to 0 after freeing it. (as per <a href=\"https://en.wikipedia.org/wiki/Page_fault#Invalid\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Page_fault#Invalid\">https://en.wikipedia.org/wiki/Page_fault#Invalid</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50641608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449623368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, C is terrifying (and delightful).  I like valgrind because it will detect and complain about use-after-free errors.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50651129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "is `free` doing what I think it is?",
            "submessages": [],
            "timestamp": 1449643781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621\" target=\"_blank\" title=\"https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621\">Calculate factorials in constant time with this one weird tip.</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50980928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "undefined behavior",
            "submessages": [],
            "timestamp": 1450298725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is super cool :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50982134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "undefined behavior",
            "submessages": [],
            "timestamp": 1450299764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/45bd39612f271307fa30b402affa27fadb96c827?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bgilbert@backtick.net\">@Benjamin Gilbert (F2'15)</span> A+ article *and* description. <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 50982212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jjw@hey.com",
            "sender_full_name": "John J. Workman (he) (S'11)",
            "sender_id": 1001,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "undefined behavior",
            "submessages": [],
            "timestamp": 1450299933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9255b40357bf538ea5e4f7d552ef5cdd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wowwww. Just wanted to pipe in to say that was a fascinating conversation! Security programming like this sounds *crazy* tricky and detailed!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51656650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chaselambda@gmail.com",
            "sender_full_name": "Chase Lambert (F2'14)",
            "sender_id": 6690,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1451777636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>agreed with <span class=\"user-mention\" data-user-email=\"chaselambda@gmail.com\">@Chase Lambert (F2'14)</span>! i'd find an annotated version of TweetNaCl (or any security library) really useful</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 51661946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "What does this do?",
            "submessages": [],
            "timestamp": 1451790408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>My (possibly flawed) understanding of how memory works in C is that when your application starts, the OS will allot so much virtual memory to your application (say ~2 gigs), and then as your code generates local variables it will push them onto a stack beginning with a low addresses in memory and building upwards, while calls to allocate memory on the heap will start at the highest address it can find with a block of memory that's the right size; if the stack and heap overlap, derp, stack overflow and the application crashes.<br>\nBut when you have multithreaded applications, each thread has it's own function stack, but they all also have access to the same single heap, right?  So where in memory do these extra stacks go?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52277921,
            "is_me_message": false,
            "last_edit_timestamp": 1453073498,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453073385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>I think the memory layout you describe is not generally the case, it's just a possible implementation on some systems.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453074837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>It could also be that the OS programs the MMU so that each thread's stack points to a different physical memory area. (I would need to revise my understanding of hardware to see if that makes sense, it's been a while)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52278594,
            "is_me_message": false,
            "last_edit_timestamp": 1453075049,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453075012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah I was wondering if the multiple stacks would end up being started in the middle of the applications memory, but then you'd have cases where one stack could override another when there are big chunks of free space elsewhere in the application's memory- the nice thing about the stack-bottom-up + heap-top-down layout is that a stack overflow would only happen when the application's used every chunk of memory available to it already (assuming your heap isn't severely fragmented).  I was wondering if there was some sort of implementation for multiple threads that would give you similar functionality (overflows only happening when all application memory is already exhausted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52279054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453076052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Threads have stacks spaced apart by some fixed amount. In Linux, you can play with this by setting <code>ulimit -s</code>. This is unlikely to matter on a 64-bit machine unless you're doing something pretty exotic, but it's possible to run out of space for new threads if you set <code>ulimit -s</code> high and then create a bunch of threads on a 32-bit machine. <a href=\"https://github.com/danluu/dump/blob/master/cpp-experiments/thread/addr.cc\" target=\"_blank\" title=\"https://github.com/danluu/dump/blob/master/cpp-experiments/thread/addr.cc\">Here's a simple program that demonstrates part of this</a>. It uses some C++, but you could write the same thing in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52286130,
            "is_me_message": false,
            "last_edit_timestamp": 1453142289,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453095049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In windows, you can adjust this by passing an arg to  <code>System.Threading.Thread</code>, although the recommendation is that you should never do that in practice :-).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52286233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453095279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "desktop app Linux 0.4.4",
            "content": "<p>Thanks for a proper actual answer <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span>  ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52300249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453129782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, thanks a lot Dan!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52306233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How does memory work in multithreaded applications?",
            "submessages": [],
            "timestamp": 1453141577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all y'all <code>C party people</code>. I wrote my first substantial project in C late last year and would really love to have it looked at with some more experienced eyes. It is a lisp interpreter and it lives here:</p>\n<p><a href=\"https://github.com/urthbound/sild\" target=\"_blank\" title=\"https://github.com/urthbound/sild\">https://github.com/urthbound/sild</a></p>\n<p>Some notes:<br>\n- The makefile totally sucks! I need some advice on dep management and make specifically in C, as this is the first thing I've written of any complexity at all. <br>\n- I bet there are a lot of things about writing modern C that I'm just straight up missing, <a href=\"https://matt.sh/howto-c\" target=\"_blank\" title=\"https://matt.sh/howto-c\">this</a> kind of tipped me off to that. <br>\n- if you happen to dig deeply into this code, you will notice that the memory management is completely borked. I am aware and the next thing on my list is to deal with deallocation of the objects internal to the language, but I've been blocked on that for a while and I think the appropriate next step is to address the low hanging fruit of the code's structure and accompanying unidioms.</p>\n<p>I am super duper proud of this project, though, and have managed to get it reading forms in almost constant time (no recursive length read ahead!) and executing higher order functions and all kinds of other neat stuff! It would be great to get it into a state that would be usable for simple tasks / write in an FFI to call out to other processes, etc, but we'll see! I learned an enormous amount about both lisp and C doing this, and hope to clean this up as much as possible, iron out some of the obvious bugs, and write it up at some point. </p>\n<p>NO RUSH AND ANY HELP IS APPRECIATED! Please feel free to github pr/ / pm me / email at <a href=\"mailto:jeffowler@gmail.com\" title=\"mailto:jeffowler@gmail.com\">jeffowler@gmail.com</a>!</p>\n<p><code>thanks!!!</code><br>\n<img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> <img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> <img alt=\":octopus:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/octopus.png\" title=\":octopus:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 52393562,
            "is_me_message": false,
            "last_edit_timestamp": 1453316415,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Code Review Request for a Lisp",
            "submessages": [],
            "timestamp": 1453316301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"brmscheiner@gmail.com\">@Ben Scheiner (W2'16)</span>  <span class=\"user-mention\" data-user-email=\"cheng754@gmail.com\">@Shaun Yi Cheng (SP1'16)</span> <span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53453285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455638807,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>Here's the code from last night <a href=\"https://bitbucket.org/ryry/lzw\" target=\"_blank\" title=\"https://bitbucket.org/ryry/lzw\">https://bitbucket.org/ryry/lzw</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53453290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455638828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>Y'all might also find this ebook interesting: <a href=\"http://mattmahoney.net/dc/dce.html\" target=\"_blank\" title=\"http://mattmahoney.net/dc/dce.html\">http://mattmahoney.net/dc/dce.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53453302,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455638868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>hey</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53454311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455640353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>I think the bug we had last night is caused by when the buffer is at capacity, we didn't adjust the position of the head to throw away data, we only ++ the tail.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53454528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455640632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah I just noticed that. Thanks, I'll fix it by the time we meet</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53454613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1455640768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9f2743b667aac9a8a402e1cce3494c75f06b36a7?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cheng754@gmail.com\">@Shaun Yi Cheng (SP1'16)</span> <span class=\"user-mention\" data-user-email=\"ryan.david.reyes@gmail.com\">@Ryan-David Rimando Reyes (SP1'16)</span>  y'all wanna meet soon?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53778687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "brmscheiner@gmail.com",
            "sender_full_name": "Ben Scheiner (W2'16)",
            "sender_id": 8976,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456347925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>at 5?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53779347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456348897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9f2743b667aac9a8a402e1cce3494c75f06b36a7?x=x&version=1",
            "client": "website",
            "content": "<p>Shaun has chess after the algorithms meeting, so tomorrow! I might actually check out the algorithms group too =]</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53779514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "brmscheiner@gmail.com",
            "sender_full_name": "Ben Scheiner (W2'16)",
            "sender_id": 8976,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456349154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d6dd63ec1b6626857e93dc12cae76bc52f09f617?x=x&version=1",
            "client": "website",
            "content": "<p>Ahhh always tomorroww. OK tomorrow first thing then. xD</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53779764,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ryan.david.reyes@gmail.com",
            "sender_full_name": "Ryan-David Reyes (he) (SP1'16)",
            "sender_id": 9103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456349461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9f2743b667aac9a8a402e1cce3494c75f06b36a7?x=x&version=1",
            "client": "website",
            "content": "<p>deal!!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53779999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "brmscheiner@gmail.com",
            "sender_full_name": "Ben Scheiner (W2'16)",
            "sender_id": 8976,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456349772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>Ben  we can meet after the algorithm talk. My chess thing got cancelled</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53780370,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456350400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>My opponent forfeited</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53780389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456350448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9f2743b667aac9a8a402e1cce3494c75f06b36a7?x=x&version=1",
            "client": "website",
            "content": "<p>oooh they must have been scared. <span class=\"user-mention\" data-user-email=\"ryan.david.reyes@gmail.com\">@Ryan-David Rimando Reyes (SP1'16)</span> you in?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 53780746,
            "is_me_message": false,
            "last_edit_timestamp": 1456350962,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "brmscheiner@gmail.com",
            "sender_full_name": "Ben Scheiner (W2'16)",
            "sender_id": 8976,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1456350949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had no idea you could just arbitrarily scope C like this</p>\n<div class=\"codehilite\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n                <span class=\"p\">{{{{{{{{</span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);}}}}}}}}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%i</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54097889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lulz",
            "submessages": [],
            "timestamp": 1457046762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f7104072fb0df0acc29881b20185754193a21285?x=x&version=1",
            "client": "desktop app Mac 0.5.1",
            "content": "<p>Absolutely! You can make blocks wherever you want!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54098354,
            "is_me_message": false,
            "last_edit_timestamp": 1457047666,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ben@happyspork.com",
            "sender_full_name": "Ben Anderman (he) (SP1'16)",
            "sender_id": 9085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lulz",
            "submessages": [],
            "timestamp": 1457047656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>what about here? </p>\n<div class=\"codehilite\"><pre><span class=\"p\">{</span>\n\n                                                       <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">whaaaaaaaaat</span> <span class=\"o\">=</span> <span class=\"s\">&quot;whatttttt??&quot;</span>\n<span class=\"p\">{{{</span>     <span class=\"p\">{{</span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">whaaaaaaaaat</span><span class=\"p\">))}</span>\n\n<span class=\"p\">}}</span>   \n <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54098626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lulz",
            "submessages": [],
            "timestamp": 1457048082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>lol obfuscated c is hilarious</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54098633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lulz",
            "submessages": [],
            "timestamp": 1457048096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am wondering what the best / fastest thing to do is in this situation.</p>\n<p>Let's say I have a string of indeterminate length:</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">thingy</span> <span class=\"o\">=</span> <span class=\"s\">&quot;I am a string of indeterminant length&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>And I want to make a function that copies that string into a block of malloc'd memory, like so:</p>\n<div class=\"codehilite\"><pre><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">copystring</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"cm\">/* some length */</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"cm\">/* same some length */</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"cm\">/* same length again */</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>For the sake of argument (and my real world use case) also assume that the input string I want copied and returned is or could be a substring, and so isn't necessarily null terminated.</p>\n<p>I need to get that length in order to allocate the appropriate memory, and to know how much of the input to copy. Is it better to:<br>\na) iterate through the input an extra time to get that length value<br>\nb) malloc'ing a default large buffer size,  keeping track of how many things I've copied in the for loop, and then reallocing to resize back to the correct size.</p>\n<p><code>a</code> is foolproof, I'll always allocate the right amount of memory, and I don't have to worry about buffer overflow. but I have to iterate through the input string an extra time.<br>\n<code>b</code> is... idk? I don't know how realloc really works, or if keeping track of the input stream takes the same or more computations as or than just iterating through the string like <code>a</code></p>\n<p>any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54109783,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457074951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>How are you determining the length if it's not nul-terminated?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54110938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457078216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>In any case, for the question as posed, the answer is almost certainly going to be \"just use <code>strdup</code>/<code>strndup</code>\", although it's unclear if there are additional requirements that make those not acceptable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54110985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457078370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>there are... I'm specifically thinking of substrings. For example, taking the string above and splitting it manually on whitespace. The <code>copystring</code> function would be used by a reader function to copy .... </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>i just realized something kind of bonkers</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I may not need to copy anything at all</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113159,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>if every substring I want to pull out of something has a space after it, I could assign a pointer to the beginning of the substring and replace the space with a null byte</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>then I don't have to copy anything or allocate additional memory, assuming the string I'm trying to split is already on the heap</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's... not ideal in some situations, but might actually work in others.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54126994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>programming is weird</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54127001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's probably not the best solution because I'd have to deal with a lot of edge cases and the gain would be very minimal, but it's an interesting idea</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54127063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"doy@tozt.net\">@Jesse Luehrs (F1'14)</span> to answer your first question, though, a helper function like </p>\n<div class=\"codehilite\"><pre><span class=\"kt\">int</span> <span class=\"n\">count_substring_length</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>that simply starts at a point in a string and increments until it hits a \"terminating char\" like whitespace or whatever else, then returns an int that gives the calling function information about how far to read, malloc, etc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54127144,
            "is_me_message": false,
            "last_edit_timestamp": 1457113586,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>strtok operates that way -- by just replacing delimiters with \\0.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54127336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457113981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"novalis@novalis.org\">@David Turner</span>  Oh cool! <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54127951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457115243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, <code>strtok</code> is actually what you want if that's what you're doing(:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54131643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457121757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>hehe, yeah i think it is :)</p>\n<p>I eventually want to be operating on file pointers though, so I think ultimately the copy *is* necessary</p>\n<p>I hate to iterate over the same chars twice but I think it's the only way to reliably allocate the right amount of heap for the copied substrings, and at least it's O(2) for those reads.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54131751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457121944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>tbh I'm being <strong>extremely</strong> fiddly about this. and the preallocating length read is really nbd I think</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54131830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457122076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>but I need to learn more about profiling so I can really understand what's going on. Thanks y'all</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54131868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457122098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>a) This is going to be fast enough that you really won't have any reason to care, unless you're doing something ridiculously performance-intensive. (My team writes code that handles millions of packets per second per core; we can afford judicious use of memcpy. High framerate video processing has similar constraints. Most other code really won't matter.)<br>\nb) The double-iterate approach will almost certainly be faster; memory operations like resizing chunks are slower than you'd think, both directly and indirectly in things like heap fragmentation and related overhead.<br>\nc) oprofile/gprof.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54133079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457124276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> , I will look into the profilers :) </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54133994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457125964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Beware that this is well into the territory of microbenchmarking, which comes with lots of subtle traps. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54134022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457126043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I have recognized that, but as someone who has been demonstrably susceptible to code golf challenges, I'm enjoying thinking about it ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54134276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457126457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I meant in terms of making sure your benchmarks actually reflect performance. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54134510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457126961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>after googling it, I realized that too lol</p>\n<p>both implications are valid, however </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54134628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457127092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>:D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54134630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "an efficiency question",
            "submessages": [],
            "timestamp": 1457127095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c9efeeb5aec96891ad658b527482ffff47d08a2a?x=x&version=1",
            "client": "website",
            "content": "<p>sure</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 54537681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "cheng754@gmail.com",
            "sender_full_name": "Shaun Yi Cheng (SP1'16)",
            "sender_id": 9087,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compressor",
            "submessages": [],
            "timestamp": 1458077123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, so, I'm a little confused about some best practices around header files, and there is a lot of noise on the interwebs. </p>\n<p>My understanding is that:<br>\n1 - every .c file that exposes external functionality should have its interfaces and structures defined in an .h file that it itself includes.<br>\n2- anything without a <code>main()</code> is then compiled as an object file which is all linked together later, BUT a header file should be able to compile by itself as an object file as well (as a test), and should include everything it _itself_ needs to compile and _nothing more_. </p>\n<p>I'm confused about where standard library includes go, though... </p>\n<p>let's say I have two pairs of two files:<code>lib.c</code>,<code>lib.h</code>, and <code>main.c</code>, <code>main.h</code>. <code>main.h</code>depends on lib for its function type declarations, but not the other way around. but both <code>.c</code> files depend on , idk, <code>stdlib.h</code> and <code>stdio.h</code>, but their associated headers do not. </p>\n<p>Where do these dependencies live, then? do the standard library includes happen behind guard macros in the .c files, and the headers include the other headers? does everything go in one big header and everything include it all at once?</p>\n<p>any best practices people have opinions about would be appreciated, it's a bit murky, and the water is further muddied by some people's insistence on equating <code>static:extern::private:public</code> in the OOP sense, which is kind of accurate but I feel not completely aligned.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56208402,
            "is_me_message": false,
            "last_edit_timestamp": 1461193650,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461191932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is the best thing I've been able to find but it doesn't seem to address everything:<br>\n<a href=\"http://umich.edu/~eecs381/handouts/CHeaderFileGuidelines.pdf\" target=\"_blank\" title=\"http://umich.edu/~eecs381/handouts/CHeaderFileGuidelines.pdf\">http://umich.edu/~eecs381/handouts/CHeaderFileGuidelines.pdf</a></p>\n<p>and I just found this which I might read<br>\n<a href=\"https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\" target=\"_blank\" title=\"https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\">https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/</a></p>\n<p>but :shrug: still  a little</p>\n<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56208474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461192051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Hey Jeff, you seem to have the correct understanding so far.</p>\n<p>Generally, what determines what goes in an .h file should be the function prototypes for the corresponding .c file, and then the types that this \"module\" if you will introduces in your abstraction tower.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56211236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not sure I understand your example, but maybe I can help explain anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56211444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Each .o file is produced independently from all other .o files via a separate invocation of the compiler.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56211475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>This is why you need .h files.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56211929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>So really, in C, your goal is merely to produce a bunch of .o files to link together into a final library or executable. The reason you might have more than one .o file is for your own abstraction benefit.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56212004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>So the answer is a bit murky.  Sometimes it can be helpful to put a lot of stuff in one .h file, sometimes it can be more helpful to have a bunch and keep them separate. It depends on how you do your abstraction.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56212110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>I don't know if that helps. Feel free to ask any specific questions and I'll see if I can help further.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56212203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461195560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>this does help. esp </p>\n<blockquote>\n<p>So really, in C, your goal is merely to produce a bunch of .o files to link together into a final library or executable</p>\n</blockquote>\n<p>this is the kind of overarching guideline I have been having trouble finding.  I'm still shaky on the system libraries, though, I've made a contrived example to show what I'm asking.</p>\n<p>If I want to go from a single file compiling directly to an executable, like this:<br>\n<a href=\"https://github.com/urthbound/h/commit/78a42f792522b8d98113fbd80adb447c70a5defe\" target=\"_blank\" title=\"https://github.com/urthbound/h/commit/78a42f792522b8d98113fbd80adb447c70a5defe\">https://github.com/urthbound/h/commit/78a42f792522b8d98113fbd80adb447c70a5defe</a></p>\n<p>to one like this:<br>\n<a href=\"https://github.com/urthbound/h/commit/6e4c3b32d829fbf763d41e7c74238f6b3a2d277e\" target=\"_blank\" title=\"https://github.com/urthbound/h/commit/6e4c3b32d829fbf763d41e7c74238f6b3a2d277e\">https://github.com/urthbound/h/commit/6e4c3b32d829fbf763d41e7c74238f6b3a2d277e</a></p>\n<p>where <code>gcc -c lib.c</code> followed by <code>gcc lib.o main.c -o executable</code> gives me a working binary.</p>\n<p>Where do the includes for each file go to be consistent? notice that both depend on  <code>stdio.h</code>, and one is including it in its own header and then including THAT in the <code>.c</code> file, while the other is including the stdio.h file directly in its c file,  while also including its own .h file, which means it's being included twice. is this where guard macros are useful? can I link the whole thing to a library in the compilation step or do I still have to <code>#include</code>it?</p>\n<p>the term \"header\" file makes me think that a corresponding .h file both provides what would be the prelude header inclusions in a single main.c file, but separated. this makes me think main.c should include main.h. but the convention that a .h file is defining an interface makes me think that is not how it should be. </p>\n<p>further, I would expect that including a file that depends on a standard library would make that standard library available to all files including the depender: meaning in <code>stdlib.h -&gt; lib.h -&gt; main.c</code> means that main.c should be able to utilize stdlib.h by including lib.h, but this seems not to be the case and this makes me think that that's about the limit of my C intuition.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56218899,
            "is_me_message": false,
            "last_edit_timestamp": 1461199365,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461198731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> ^ (thanks btw! <img alt=\":raised_hands:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/raised_hands.png\" title=\":raised_hands:\"> )</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56220163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461199337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>The idea is to include as little as possible (because this improves compile time) while still including what you depend on (this prevents shifting downstream dependencies from breaking upstream code). So, step 1, can you avoid including it? Then don't include it. Step 2, can you only include it in the .c file and not in the .h file? Then only include it in the .c file. Step 3, looks like your .h file depends on it, so you'll have to include it in your .h file.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56221967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>In answer to your stdlib.h -&gt; lib.h -&gt; main.c thing, the answer is that yes, if you include lib.h which includes stdlib.h then you do get stdlib.h symbols. However, generally, you should additionally add the #include &lt;stdlib.h&gt; if you directly depend on stdlib.h symbols, because maybe lib.h will decide to no longer depend on stdlib.h and then main.c will break. However most projects (including my own) out of laziness don't do a good job of following this rule so you'll see this kind of breakage happen, but it's not that big of a deal.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56222162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Generally it's always safe to include header files twice, because they have the include guard in them, and you should always put the include guard in your .h files, so that it's safe to include the .h file twice.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56222292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Generally, foo.c will include foo.h first thing, as you said. But that's just so that any other .c file which wants to call functions from foo.c has access to the function prototypes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56222660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>(oops zulip ui fail)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56222677,
            "is_me_message": false,
            "last_edit_timestamp": 1461200574,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>you can use -Werror=strict-prototypes -Werror=old-style-definition -Werror=missing-prototypes to make sure that you define function prototypes for non-static functions. it'll catch some stuff related to messing up .h files for you.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56222836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461200637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>oh yeah, and if a function is only used in this file, mark it as static and don't give it a prototype in the .h file. this will optimize better and keeps things more encapsulated</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56224024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461201187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> , this is very cogent.</p>\n<p>what about global variables? say a program needs a master lookup table in the form of some hash object, should that live in a header or in main? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56243688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461244636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Similar to functions, you declare the variable in the .h file, and initialize it in one .c file. So the .c file that contains the actual table data will produce a .o file with the actual table data. And then the variable declaration in the .h file lets other .o files know what address the table will be at when they eventually link against the .o file with the actual data.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56255426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461263028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> thanks for the help with this, I finally have my single .c file <a href=\"https://github.com/urthbound/sildpost\" target=\"_blank\" title=\"https://github.com/urthbound/sildpost\">factored out into coherent subunits</a>, and a <a href=\"https://github.com/urthbound/sildpost/blob/master/makefile\" target=\"_blank\" title=\"https://github.com/urthbound/sildpost/blob/master/makefile\">makefile</a> I'm not embarrassed about! The idea that every file needs to be able to compile in a vacuum was the  golden ticket in this case. <img alt=\":raised_hands:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/raised_hands.png\" title=\":raised_hands:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56487870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461768938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>Glad you got it all sorted out. Cheers! See you at NGW?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56502718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461792930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"superjoe30@gmail.com\">@Andrew Kelley (F'13)</span> yeah, actually! I just decided to definitely drop by there for a couple of days and maybe some evenings next week.  :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56535047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461862350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>\\o/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 56538128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "#includes and header files",
            "submessages": [],
            "timestamp": 1461867713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/076b6e734f9b1efdde135ce04ccc75567b8377bc?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone have a favorite book/tutorial  for a total C beginner (mild python knowledge) .. Something maybe more lightweight and non-commital, if such a thing exists. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeni.gooley.42@gmail.com",
            "sender_full_name": "Jeni Gooley (F1'16)",
            "sender_id": 100036,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475621305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>What exactly do you have in mind that you want to build / achieve with learning C?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475622799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>To my knowledge there's a lot of resources on the topic but there aren't as many that are as polished / beginner friendly as there are for python (python seems the #1 or #2 beginner language these days so there are tons of great books and tutorials).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475622869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>So finding something that's lightweight isn't easy. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475623289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>The K&amp;R book is what I started with a while ago, and is probably the recommendation you'll see most often. It's fine, but not that great - and confusing at times.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475623324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>I would recommend against \"learn C the hard way\". It's very opinionated, too much to my taste.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101857920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475623434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/076b6e734f9b1efdde135ce04ccc75567b8377bc?x=x&version=1",
            "client": "website",
            "content": "<p>Oh I don't really have a goal. I've been reading about how Linux work and a few people suggested C might help me getter a better understanding of Unix/Linux. </p>\n<p>I have the K&amp;R (its really a bit dry) and I have been going along C the hard way ( i find it funny and take the opinions with a grain of salt.) I really just want a better, more detailed understanding of low level stuff and was wondering what the community thought.</p>\n<p>C has always been something Ive been curious about, and I'd like to learn t little by little, in bits and pieces, along side my main -get-a-job- backend web studies.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeni.gooley.42@gmail.com",
            "sender_full_name": "Jeni Gooley (F1'16)",
            "sender_id": 100036,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475625862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>this might be a bit too ambitious, but a fun way to learn C and unix/linux at the same time is to try your hand at a few programming projects related to OS. for instance, the exercises in the labs (<a href=\"https://pdos.csail.mit.edu/6.828/2016/\" target=\"_blank\" title=\"https://pdos.csail.mit.edu/6.828/2016/\">https://pdos.csail.mit.edu/6.828/2016/</a>) will give you good practice w/ C</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>another thing could be to try and port some python code you have over to C. works well if its a self contained algorithm</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>say you can write an MCMC sampler in python</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>and then try to write it in C and see how much more painful it becomes haha</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859220,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but then watch your impl crush the python version in terms of speed</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859263,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f54e2a1936a1558e6d5199ca831ce3a4?d=identicon&version=1",
            "client": "website",
            "content": "<p>For me the best introduction to C was Harvard's Introduction to Computer Science, CS50. Check the lectures out, and do the problem sets, which are quite interesting in their own right. Week 0 uses Scratch, but from week 1 to week 6 /7 is done in C: <a href=\"https://cs50.harvard.edu/\" target=\"_blank\" title=\"https://cs50.harvard.edu/\">https://cs50.harvard.edu/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "seabjackson@hotmail.com",
            "sender_full_name": "Seab Capeyan Jackson (SP1'16)",
            "sender_id": 9098,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/076b6e734f9b1efdde135ce04ccc75567b8377bc?x=x&version=1",
            "client": "website",
            "content": "<p>Maybe I should mention that Im self taught with no cs or math education, which is why i liked c the hard way. cs50 sounds interesting though, more accessible </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeni.gooley.42@gmail.com",
            "sender_full_name": "Jeni Gooley (F1'16)",
            "sender_id": 100036,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/076b6e734f9b1efdde135ce04ccc75567b8377bc?x=x&version=1",
            "client": "website",
            "content": "<p>i started reading the wikipedia page on MCMC and I dont think its for me</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101859387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeni.gooley.42@gmail.com",
            "sender_full_name": "Jeni Gooley (F1'16)",
            "sender_id": 100036,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475626641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/630e835a9cdf4cce2bd442766c75da867196d672?x=x&version=2",
            "client": "website",
            "content": "<p>I liked Programming in C by Stephen Kochan quite a bit--found it pretty accessible &amp; comprehensive (and I think, relevantly, it's what they use in CS50). The examples were also helpful &amp; clear (at least from my perspective as someone who hasn't really touched C in a very, very long time). But it's a also a bit dry, so you might not find it that different from K&amp;R <img alt=\"\ud83d\ude01\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/unicode/1f601.png\" title=\"\ud83d\ude01\">  ymmv</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101861129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tayloraburgess@gmail.com",
            "sender_full_name": "Taylor Burgess (he) (S2'16)",
            "sender_id": 9507,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475630409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeni.gooley.42@gmail.com\">@Jennifer Gooley (F1'16)</span> : I was just using MCMC as an example of something you might implement in python which is well suited for the porting exercise-- obviously there are many other things (like tree search algorithms etc) which are just as valid! numerical stuff came to mind because it is one domain where you can really see the speed difference, which I found was a really good motivating factor for me to continuing learning C (otherwise its like why learn this hard stuff when i can do the same thing in a much easier way?!). </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475631995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>but you shoudl also be able to see drastic improvements if you are building a datastrcture in python, b/c pointer and function chasing in C will also be much faster!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475632028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have heard mixed reviews of CS50 fwiw.  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475632245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually like the comp.lang.c faq as a resource, because it addresses the issues that C programmers (years ago) actually commonly struggled with.  It's not a good first place to go, but it's a good place to patch up the weird gaps that you get from being self-taught (as I am).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475632311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you enjoy data structures and algorithms, I would recommend implementing a trie in C, because you'll get strong at pointers and arrays and structs.  Use valgrind frequently; fix everything it reports even if your program appears to be working.  It has a zero-percent false positive rate (for the sort of code you will be writing).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475632509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although I got a funny false negative from it recently: my code would run fine under valgrind, but segfault when run normally. (I guess I should probably fix that bug) EDIT: I was wrong; it wasn't a valgrind bug, but merely a slight difference in how valgrind's malloc worked).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862281,
            "is_me_message": false,
            "last_edit_timestamp": 1475726101,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475632557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I learned C by reading half of Learn C the Hard Way and then reading the Redis source code. LCTHW used to freely available, but no longer is. If you want to read it, you could buy one, or you might be able to find a copy online somewhere if you look hard enough.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101862916,
            "is_me_message": false,
            "last_edit_timestamp": 1475633754,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475633708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I really liked a book called \"Pointers on C\". You can probably find a \"free\" PDF of it online or something if you don't want a commitment. It has (IMO) really lucid explanations of the parts of C that people who aren't used to low-level stuff often find tricky.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101864833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475638089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's possible that there's a copy in the RC library. I once donated a bunch of books to RC and I don't remember if that was included or not.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101864836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475638114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4b6aae6cae274fb83b0d155f0255298c2d3b22b7?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>LCTHW used to freely available, but no longer is.</p>\n</blockquote>\n<p>This makes me sad. LPTHW was how I got started after codecademy</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101880020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "fundirap@gmail.com",
            "sender_full_name": "Panashe Machinda Fundira (he) (S1'16)",
            "sender_id": 9339,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475675601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I worked through most of K&amp;R and a lot of what I learned was from rewriting their code examples in something closer to my preferred programming style. There were subtle things happening in almost every example that I missed by just reading them or running them as written.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101881500,
            "is_me_message": false,
            "last_edit_timestamp": 1475678521,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475678506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I then kind of ran out of steam because I couldn't find a good project, but recently <span class=\"user-mention\" data-user-email=\"porterjamesj@gmail.com\">@James J. Porter (S'13)</span> (I think?) linked <a href=\"http://chi.cs.uchicago.edu/index.html\" target=\"_blank\" title=\"http://chi.cs.uchicago.edu/index.html\">these projects for UChicago students</a> that seem like they could be fun!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101881602,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475678677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>yep, it was me :) i have only done the networking projects there but i think they're pretty good, especially the IRC one! the author cares a lot about pedagogy, there's pretty clear explanations of most things.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101881802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475679039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/076b6e734f9b1efdde135ce04ccc75567b8377bc?x=x&version=1",
            "client": "website",
            "content": "<p>Theres so many good resources here. Thanks!! <span class=\"user-mention\" data-user-email=\"allie.jones@gmail.com\">@Allie Jones (W'13)</span>  I can get through maybe a couple pages of K&amp;R . I will def check out the Uchicago stuff. also the Pointers on C , but mostly just bc of the great pun <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\">@Dan Luu (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101881896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeni.gooley.42@gmail.com",
            "sender_full_name": "Jeni Gooley (F1'16)",
            "sender_id": 100036,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475679226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I liked the writing style of K&amp;R better than Learn C the Hard Way, I think either is probably fine (from my fellow newbie perspective anyway).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101882027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475679409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>?++ K&amp;R</p>\n<p>everything people say about it being dry and boring is true, but it's still the most concise way to get into it,  I think.</p>\n<p>that said, it's not exactly \"up to date\" wrt modern patterns and practices (<a href=\"https://matt.sh/howto-c\" target=\"_blank\" title=\"https://matt.sh/howto-c\">some examples of that</a>). My experience with is was along the lines of \"try to do every exercise in the book, make it a few chapters and fail\" a few times, then finding a substantial project that was well suited to it, using k and r as a reference manual from then on.</p>\n<p>I think the first 1/3 to 1/2 of K and R is a good start, re: <span class=\"user-mention\" data-user-email=\"allie.jones@gmail.com\">@Allie Jones (W'13)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101934082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475784868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"How To C\" is not universally loved.  <br>\nThe \"pragma once\" thing is bad advice.  </p>\n<p>Their realloc wrapper (\"growthOptional\") is bad because it shouldn't free/null the input.  Also their use of stdbool is wrong: standard C functions return 0 for success, and trying to change that now is foolish.  It's too late.  Don't write code that's deliberately incompatible with POSIX and everything else.   Oh god the enum version is even worse.  Nobody will ever care about that distinction.  Your program should just die if realloc fails. </p>\n<p>There is no evidence that short files help anything (even short functions are less important than the sages will tell you; McConnell claims that studies show that you have to get up to like hundreds of lines to see any detectable effect, somewhat surprisingly).  I find that short files hurt, because I have to go to a different file to trace the flow of code.  Especially since they mean that more of your API has to be public (that is, non-static).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101947429,
            "is_me_message": false,
            "last_edit_timestamp": 1475815503,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475814961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>My favorite C book was C: A Reference Manual by Steele and Harbison, which is a very good resource one you've learned the basics.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101955664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475836096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>As for beginners books, maybe the best thing is to go to a physical bookstore to browse through the few entry-level books currently available, and find one you like.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101955708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475836217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ugh</span> <span class=\"o\">=</span> <span class=\"s\">&quot;what in the hell?&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"mi\">8</span><span class=\"p\">[</span><span class=\"n\">ugh</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879422,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>nice one :), [] operator happens to be commutative!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"n\">gcc</span> <span class=\"o\">-</span><span class=\"n\">w</span> <span class=\"o\">-</span><span class=\"n\">xc</span> <span class=\"o\">-</span><span class=\"n\">o</span> <span class=\"n\">fizzbuzz</span> <span class=\"o\">-</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">EOF</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">fizzbuzz</span> <span class=\"mi\">100</span>\n      <span class=\"cp\">#include &lt;stdio.h&gt;</span>\n      <span class=\"cp\">#include &lt;stdlib.h&gt;</span>\n\n      <span class=\"cp\">#define m(c) \\</span>\n<span class=\"cp\">         do{typeof(c)_=(c);!_?printf(&quot;%d\\n&quot;,i):puts((_-1)[v]);}while(!i)</span>\n\n      <span class=\"kt\">int</span>\n      <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>  <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"o\">-=</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n         <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&quot;Fizz&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Buzz&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Fizzbuzz&quot;</span><span class=\"p\">};</span>\n         <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">atoi</span><span class=\"p\">((</span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"n\">n</span><span class=\"p\">])){</span><span class=\"n\">m</span><span class=\"p\">((</span><span class=\"mh\">0x012418</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">8</span><span class=\"o\">|</span><span class=\"sc\">&#39;C&#39;</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"mh\">0x1c</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++%</span><span class=\"mh\">0x0f</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"mh\">0x03</span><span class=\"p\">);}</span>\n      <span class=\"p\">}</span>\n   <span class=\"n\">EOF</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977256,
            "is_me_message": false,
            "last_edit_timestamp": 1475879618,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>(my first and only obfuscated c program)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>maaaad</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>you might want to check this out</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977327,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><a href=\"https://github.com/mame/quine-relay\" target=\"_blank\" title=\"https://github.com/mame/quine-relay\">https://github.com/mame/quine-relay</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>loosely related</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>woah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>it also  generates programs that look like ascii art</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2b3883a91e0e0a59f3998bcc07ca66d2e9e760a6?x=x&version=1",
            "client": "website",
            "content": "<p>&lt;3 piet</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "platt.nicholas@gmail.com",
            "sender_full_name": "Nick Platt (F1'16)",
            "sender_id": 100031,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>it's very cool. check his other projects. that's all he does, haha.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/24c83c922884d915db7dbcd14e6ec628c06f6efa?x=x&version=1",
            "client": "website",
            "content": "<p>WOW</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrew@nothing-to-say.org",
            "sender_full_name": "Andrew Yoon (he) (F2'16)",
            "sender_id": 100202,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475879940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>incidentally I quoted it as the \"interesting thing that I learned in the past month\" in my RC application :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lol",
            "submessages": [],
            "timestamp": 1475880490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>OK, so unrelatedly a friend just told me he was learning C and asked me what music to listen to (...), so I had to recommend \"Great Big Sea\".  </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101977718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1475880513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"novalis@novalis.org\">@David Turner</span> &gt; What's your argument against pragma once?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102032935,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476029855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not actually standard.  \"Lots of compilers support it\" is nonsense,  since all compilers support the #define method.  Since it's not standard, and since its benefit is small (it saves two lines of code), serious projects don't use it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102033324,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476030882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't have a strong opinion on <code>#pragma once</code>, but I believe that almost all C and C++ projects use things that aren't standard :-).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102035368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476036427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm.  Like, I guess most libraries aren't \"standard\".  But not like language syntax stuff</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry -- let me clarify. What I mean is that I think that many and probably even most large C and C++ projects rely on undefined and implementation defined behavior. Not in any principled way, but just because it's really difficult to figure out what it really means to be standard.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Every couple of weeks we talk to a C++ standards guy about something we're doing because, after spending an hour or two, we literally can't figure out what the standard is saying and if we're relying on undefined behavior or not. Often his answer is something like \"Oh yeah that's undefined, but ....\". I think that most people don't do that at all and just have lots of undefined behavior in their code. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Compared to that, I think that <code>#pragma once</code> isn't a big deal <img alt=\":smile_cat:\" class=\"emoji\" src=\"/static/third/gemoji/images/emoji/smile_cat.png\" title=\":smile_cat:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7faded211620970d1a2140ce10e047d?d=identicon&version=1",
            "client": "website",
            "content": "<p>even if what you're doing is perfectly defined behavior, if it takes you an hour to figure it out, is that something you really want to rely on? </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tu.stephenl@gmail.com",
            "sender_full_name": "Stephen Tu",
            "sender_id": 8555,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>C++ is much worse than C in this respect.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037792,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like, I guess there's a lot of code that relies on int being 32 bits.  But that still seems less bad than #pragma once for some reason (and the linked article recommends against using int altogether).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476042967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>even if what you're doing is perfectly defined behavior, if it takes you an hour to figure it out, is that something you really want to rely on?</p>\n</blockquote>\n<p>I would prefer not to rely on stuff like this, but I think it's often impossible in C or C++. Or if not impossible, would require a  massive performance hit.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037845,
            "is_me_message": false,
            "last_edit_timestamp": 1476043201,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"novalis@novalis.org\">@David Turner</span> I definitely agree that the article has inconsistent recommendations and makes recommendations that don't really make sense. I just see <code>#pragma once</code> as pretty minor since modern versions of gcc, clang, and MSVC all support it, and most people are unlikely to use another compiler (and I'm guessing that icc also supports it, but I don't know for sure).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think ICC does.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not that it's a terrible thing to use</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's that it's a bad thing to recommend as the \"modern\" way to do things..</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're going to put N things in a \"how to C\" article, that should not be one of them unless N is like greater than a thousand and maybe not even then.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah ok, I agree with that statement, although I might put it at &lt; 1000 :-).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tu.stephenl@gmail.com\">@Stephen Tu</span> For example, <a href=\"http://www.hpl.hp.com/techreports/2004/HPL-2004-209.pdf\" target=\"_blank\" title=\"http://www.hpl.hp.com/techreports/2004/HPL-2004-209.pdf\">see this argument that it's technically impossible to have safe threading in C</a>. This particular issue is solved in C++, but C++ adds a ton of complexity so the issues get much harder to figure out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102037967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Of course people write multi-threaded code in C all the time! And it even works!  Well, not all the time. But it can work.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102038004,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is it solved in C11?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102038006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(also, I don't know of anything in POSIX that requires that pthreads be implemented as a library)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102038010,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know! It might be. I don't really keep up with pure C since I only occasionally write C and hope to never have a job where I need to write C :-).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102038099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476043609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Speaking of <code>#pragma once</code>, we had this debate in the Mesos codebase. (cf. <a href=\"https://mail-archives.apache.org/mod_mbox/mesos-dev/201511.mbox/%3CCACYWy800d6jcQ8+3aEX3JkK1yapRkPzdsSKLGZCLELVQHuXojQ@mail.gmail.com%3E\" target=\"_blank\" title=\"https://mail-archives.apache.org/mod_mbox/mesos-dev/201511.mbox/%3CCACYWy800d6jcQ8+3aEX3JkK1yapRkPzdsSKLGZCLELVQHuXojQ@mail.gmail.com%3E\">https://mail-archives.apache.org/mod_mbox/mesos-dev/201511.mbox/%3CCACYWy800d6jcQ8+3aEX3JkK1yapRkPzdsSKLGZCLELVQHuXojQ@mail.gmail.com%3E</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039393,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476046829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>We opted to adopt it, but I had too much on my plate to push it through. The only compiler that didn't support it that we might have cared about it was IBM's, and we decided we didn't care too much about it. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>If the C standards committee were going to vote to standardize it, and if I were a standards committee member, I would vote for it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is getting pretty far afield, but by IBM's compiler do you mean xl for aix? I've actually used that, but I can't imagine that many people use it or care about out, other than people who run aix, obv, but that's a small and ever-shrinking number of people.</p>\n<p>EDIT: I see wikipedia lists their z-series machines as supported by xl. I guess that makes sense. And also technically linux, although it looks like they don't keep the linux version up to date and that version actually uses the clang front end, so it should be able to handle <code>pragma once</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039535,
            "is_me_message": false,
            "last_edit_timestamp": 1476047333,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The case basically came down to \"Do you want #ifdef guards or do you want to use a non-standard solution\". Neither case is perfect but, hey, that's C++.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha, I forget.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4f5279e356a105513701942b5b6af05f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the final decision was that this particular compiler would have more problems than <code>#pragma once</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102039541,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "clemmer.alexander@gmail.com",
            "sender_full_name": "Alex Clemmer (S'13)",
            "sender_id": 2132,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "beginner recs",
            "submessages": [],
            "timestamp": 1476047223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>This may be common knowledge that I JUST caught on to, but in case it's not, I thought I'd share:  you can use macros to create templates for code where you're constantly writing functions or repetitive code for what's essentially a list of items.  I can't figure out how to explain it well, so here's an example:</p>\n<p>Lets say you have a bunch of variables, and you have setter and getter for each one:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Declare and initialize some variables</span>\n<span class=\"kt\">int</span> <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n<span class=\"kt\">float</span> <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"mf\">10.7</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">// Define getters for those variables</span>\n<span class=\"kt\">int</span> <span class=\"nf\">get_var1</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">var1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">get_var2</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">var2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">float</span> <span class=\"nf\">get_var3</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">var3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\">// Define setters for those variables</span>\n<span class=\"kt\">void</span> <span class=\"nf\">set_var1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">set_var2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">set_var3</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>You could replace the above code with the following:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Define values for templates</span>\n<span class=\"c1\">//  (The \"TEMPLATE\" macro is defined when you need it: the three arguments</span>\n<span class=\"c1\">//      are the variable type, the variable name, and the variable's initial value)</span>\n<span class=\"cp\">#define PROCESSITEMS       \\</span>\n<span class=\"cp\">TEMPLATE(int, var1, 5)     \\</span>\n<span class=\"cp\">TEMPLATE(int, var2, 100)   \\</span>\n<span class=\"cp\">TEMPLATE(float, var3, 10.9)</span>\n\n\n<span class=\"c1\">// Declare and initialize some variables</span>\n<span class=\"cp\">#define TEMPLATE(TYPE, NAME, INITVALUE) \\</span>\n<span class=\"cp\">TYPE NAME = INITVALUE;</span>\n\n<span class=\"n\">PROCESSITEMS</span>\n<span class=\"cp\">#undef TEMPLATE</span>\n\n\n<span class=\"c1\">// Define getters for those variables</span>\n<span class=\"cp\">#define TEMPLATE(TYPE, NAME, INITVALUE) \\</span>\n<span class=\"cp\">TYPE get_ ## NAME()                     \\</span>\n<span class=\"cp\">{                                       \\</span>\n<span class=\"cp\">    return NAME;                        \\</span>\n<span class=\"cp\">}</span>\n\n<span class=\"n\">PROCESSITEMS</span>\n<span class=\"cp\">#undef TEMPLATE</span>\n\n\n<span class=\"c1\">// Define setters for those variables</span>\n<span class=\"cp\">#define TEMPLATE(TYPE, NAME, INITVALUE) \\</span>\n<span class=\"cp\">void set_ ## NAME(TYPE value)           \\</span>\n<span class=\"cp\">{                                       \\</span>\n<span class=\"cp\">    NAME = value;                       \\</span>\n<span class=\"cp\">}</span>\n\n<span class=\"n\">PROCESSITEMS</span>\n<span class=\"cp\">#undef TEMPLATE</span>\n</code></pre></div>\n\n<p>If you put the above code in a file and run <code>gcc -E filename.c</code> you can see what the preprocessor generates (which is the same as the untemplated block of code,  without the whitespace).  And if you wanted to add a fourth variable to this example, instead of having to modify the code in three places, you could just add a single line to the PROCESSITEMS definition and then the preprocessor would generate everything else.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102883021,
            "is_me_message": false,
            "last_edit_timestamp": 1602017746,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1477929903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c7ecfe9f2764516cd0769548de80a3edb20d81cd?x=x&version=2",
            "client": "website",
            "content": "<p>You can see why C++ templates (as horrible as they are) caught on! GCC internally uses hash tables that are built with macros, and it's a fucking horror show!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102886966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "paul.biggar@gmail.com",
            "sender_full_name": "Paul Biggar (he) (F1'16)",
            "sender_id": 100048,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1477936505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?d=identicon&version=1",
            "client": "website",
            "content": "<p>This was posted on Hacker News today for those fiddling with C.  <a href=\"http://www.gowrikumar.com/c/index.php\" target=\"_blank\" title=\"http://www.gowrikumar.com/c/index.php\">http://www.gowrikumar.com/c/index.php</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103282444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jonnew@gmail.com",
            "sender_full_name": "Jonathan New (W1'16)",
            "sender_id": 100327,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C puzzles",
            "submessages": [],
            "timestamp": 1478791226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to break up my largish C file into smaller components, but I'm having an embarrassingly hard time compiling. Can anyone with C experience help me for 5-10 min?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jonnew@gmail.com",
            "sender_full_name": "Jonathan New (W1'16)",
            "sender_id": 100327,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compilation issues",
            "submessages": [],
            "timestamp": 1479334684,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1418ba3d9ca124ff55e11f8050682aa6?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nm, i figured it out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103535346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jonnew@gmail.com",
            "sender_full_name": "Jonathan New (W1'16)",
            "sender_id": 100327,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Compilation issues",
            "submessages": [],
            "timestamp": 1479334835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>How do I use this? I tried using long double, but the assembly looks like its doing 64bit stuff. Is there a specific assembly function i have to call, or some other way to exploit these magic 80bit thingies?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105931892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484686174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Unless you're just screwing around or using a very old chip without SSE FP, I recommend not using this, but if you want to use this, IIRC you can set this by using FLDCW.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105932816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484687612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I believe you want to set bits 8 and 9 to 1.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105932868,
            "is_me_message": false,
            "last_edit_timestamp": 1484692134,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484687690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, since this is in the C stream, I don't know if this is really legal from C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105933002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484687922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, you can do whatever you want inside an <code>asm</code> block, but if you don't restore the FPCW to the state it was in when you leave the block my guess is that other FP computations you have in C code can give you incorrect results.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105933196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484688230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, I guess I'm confused as to why it's there if they don't want you to use it. Is it like deprecated functionality? Are there actually special secret 80-bit registers just achin' to be used, or is it more like faster, but less stable 80-bit instructions that do some funky register stitching?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105943744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484707866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Like, what is the use case of this thingo?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105943747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484707876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think that Intel really deprecates things, so it's not officially deprecated, but if you look at generated code that's generated with <code>march=native</code> or something else that identifies the CPU as one that has SSE2, your compiler is very likely to generated SSE fp instead of x87 FP. If you were designing a custom x86 CPU for datacenters or other markets where you control the entire stack you would probably consider removing x87 FP support.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105948789,
            "is_me_message": false,
            "last_edit_timestamp": 1484718604,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484718320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>With SSE FP you get flat registers instead of a stack and you get more registers. The only upside of the 80-bit stuff is that it has higher precision, but that's irrelevant for 99.999% of applications. And since 80-bit is a weird size, if you want more precision, high-precision libraries often support 128-bit floats instead of 80-bit floats anyway.<br>\nAlso, 32-bit and 64-bit x87 FP support basically give you random perturbations in precision every time you make a change and recompile because the numbers only get rounded down to 32 or 64 when they're saved to memory (reg-reg ops all have 80-bit precision), and most people prefer consistent results over sometimes having some extra precision. It's possible to save results out to memory and read them back after every operation, but that's slow.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105948852,
            "is_me_message": false,
            "last_edit_timestamp": 1484718589,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484718473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>My guess is that if you pick a random x86 instruction that's more than 10 years old, there's better than even odds that you never want to use the instruction. I think this is almost certainly true of x87 FP, where even if you're using 80-bit floats a large fraction of the instruction space is dedicated to instructions that you should never use although they're technically available for you to use. There's a lot of stuff that made sense a long time ago that doesn't make sense now, and also a lot of stuff that was poorly thought out and never made sense.This isn't unique to x86 BTW -- ARM also has a lot of junk that never made sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105949009,
            "is_me_message": false,
            "last_edit_timestamp": 1484718850,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484718736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>I'm confused as to why it's there if they don't want you to use it</p>\n</blockquote>\n<p>I guess my answer to this is, have you ever seen a software API that doesn't make any sense? Hardware APIs have the exact same problem!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105949116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484718978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>The x86 API is like the Linux kernel. Once something's in the API it sticks around pretty much forever, so there's a lot of accumulated junk. </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105949182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484719186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the most recent subtractions from the x86 API was a20m, something that was added by the 286 in order to allow easy emulation of an 8086. I believe the 286 was released in 1982 and that a20m was well past obsolete by the time the 486 was released in 1989. People get really unhappy when low-level APIs change, though!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105949245,
            "is_me_message": false,
            "last_edit_timestamp": 1484719738,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484719269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>To answer the original question, it looks like some compilers will give you an 80-bit float on x86 if you use <code>long double</code>. But some compilers will give you 64-bit floats. And on other architectures you'll get between 64 and 128 bits (inclusive), which may be implemented with <a href=\"https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format#Double-double_arithmetic\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format#Double-double_arithmetic\">double-double</a> on some platforms, which will give you something like 128-bit precision (slightly less), but with some weird properties.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105949590,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44c",
                    "emoji_name": "ok_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sarkar.krishnan@gmail.com",
                        "full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
                        "id": 100326
                    },
                    "user_id": 100326
                }
            ],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484720036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>What Dan said, plus the small addition that since x64 requires SSE2, you don't have to do anything special on 64-bits to get SSE code. (The various x64 ABIs rely on the SSE registers to get better perf on calls!). If you want a lot more details on what can possibly go wrong when working with FP and in particular, with extended precision, Bruce Dawson has a series of blog posts including this relevant one: <a href=\"https://randomascii.wordpress.com/2012/03/21/intermediate-floating-point-precision/\" target=\"_blank\" title=\"https://randomascii.wordpress.com/2012/03/21/intermediate-floating-point-precision/\">https://randomascii.wordpress.com/2012/03/21/intermediate-floating-point-precision/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105956011,
            "is_me_message": false,
            "last_edit_timestamp": 1484735483,
            "reactions": [
                {
                    "emoji_code": "1f44c",
                    "emoji_name": "ok_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sarkar.krishnan@gmail.com",
                        "full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
                        "id": 100326
                    },
                    "user_id": 100326
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "x86 80bit float",
            "submessages": [],
            "timestamp": 1484735363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/24c83c922884d915db7dbcd14e6ec628c06f6efa?x=x&version=1",
            "client": "website",
            "content": "<p>If only I had seen this sooner...<br>\n<a href=\"http://fuckingfunctionpointers.com/\" target=\"_blank\" title=\"http://fuckingfunctionpointers.com/\">http://fuckingfunctionpointers.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106049655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrew@nothing-to-say.org",
            "sender_full_name": "Andrew Yoon (he) (F2'16)",
            "sender_id": 100202,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1484893357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Ugh... C function pointers...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106049716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1484893508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Of all the syntax in the language, it's the one thing I continually need to be looking up</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106049812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1484893766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I find the clockwise spiral rule to be very helpful for these kind of things: <a href=\"http://c-faq.com/decl/spiral.anderson.html\" target=\"_blank\" title=\"http://c-faq.com/decl/spiral.anderson.html\">http://c-faq.com/decl/spiral.anderson.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106072738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1484939929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>You know, I was actually debating linking that...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106085915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Function Pointers",
            "submessages": [],
            "timestamp": 1484966799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>i'm writing a bunch of sorting algorithms in c. i want to save them in different files and link them to other c programs with .h files (i can do this part). what i want is to have different c files for each algorithm, then collect these into one big header file that is linked to each of them, so that i can #include all my different sorting algorithms with one header, as though it was a big library (but is actually split up into different files). anyone know how to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106749598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486318664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>i tried this:</p>\n<div class=\"codehilite\"><pre><span></span>#ifndef SORTING_H   /* Include guard */\n#define SORTING_H\n\n#include &quot;mergeSort.h&quot;\n#include &quot;quickSort.h&quot;\n\n#endif // SORTING_H\n</pre></div>\n\n\n<p>and then </p>\n<div class=\"codehilite\"><pre><span></span>#include sorting.h\n</pre></div>\n\n\n<p>in my main file</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106749645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486318759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>also I'd rather not have to type \"gcc app.c sorting.c mergeSort.c quickSort.c\" every time but just \"gcc app.c sorting.c\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106749801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>You need #include \"sorting.h\" _with double quotes_ in your main file. For the not typing a ton question, what you need is a Makefile; then you can just type 'make' and have it build.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106749992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah ok cool i think i got it working thanks again luke! :) i'll look into makefiles</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another thing you could do is compile the app and the library separately.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like <code>gcc -c  mergsort.c quicksort.c</code> will produce an object file <code>.o</code> for your algorithms library</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You may then link your app with the library with something like <code>gcc -o app app.o library.o</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486319983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>gotcha that sounds nice i'll give it a try ty</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486320015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's probably not the exact syntax though</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486320020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jessetherappaport@gmail.com\" data-user-id=\"9498\">@Jesse Rappaport (S2'16)</span>  It's not _exactly_ what you were asking for but when I was learning c and make last year I wrote about  it <a href=\"http://blog.jfo.click/sild-header-files/\" target=\"_blank\" title=\"http://blog.jfo.click/sild-header-files/\">here</a> and <a href=\"http://blog.jfo.click/sild-were-gonna-make-it-after-all/\" target=\"_blank\" title=\"http://blog.jfo.click/sild-were-gonna-make-it-after-all/\">here</a>. maybe you'll find that helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486320475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>wow great posts <span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> thank you it is basically what i was looking for</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>\\o/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>&lt;3 RC collaboration. :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106750995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> those are nicely done. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks! an unintended benefit of writing what you learn down is that it's easier to share knowledge when people ask about something you know about :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I hadn't expected that to come in so handy when I started writing posts</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486321952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>totally unrelated n00b question (so i don't have to start a new thread) - if i'm passing a pointer to an array to a function that needs to know the length, is it best practice to pass the length of the array to the function as well, or use some kind \"null-terminating\" array, or what? i find i'm doing this a lot cuz i'm used to python and like to know the length of the array</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486322646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>i gather \"sizeof\" doesn't work properly outside of main if you want the size of an array</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486322697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>is the input array variable in lenght or will it always be the same?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486322995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>variable</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323043,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>like if i'm doing some divide and conquer i do \"void conquer(int * arr, int len)\" and the length is, e.g., n/2 each time</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751844,
            "is_me_message": false,
            "last_edit_timestamp": 1486323555,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok my understanding is that \"sizeof(arr)\" would give you the size of a pointer</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You should pass the length of the array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751863,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh yeah that's true</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>lol :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah that's a bummer</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Passing the length of the array is pretty standard in C, yeah.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for the info you all deserve zulip karma</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://stackoverflow.com/a/9503126/2727670\" target=\"_blank\" title=\"http://stackoverflow.com/a/9503126/2727670\">http://stackoverflow.com/a/9503126/2727670</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm removing my example so it doesn't confuse anyone and I agree that you should pass the length</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c\" target=\"_blank\" title=\"http://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c\">http://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c</a> - it's more subtle than <span class=\"user-mention\" data-user-email=\"baccou@normalesup.org\" data-user-id=\"2865\">@Pierre-Yves Baccou (F'13)</span> said. Lots of lurky gotchas.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106751958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>... ehm, wrong participant, sorry Pierre. But the point holds. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323619,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>That stackoverflow comment is only useful in certain cases though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Exactly. sizeof(yourarray) can give you the size of the whole array, or the pointer, and is generally a bit subtle.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would probably end up creating a struct that maintains a pointer to the statically allocated array and the metadata of its length and pass that around, but that's probably overkill for what you're working on</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes i worked through that ambiguity at some length yesterday, very confusing at first but it makes sense</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>edit not statically allocated</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752056,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah the struct thing is another option</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>but allocated</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think static allocation means something specific in compiler land that I'm fuzzy on the details of</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486323783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"we're gonna Make it after all\" title game A+ <span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> <img alt=\":raised_hands:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/raised_hands.png\" title=\":raised_hands:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486325602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=JPxcxb1Qk94\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=JPxcxb1Qk94\">https://www.youtube.com/watch?v=JPxcxb1Qk94</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"JPxcxb1Qk94\" href=\"https://www.youtube.com/watch?v=JPxcxb1Qk94\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=JPxcxb1Qk94\"><img src=\"https://i.ytimg.com/vi/JPxcxb1Qk94/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106752882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486325628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jessetherappaport@gmail.com\" data-user-id=\"9498\">@Jesse Rappaport (S2'16)</span> : the simplest two things you have to understand for the difference between pointers/arrays is this:<br>\nA pointer and an array are different objects (in C standard lingo). That means that when you ask sizeof(x) and x is a pointer, it will return the size of the pointer (in bytes*). If x is an array, you get the size of the array (in bytes as well).<br>\nWhen you declare a function as taking an array, there is an implicit conversion from array to pointer to the first element in the array. <br>\nQuoting <a href=\"http://en.cppreference.com/w/c/language/array\" target=\"_blank\" title=\"http://en.cppreference.com/w/c/language/array\">http://en.cppreference.com/w/c/language/array</a> see \"Array to pointer conversion\"</p>\n<div class=\"codehilite\"><pre><span></span>Array to pointer conversion\nAny lvalue expression of array type, when used in any context other than\nas the operand of the address-of operator\nas the operand of sizeof\nas the string literal used for array initialization\nas the operand of _Alignof\n(since C11)\nundergoes an implicit conversion to the pointer to its first element. The result is not an lvalue.\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106778402,
            "is_me_message": false,
            "last_edit_timestamp": 1486380124,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486380096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p><code>main</code> isn't special in any way, it's just the way C handles arrays. The reason why it behaves this way is simply because for the general case of passing arrays as arguments of functions, there's no way other than passing the length every time. C was born in an era when this was seen as wasteful or unnecessary (if, for instance, you already know the size of the array, if it's fixed, or if it can be computed from a sentinel value like the terminating 0 in strings).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106778506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486380269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>A cool, related feature of C99 is to allow <code>static</code> inside the argument declaration to signify the compiler that you expect a minimum number of elements:<br>\n<a href=\"https://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html\" target=\"_blank\" title=\"https://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html\">https://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106778558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486380395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Last but not least, the idea of wrapping a pointer to the array and a length is classic, and some languages implement it first class: it's called a slice, and it's (among others) a feature of both Go and Rust.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106778566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486380437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>What's cool about slices is that you can use them to create \"views\" into arrays. So you can create your array with 20 elements, and give a slice that points to the first but with length only 10, and you have a 10 element \"view\" into your 20 element array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106778605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486380518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool thanks for the explanation <span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> i just wanted confirmation that it wasn't weird to keep passing array lengths around from function to function</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106780813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486384962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dbbeeb0789c1e1195ddc9c35ec72f56e?d=identicon&version=1",
            "client": "website",
            "content": "<p>also it seems like a weird lack of symmetry that you can calculate the length of a string, since it has a terminating character, but there's no comparable standard thing for arrays</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106780871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jessetherappaport@gmail.com",
            "sender_full_name": "Jesse Rappaport (S2'16)",
            "sender_id": 9498,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486385051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Well the problem is that arrays are much more general than strings. You can use sentinel values (<a href=\"https://en.wikipedia.org/wiki/Sentinel_value\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Sentinel_value\">https://en.wikipedia.org/wiki/Sentinel_value</a>) with arrays of any type, but you need special knowledge of the context within which the array is used to choose an appropriate sentinel value. The NUL character works well for strings because the ASCII set (and supersets) were designed to have control characters, including NUL, which serves that purpose well. But if you have an array of integers, what is your end of array value? Depending on the algorithm, 0, -1, 999999, or INT_MAX for example might be acceptable value, but you can't choose one in a general way without being too restrictive :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106786891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486396078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Also, sentinel values tend to cause problems, and RAM and call conventions are cheap enough these days that it's usually better to just use the regular pointer + length idiom :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106786936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486396127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>(an example of problems caused is the numerous security vulnerabilities caused by C's use of nul terminated strings. It's a \"billion dollar mistake\"!)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106787041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486396217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> <img alt=\":clap:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/clap.png\" title=\":clap:\"> <img alt=\":clap:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/clap.png\" title=\":clap:\"> <img alt=\":clap:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/clap.png\" title=\":clap:\">  excellent info</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106787446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "n00b #include question",
            "submessages": [],
            "timestamp": 1486396864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I getting some really weird behavior.  If I run this twice, with <code>./quicksort 14 14 41 51123 123 12 123  0 2 320</code> I get the following out put:</p>\n<div class=\"codehilite\"><pre><span></span>Quicksort\n0\n0\n2\n12\n14\n14\n41\n123\n123\n320\n\n0\n2\n12\n14\n14\n41\n123\n123\n320\n51123\n</pre></div>\n\n\n<p>Code:</p>\n<div class=\"codehilite\"><pre><span></span>int partition(int target[], int low, int high)\n{\n  int i;\n  int p_index;\n  int firsthigh;\n  int cur;\n  int below_p;\n\n  p_index = high;\n  int p_value = target[p_index];\n  firsthigh = low;\n  for (i = low; i &lt; high; i++) {\n    cur = target[i];\n    below_p = cur &lt; p_value;\n    if (below_p) {\n      swap(&amp;target[i], &amp;target[firsthigh]);\n      firsthigh ++;\n    }\n  }\n  swap(&amp;target[p_index], &amp;target[firsthigh]);\n\n  return(firsthigh);\n}\n\nvoid quicksort(int *target, int low, int high)\n{\n  int partition_index;\n\n  // Base case\n  int inbounds = (high - low) &gt; 0;\n\n  if (inbounds) {\n    partition_index = partition(target, low, high);\n    quicksort(target, low, partition_index-1);\n    quicksort(target, partition_index+1, high);\n  }\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605406,
            "is_me_message": false,
            "last_edit_timestamp": 1488055503,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488055388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15cc6e65f5cb0faac87d0b88dae865281ba57899?x=x&version=2",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>could you provide the full code? with main and includes etc?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "moritz.neeb@posteo.net",
            "sender_full_name": "Moritz Neeb (he) (SP1'17)",
            "sender_id": 100515,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488055732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2\" target=\"_blank\" title=\"https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2\">https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488055829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's some noise because it has a bubblesort and I was trying to write it so that it takes an arbitrary comparison function but that totally wasn't working... LOL... so I simplified it a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488055885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for taking a look.  Let me know if I can clarify anything.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488056021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15cc6e65f5cb0faac87d0b88dae865281ba57899?x=x&version=2",
            "client": "desktop app Linux 0.5.1",
            "content": "<p>I do not understand the error you get. When I run the gist example (deleted the calls to Bubblesort) <a href=\"https://gist.github.com/zormit/74bd895ffeb99d55f94738279d72a382\" target=\"_blank\" title=\"https://gist.github.com/zormit/74bd895ffeb99d55f94738279d72a382\">it looks fine to me</a>. How can I reproduce the problem?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "moritz.neeb@posteo.net",
            "sender_full_name": "Moritz Neeb (he) (SP1'17)",
            "sender_id": 100515,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488056352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>When I run that under valgrind with your input, it warns about some things that may be causing the weird behavior.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488056356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>I saved and build it as <code>sorts.c</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$ make sorts\n</pre></div>\n\n\n<p>and then ran it with:</p>\n<div class=\"codehilite\"><pre><span></span>$ valgrind ./sorts 14 14 41 51123 123 12 123  0 2 320\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107605855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488056409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>well that's interesting.... moritz... I'll try and valgrind it and see what I learn.... thanks scott.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107606003,
            "is_me_message": false,
            "last_edit_timestamp": 1488057078,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488056781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ugh figured it out.  I was passing <code>count</code>, which is how many ints to malloc for the array, as the highest index to the quicksort.  Off by one... budurp.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107606715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488058553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fix here: <a href=\"https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2#file-sorts-c-L94\" target=\"_blank\" title=\"https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2#file-sorts-c-L94\">https://gist.github.com/Zanadar/b936908dc2b74814a904b542efd60cd2#file-sorts-c-L94</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107606805,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "moritz.neeb@posteo.net",
                        "full_name": "Moritz Neeb (he) (SP1'17)",
                        "id": 100515
                    },
                    "user_id": 100515
                }
            ],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488058776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you interested in some other code review?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107619050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488086990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sure!  I'd love it!  Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107630824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488117350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's some inconsistency between whether you use target[] or target* as a parameter. <br>\n  int inbounds = (high - low) &gt; 0; if (inbounds) {...} should be if (high &gt; low) {...}<br>\nIn partition(), the variable p_index is always equal to high, and high never changes, so you can just use high... but do you really need   swap(&amp;target[p_index], &amp;target[firsthigh]); at all?  (is it even correct?) Why not just go through the loop once more.<br>\nBTW, in general, functions that take ranges should take the lowest index and <em>one plus</em> the highest index -- see <a href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\" target=\"_blank\" title=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\">https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html</a> </p>\n<p>The compare_cb function is not used.  Gotta run; maybe more later.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107635388,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fundirap@gmail.com",
                        "full_name": "Panashe Machinda Fundira (he) (S1'16)",
                        "id": 9339
                    },
                    "user_id": 9339
                }
            ],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488128964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>in general, functions that take ranges should take the lowest index and one plus the highest index</p>\n</blockquote>\n<p>This seems like a decent place to offer my own take on the topic, which I found made me make a <em>lot</em> fewer off-by-one errors in this kind of fiddly slicing and indexing code:<br>\n<a href=\"https://blog.nelhage.com/2015/08/indices-point-between-elements/\" target=\"_blank\" title=\"https://blog.nelhage.com/2015/08/indices-point-between-elements/\">https://blog.nelhage.com/2015/08/indices-point-between-elements/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107635622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488129519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the feedback and articles David and Nelson.  I'll have to take some time and read over the linked articles and absorb them; taking a quick glance, they seem very helpful</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107641673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488143946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the time I read Dijkstra' s(and Nelson's) articles, I had gotten so used to that  system of indexing that it was more like my native language than like a considered opinion.  Like the placement of an apostrophe: why do we write \"Jones's jukeboxes\" but \"the Smiths' songs\"? Sure, there's a reason (although not as strong a reason), but the real reason we do it is because it's a convention.  (Of course, sometimes it is important to fight convention, but it's usually best to understand it first).  That said, I think Nelson's article offers a very good reason behind of Dijkstra's dictum, and I highly recommend it as a way of thinking.  I predict (and Nelson can correct me if I'm wrong) that it will be come like Wittgenstein's ladder that you throw away: the final rule of inclusive/exclusive indexing will stay, but you'll only go back to the reasoning when you need to convince someone else of it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, on code review, I would suggest die() and die_errno() functions, rather than checking errno in die().  You don't usually clear errno, and it could have gotten set much earlier from an error that you later recovered from (e.g. ENOENT on a config file where you just fell back to a default config).  This die() vs die_errno() distinction is one that git makes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>For me the perspective shift to \"indexes point between elements\" is definitely something I still explicitly resort to when I'm reasoning out tricky indexing or slicing code. But yeah, for more vanilla cases, I've just internalized \"use half-open intervals\" and no longer really think about why or how they work; I can just trust it will work out better and make more sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hm, interesting!  That's good to know.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's a fantastic article, BTW.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I give some examples in the post, but e.g. if I'm parsing a buffer incrementally, the \"char *p\" that tracks my progress so far very much points <em>between</em> the consumed and unconsumed bits in my mind.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks! Always happy when something I write is of use to someone.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, wait, <span class=\"user-mention\" data-user-email=\"nelhage@nelhage.com\" data-user-id=\"100476\">@Nelson Elhage</span> , IIRC, you maintain \"Accidentally Quadratic\".  Because I found one last year, if you're still collecting: <a href=\"http://git.661346.n2.nabble.com/PATCH-v2-unpack-trees-fix-accidentally-quadratic-behavior-td7646249.html\" target=\"_blank\" title=\"http://git.661346.n2.nabble.com/PATCH-v2-unpack-trees-fix-accidentally-quadratic-behavior-td7646249.html\">http://git.661346.n2.nabble.com/PATCH-v2-unpack-trees-fix-accidentally-quadratic-behavior-td7646249.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488150969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ha! That's actually in my queue. I have a long backlog I'm overdue to write up :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488151011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/bstoLpNKPvvaecoYUMt1EcYx/accidentally-quadratic.png\" target=\"_blank\" title=\"accidentally-quadratic.png\">accidentally-quadratic.png</a> </p>\n<p>proof :)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/bstoLpNKPvvaecoYUMt1EcYx/accidentally-quadratic.png\" target=\"_blank\" title=\"accidentally-quadratic.png\"><img src=\"/user_uploads/13/bstoLpNKPvvaecoYUMt1EcYx/accidentally-quadratic.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107644880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488151054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nelson that article is really interesting.  At the moment (7AM) it feels really hard to untangle the conceptual knots I've formed around this through intuitions and rote learning, but I can see how this provides a really useful framework for thinking about indexing. I can absolutely see that the subject of text editors would bring this to the fore. In Vim I sometimes have to stop and thing about the cursor vs character (ie the index of the cursor vs the content of the text buffer to the right of that index) and different operations have semantics that make the most sense when you think of the cursor as being an index between character elements (which it literally is), eg append vs insert.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107753405,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488371032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>In the article you use the term 'half-inclusive range', but don't define it.  What does it mean?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107753456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488371091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>David, that distinction in die definitely makes sense.  Clearing errno seems like a side effect I want to explicitly ask for.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107753472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488371147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW, per an earlier review of yours on the inconsistency around <code>int *target</code> and <code>int target[]</code> is the difference there semantic? (I mean I know that the first is a pointer and the second an array) but is there some other difference that matters to the compiler or is it a matter of clarity and consistency?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107753528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488371250,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>AH!!! This sentence really brings it together with Djikstra! </p>\n<blockquote>\n<p>With that in mind, it becomes easy to see that for a range (start, end), elements indexed by start &lt;= i &lt; end are within the range.</p>\n</blockquote>\n<p>Beautiful!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107753632,
            "is_me_message": false,
            "last_edit_timestamp": 1488371517,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488371509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>With that in mind, it becomes easy to see that for a range (start, end), elements indexed by start &lt;= i &lt; end are within the range.</p>\n</blockquote>\n<p>Yeah, that's what I mean by a \"half-inclusive\" or \"half-inclusive\" interval -- it includes one of the endpoints, but not the other.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107755872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488376535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's no semantic difference between int <code>*target</code> and <code>int target[]</code>  <em>in a parameter list</em>.  But in general, you want your code to be as uniform as possible.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107757266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488379402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?d=identicon&version=1",
            "client": "website",
            "content": "<p>That makes sense. C is wiley enough without adding mentally poky bits to the code!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107795457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "zmackie@gmail.com",
            "sender_full_name": "Zander Mackie (SP1'16)",
            "sender_id": 9086,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488455363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Re \"half-inclusive\", the term I heard in school was\"half-open\".  But that I think technically refers to the real number line, which this isn't.  But if you're doing (e.g.) time ranges, then you still want to use a half-open interval and then it does make more mathematical sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107847815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488562260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I usually use \"half-open\", but I  guess I hoped that \"half-inclusive\" would be clearer to readers in the context of that blog post. Sounds like this is a vote against.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107847872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Whats wrong with my quicksort?",
            "submessages": [],
            "timestamp": 1488562355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p><a href=\"http://viewsourcecode.org/snaptoken/kilo/\" target=\"_blank\" title=\"http://viewsourcecode.org/snaptoken/kilo/\">http://viewsourcecode.org/snaptoken/kilo/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109253548,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vipyne@gmail.com",
                        "full_name": "Vanessa Pyne (she) (F2'16)",
                        "id": 100197
                    },
                    "user_id": 100197
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jrojasdavalos@gmail.com",
                        "full_name": "Junior Rojas (he) (S1'16)",
                        "id": 9347
                    },
                    "user_id": 9347
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "msteigerwalt@gmail.com",
                        "full_name": "Michelle Steigerwalt (she/her) (W2'17)",
                        "id": 7655
                    },
                    "user_id": 7655
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Build your own text editor",
            "submessages": [],
            "timestamp": 1491437138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>Holy shit.  This is  fantastic.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109258372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Build your own text editor",
            "submessages": [],
            "timestamp": 1491447714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Hey C-coders, I have a pretty simple question that I feel silly not being sure of.  Here's the code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#define MAX_STR_LEN 20</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Vector</span> <span class=\"p\">{</span>\n   <span class=\"kt\">char</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">vec</span><span class=\"p\">)[</span><span class=\"n\">MAX_STR_LEN</span><span class=\"p\">];</span>\n   <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>What is the type of  <code>vec</code> inside the <code>struct Vector</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109846699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492704446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>\"vec is a pointer to an array of chars\"?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109846705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492704473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://stackoverflow.com/a/859650\" target=\"_blank\" title=\"http://stackoverflow.com/a/859650\">http://stackoverflow.com/a/859650</a> seems relevant (and suggests that you're right that it's a pointer to an array of char)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109847057,
            "is_me_message": false,
            "last_edit_timestamp": 1492705012,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492704965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>ooh, this is pretty dope: <a href=\"https://cdecl.org/\" target=\"_blank\" title=\"https://cdecl.org/\">https://cdecl.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109847163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492705141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>\"declare vec as pointer to array 20 of char\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109847173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492705165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>As a follow-up question, how would you construct one of these to return by value?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>(the struct Vector, not the contained array)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>You mean, besides <code>struct Vector v; v.vec[0] = \"somefoo\"; v.size = 8; return v;</code> ?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yes, but maybe I was being tripped up by an unrelated error</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850931,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>Also you may have trouble assigning anything to a pointer to a fixed size array, I've had many problems with type conversion there.  The implementation for <code>char **vec;</code> would be equivalent and with much less type munging.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah. I'm going off the given template (that struct definition was provided)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109850956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492711249,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the problem is that I'm doing a conditional construction of elements of the vec</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109851437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492712018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">struct</span> <span class=\"n\">Vector</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">candidates</span><span class=\"p\">.</span><span class=\"n\">size</span> <span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"kt\">char</span> <span class=\"n\">cand</span><span class=\"p\">[</span><span class=\"n\">MAX_STR_LEN</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n      <span class=\"n\">sprintf</span><span class=\"p\">(</span><span class=\"n\">cand</span><span class=\"p\">,</span> <span class=\"s\">&quot;%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">candidates</span><span class=\"p\">.</span><span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n      <span class=\"n\">qsort</span><span class=\"p\">(</span><span class=\"n\">cand</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">cand</span><span class=\"p\">),</span> <span class=\"n\">char_size</span><span class=\"p\">,</span> <span class=\"n\">cmpfunc</span><span class=\"p\">);</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">==</span> <span class=\"n\">strcmp</span><span class=\"p\">(</span><span class=\"n\">barr</span><span class=\"p\">,</span> <span class=\"n\">cand</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n          <span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">candidates</span><span class=\"p\">.</span><span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n          <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n  <span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109851495,
            "is_me_message": false,
            "last_edit_timestamp": 1492712327,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492712088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>that assignment inside the if statement is giving me trouble.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109851520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492712123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>that gives:</p>\n<div class=\"codehilite\"><pre><span></span>src/anagram.c:34:22: error: assignment to expression with array type\n           ret.vec[j] = candidates.vec[i];\n                      ^\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109851743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492712430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, I think I see, you only have one pointer there.  So you could do <code>ret.vec = candidates.vec[i]</code>.  Otherwise if you really have an array of char arrays at that underlying pointer, you'd have to strcpy into the dest array, and not just assign to it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492713016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>if vec is a pointer to an array of chars, don't you need to dereference it before you can index into the array? ie, <code>(*(ret.vec))[j] = ....</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492713104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, it's an array of char arrays</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492713860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also confused about the need to allocate the memory for ret.vec</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492713991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>because I'm currently not, and I think that's wrong.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>run it under valgrind and see how juicy its tears are?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, you need to allocate memory for ret.vec.  Also, I support the char** approach; in modern C, \"pointer-to-array\" is rarely seen, perhaps because it's confusing, or perhaps because ultimately you're going to be doing dynamic allocation and so almost certainly you'l be assigning the result of malloc() to the elements</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109852921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714142,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the tears are quit juicy even without valgrind (it segfaults)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looking at e.g. git., I do occasionally see unsigned char (*sha1)[20] but that is rare and will soon be replaced by 'struct object_id *sha1' (as git slowly migrates away from sha1).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(git is always my goto example as it is the C codebase I know best).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>given that I'm trying to stick with the provided datatype declaration and test harness that assumes a type like <code>char (*vec)[20]</code>, what would the call to malloc even be?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714504,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>something like <code>malloc(sizeof(char) * num_elements * MAX_STR_SIZE)</code> (that last being, in this case, 20)?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>sizeof(char) is always 1, fwiw</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853464,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>That would get you a char* (or a char[]ish, I guess). My instinct is to make two calls to malloc, one like you describe and one for a pointer to it. You store the former in the latter and return the latter. It feels wrong but also is the \"obvious\" way to get a value of the type you want?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714937,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>You apparently can't do that because the pointed-to type is an array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492714939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>(also, even though I'm #includ'ing string.h, strdup is not in scope for some reason)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Feature Test Macro Requirements for glibc (see feature_test_macros(7)):</p>\n<div class=\"codehilite\"><pre><span></span>   strdup():\n       _XOPEN_SOURCE &gt;= 500\n           || /* Since glibc 2.12: */ _POSIX_C_SOURCE &gt;= 200809L\n           || /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE || _SVID_SOURCE\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the heck...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>my system is too modern for strdup?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>my glibc is 2.24</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109853989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>No, but strdup isn't part of ISO C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's part of POSIX</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854074,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>gcc, with certain settings, will assume that your source code is ISO, and won't include non-ISO functions unless you specifically request them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>huh</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>So you need to define _POSIX_C_SOURCE in order to get these functions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>OK, makefile fixed to do that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(kind of weird that strdup isn't part of standard C, actually)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109854144,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492715828,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ian@theknown.net\" data-user-id=\"2119\">@Ian Whitlock (S'13)</span> it seems one can't do \"foo[4] = 9;\" in C anymore?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109855008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492717179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>wat?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109855011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492717198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, you can't do that if foo is a pointer to something non-numeric.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109855060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492717215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>hmm, you are correct.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I think I was being confused by an ambiguous error in my code</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>where you had something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>and then the moral equivalent of </p>\n<p><code>*foo = \"bar\";</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857748,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>anyway, thanks to Ian's help, here's the final program to see if a provided janky vector of words contains anagrams of a target word: <a href=\"http://exercism.io/submissions/b10466b3e9c84476ab233848a87e308c\" target=\"_blank\" title=\"http://exercism.io/submissions/b10466b3e9c84476ab233848a87e308c\">http://exercism.io/submissions/b10466b3e9c84476ab233848a87e308c</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>(<span class=\"user-mention\" data-user-email=\"bsadkhin@gmail.com\" data-user-id=\"100516\">@Boris Sadkhin (SP1'17)</span> this wasn't very straightforward, I think.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857809,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bsadkhin@gmail.com",
                        "full_name": "Boris Sadkhin (SP1'17)",
                        "id": 100516
                    },
                    "user_id": 100516
                }
            ],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b01c5830c2d6afff34afec8086b018f26d1edb7b?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"recurse@ardent.nebcorp.com\" data-user-id=\"9097\">@Joe Ardent (SP1'17)</span> Thanks for working on it with me! Made me appreciate python more :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bsadkhin@gmail.com",
            "sender_full_name": "Boris Sadkhin (SP1'17)",
            "sender_id": 100516,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>ha :)  Thank you for working on it with me; it forced me to get into some silly memory stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109857964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "type declaration help",
            "submessages": [],
            "timestamp": 1492721605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/462d5cb1668a697d179a6db0ba9a316640789ea1?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"botwhytho@gmail.com\" data-user-id=\"100545\">@Alberto Torres (SP1'17)</span> We talked about how to count the number of 1 bits in the binary representation of an unsigned int. I just came across this hack that doesn't use loops!</p>\n<div class=\"codehilite\"><pre><span></span>int pop(unsigned x) {\n    x = x - ((x &gt;&gt; 1) &amp; 0x55555555);\n    x = (x &amp; 0x33333333) + ((x &gt;&gt; 2) &amp; 0x33333333);\n    x = (x + (x &gt;&gt; 4)) &amp; 0x0F0F0F0F;\n    x = x + (x &gt;&gt; 8);\n    x = x + (x &gt;&gt; 16);\n    return x &amp; 0x0000003F;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109996448,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "botwhytho@gmail.com",
                        "full_name": "Alberto Torres (SP1'17)",
                        "id": 100545
                    },
                    "user_id": 100545
                },
                {
                    "emoji_code": "1f47b",
                    "emoji_name": "ghost",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "montecristoh@gmail.com",
                        "full_name": "Alberto Zaccagni (SP1'17)",
                        "id": 100509
                    },
                    "user_id": 100509
                }
            ],
            "recipient_id": 22639,
            "sender_email": "dominic@spadacene.com",
            "sender_full_name": "Dominic Michael Spadacene (SP2'17)",
            "sender_id": 100778,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493041407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p>Reminds me of this famous C++ code from Quake 3:</p>\n<div class=\"codehilite\"><pre><span></span>float Q_rsqrt( float number )\n{\n    long i;\n    float x2, y;\n    const float threehalfs = 1.5F;\n\n    x2 = number * 0.5F;\n    y  = number;\n    i  = * ( long * ) &amp;y;                       // evil floating point bit level hacking\n    i  = 0x5f3759df - ( i &gt;&gt; 1 );               // what the fuck?\n    y  = * ( float * ) &amp;i;\n    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration\n//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed\n\n    return y;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109996668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493041894,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dominic@spadacene.com\" data-user-id=\"100778\">@Dominic Michael Spadacene (SP2'17)</span> wow. There are some serious reassignments there.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109997118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493042784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>It brings a tear to my eye.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109998335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493045141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/462d5cb1668a697d179a6db0ba9a316640789ea1?x=x&version=2",
            "client": "website",
            "content": "<p>to put it into context, I think the book was written by a guy who started his career programming in machine code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 109999213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dominic@spadacene.com",
            "sender_full_name": "Dominic Michael Spadacene (SP2'17)",
            "sender_id": 100778,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493046797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>The history of the fast inverse square root is a little more muddied than that :)  <a href=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root#History_and_investigation\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root#History_and_investigation\">https://en.wikipedia.org/wiki/Fast_inverse_square_root#History_and_investigation</a> -- it seems that constant and technique go back to the 80s</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110000137,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "genericpb@gmail.com",
                        "full_name": "Mel Vaughan (W2'17)",
                        "id": 100446
                    },
                    "user_id": 100446
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "federicoisas@gmail.com",
                        "full_name": "Federico G Isas (SP1'17)",
                        "id": 100523
                    },
                    "user_id": 100523
                }
            ],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1493048287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cd9325d8a541f52ff778a4024b548327?d=identicon&version=1",
            "client": "website",
            "content": "<p>nothing new, but kinda fun: <a href=\"http://c-faq.com/decl/spiral.anderson.html\" target=\"_blank\" title=\"http://c-faq.com/decl/spiral.anderson.html\">http://c-faq.com/decl/spiral.anderson.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110339815,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                },
                {
                    "emoji_code": "1f918",
                    "emoji_name": "sign_of_the_horns",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dominic@spadacene.com",
                        "full_name": "Dominic Michael Spadacene (SP2'17)",
                        "id": 100778
                    },
                    "user_id": 100778
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ryan.riddle7@gmail.com",
                        "full_name": "Ryan Riddle (SP1'17)",
                        "id": 100526
                    },
                    "user_id": 100526
                }
            ],
            "recipient_id": 22639,
            "sender_email": "vipyne@gmail.com",
            "sender_full_name": "Vanessa Pyne (she) (F2'16)",
            "sender_id": 100197,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Clockwise/Spiral Rule",
            "submessages": [],
            "timestamp": 1493761540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/462d5cb1668a697d179a6db0ba9a316640789ea1?x=x&version=2",
            "client": "website",
            "content": "<p>^^ <span class=\"user-mention\" data-user-email=\"abylaw@gmail.com\" data-user-id=\"100830\">@Andrea Law (SP2'17)</span>, <span class=\"user-mention\" data-user-email=\"vivian.brown@gmail.com\" data-user-id=\"100931\">@Vivian Brown (SP2'17)</span>,  <span class=\"user-mention\" data-user-email=\"nandaja.varma@gmail.com\" data-user-id=\"100518\">@Nandaja Varma N (SP1'17)</span> this trick is amazinggggggg</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110416975,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                }
            ],
            "recipient_id": 22639,
            "sender_email": "dominic@spadacene.com",
            "sender_full_name": "Dominic Michael Spadacene (SP2'17)",
            "sender_id": 100778,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Clockwise/Spiral Rule",
            "submessages": [],
            "timestamp": 1493918525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "website",
            "content": "<p>Hi all,</p>\n<p>Sorry if this is off topic as it doesn't discuss a discrete code example, but I wanted to see if this was the right stream to discuss writing C for ARM processors or other embedded systems applications.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110973811,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Embedded Systems Programming",
            "submessages": [],
            "timestamp": 1495043954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffarn12@gmail.com\" data-user-id=\"101079\">@Jeff Arn</span> Sure.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110973818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Embedded Systems Programming",
            "submessages": [],
            "timestamp": 1495043969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I just came across this amazing explication of that constant and the fast inverse square root procedure: <a href=\"http://h14s.p5r.org/2012/09/0x5f3759df.html\" target=\"_blank\" title=\"http://h14s.p5r.org/2012/09/0x5f3759df.html\">http://h14s.p5r.org/2012/09/0x5f3759df.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111057426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1495216059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>It generalizes the technique for any exponent between -1 and 1, so you can then do, eg, fast square root analogously.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111057494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1495216139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "website",
            "content": "<p>this is a great write up. i'll need to spend a day during Summer 1 just focused on floating point calculations.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111136293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1495407860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"dominic@spadacene.com\" data-user-id=\"100778\">@Dominic Michael Spadacene (SP2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207123,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "counting the 1's",
            "submessages": [],
            "timestamp": 1495560072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "website",
            "content": "<p>Digging into typedef with structs and was wondering if anyone knows if it is possible to declare a pointer that can be assigned to a struct's address within the struct itself. For example, given the struct declaration:</p>\n<div class=\"codehilite\"><pre><span></span>typedef struct Piece {\n  int x_coordinate;\n  int y_coordinate;\n  int id;\n} Piece;\n</pre></div>\n\n\n<p>could a pointer be added either as a member variable or within the struct declaration, such as:</p>\n<div class=\"codehilite\"><pre><span></span>typedef struct Piece {\n  int x_coordinate;\n  int y_coordinate;\n  int id;\n} Piece, *PiecePointer;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207342,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495560399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d5518741e12b2070f0063a21cd60c939?d=identicon&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffarn12@gmail.com\" data-user-id=\"101079\">@Jeff Arn (S1'17)</span>  Yes you can add the pointer to a struct of the same type as a member variable within, it can be <code>void *</code> or use a forward declaration</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "carl.douglas@gmail.com",
            "sender_full_name": "Carl Douglas (S1'17)",
            "sender_id": 101092,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495560832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "website",
            "content": "<p>Awesome, that worked perfectly, thank you. I'm wondering if best practice is to declare separate pointers or if it's acceptable to have a pointer in a member variable point to the struct it belongs to.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207804,
            "is_me_message": false,
            "last_edit_timestamp": 1495561053,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495561034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e9bbea7116dbac067c366b35a5e494286fbe2b21?x=x&version=1",
            "client": "website",
            "content": "<p>you can also do it like this:</p>\n<div class=\"codehilite\"><pre><span></span>typedef struct Piece {\n  struct Piece *p;\n  ...\n} Piece;\n</pre></div>\n\n\n<p>this works as long as you aren't <code>typedef</code>ing an anonymous struct</p>\n<p>usually using a typedef for pointer types is frowned upon (except for function pointers where it is not frowned upon, but I personally would avoid it)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111207867,
            "is_me_message": false,
            "last_edit_timestamp": 1495561453,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "carl.douglas@gmail.com",
                        "full_name": "Carl Douglas (S1'17)",
                        "id": 101092
                    },
                    "user_id": 101092
                }
            ],
            "recipient_id": 22639,
            "sender_email": "genericpb@gmail.com",
            "sender_full_name": "Mel Vaughan (W2'17)",
            "sender_id": 100446,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495561156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>My preferred template for structs is:</p>\n<div class=\"codehilite\"><pre><span></span>typedef struct Foo_t {\n    ...\n} Foo_t;\n</pre></div>\n\n\n<p>The type namespace and the struct namespace are disjoint, but peoples' ideas of structs are as types, so this pattern (using the same name for both the struct and the typedef) allows people to use either <code>struct Foo_t</code> or <code>Foo_t</code> nearly interchangeably.  The exception is using a pointer to the struct within the struct itself, which has to use <code>struct Foo_t</code> because of course <code>Foo_t</code> has not quite been defined yet.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111210271,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495564841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>I also agree with <span class=\"user-mention\" data-user-email=\"genericpb@gmail.com\" data-user-id=\"100446\">@Mel Vaughan (W2'17)</span> that typedef's of pointers is not a good idea except for function pointers.  But I always typedef function pointers.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111210283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495564900,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e9bbea7116dbac067c366b35a5e494286fbe2b21?x=x&version=1",
            "client": "website",
            "content": "<p>the funny thing i realized recently with regards to function pointers is you can actually do this:</p>\n<div class=\"codehilite\"><pre><span></span>typedef void (some_function_t)(int);\n\nint main (void) {\n  some_function_t *foo;\n  return 0;\n}\n</pre></div>\n\n\n<p>which i prefer over <code>some_function_t_ptr</code> or something like that<br>\ni dont know if this is like standard or anything but gcc lets you do it so thats fine by me haha</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111210481,
            "is_me_message": false,
            "last_edit_timestamp": 1495565332,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "genericpb@gmail.com",
            "sender_full_name": "Mel Vaughan (W2'17)",
            "sender_id": 100446,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Self-Referential Pointer in struct typedef",
            "submessages": [],
            "timestamp": 1495565234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>hey, im trying to use <code>wchar_t</code> instead of <code>char</code> for a project now because im handling unicode. im running into a bunch of problems, but the most immediate is that <code>getline</code> is not my friend anymore, which is sad. i read theres a function called <code>getwline</code>, but apparently my system disagrees.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111215920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "wchar_t madness",
            "submessages": [],
            "timestamp": 1495573957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>to be more specific: i read it <a href=\"http://en.cppreference.com/w/c/experimental/dynamic/getline\" target=\"_blank\" title=\"http://en.cppreference.com/w/c/experimental/dynamic/getline\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111215922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "wchar_t madness",
            "submessages": [],
            "timestamp": 1495573980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>nevermind, i implemented it myself...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111217251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "wchar_t madness",
            "submessages": [],
            "timestamp": 1495576272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've got a one line C code here on OSX:</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;readline/readline.h&gt;\n#include &lt;readline/history.h&gt;\n\nint\nmain() {\n    printf( &quot;%s\\n&quot;, readline( &quot;test&gt; &quot; ) );\n    return 0;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296054,
            "is_me_message": false,
            "last_edit_timestamp": 1495739962,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495739731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>and <code>gcc main.c -o a.out</code> fails with a linker error:</p>\n<div class=\"codehilite\"><pre><span></span>Undefined symbols for architecture x86_64:\n  &quot;_readline&quot;, referenced from:\n      _main in main-418319.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone faced something similar before?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>what happens if you do <code>gcc -lreadline main.c -o a.out</code> (the <code>-o a.out</code> shouldn't be necessary; 'a.out' is the default name)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>worked like a charm!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296595,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"recurse@ardent.nebcorp.com\" data-user-id=\"9097\">@Joe Ardent (SP1'17)</span> What was I missing here?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you need to tell the linker (in this case, via the compiler, since gcc automatically invokes the linker to do static linking) to link in libreadline</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>that's what <code>-lreadline</code> means</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296650,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah. I'm assuming I'd have to do the same for other libraries as well?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>it looks for a file named \"libreadline.(so|a)\" in the standard library directories</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>yes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>some things, like libc, are linked by default; that's why you can use printf and friends</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>but if you wanted to do math stuff, you'd need <code>-lm</code>, for instance</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>got it. is there a resource where I could figure out what version of <code>-l*</code> I'd need depending on the library involved?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>linking order matters, too</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296740,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>manpages can help</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>documentation</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>going back to math stuff, for example, do <code>man pow</code> in a terminal</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296788,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495740994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't see anything related to linking for <code>man pow</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>linking order matters, too</p>\n</blockquote>\n<p>Depending on the order of declaration in code?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296854,
            "is_me_message": false,
            "last_edit_timestamp": 1495741136,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>hmm, I guess the BSD/OS X manpages are crappier ;)  I have:</p>\n<div class=\"codehilite\"><pre><span></span>NAME\n       pow, powf, powl - power functions\n\nSYNOPSIS\n       #include &lt;math.h&gt;\n\n       double pow(double x, double y);\n       float powf(float x, float y);\n       long double powl(long double x, long double y);\n\n       Link with -lm.\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>no, depending on the dependency graph between the libraries</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>so if libA depends on libB, you'd have to link like <code>gcc -lB -lA foo.c ...</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741204,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>hmm, I guess the BSD/OS X manpages are crappier ;) I have:</p>\n</blockquote>\n<p>:( I'll refer to the man pages online then</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741275,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>so if libA depends on libB, you'd have to link like gcc -lB -lA foo.c ...</p>\n</blockquote>\n<p>Got it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks again! :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also willing to bet that had you googled your error, you'd have found the answer (if you knew the form of the solution, as you now do)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>no worries!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>this stuff is all very fiddly and arcane.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111296994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495741353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did google for the solution. None of them worked though. It ranged from using <code>g++</code> to using <code>brew doctor</code> fix the linking problem.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495742321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>oh jeez :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111297587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "linker error on OSX",
            "submessages": [],
            "timestamp": 1495742413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Has anyone used a Saleae Logic Analyzer? I've heard they are nice but was curious if anyone has first hand experience with them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111334870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495820789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffarn12@gmail.com\" data-user-id=\"101079\">@Jeff Arn (S1'17)</span> we have a couple of them here if you want to use them :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111337255,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495824813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>They're in Turing in black cases that are unfortunately kind of hard to find. We have an original Logic (mine that I've never used), and then a Logic Pro 8, which is pretty beefy</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111337309,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "203c",
                    "emoji_name": "double_exclamation_mark",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@sweeting.me",
                        "full_name": "Nick Sweeting (he) (S1'14)",
                        "id": 5883
                    },
                    "user_id": 5883
                }
            ],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495824901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you can't find them, ping me</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111337316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495824908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Awesome!! Very exciting. Thanks <span class=\"user-mention\" data-user-email=\"dave@recurse.com\" data-user-id=\"810\">@David Albert</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111337735,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495825634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>of course :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111337738,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495825644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>well I'm happy to report that your Logic works great.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111338510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495827111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>good to hear</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111338556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Logic Analyzer",
            "submessages": [],
            "timestamp": 1495827158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>For anyone that was signed up for our ARM C dev chat today, we are going to meet tomorrow instead. Sorry for the last minute reschedule.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111477639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "ARM Chat rescheduled",
            "submessages": [],
            "timestamp": 1496156525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is anyone who worked on the toy OS in Spring 2 looking to continue developing it? There are a few of us in Summer 1 who are looking for a low level project and would like to contribute some drivers and other things. It would be great to build upon the work that has already been done on this if possible!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111486266,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS Dev",
            "submessages": [],
            "timestamp": 1496171394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/462d5cb1668a697d179a6db0ba9a316640789ea1?x=x&version=2",
            "client": "website",
            "content": "<p>Let's take this to <a class=\"stream\" data-stream-id=\"20324\" href=\"/#narrow/stream/projects\">#projects</a> stream, there's an OS Dev topic there</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111488351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dominic@spadacene.com",
            "sender_full_name": "Dominic Michael Spadacene (SP2'17)",
            "sender_id": 100778,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "OS Dev",
            "submessages": [],
            "timestamp": 1496174771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>On page 121 of the K&amp;R book a function to swap values is defined as follows:</p>\n<div class=\"codehilite\"><pre><span></span>void swap(void *v[], int i, int j) {\n  void *temp;\n   temp = v[i];\n  v[i] = v[j];\n  v[j] = temp;\n}\n</pre></div>\n\n\n<p>How does the compiler know how the size of bytes to move when performing pointer arithmetic if there's no type specified?  <br>\nif v[i] is same as  *(v + ( i  x sizeof(v)) ) what is the size being used in the arithmetic?</p>\n<p>I understand that a  non-void type pointer can go back converted to a void pointer without casting and a non-void pointer can be converted to a void pointer and back without losing information.. Is the compiler keeping track of this?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111586179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496380818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>My copy of the book is on a distant island, so I can't check the text, but the code looks like it's swapping two pointers. Pointers are the same size regardless of what they point to.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111586720,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496382223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipAndroid",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> most of what I've read is that per the C specification you are not allowed to do pointer arithmetic on void* for this exact reason.</p>\n<p>I agree that the code looks like it is just swapping pointers which would be fine because the pointers themselves have a defined size in memory, but I would be interested to see what would happen if you tried to increment one of the void pointers.</p>\n<p>Supposedly GCC will compile arithmetic on void* with certain extensions where they define the pointer size as 1, but I haven't tried this specifically to confirm.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111595129,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496401989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>My copy of the book is on a distant island, so I can't check the text, but the code looks like it's swapping two pointers. Pointers are the same size regardless of what they point to.</p>\n</blockquote>\n<p>True!  </p>\n<p>The key take away I just realized is  it <code>v</code> in the swap function is a <code>void **</code> type so I can dereference it only once.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111602724,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496416898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right - or you could think of it as 'v' being an array of void* types. ie an array of pointers to unknown types. (i think?!)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111607028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496424612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>correct, and I'd tend to agree with the linux kernel style of prefering T **arg to T *arg[] to be clearer about this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111614835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "void pointer arithmetic?",
            "submessages": [],
            "timestamp": 1496438429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been writing some code in C, and have managed to end up with this sort of a workflow:<br>\n<code>main() -&gt; run_command() -&gt; make_input() -&gt; expand_array()</code>, where the arrows indicate a function calling another. Now the problem I am seeing here is that, if the last function in the call chain encounters an error (with memory allocation), I return a <code>NULL</code>. So this <code>NULL</code> propagates up the chain upto the top most function. But by that time, I've lost context on where exactly the error occurred. Also, in my program logic, <code>NULL</code> does not necessarily mean an error in the outermost function.</p>\n<p>I was reading about <code>errno</code>, but then managing a global variable for errors seems to throw up the following problems:<br>\n1. Anyone can modify it, making synchronization across routines hard<br>\n2. If anyone can modify it, it also implies that before each routine is invoked, I must ensure to check for the <code>errno</code> and possibly reset it if my program is fine with it. </p>\n<p>This doesn't feel very isolated and DRY-ish. Any thoughts on how to do this better?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111640200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496500514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>so just for malloc failures its pretty common to define a function like xmalloc() defined something like this<br>\nvoid *xmalloc(size_t n)<br>\n{<br>\n  void *p = malloc(s);<br>\n  if (!p) { fprintf(stderr, \"malloc failed!\"); exit(1); }<br>\n  return p;<br>\n}<br>\nso that you don't need to worry about handling allocation failures, your not going to get it right anyway.<br>\nfunctions outside of libc setting errno is unusual, but happens ocassionally where it really makes sense, for example git.git has some examples of this where the function is basically opening a file or otherwise behaving a lot like a libc function.  However some libraries have there own global error data for example dlerror(3).<br>\nthen you can have the convention that returning an object means sucess and null means failure either because of the function itself failing or something it called failing.  If null can be returned in non error cases then you probably want to make the function return a pointer through a pointer argument and return a success / failure int / bool, so something like<br>\nint get_foo(const char *name, struct foo **out_foo);<br>\nthen returning0 / non zero to indicate success or failure, but I'm a little wary of APIs that require considering null in success cases.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111648431,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496520527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yeah, sadly there is no good unified way of handling this. not even the standard is consistent. the most obvious example is probably <code>strcmp</code>, which if you use it like most people do, you will have to check for 0 as a success value; there are good reasons why this is designed like that, but it still derails people.</p>\n<p>so there is NULL, errno, hard exit, 0 (sometimes, unless you need it, then maybe -1)... pick your poison?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111649401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496522893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>another common pattern is to only use function return values for success/failure, and handle all actual value returns through pointer arguments (where you expect the caller to pass in the address of a variable to write the actual data into). this allows you to provide a much wider range of error conditions. it's hard to be consistent about this though, because the standard library (and honestly, most other libraries) don't work this way, but it can often still simplify things.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111651111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496527088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d9ed5f596714f4f3946f0896c9247b7686db1f6?x=x&version=4",
            "client": "website",
            "content": "<p>Interesting tactic</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111655483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@sweeting.me",
            "sender_full_name": "Nick Sweeting (he) (S1'14)",
            "sender_id": 5883,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496537970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Jansson ( <a href=\"https://jansson.readthedocs.io/en/2.10/apiref.html#decoding\" target=\"_blank\" title=\"https://jansson.readthedocs.io/en/2.10/apiref.html#decoding\">https://jansson.readthedocs.io/en/2.10/apiref.html#decoding</a> ) does this \"pass a pointer to a place to put errors\" thing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111680705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496600778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been working on a DSP project where I call a for() loop quite often. It occurred to me that I could use a macro to clean up the appearance.</p>\n<p>Original code is:<br>\n<code>for( j=0; j&lt;NUM_OSCS; j++ ){ \"some code\"; }</code></p>\n<p>Which I tried to replace with:</p>\n<div class=\"codehilite\"><pre><span></span>#define DO_OSCS(j)  (for( j=0; j&lt;NUM_OSCS; j++ ))\nDO_OSCS(j){ &quot;some code&quot;; }\n</pre></div>\n\n\n<p>GCC throws \"error: expected expression before 'for'\"</p>\n<p>Now if C macros are truly \"string replacement\" as everybody complains, why doesn't the above work?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111688331,
            "is_me_message": false,
            "last_edit_timestamp": 1496619477,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496619312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>The GLib utility library has a <a href=\"https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#glib-Error-Reporting.description\" target=\"_blank\" title=\"https://developer.gnome.org/glib/stable/glib-Error-Reporting.html#glib-Error-Reporting.description\">nice system</a> formalizing that strategy.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111688377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Error Handling in C",
            "submessages": [],
            "timestamp": 1496619411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>Your example expands to:</p>\n<div class=\"codehilite\"><pre><span></span>(for( j=0; j&lt;NUM_OSCS; j++ )){ &quot;some code&quot;; }\n</pre></div>\n\n\n<p>The extra parens are getting you.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111688428,
            "is_me_message": false,
            "last_edit_timestamp": 1496619535,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496619527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>ahhh thank you! i'm always overzealous with parens! lisp is calling me...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111688484,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bgilbert@backtick.net",
                        "full_name": "Benjamin Gilbert (he) (W2'16)",
                        "id": 8696
                    },
                    "user_id": 8696
                }
            ],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496619699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIRC, gcc -E will expand macros for you, so you can see what your code is doing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111691572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496626902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, it's generally better avoid using what grammarians call non-constituent phrases as macro values.  Instead, do something like #define DO_OSCS(j, code) for ((j) = 0; (j) &lt; NUM_OSCS; (j)++) { code }</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111691625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496627004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>as much as its a style I dislike the macro abstracting a for loop header is a reasonably common and reasonable enough thing to do.  I know gcc uses it heavily, I think I've seen other projects use it as well.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111694066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Macros just string replacement?",
            "submessages": [],
            "timestamp": 1496632906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Having come from web dev, I'm trying to get in the mindset of how to write appropriate tests for C projects. I've read that Glib/GTester is a good package to use for tests, but was curious if the group had any resources on testing in C they have found helpful along the way.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111753634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496760391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0fc5778d097c3ce0d085a4e5d2115fdf89a5ce55?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vokes.s@gmail.com\" data-user-id=\"7280\">@Scott Vokes</span> is the expert on this!  You might want to check out <a href=\"https://github.com/silentbicycle/greatest\" target=\"_blank\" title=\"https://github.com/silentbicycle/greatest\">https://github.com/silentbicycle/greatest</a> , and also <a href=\"https://github.com/silentbicycle/theft\" target=\"_blank\" title=\"https://github.com/silentbicycle/theft\">https://github.com/silentbicycle/theft</a> for property-based tests,</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111759909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mindy.preston@yomimono.org",
            "sender_full_name": "Mindy Preston (she) (F2'19)",
            "sender_id": 4994,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496771064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi! Of the two libraries <span class=\"user-mention\" data-user-email=\"mindy.preston@yomimono.org\" data-user-id=\"4994\">@Mindy Preston (W'14)</span> mentioned, greatest is designed to be easy to get started with (and depends on essentially nothing else), whereas theft is a more advanced, somewhat QuickCheck-like library that can be used with any other C testing library.</p>\n<p>I'd be happy to answer questions / chat about using either. I'm actively working on theft this and next week, I'm hoping to get a bunch of new features documented and released before starting a new job.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111760259,
            "is_me_message": false,
            "last_edit_timestamp": 1496772266,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496771691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>In terms of mindset, it will probably be helpful to structure your project so most of the code is in libraries/modules that have an interface that can be tested in isolation.</p>\n<p>For example, I've done some embedded projects where most of the code could be tested off the hardware -- a struct with function pointers gets passed in that represents the direct interfaces to anyway hardware, so test doubles can be passed in.</p>\n<p>I recently wrote a bunch of storage code (implementing durable logging, file transfers, and some other stuff on top of raw block storage in external flash), and the storage logic was designed so I passed in an interface struct with read, write (mask), and block-erase callbacks -- the code didn't know whether the headers and records it was managing were stored in a flash chip, a memory buffer allocated by the test runner on my laptop, or what. It just knew about how the storage should work, and the possible error cases that it needed to handle.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111760465,
            "is_me_message": false,
            "last_edit_timestamp": 1496773921,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496772028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>The same sort of approach can work well if you're dealing with a database, graphics drivers, or other external systems. Depending on your specific experience, this might remind you of dependency injection or mocking, but doing it in C changes a lot of the implementation details.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111760545,
            "is_me_message": false,
            "last_edit_timestamp": 1496772187,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496772154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111760872,
            "is_me_message": false,
            "last_edit_timestamp": 1496772992,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496772677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, some other tools that aren't specifically testing tools but will help find bugs. In particular, <strong>valgrind</strong> will probably help a lot! It watches programs as they execute and warns about certain kinds of memory safety errors (among many other things).</p>\n<p>For starters, you can run your program as <code>valgrind programname</code>, and it will warn you if it detects memory leaks, if/switch statements jumping based on un-itialized data, or several other kinds of memory corruption.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111761000,
            "is_me_message": false,
            "last_edit_timestamp": 1496773068,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496772843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5de070e753aa687ed150feb24a19fd20?d=identicon&version=1",
            "client": "website",
            "content": "<p>(The main downside is that running with vagrind is usually a lot slower.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111761031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vokes.s@gmail.com",
            "sender_full_name": "Scott Vokes",
            "sender_id": 7280,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1496772887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wrote this so far:</p>\n<div class=\"codehilite\"><pre><span></span>const char *a_builtin_commands[] = {&quot;cd&quot;};\n\nint is_builtin(char *command) {\n    int i = 0;\n    do {\n        if (strcmp(a_builtin_commands[i], command) == 0)\n            return 1;\n\n         i++;\n    } while (a_builtin_commands[i] != NULL);\n\n    return 0;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808405,
            "is_me_message": false,
            "last_edit_timestamp": 1496867170,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there anything I should do, to improve the code structure? Is there a better way to do this in C ?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you considered using a for loop? It looks like it'd fit well here. Also, make sure you add a NULL entry to the end of a_builtin_commands.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> isn't there a NULL added by C in the end without explicitly specifying it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i would also opt for a for loop. this loop implicitly assumes that there is at least one command, which might or might not be fine.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>no, there is no NULL being added.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808792,
            "is_me_message": false,
            "last_edit_timestamp": 1496867829,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>Might be an improvement for later, but when the list of strings becomes large, it would be more efficient to use a hash table/hash set to check for membership. If your list has 50 items, you will have to check all 50 items before you know that the command isn't a builtin. A hash structure will tell you with one or two checks.</p>\n<p>It is probably perfectly fine as long as the list is known to be small, but I find it's always good to think about the asymptotic behavior!</p>\n<p>+1 for <code>for</code> loops. I'm not sure if I've ever actually needed a <code>do { ... } while(...);</code> loop...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>int is_builtin(char *command) {\n    unsigned int i = 0;\n\n    for(i=0; i &lt; sizeof(a_builtin_commands) / sizeof(a_builtin_commands[0]); i++) {\n        if (strcmp(a_builtin_commands[i], command) == 0)\n            return 1;\n    }\n\n    return 0;\n}\n</pre></div>\n\n\n<p>This does look much cleaner.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808803,
            "is_me_message": false,
            "last_edit_timestamp": 1496867865,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trbabb@gmail.com\" data-user-id=\"101091\">@Tim Babb (S1'17)</span> The list is known to be small; but I'll probably improve it with a hash map down the line.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808847,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trbabb@gmail.com",
                        "full_name": "Tim Babb (S1'17)",
                        "id": 101091
                    },
                    "user_id": 101091
                }
            ],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Why not end the for loop when <code>!a_builtin_commands[i]</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496867988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>again, youll need NULL padding for that (which is a good idea anyway, considering you will likely loop through the commands in more than one place).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111808941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496868078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> Not sure I follow. The result of <code>sizeof(a_builtin_commands)/sizeof(a_builtin_commands[0])</code> is <code>0</code> for an empty array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> </p>\n<div class=\"codehilite\"><pre><span></span>int is_builtin(char *command) {\n    unsigned int i = 0;\n\n    for(i=0; i &lt; sizeof(a_builtin_commands)/sizeof(a_builtin_commands[0]); i++) {\n        if (!a_builtin_commands[i])\n            return 0;\n\n        if (strcmp(a_builtin_commands[i], command) == 0)\n            return 1;\n    }\n\n    return 0;\n}\n</pre></div>\n\n\n<p>Added the check. Did you mean this?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>my response was to iain, not to you</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">is_builtin</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">command</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">a_builtin_command</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">strcmp</span><span class=\"p\">(</span><span class=\"n\">a_builtin_commands</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">command</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, that's clean!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that would be my suggestion, but thats not entirely congruent with iains, and needs the null padding</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>const char *a_builtin_commands[] = {&quot;cd&quot;, NULL};\n\nint is_builtin(char *command) {\n    for (int i = 0 /* this is C99, right? */; a_builtin_commands[i] != NULL; i++)\n        if (strcmp(a_builtin_commands[i], command) == 0)\n            return 1;\n    }\n\n    return 0;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809812,
            "is_me_message": false,
            "last_edit_timestamp": 1496869582,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>iain, i think you confused the order in the for header?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>got it. NULL padding it is.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> oops, you're right. Fixed it now, hopefully. I think we were on pretty much the same page :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809871,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>okay, then.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Another option might be something like:</p>\n<div class=\"codehilite\"><pre><span></span>const char *a_builtin_commands[] = {&quot;cd&quot;, NULL};\n\nint is_builtin(char *command) {\n    for (char** current_command = a_builtin_commands; *current_command != NULL; current_command++)\n        if (strcmp(*current_command, command) == 0)\n            return 1;\n    }\n\n    return 0;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809874,
            "is_me_message": false,
            "last_edit_timestamp": 1496869733,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>just keep in mind that if <code>a_builtin_commands</code> is using static constructors for initialization, the initialization with <code>NULL</code> wont work. <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> and i ran into this while pairing on his code a while ago.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've declared it as a <code>const</code> instead.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809939,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't expect it to change during program lifetime.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i.e. you can use <code>NULL</code>, but it will still be there, with null'd fields, which is weird.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>sorry, i was in the struct world for a moment. chars work that way.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111809951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>One rule I like to follow is:</p>\n<ul>\n<li>Always put braces after an <code>if</code> or a <code>for</code></li>\n<li>...unless the body statement is short enough to put on the same line. </li>\n</ul>\n<p>Like this:</p>\n<div class=\"codehilite\"><pre><span></span>if (condition()) {\n     do_something();\n}\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>if (condition()) a = b;\n</pre></div>\n\n\n<p>but never:</p>\n<div class=\"codehilite\"><pre><span></span>if (condition())\n    a = b;\n</pre></div>\n\n\n<p>because the latter invites this error:</p>\n<div class=\"codehilite\"><pre><span></span>if (condition())\n    a = b;\n    do_something();\n</pre></div>\n\n\n<p>The indentation suggests that <code>do_something()</code> will happen if and only if <code>condition()</code> yields <code>true</code>, but in fact that's not the case. Therefore I always use braces for an indented block.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111810009,
            "is_me_message": false,
            "last_edit_timestamp": 1496869985,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "indradhanush.gupta@gmail.com",
                        "full_name": "Indradhanush Gupta (he) (S1'17)",
                        "id": 101105
                    },
                    "user_id": 101105
                }
            ],
            "recipient_id": 22639,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496869855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh! i thought i was the only one who used the <code>put on same line if possible, otherwise braces</code> rule. (also keep in mind macro expansion might screw that up if it expands to more than one statement)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111810098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496870026,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>One more vote for braces -&gt; I use them <em>always</em> even for a single line while/ for. This means if you later extend your function you never have to worry about omitting the braces. Also, I find it helps if my syntax has as few exceptions as possible for readability sake.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111819481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496889932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Standard advice is to always use braces.  But several major projects don't (e.g. Git and Linux)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111819578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1496890164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://matt.sh/howto-c\" target=\"_blank\" title=\"https://matt.sh/howto-c\">https://matt.sh/howto-c</a></p>\n<p>I read this blog post a few weeks back and it really made me think a lot about the way I write C. The very first discussion on Types I found super interesting. Most of my work in the past has used the explicit bit size types so that always felt very natural to me. Plus it forces me to consider how big of an int i really need. If you're running an iterator of a fixed size loop, a 32bit (or often 16bit) instruction could likely be enough. Perhaps your compiler is smart enough to figure that out, but if not you might be missing out on potential SIMD optimizations. Does anyone know if a compiler will downgrade an <code>int</code> type to a smaller size?</p>\n<p>Explicitly using 'uintptr_t' has also made much of my code more readable (<em>you are manipulating an address!</em>), and <code>#pragma once</code> is just, well, better.</p>\n<p>Also I've stopped using <code>char</code> as it's become ambiguous in the UTF-8 context. Reminds me <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> mentioning that chars were usually signed which I disagreed. Turns out we're both right (and wrong) -&gt; the C standard never specified whether chars were signed or not! Different implementations use one or the other, but all compilers will automatically cast for you without a warning.</p>\n<p>I wonder if folks here have divergent views from the article? I particularly appreciate the assumption that <em>everyone</em> is using C99 &amp; so we can structure our code around that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820122,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "n.saphra@ed.ac.uk",
                        "full_name": "Naomi Saphra (m3'18)",
                        "id": 100801
                    },
                    "user_id": 100801
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                }
            ],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496891511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I do not care for this post.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>The reason for non-explicit int sizes is that it allows the compiler to choose a type without doing complicated analysis.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>That choice will often depend on your processor (32-bit vs 64-bit)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>And, perhaps, on your optimization setting (-Os, say).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>In general, for things with a relatively small range, int is just fine.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820559,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Don't use -march=native for binaries that you are distributing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(because what's native to you won't be native to everyone -- my machine has AVX but not AVX2 (IIRC); some servers at work don't even have AVX.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(everyone with x86_64 has SSE2)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>The \"fast\" types might help with the explicit size vs optimization problem, but (a) as the article notes, they're not universally supported and (b) they're hard to read.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820665,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, char is always 8 bits (yes, the standard doesn't say this, but let's be serious) and there is no reason not to use it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820706,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't see a strong reason to use 'pragma once'; old-style include guards work fine.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496892994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, right, here's where it gets real weird: the bit about stdbool.  The C standard library, for better or for worse, has 0 as 'success'.  It's better to stick to that convention whenever possible.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is no reason to limit the size of a file.  A large file is often easier to navigate, as you can use your editor's search feature.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't agree with the calloc advice, because valgrind.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111820908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i haven't written C for production systems in the last few years because msot of my clients switched to Go. Some of the advice seems off enough for me to worry about the other parts.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>basically anything that was said before, even if i would've missed a few things that were stated, and</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i personally quite like <code>char</code> or even <code>wchar</code> when working with character types, the author just dismisses it outright and doesn't even discuss what to do when not working with numerics.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><code>If you are using a function with native return types or native parameters, use types as described by the function prototype or API specification.</code> == make it hard to interface with other code, if you do your own stuff and then have to cast or do other weird (and probably unsafe) magic when confronted with anything the stdlibs provide?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496893880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i actually _like_  declaring my variables at the top of the function, so there's that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821199,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>about the padding thing: i see the appeal of the static initializers. but if i need to remember an <code>IMPORTANT NOTE</code> with a special case, while the other works in all cases, maybe i'll go with the other one instead</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that's a general thing, though. he presents alternative feature x, and then goes on to list all of the caveats where x does _not_ work. if i have to remember them, i'll probably not use them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894297,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><code>By declaring your input type as void * then re-assigning or re-casting to the actual type you want inside your function, you save the users of your function from having to think about abstractions inside your own library.</code> and open yourself to all kinds of nasty bugs, i suppose?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821313,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><code>You should always use calloc.</code> becomes <code>I still stand by my recommendation of always using calloc() for most common scenarios of 2016</code> three paragraphs further down. should've put a note at the top or something</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>okay, i think that's all i have.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496894671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, y'all are ruthless.</p>\n<p>My use of the explicitly sized integer types probably is the result of my work on embedded systems with very limited memory. I guess I internalized that method as <em>best</em> because it's <em>best for me</em> &amp; thus was excited to see someone preaching the gospel.</p>\n<p>Happy to recognize I'm a relatively new programmer. Positive is I don't have so many bad habits, but negative is it's hard to know which are the right habits to pick up!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821625,
            "is_me_message": false,
            "last_edit_timestamp": 1496895080,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496895062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i definitely see the appeal of many of the explicitly sized integer types; one of my best friends is a vst developer (c++ though) and he says he needs always know the size of everything (which i believe). embedded systems are often similar. i mostly write networking code, and have other requirements.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111821686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496895230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>For embedded systems, using explicitly sized integers is totally reasonable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111824057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to C in 2016",
            "submessages": [],
            "timestamp": 1496901324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wondering if anyone in the current batch has the knowledge &amp; will to run a Valgrind workshop? I remember <span class=\"user-mention\" data-user-email=\"joshuagangloff@gmail.com\" data-user-id=\"101084\">@Josh Gangloff (S1'17)</span> mentioning wanting to build a kind of extended version, so perhaps you have the knowledge?!</p>\n<p>I've never used it, so would really appreciate an intro, but I wonder if there's intermediate users in batch rn that would appreciate a more in-depth discussion / demonstration of how folks are using it?!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111842205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496938431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i only have working knowledge of it, not much of a generally useful overview. if push comes to shove, i could probably do a workshop, but i would rather not.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111842346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496938628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>I can talk about using valgrind to find memory errors and leaks, and to do performance analysis with kcachegrind.  But it would be a fairly beginning workshop and nothing about the internals or more exotic functionality that it has.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111842419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496938787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I would +1 a general valgrind and performance analysis workshop in C, however.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111844816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496942852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would love to attend.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111845272,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496943492,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would it be too much to also include some advanced <code>gdb</code> skills?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111845286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496943551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel like I outgrew my single <code>main.c</code> structure now, and it's a good time to structure it into a library. I was looking at the <a href=\"https://github.com/zeromq/libzmq/\" target=\"_blank\" title=\"https://github.com/zeromq/libzmq/\">libzmq</a> project for ideas. I see they have an <code>include</code> folder along with an <code>src</code> folder, and there are header files in both of them. What might be the reason behind that?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111851927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1496946732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a179bb8c3fc4ab0975954f57d47fa6c53a8c2dad?x=x&version=2",
            "client": "website",
            "content": "<p>The <code>include</code> directory might contain the \"public\" header(s) that users of the library will include in their own projects. The headers in <code>src</code> might be for the library's internal use.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111852433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jay@jayschwa.net",
            "sender_full_name": "Jay Weisskopf Petacat (W2'17)",
            "sender_id": 829,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1496946954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>I know bits and pieces about how valgrind and related tools including gdb / perf work, but I'm not really an expert on any of them, so I wouldn't really be great for giving a presentation on any of them, and talking about all of them would take a while.  However I'll sit in the back and yell corrections at whoever wants to do these talks though ;p  I'd actually be happy to help someone put this together if they have a rough idea how such a talk should go and want technical help.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111855694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1496952309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see myself using a lot of <code>sizeof(char *)</code> spread across my code. Is it a good idea to set it as a macro instead?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111865977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Macros for value of sizeof",
            "submessages": [],
            "timestamp": 1496973041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>That's an interesting question.  These days I prefer <code>sizeof(varname)</code> rather than <code>sizeof(type)</code>.  Like <code>char **ptr = malloc(sizeof(*ptr) * n);</code>.  That way the declarative type can be changed and the sizeof expression doesn't have to.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111872011,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "indradhanush.gupta@gmail.com",
                        "full_name": "Indradhanush Gupta (he) (S1'17)",
                        "id": 101105
                    },
                    "user_id": 101105
                }
            ],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Macros for value of sizeof",
            "submessages": [],
            "timestamp": 1496987081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>Also want to express my interest in this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111881881,
            "is_me_message": false,
            "last_edit_timestamp": 1497011046,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1497010745,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/462d5cb1668a697d179a6db0ba9a316640789ea1?x=x&version=2",
            "client": "website",
            "content": "<p>rsvp yes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111889555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dominic@spadacene.com",
            "sender_full_name": "Dominic Michael Spadacene (SP2'17)",
            "sender_id": 100778,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Valgrind Workshop?",
            "submessages": [],
            "timestamp": 1497024918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Instead of doing <code>#define MAXLINE 256</code> what would change if I did <code>const int MAXLINE 256;</code> instead? What is the fundamental difference between the two approaches?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111889813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497025367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>the problem with using macros is that you don't see them in a debugger. the good thing is you can be sure they get inlined.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111890292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497026230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I use <code>sizeof()</code> in Macros a lot for things like getting the length of an array. I.e.</p>\n<div class=\"codehilite\"><pre><span></span>#define LENGTH(x) (sizeof(x) / sizeof(x)[0]))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111890434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Macros for value of sizeof",
            "submessages": [],
            "timestamp": 1497026482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ec744a06627e6ec9061a398bc83ec7d196ec4d8e?x=x&version=2",
            "client": "website",
            "content": "<p>A variable declaration says to the compiler that you want a memory location for it, while literals (either before or after macro expansion) are likely to become inlined constants in assembly instructions. That being said, if you never do something like <code>&amp;MAXLINE</code>, the compiler may optimize it out of memory anyway. </p>\n<p>I try to avoid macros as much as possible, though constant definitions like your example are entirely reasonable and very standard. </p>\n<p>Function macros, on the other hand, can introduce unexpected evil things like:</p>\n<div class=\"codehilite\"><pre><span></span>#define MAX(a,b) (a &gt; b ? a : b)\n...\nint p = 2;\nint q = 1;\nint r = MAX(++p, q);\n</pre></div>\n\n\n<p>What is <code>p</code> after this? You might guess <code>3</code>, but actually it's <code>4</code>. The macro string-expands to:</p>\n<div class=\"codehilite\"><pre><span></span>int r = (++p &gt; q ? ++p : q);\n</pre></div>\n\n\n<p>and we can see that p is incremented twice.</p>\n<p>Unfortunately since C does not have templates (i.e. type variables) like C++ does, macros can be pretty necessary to avoid copying code all over the place. :\\ In the above example, the alternative would be to write \"MAX\" repeatedly for a bunch of different types, and that'd be lame.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111890908,
            "is_me_message": false,
            "last_edit_timestamp": 1497027618,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trbabb@gmail.com",
            "sender_full_name": "Tim Babb (S1'17)",
            "sender_id": 101091,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497027449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Most of my experience with <code>#define</code> over using <code>const</code> is for embedded systems where there are a stack of <code>#define</code>s at the top setting things like bit position for pins, memory addresses, or raw data for packet headers. In general, except for things like the length of an array and other small examples, I don't use <code>#define</code> for functions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111891949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497029393,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks. This clarifies the confusion!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497030700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>actually if you use -g3 you see them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892730,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497030956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh, interesting! ive not used that before.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why do you need a macro at all?",
            "submessages": [],
            "timestamp": 1497030993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, the ARRAY_LENGTH macro thing is good.  I'd probably be against #define SIZE_OF_CHAR_STAR sizeof(char*) though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111892829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Macros for value of sizeof",
            "submessages": [],
            "timestamp": 1497031084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>++ braces!  to <span class=\"user-mention\" data-user-email=\"trbabb@gmail.com\" data-user-id=\"101091\">@Tim Babb (S1'17)</span> 's point, that's the exact error that caused apple's huge ssl bug from a few years ago:</p>\n<p><a href=\"https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/\" target=\"_blank\" title=\"https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/\">https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/</a></p>\n<p>although I would consider a same line exception for smaller projects, I'm with <span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span> on readability and I think more explicitness is generally desirable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111928334,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trbabb@gmail.com",
                        "full_name": "Tim Babb (S1'17)",
                        "id": 101091
                    },
                    "user_id": 101091
                }
            ],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Searching for a string in an array of strings",
            "submessages": [],
            "timestamp": 1497111666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"indradhanush.gupta@gmail.com\" data-user-id=\"101105\">@Indradhanush Gupta (S1'17)</span> fwiw <a href=\"http://blog.jfo.click/sild-header-files/\" target=\"_blank\" title=\"http://blog.jfo.click/sild-header-files/\">this is what I learned when I hit that point</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111937682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497133241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> Thanks for sharing the article. I was going through similar emotions and issues while attempting to refactor my <code>main.c</code> into a module, until <span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span> helped me out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am not compiling each <code>.c</code> file individually at the moment though, which I will do right away!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also a few pointers on the blog post:<br>\n1. Best C coding practices for header files: This link is broken (<a href=\"https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\" target=\"_blank\" title=\"https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\">https://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/</a>)<br>\n2. Tiny typo here: <code>But if I compile sild.c into am object file</code> ; s/am/an</p>\n<p>Great article otherwise!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939353,
            "is_me_message": false,
            "last_edit_timestamp": 1497137468,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh thanks. it's older... I guess I should start linking to webarchives instead of people's posts directly</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939360,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>that bums me out :(</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>/me shakes fist at the inexorable march of time</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111939400,
            "is_me_message": true,
            "reactions": [
                {
                    "emoji_code": "1f565",
                    "emoji_name": "clock1030",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "indradhanush.gupta@gmail.com",
                        "full_name": "Indradhanush Gupta (he) (S1'17)",
                        "id": 101105
                    },
                    "user_id": 101105
                },
                {
                    "emoji_code": "1f564",
                    "emoji_name": "clock930",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jeffowler@gmail.com",
                        "full_name": "Jeff Fowler (W'14)",
                        "id": 4998
                    },
                    "user_id": 4998
                },
                {
                    "emoji_code": "1f562",
                    "emoji_name": "clock730",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497137527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://web.archive.org/web/20160407161847/http://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\" target=\"_blank\" title=\"https://web.archive.org/web/20160407161847/http://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/\">https://web.archive.org/web/20160407161847/http://guilhermemacielferreira.com/2011/11/16/best-c-coding-practices-header-files/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111942848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Structuring libraries",
            "submessages": [],
            "timestamp": 1497145512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm kinda stuck on something and the Clockwise/Spiral rule (<a href=\"http://c-faq.com/decl/spiral.anderson.html\" target=\"_blank\" title=\"http://c-faq.com/decl/spiral.anderson.html\">http://c-faq.com/decl/spiral.anderson.html</a>) isn't helping me much:</p>\n<p>I have an array of pointers to users. I'm making a function that accepts a pointer array, however I want to declare in the signature that this pointer of arrays should not modifying the structure it's referring to, in other words it should be constant:</p>\n<p><code>func (const struct **users)</code> won't accept a <code>struct **user</code> object because it wasn't declared const.. how can I tell the c compiler that I don't want to modify my pointer of arrays, in this case <code>users</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112011162,
            "is_me_message": false,
            "last_edit_timestamp": 1497298983,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497298817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>cdecl&gt; declare foo as const pointer to pointer to struct user<br>\nstruct user ** const foo</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112012547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497300049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This also exists online! <a href=\"https://cdecl.org/\" target=\"_blank\" title=\"https://cdecl.org/\">https://cdecl.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112012605,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497300068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>cdecl&gt; declare foo as const pointer to pointer to struct user<br>\nstruct user ** const foo</p>\n</blockquote>\n<p>To elaborate: <em>const pointer to pointer to struct user</em>  = a pointer that's a constant  -- meaning it can't point to anything else other than what it currently points to, in this case a struct user?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112013352,
            "is_me_message": false,
            "last_edit_timestamp": 1497300925,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497300903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes.  You can test this out by attempting to compile a tiny test program: int morx(int ** const foo) {<br>\n    foo++;<br>\n}</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112014382,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497302423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>\"error: increment of read-only parameter \u2018foo\u2019\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112014386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "const to an array of pointers",
            "submessages": [],
            "timestamp": 1497302436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ea5ab7f7d6e19ffdee32487a6e145475c956689b?x=x&version=3",
            "client": "website",
            "content": "<p>I've used <a href=\"https://github.com/google/googletest\" target=\"_blank\" title=\"https://github.com/google/googletest\">GoogleTest</a>, although this is for C++.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112082730,
            "is_me_message": false,
            "last_edit_timestamp": 1497446766,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrew@mrdrozdov.com",
            "sender_full_name": "Andrew Drozdov (S2'16)",
            "sender_id": 7630,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Writing good tests for C Projects?",
            "submessages": [],
            "timestamp": 1497446750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm exploring cryptography while building a cryptocurrency from first principles. I was able to generate a SHA 256 key using Libsodium (<a href=\"https://download.libsodium.org/doc/\" target=\"_blank\" title=\"https://download.libsodium.org/doc/\">https://download.libsodium.org/doc/</a> ) -- however I can't resist the urge to implement SHA 256 as a learning exercise. Is there lighter material other than the specs at <a href=\"http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\" target=\"_blank\" title=\"http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\">http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf</a> that I can read/watch? The RC library doesn't seem to have crypto books that go over SHA-256 in the detail I need.</p>\n<p>Thnx!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112317207,
            "is_me_message": false,
            "last_edit_timestamp": 1497941020,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497940980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>I didn't completely read it, but RFC6234 looks pretty readable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112326525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497962719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p>I don't know if this will help when it comes to implementing SHA-256, but I remember understanding the hashing algorithm better by reading <a href=\"http://www.quadibloc.com/crypto/mi060501.htm\" target=\"_blank\" title=\"http://www.quadibloc.com/crypto/mi060501.htm\">this</a> back when I was trying to clear a crypto paper in college.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112327054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497963793,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f2ac331b1475c7bb8450101251859c70f0250be?x=x&version=3",
            "client": "website",
            "content": "<p>In fact the whole book <a href=\"http://www.quadibloc.com/crypto/jscrypt.htm\" target=\"_blank\" title=\"http://www.quadibloc.com/crypto/jscrypt.htm\">'A Cryptographic Compendium'</a> seemed like a very interesting read(tech with a little bit of history!!) and has been in my bookmarks tab ever since.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112327166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nandaja.varma@gmail.com",
            "sender_full_name": "Nandaja Varma N (she) (SP1'17)",
            "sender_id": 100518,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497964053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> <a href=\"http://blog.jfo.click/advent-of-learning-about-md5-and-opencl/\" target=\"_blank\" title=\"http://blog.jfo.click/advent-of-learning-about-md5-and-opencl/\"> I did this with md5</a>, obviously not directly pertinent but maybe helpful process wise. I found the specs + several reference implementations was the most direct way to grok it, though the spec was dense like sha-256 is also dense</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112333113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497974511,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tbsaunde+recruiting@tbsaunde.org\" data-user-id=\"101125\">@Trevor Saunders (S1'17)</span> I found a RFC6234  spec <a href=\"https://tools.ietf.org/pdf/rfc6234.pdf\" target=\"_blank\" title=\"https://tools.ietf.org/pdf/rfc6234.pdf\">https://tools.ietf.org/pdf/rfc6234.pdf</a> -- it looks like they have sample code. I think if I understood more why SHA-256 works -- in particular I'd like to understand more of why splitting into blocks a message matters.. Perhaps I can talk more with you about that?</p>\n<p>Thanks for the link! <a href=\"http://www.quadibloc.com/crypto/mi060501.htm\" target=\"_blank\" title=\"http://www.quadibloc.com/crypto/mi060501.htm\">http://www.quadibloc.com/crypto/mi060501.htm</a> scanning through I think this will give me the necessary background to start looking at solutions.</p>\n<p><span class=\"user-mention\" data-user-email=\"jeffowler@gmail.com\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> I think I'm gonna take a similar route/approach as you.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112341047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497987407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know that I have a ton to say, I'm not a big expert on hashing.  I think the basic idea is that its easiest to think about how to stir up a set number of bits, and then how to combine that result with the result from stiring up another group of bits.  I suspect that you can do some math to represent the transform and that's easiest with a fixed number of inputs 1 per input bit.  However I don't understand why sha256 is a particularly good way to stir up bits.  I'm kind of waving my hands here because I don't really know what I'm talking about.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112341265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "SHA-256 Implementation",
            "submessages": [],
            "timestamp": 1497987784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>K&amp;R C book pg 103 says <code>size_t is the\nunsigned integer type returned by the sizeof operator.)</code>  uhhh.. a size_t is the length of an unsigned integer?  So they're interchangeable?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719467,
            "is_me_message": false,
            "last_edit_timestamp": 1498703957,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498703931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> <code>unsigned integer type</code>: <code>size_t</code> is the type of the return value of the <code>sizeof</code> <del>function</del> operator. I think that's what it means.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719521,
            "is_me_message": false,
            "last_edit_timestamp": 1498704111,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498704027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"indradhanush.gupta@gmail.com\" data-user-id=\"101105\">@Indradhanush Gupta (S1'17)</span> So.. can I replace <code>unsigned int</code> with <code>size_t</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498704121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>According to this answer <a href=\"https://stackoverflow.com/questions/19732319/difference-between-size-t-and-unsigned-int\" target=\"_blank\" title=\"https://stackoverflow.com/questions/19732319/difference-between-size-t-and-unsigned-int\">https://stackoverflow.com/questions/19732319/difference-between-size-t-and-unsigned-int</a> I could replace unsigned char, short ...to  unsigned int. Does <code>size_t</code> adjust to whatever the variable is -- say the compiler will determine the proper size during compile time?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498704194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>This beats me now. I'll wait around to see what others have got to say about this. :/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112719627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498704347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>ok, so size_t is an unsigned integer type that can hold the size of any possible object supported by the implementation.  In practice that ends up meaning it has as many bits as a pointer.  Since you could in theory have one object taking up more than half of the address space.  The unsigned int type has an nunknown number of bits, but I believe it must be at least as many bits as a unsigned short.  So I think in theory you could have a C implementation where a unsigned int is 32 bits, and a size_t is 16 bits, if say you have 32 bit integer registers, but only 16 bit pointers.  However that's madness and a terrible idea.  So in practice a size_t should be able to hold any number that fits in a unsigned int, but the size_t may be able to hold numbers the unsigned int can't represent.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498713859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> I think the parsing of that sentence from the book is a bit tricky. It's not saying there's a type, <code>unsigned integer</code>, that is returned by the sizeof operator. It's saying that the sizeof operator returns values of a type which is unsigned, integer, and called size_t.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723883,
            "is_me_message": false,
            "last_edit_timestamp": 1498714182,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498714057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think what the K&amp;R book meant to imply was that the type is unisgned and integer (as opposed to a floating point number), not necessarily having the same width as an integer. so they didnt mean the type <code>unsigned int</code> but <code>an unsigned integer</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498714062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think iain and i want to say the same thing here</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498714078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> I think so. My beer, however, wanted to say something else. <img alt=\"\ud83c\udf51\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f351.png\" title=\"\ud83c\udf51\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498714206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh, i feel you <img alt=\":cheese:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/cheese.png\" title=\":cheese:\"> (cheese is almost cheers)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112723985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498714231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"tbsaunde+recruiting@tbsaunde.org\" data-user-id=\"101125\">@Trevor Saunders (S1'17)</span> <span class=\"user-mention\" data-user-email=\"ian@theknown.net\" data-user-id=\"2119\">@Ian Whitlock (S'13)</span> <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> Thank you for the explanations! Make sense now.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112725244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size_t",
            "submessages": [],
            "timestamp": 1498717434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do compilers do any optimizations at link time (e.i. gcc with -O3), or only during compilation (or whatever the phase is called when it's generating .o files?)?</p>\n<p>For example, if I had a getter function which returned the value of a global variable, and that getter function were called from within the same .c file, like this:</p>\n<div class=\"codehilite\"><pre><span></span>static int global = 7;\n\nvoid getter(int* value)\n{\n     *value = global;\n}\n\nvoid main()\n{\n     int i;\n     getter(&amp;i);\n     printf(&quot;%d\\n&quot;,i);\n}\n</pre></div>\n\n\n<p>Then (I think) this would be optimized so that \"getter\" isn't even called, and that the global variable would just be printed.  But what if the \"main\" function was in a different .c file?  Does the linker look at the contents of a function to determine if the function should be called, or no?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112854249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1498990364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipAndroid",
            "content": "<p>FWIW, there is a -O flag in ld. I'm not sure if it does that exact optimization, but optimizing is within the scope of ld apparently.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112856682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1498996795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"adeshar00@gmail.com\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span> LLVM docs talk  a lot about link time optimizations.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112856918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1498997293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes. I believe that for both gcc and clang you can get LTO by passing <code>-flto</code> on both compilation and linking. This can be quite slow for large codebases (I know of some codebases that use this and get 3+ hour link times).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112861790,
            "is_me_message": false,
            "last_edit_timestamp": 1499014160,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499009723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Clang has something called \"thin LTO\" which I haven't used, but allegedly gives most of the benefits of LTO without blowing up compile times.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112861831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499009764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah cool, good to know!  So that only happens when you pass <code>-flto</code>, and if you pass <code>-O3</code> without passing flto it won't do it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112862640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499011625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Nope, because -O3 doesn't include -flto: <a href=\"https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html#Optimize-Options\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html#Optimize-Options\">https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html#Optimize-Options</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112862801,
            "is_me_message": false,
            "last_edit_timestamp": 1499012029,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499011953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah wow, I can't believe I've been completely oblivious to this for so long, thanks for clearing that up guys!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112863216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499012831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>With advanced compilers, you can get some amount of whole-program optimization by sending all *.c to a single instance of the compiler.  Then the compiler <em>might</em> be able to better figure out e.g. which code can be inlined or eliminated wholesale.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112869460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499028203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not aware of a compiler that actually does that, checking clang and gcc they both just invoke cc1 on each translation unit to produce a object file that they pass to the linker.  Which kind of suprises me actually I thought gcc had started using lto by default in that case.  Pretty sure msvc will actually do the same thing, but compile the translation units in parallel if you ask it.<br>\n Of course for ELF targets the symbol interposition rules make it really hard to inline externally visible functions anyway, but its been a while since I looked into what compilers decided to do there.  My memory is that the ELF spec says you can interpose foo() in the below code with say LD_PRELOAD so it returns whatever you want.<br>\nint foo()<br>\n{<br>\n  return 5;<br>\n}</p>\n<p>int main()<br>\n{<br>\n  return foo();<br>\n}</p>\n<p>but C's one definition rule doesn't allow that of course.  Some quick testing seems to show gcc deciding if its an executable its not interposable, and if it is in a shared object then it is interposable.  Anyway its really hard to know what can or can't be optimized.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112873151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499037174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>There's also the so-called <a href=\"https://en.wikipedia.org/wiki/Single_Compilation_Unit\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Single_Compilation_Unit\">\"unity build\"</a> where you just include everything into one file.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112873361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499037615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I forgot to mention that.  It also does wonders for complete rebuild times at the expense of less ability to do incremental builds.  Textual inclusion is ... not the way to do modularity ;)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112879088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Link-time Optimization?",
            "submessages": [],
            "timestamp": 1499051690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>John Regehr just co-published with Pascal Cuoq a massive blog post on UB: <a href=\"https://blog.regehr.org/archives/1520\" target=\"_blank\" title=\"https://blog.regehr.org/archives/1520\">https://blog.regehr.org/archives/1520</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 112965319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Undefined Behaviour in 2017",
            "submessages": [],
            "timestamp": 1499249289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>so, i have a case here where i can't seem to find something non-yucky. my program optionally comes with lua integration. if integration is enabled, i have an additional check, if it hasn't, i can skip that check and directly go to the case, like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#ifdef WITH_LUA</span>\n   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lua_does_not_have_command</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n<span class=\"cp\">#endif</span>\n       <span class=\"n\">message</span><span class=\"p\">(</span><span class=\"s\">&quot;Unknown meta command&quot;</span><span class=\"p\">);</span>\n<span class=\"cp\">#ifdef WITH_LUA</span>\n   <span class=\"p\">}</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n\n\n<p>this looks <em>really</em> ugly to me, but im not sure how to make it better without duplicating the code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113228917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499804720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>the code is simplified, obviously</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113228918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499804734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>How about a macro: <code>CHECK_LUA(lua_does_not_have_command(c), message(\"unknown meta command\"))</code> which is <code>#define</code>d differently depending on <code>#ifdef WITH_LUA</code>.  Choose a good macro name that intuitively represents what is happening (<code>CHECK_LUA</code> or <code>LUA_IF</code> aren't great).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113229242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499805248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ef04603cb0deb515c7510a0a495ebaff9a06a78?x=x&version=2",
            "client": "website",
            "content": "<p>my instinct there would be to duplicate the code</p>\n<p>you could also leave the braces off the if. but that seems even more hacky/prone to messing it up?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113229245,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "0@hclarke.ca",
            "sender_full_name": "harrison clarke (he/they) (S2'17)",
            "sender_id": 101338,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499805263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ef04603cb0deb515c7510a0a495ebaff9a06a78?x=x&version=2",
            "client": "website",
            "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#ifdef WITH_LUA</span>\n<span class=\"cp\">#define LUA_MISSING_COMMAND(c) lua_does_not_have_command(c)</span>\n<span class=\"cp\">#else</span>\n<span class=\"cp\">#define LUA_MISSING_COMMAND(c) 1</span>\n<span class=\"cp\">#endif</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LUA_MISSING_COMMAND</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"n\">message</span><span class=\"p\">(</span><span class=\"s\">&quot;...&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113229400,
            "is_me_message": false,
            "last_edit_timestamp": 1499805576,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "0@hclarke.ca",
            "sender_full_name": "harrison clarke (he/they) (S2'17)",
            "sender_id": 101338,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499805567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>maybe writing an abstraction macro is the way to go. i'll ponder it for some time and then probably leave it as it is now because it's the only section in my code that looks like that (as of yet). once this pattern starts to appear at least one more time i'm going to make an abstraction for it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113229531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499805809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/60164d729bafa8c81e373fc2d00efb9c?d=identicon&version=1",
            "client": "website",
            "content": "<p>The Linux kernel approach is to have, in a header included by the <code>.c</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#ifdef WITH_LUA</span>\n<span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">lua_missing_command</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">cmd</span> <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">lua_does_not_have_command</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#else</span>\n<span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">bool</span> <span class=\"nf\">lua_missing_command</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">cmd</span> <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n\n\n<p>This keeps <code>#ifdef</code>s out of the main code paths and avoids introducing more macros in the process.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113284574,
            "is_me_message": false,
            "last_edit_timestamp": 1499918329,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "bgilbert@backtick.net",
            "sender_full_name": "Benjamin Gilbert (he) (W2'16)",
            "sender_id": 8696,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "style question",
            "submessages": [],
            "timestamp": 1499918205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Going through <a href=\"http://buildyourownlisp.com/chapter8_error_handling\" target=\"_blank\" title=\"http://buildyourownlisp.com/chapter8_error_handling\">http://buildyourownlisp.com/chapter8_error_handling</a></p>\n<p>A struct is defined like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n  <span class=\"kt\">long</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">err</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">lval</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>and code that handles lval looks into the type, determines if it's a value or an error, and handles it appropriately.</p>\n<p>The type is from an enumeration. I'm trying to figure out why this struct is used for both values, whether it's to keep the language implementation simple or because C can't examine the type of an argument. I know printf can handle a whole bunch of arguments, but you have to tell it how to behave in the format string, which seems to tell me that C can't do this, but I'm just not sure.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Forgot to mention the reason that prompted this was that type is actually defined with an enum which just seems silly when you have a type system built right into the language.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>this is due to a variety of things, the most important being that c is statically typed, while most lisps, including the one in the book, are typed dynamically. this means that we have to define something that is sometimes called a <a href=\"http://theorangeduck.com/page/defence-unitype\" target=\"_blank\" title=\"http://theorangeduck.com/page/defence-unitype\">unitype</a>\u2014this post is written by the author of the book, i highly recommend his blog.<br>\nmany dynamically typed languages that are implemented in a statically typed language\u2014and they often are\u2014work that way (see <a href=\"https://github.com/python/cpython/blob/6f0eb93183519024cb360162bdd81b9faec97ba6/Include/object.h#L106\" target=\"_blank\" title=\"https://github.com/python/cpython/blob/6f0eb93183519024cb360162bdd81b9faec97ba6/Include/object.h#L106\">Python</a> in C, which is a super complex unitype that spans multiple structs and is still mindboggling to me, or <a href=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Types.hs#L316\" target=\"_blank\" title=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Types.hs#L316\">zepto</a>\u2014shameless plug\u2014, which is implemented as a unitype in haskell, aka a type with multiple constructors).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>so, even in a language like haskell, where i do have the constructors and a powerful type system, unitypes have their merit.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>C does not have run-time introspection.  If this seems silly for a high-level language, remember that C was created as a cross-platform assembly language that could compile on cast-off hardware.  It was never intended to be a modern high-level language (even in 1970).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>^oh yes, that. run-time introspection. i got a bit side-tracked, did i?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500488747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> Your answer was more complete, which is probably more useful to Ahmad's actual purpose of understanding compilers :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113545533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500489003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>So this is emulating run-time introspection, but not of C-level types, but of whatever types we happen to define in the enumeration, right?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113546050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500489795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>Yes. This makes it easy to define functions that work on any type in the target language. If we map types one-to-one to c types, we lose genericity (which is not an actual word, but hopefully gets the point across). Motivating example: imagine a generic <code>to-string</code> function. How would you implement it with a unitype? How would you do it with a polytype, especially considering that C has no real genericism?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113546278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500490180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Like python's dunder methods are duck typing in that a lookup is performed at run time for the appropriate one and that's how we get generics for length and repr?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113546392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500490348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ajarara94@gmail.com\" data-user-id=\"101400\">@Ahmad Jarara (S2'17)</span> You could create a C struct with a bunch of function pointers in it, which would provide a consistent interface for things like <code>repr</code> or <code>length</code>.  Then you would use a pointer to an instance of that funcptr struct instead of <code>int type</code> in your <code>lval</code> struct.  Each instance would have a different set of function pointers, set at compile-time.  But they would be available to call at run-time.  If every struct you create has this type struct pointer as the first element of the struct, then you could get the run-time introspection and type-checking that you wanted initially.  If you called it a <code>vtable</code> and had the compiler do it for you automagically, you'd have \"C with classes\", which is pretty much what C++ was in 1980.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113546845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500490997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Types.hs#L530\" target=\"_blank\" title=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Types.hs#L530\">horrible duck typing example</a>. im so, so sorry. but it illustrates the point.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113547182,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ajarara94@gmail.com",
                        "full_name": "Ahmad Jarara (S2'17)",
                        "id": 101400
                    },
                    "user_id": 101400
                }
            ],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500491590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> off topic but there's a stray backtick on the zepto wiki's getting started page on the very first clojure example.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>oh god, the wiki. i really should have written it. the newest content is two years old at this point...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>where exactly is the stray backtick?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>line 15, Getting-Started.md</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>ecch, thank you! should be fixed now :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(if you do want a real intro to zepto, i am the wiki. nevermind anything actually on the wiki.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550838,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>I think once I get around the constant seg faults and brain rewiring needed for Python -&gt; C, I'll take you up on that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>we can also pair on that if you want. :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>sounds like a plan!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113550964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "no way to dispatch on type of struct?",
            "submessages": [],
            "timestamp": 1500497865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>So reading though <code>malloc</code>'s <code>man</code> page I saw that it returns <code>NULL</code> if memory can't be allocated. I feel like I should check for this, but a lot of the code I've seen written elsewhere doesn't. </p>\n<p>Is it something we don't have to worry about so much on modern computers when allocating small amounts of memory? <br>\nShould I check for it only if I'm allocating a large chunk of memory?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500912601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>A common pattern is to make a wrapper around malloc which dies with an error message if malloc returns NULL.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737288,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500912663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>e.g. git's xmalloc()</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500912669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>On linux at least, things are more nuanced: <a href=\"https://scvalex.net/posts/6/\" target=\"_blank\" title=\"https://scvalex.net/posts/6/\">https://scvalex.net/posts/6/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737354,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                }
            ],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500912802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>huh, interesting. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500912959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ef04603cb0deb515c7510a0a495ebaff9a06a78?x=x&version=2",
            "client": "website",
            "content": "<p>i like to check it with assert<br>\nbut if you do that, make sure you leave asserts on for release builds</p>\n<p>this is probably bad code and i should feel bad (but also i will keep doing it)</p>\n<p>but, i think in most cases if it fails, you should crash</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "0@hclarke.ca",
            "sender_full_name": "harrison clarke (he/they) (S2'17)",
            "sender_id": 101338,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500913036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Also: even then you'll get hit by the OOM killer instead of getting a null pointer, IIRC.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113737489,
            "is_me_message": false,
            "last_edit_timestamp": 1500913101,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500913052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>its possible to turn over commit off, in which case you may not die from the OOM killer first.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113746112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Should I check if malloc returns NULL?",
            "submessages": [],
            "timestamp": 1500926888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>I got evaluation working in my interpreter! Right now it only does arithmetic. But there was a hairy section that initially caused segfaults until I figured out I was writing to a pointer. Even after fixing it I still didn't quite understand it, but I took some time over the weekend to attempt to figure it out. I'd love if someone could check my reasoning:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">lval</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n  <span class=\"kt\">long</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">err</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">sym</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">lval</span><span class=\"o\">**</span> <span class=\"n\">cell</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">lval</span><span class=\"p\">;</span>\n\n\n<span class=\"n\">lval</span><span class=\"o\">*</span> <span class=\"nf\">lval_pop</span><span class=\"p\">(</span><span class=\"n\">lval</span><span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* get out the item at position i of v */</span>\n  <span class=\"n\">lval</span><span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"cm\">/* Here is what I think &amp;v-&gt;cell[i] means:</span>\n\n<span class=\"cm\">     Since the cell is an array of pointers, the [i] dereferences it</span>\n<span class=\"cm\">     to a specific one. The &amp; applies to the result of that (not,</span>\n<span class=\"cm\">     confusingly, the pointer holding the passed lval* v) to get you</span>\n<span class=\"cm\">     the pointer that points to the pointer that points to the actual</span>\n<span class=\"cm\">     lval struct in memory.</span>\n\n<span class=\"cm\">     The second parameter is similar, but it&#39;s for the next in the index.</span>\n\n<span class=\"cm\">     Now memmove takes the second pointer and goes through the rest of</span>\n<span class=\"cm\">     the cell, getting whatever occurs after the thing we are popping,</span>\n<span class=\"cm\">     and shifting it onto the location it was just popped from. If I&#39;m</span>\n<span class=\"cm\">     right, this seems to abuse the fact that lvals in the cell are</span>\n<span class=\"cm\">     contiguous in memory, because we don&#39;t pass memmove the whole</span>\n<span class=\"cm\">     array, just the section we&#39;d like the size_t param to start from.</span>\n<span class=\"cm\">  */</span>\n  <span class=\"n\">memmove</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n          <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">lval</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n  <span class=\"cm\">/* the rest is clear. After the memmove is done, trim off the unused memory. */</span>\n  <span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>\n  <span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">lval</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500998954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17b6fe710af81c5b70f35dcd7414b38d?d=identicon&version=1",
            "client": "website",
            "content": "<p>The comment doesn't entirely match your line of code... the code is<br>\n  lval* x = v-&gt;cell[i];<br>\nThe comment is <br>\n  lval* x = &amp;v-&gt;cell[i];<br>\nI think the code makes more sense here because cell[i] will be lval* type (not lval**).  </p>\n<p>Other than that I think everything else looks good.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikhithn@gmail.com",
            "sender_full_name": "Nikhith Naidu (S2'17)",
            "sender_id": 101483,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think the comment means memmove below, not the assignment above.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>your comment describes memmoves behavior correct. its not abuse so much as a commonly used pattern, though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Yeah, that's what I was referring to.</p>\n<p>So mallocs are always guaranteed to be contiguous?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17b6fe710af81c5b70f35dcd7414b38d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah okay, yes, that makes sense then.  And mallocs are contiguous in virtual memory at least :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113780938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nikhithn@gmail.com",
            "sender_full_name": "Nikhith Naidu (S2'17)",
            "sender_id": 101483,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yes. they have to be, because for all malloc knows, its one block of memory thats allocated. you just pass a size (which is calculated most often with something like <code>sizeof(thing)*howmany</code>), but malloc doesn't know that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113781003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>hehe I'm just starting up on page tables. Mk thanks for the help guys!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113781017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1500999812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Apropos of <a href=\"https://recurse.zulipchat.com/#narrow/stream/beanbags/topic/Unlearning.20saneist.2Fableist.20language\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/beanbags/topic/Unlearning.20saneist.2Fableist.20language\">recent discussion about subtly ableist language</a>, perhaps s/sanity check/spot check/ in the future :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113782093,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ajarara94@gmail.com",
                        "full_name": "Ahmad Jarara (S2'17)",
                        "id": 101400
                    },
                    "user_id": 101400
                }
            ],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1501001876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Apologies!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113782193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "sanity check",
            "submessages": [],
            "timestamp": 1501002016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm having trouble using <strong>ptrace</strong> to trace through a \"hello world\" (just a printf for hello world) c program on both Ubuntu and MacOsx.  The program errors on ptrace(singlestep...):  this is the Mac version.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">prog</span>  <span class=\"o\">=</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"kt\">pid_t</span> <span class=\"n\">pid</span><span class=\"p\">;</span>\n\n  <span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">fork</span><span class=\"p\">();</span>\n  <span class=\"c1\">// Child process</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pid</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptrace</span><span class=\"p\">(</span><span class=\"n\">PT_TRACE_ME</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Error PtraceME</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">execl</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"n\">prog</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n  <span class=\"p\">}</span> <span class=\"c1\">// Parent process</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pid</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">wait_status</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;sdb</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wait_status</span><span class=\"p\">);</span> <span class=\"c1\">// wait for child process to stop on 1st instruction</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">WIFSTOPPED</span><span class=\"p\">(</span><span class=\"n\">wait_status</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">counter</span><span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"c1\">// execute single child</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptrace</span><span class=\"p\">(</span><span class=\"n\">PT_STEP</span><span class=\"p\">,</span> <span class=\"n\">pid</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;error PTRACE_SINGLESTEP</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span> <span class=\"c1\">// Problem is here</span>\n        <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wait_status</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;The child executed %u instructions</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">counter</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Am I missing something?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113930818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501276010,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f6bd929465d6d225def8062d5a9d3f3f?d=identicon&version=1",
            "client": "website",
            "content": "<p>IME, ptrace on mac is somewhat strange. Does this work for you on ubuntu? (I haven't read the code, just dropping this comment in case your code works on ubuntu and fails on mac).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113931466,
            "is_me_message": false,
            "last_edit_timestamp": 1501277427,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danluu@gmail.com",
            "sender_full_name": "Dan Luu (W'13)",
            "sender_id": 820,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501277111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\" data-user-id=\"820\">@Dan Luu (W'13)</span> I see. I first tried on Ubuntu and it didn't work so I ported to Mac.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113931585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501277287,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>SOS:<br>\nI really need expert advice on this -- if someone is willing to pair online or offline I'd appreciate it.</p>\n<p>I've updated my code for the Ubuntu base (<a href=\"https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182\" target=\"_blank\" title=\"https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182\">https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182</a>) and it seems the error I'm getting is <strong>ESRCH</strong>  for no such process.</p>\n<p>Here's my code once more: <a href=\"https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182\" target=\"_blank\" title=\"https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182\">https://gist.github.com/sabzo/37cb58aefef1e929bcbc6c1c07cf2182</a></p>\n<p>Here's the tutorial I'm following:<br>\n<a href=\"http://system.joekain.com/2015/06/08/debugger.html\" target=\"_blank\" title=\"http://system.joekain.com/2015/06/08/debugger.html\">http://system.joekain.com/2015/06/08/debugger.html</a></p>\n<p>The purpose of this project is to write a debugger.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114037858,
            "is_me_message": false,
            "last_edit_timestamp": 1501524964,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501524891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114037859,
            "is_me_message": false,
            "last_edit_timestamp": 1501524985,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501524891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>Hey Sabelo, I could try to help if you're game to pair online.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114037891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501524961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"code@saul.pw\" data-user-id=\"100791\">@Saul Pwanson (SP2'17)</span> Yes please! That would be helpful. Let me pm you.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114038036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501525151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><strong>Update</strong><br>\nI had a successful paring session with <span class=\"user-mention\" data-user-email=\"code@saul.pw\" data-user-id=\"100791\">@Saul Pwanson (SP2'17)</span> <br>\nThe main issue was that my PTRACE_CONT command inside my While loop would execute the tracee entirely, then on the second iteration the same command would fail becaue the tracee was no longer \"stopped\". Many of the ptrace command require the tracee to be stopped aka in a pstop-trace.</p>\n<p>All this may sound abstract -- but hopefully I can finish my debugger this Thur and do a demo! And also soon on a demo on remote pairing using Tmux.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114041028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "PTRACE",
            "submessages": [],
            "timestamp": 1501529726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>This is more of a style question, I guess:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n\n<span class=\"n\">foo</span><span class=\"o\">*</span> <span class=\"nf\">make_foo</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">foo</span><span class=\"o\">*</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">));</span>\n  <span class=\"n\">out</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"n\">out</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">bump_foo</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"cm\">/* return x; ? */</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">foo</span><span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">make_foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n  <span class=\"n\">bump_foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Foo&#39;s value is %d</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span><span class=\"p\">);</span>\n  <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Afaik this is what Python does. Is this preferred?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114075668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "return an alloc'd value after mutation",
            "submessages": [],
            "timestamp": 1501603914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Or rather, is it clearer without compromising any functionality?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114075714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "return an alloc'd value after mutation",
            "submessages": [],
            "timestamp": 1501603948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Not a C expert at all; so I might be wrong. A good candidate to return from bump_foo is error code. Return 0 if it all went good; -1 otherwise. Check for return code before using the data again.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114075901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "return an alloc'd value after mutation",
            "submessages": [],
            "timestamp": 1501604342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>In this case the only error situation I can think of is integer overflow. That'll work!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114076185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "return an alloc'd value after mutation",
            "submessages": [],
            "timestamp": 1501604855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm attempting to read words from a file which has 2048 words. Each word is in its own line.<br>\n1. I created an array of pointers 2048 and for every word I read using getline I allocate enough space for the bytes read then store the word into the array.</p>\n<p>Here's the code:  <a href=\"https://github.com/sabzo/imali/blob/d54d682c1942b65a79c3c0d3fa5dccd551e0fd2c/lib/lib.h#L415-L442\" target=\"_blank\" title=\"https://github.com/sabzo/imali/blob/d54d682c1942b65a79c3c0d3fa5dccd551e0fd2c/lib/lib.h#L415-L442\">https://github.com/sabzo/imali/blob/d54d682c1942b65a79c3c0d3fa5dccd551e0fd2c/lib/lib.h#L415-L442</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"nf\">mWords_from_file</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">mnemonic_words_file</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">mnemonic_words_file</span><span class=\"p\">)</span>\n      <span class=\"n\">mnemonic_words_file</span> <span class=\"o\">=</span> <span class=\"s\">&quot;english_mnemonic.txt&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">words</span><span class=\"p\">)</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;Unable to allocate memory for mnemonic words&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"kt\">FILE</span> <span class=\"o\">*</span><span class=\"n\">stream</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">ssize_t</span> <span class=\"n\">read</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">w_counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"n\">mnemonic_words_file</span><span class=\"p\">,</span> <span class=\"s\">&quot;r&quot;</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;Unable to open mnemonic words file&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">))</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;read: %d, len %d, line: %s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;Unable to allocate space for word&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">w_counter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n    <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">read</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n    <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">);</span>\n    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">w_counter</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The issue I'm reading only 1866 words, how ever if I use getline without allocating any space for a new word -- pretty much reading and printing-- I'm able to read all 2048 words.</p>\n<p>I think I'm doing something wrong, but I'm not even remotely sure what that could be.</p>\n<p>Help!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114165558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501781329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/faad5e420e35c613eac0b16a547c66e229d055de?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> </p>\n<p>Not a c guru but I think</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Should be </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">cp</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">2048</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>As pointers are 4 or 8 bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114167978,
            "is_me_message": false,
            "last_edit_timestamp": 1501785287,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sam.x.patterson@gmail.com",
            "sender_full_name": "Sam Patterson (S1'17)",
            "sender_id": 101080,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501785235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ef04603cb0deb515c7510a0a495ebaff9a06a78?x=x&version=2",
            "client": "website",
            "content": "<p>as sam said, words should be <code>char** words = (char*)malloc(2048*sizeof(char*));</code></p>\n<p>also, you're never allocating memory for line, which smells like a bug</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114168427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "0@hclarke.ca",
            "sender_full_name": "harrison clarke (he/they) (S2'17)",
            "sender_id": 101338,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501785972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sam.x.patterson@gmail.com\" data-user-id=\"101080\">@Sam Patterson (S1'17)</span> Yes! That makes sense, and it works! :]</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114171486,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501790735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting! +1 to <span class=\"user-mention\" data-user-email=\"sam.x.patterson@gmail.com\" data-user-id=\"101080\">@Sam Patterson (S1'17)</span> 's comment.</p>\n<p>I didn't know about <code>getline()</code>. <a href=\"http://man7.org/linux/man-pages/man3/getline.3.html\" target=\"_blank\" title=\"http://man7.org/linux/man-pages/man3/getline.3.html\">http://man7.org/linux/man-pages/man3/getline.3.html</a> says it allocates some memory for you if <code>line</code> is NULL, so your <code>while (read = getline(...)</code> line is fine. I'd be inclined to make a little function that sets the first argument to NULL and then call getline, then you don't need the <code>line = NULL</code> near the end of the while loop.</p>\n<p>The return value of <code>getline</code> includes the delimeter (ie, the newline) but not the terminator (ie, the null byte). That means mallocing exactly the return value is kind of correct-by-accident - you don't take into account the need to allocate the space for the null terminator, but you also don't want to keep the newline, and the two cancel each other out. This would be a good thing to write a comment about!</p>\n<p>The lines allocated by <code>getline</code> are never freed. I'd be inclined to just stick a 0 in place of the newline in <code>line</code> and keep that buffer around rather than allocating a new one. If you were concerned about wasting one byte per word, the \"right\" solution would probably be to batch up multiple words into a single malloc'd buffer (or do more sophisticated pool allocator stuff, I guess - I've heard that's a thing people do). The reasoning here is that the bookkeeping information that malloc keeps is going to be more than one byte anyway, so if you're cool with having that per-word then you should _also_ be cool with having one extra byte per word.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114185539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501816505,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> You're right! I ended up removing the <code>line = NULL</code> and <code>len = 0</code> which are the two conditions that caused getline to malloc memory.  I ended up making the following changes: <a href=\"https://github.com/sabzo/imali/blob/07bbd2ce83fa4765a2f0158389fb0fc14bba4079/lib/lib.h#L419-#L445\" target=\"_blank\" title=\"https://github.com/sabzo/imali/blob/07bbd2ce83fa4765a2f0158389fb0fc14bba4079/lib/lib.h#L419-#L445\">https://github.com/sabzo/imali/blob/07bbd2ce83fa4765a2f0158389fb0fc14bba4079/lib/lib.h#L419-#L445</a></p>\n<p>The most interesting part:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">))</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;read: %d, len %d, line: %s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;Unable to allocate space for word&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">w_counter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">;</span>\n    <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">read</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n    <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">);</span>\n    <span class=\"n\">w_counter</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114210929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "storing to 2-D array from getline()",
            "submessages": [],
            "timestamp": 1501869467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm attempting to copy n-bits from a long char buffer and using those n-bits to form an int. The n-bits would be less than <code>sizeof(int)</code>.</p>\n<p>I feel that this involves some bitwise operations, shifts -- but I feel like shifts remove, move, add bits into the original buffer, but can they be added to a new buffer?</p>\n<p>Once I have a new n-bit buffer I could turn that into an int -- sort of like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mo\">011010101011010101010101010010101000001</span><span class=\"p\">};</span> <span class=\"c1\">// not sure if this is 32 bytes, just an example</span>\n<span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">sub_buffer</span> <span class=\"p\">[</span> <span class=\"p\">]</span><span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">};</span> <span class=\"c1\">// in this case 11 bits would take up more than a byte but less than two bytes.. not sure on representation..</span>\n<span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sub_buffer</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// binary to decimal</span>\n</pre></div>\n\n\n<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114211481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501870133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0d011164ad6956295e8615655a8e70683ea470f9?x=x&version=2",
            "client": "website",
            "content": "<p>I have never used  C before, and a professor recommended I \"brush up on C\" before a class I have to take next year. I'm already pretty familiar with C++, and want to get hands on experience with C to learn about the unique/annoying quirks of the language. Any recommendations for what I should look into (resources, online tutorials, projects, etc)? I have found a few projects online, but they've been really boring and uningaging. Any help is appreciated!! <img alt=\":baby:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f476.png\" title=\"baby\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114213843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jhillman@smu.edu",
            "sender_full_name": "Jacob Hillman (S2'17)",
            "sender_id": 101319,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Beginner/Intermediate C resources and projects",
            "submessages": [],
            "timestamp": 1501873777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>num |= (1 &lt;&lt; i);\n</pre></div>\n\n\n<p>will set the bit 'i' from the right. it's essentially the same but doesn't need library function!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114219412,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501883390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh and using |= means it will overwrite that bit to be one, but leave the other bits unchanged (bc they're zero)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114219413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501883390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>num |= (1 &lt;&lt; i);</p>\n<div class=\"codehilite\"><pre><span></span>will set the bit &#39;i&#39; from the right. it&#39;s essentially the same but doesn&#39;t need library function!\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span> I don't think I quite follow, in my case would the 1 be the sub_buffer? I'm not sure how to connect your code to replace the pow function :]</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501886345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Yes, the branchless form would be <code>num |= (sub_buffer[i] &lt;&lt; i)</code>.<br>\n<code>+=</code> would also work.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221196,
            "is_me_message": false,
            "last_edit_timestamp": 1501886812,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501886681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>pow(2, n) == 1 &lt;&lt; n because of the way binary works. You can also see it if you write out the tables</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501887485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Your <code>i</code> is always increasing, so the number that might be added looks (in binary) like 1, then 10, then 100, then 1000, then 10000. When you're adding bit n, the number you already have only includes bits up to n-1. That means doing a binary OR is equivalent to addition</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501887753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Trent's thing has the advantage of doing everything bitwise, so you can think about it as the binary number being constructed from these binary pieces rather than the more numerical approach with pow.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501887907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>/me flings ten things in the air and hopes one of them lands somewhere useful for <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114221928,
            "is_me_message": true,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501887965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"joshuagangloff@gmail.com\" data-user-id=\"101084\">@Josh Gangloff (S1'17)</span> <span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span> <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> Got it -- because everytime you shift left you're doubling and right i s diving by two.</p>\n<p>I think your solutions to pow replacement are a great improvement, what I'm still not able to do is from a byte string select n-bits for manipulation. If I can select those n-bits I'll be able to then apply the &lt;&lt;</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114222849,
            "is_me_message": false,
            "last_edit_timestamp": 1501889723,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501889704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>I'm a bit unclear on if your input is n bits, or n bytes that happen to be zero or one</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114222941,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501889876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>You can test bit n by doing a bitwise AND with 1 &lt;&lt; n</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223002,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501889956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see.. My input is a 33 byte string.  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">char</span> <span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">];</span> <span class=\"c1\">// for example</span>\n</pre></div>\n\n\n<p>I would like to select 11 bits at a time from <code>buffer</code>.   For each n bits I select I'll turn into an int.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501890157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p><del>Same question. Are the chars each a bit, or 8 bits? I'm guessing 8 bits, as otherwise the problem is already solved.</del></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">deserialize_bits</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">byte_idx</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">bit_idx</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n    <span class=\"n\">num</span> <span class=\"o\">|=</span> <span class=\"p\">((</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">byte_idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">bit_idx</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span>  Review?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223242,
            "is_me_message": false,
            "last_edit_timestamp": 1501892640,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501890391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Of course, you also need to be able to input a <code>bit_offset</code> if you're going to be doing multiple calls with non-divisible-by-8 <code>n</code>. Just change the loop to <code>int i = bit_offset; i &lt; n + bit_offset; i++</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223360,
            "is_me_message": false,
            "last_edit_timestamp": 1501890731,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501890624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Then the use site becomes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">bits_per_int</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">doing_stuff</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">next_int</span> <span class=\"o\">=</span> <span class=\"n\">deserialze_bits</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">bits_per_int</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">);</span>\n  <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">bits_per_int</span><span class=\"p\">;</span>\n  <span class=\"n\">use</span><span class=\"p\">(</span><span class=\"n\">next_int</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501890895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p><span class=\"user-mention\" data-user-email=\"joshuagangloff@gmail.com\" data-user-id=\"101084\">@Josh Gangloff (S1'17)</span> I think the left shift would involve i and bit-offset, not n?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223727,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501891348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>It looks right to me. / 8 and % 8 are things you could do with bitwise ops, but compilers are pretty clever these dates</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501891418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>s/dates/days/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114223754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501891434,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>A lot of the time you're going to grab n bits, where n is between 3 and 8, from one byte and 8-n bits from the next byte. The rest of the time you're going to grab m bits, where m is between 1 and 2, then 8, then 3-m bits. That could be done without a loop</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114224183,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501892244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>But I'm not going to try to write the details on my phone :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114224186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501892270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>That was going to be my next comment: \"Now, with the reference implementation, you can write and test an optimized version\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114224231,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501892314,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Also, yes, the shift is wrong. Fixing,</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114224296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501892455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>New version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">deserialize_bits</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">bit_offset</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">byte_idx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">bit_offset</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"c1\">// or &gt;&gt; 3</span>\n    <span class=\"kt\">int</span> <span class=\"n\">bit_idx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">bit_offset</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"c1\">// or &amp; 7</span>\n    <span class=\"n\">num</span> <span class=\"o\">|=</span> <span class=\"p\">((</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">byte_idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">bit_idx</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Hopefully this is closer to 'obviously correct'.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114224440,
            "is_me_message": false,
            "last_edit_timestamp": 1501892988,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                }
            ],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501892753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (S1'17)</span> , the subtext to all of these is: beware of overflows! Josh's code will do Bad Things if <code>n &gt; 8 * sizeof int</code>, and potentially strange things if <code>n == 8 * sizeof int</code>because of signedness</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114229211,
            "is_me_message": false,
            "last_edit_timestamp": 1501903824,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joshuagangloff@gmail.com",
                        "full_name": "Josh Gangloff (S1'17)",
                        "id": 101084
                    },
                    "user_id": 101084
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501903503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Indeed, I would keep everything as <code>unsigned</code> if possible.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114229756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501904921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>Or perhaps, keep everything <em>the same signedness.</em></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114229761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501904958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"joshuagangloff@gmail.com\" data-user-id=\"101084\">@Josh Gangloff (S1'17)</span>  <span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> So this works and I appreciate the help! I must admit I don't see completely why it works due to my knowledge gap which I've spent the past few hours trying to overcome. </p>\n<p>I see clearly that the <code>deserialize_bits</code> function allows me to shift the first byte 8 times and the second byte 3 times.  Now why am I \"AND-ing\" after every shift? I believe this is to examine each bit individually right? One bit at a time. </p>\n<p>While examining each bit individually \"If it is a 1\" (<code>&amp; 1</code>) I take the power raised to i (two's compliment) which <span class=\"user-mention\" data-user-email=\"trent.gill@gmail.com\" data-user-id=\"100932\">@Trent Gill (SP2'17)</span> pointed out is the same as pow(x, int-to-raise)?</p>\n<p>While typing out my response -- I think I've explained it to myself. Please let me know if this is wrong! </p>\n<p>Thanks again for the elegant solution!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114265171,
            "is_me_message": false,
            "last_edit_timestamp": 1501993989,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501993924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>You have it right. <code>a &lt;&lt; b</code> is equivalent to multiplying <code>a</code> by 2 <code>b</code> times, so yes, it is <code>pow2</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114265180,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501994038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/76c97eea3bc8bd32c8b3428c18b42249ffe41501?x=x&version=4",
            "client": "website",
            "content": "<p>You can also think of it as \"moving the bit into the <code>i</code>th slot\" similar to how <code>&gt;&gt; bit_idx</code> is getting the <code>bit_idx</code>th bit (after <code>&amp; 1</code>).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114265269,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "joshuagangloff@gmail.com",
            "sender_full_name": "Josh Gangloff (S1'17)",
            "sender_id": 101084,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501994234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the line with all the shifts in it could be rewritten as two lines: one to check if this input bit is set, and one to set this output bit if it was. Josh's code arranges for the result of the test to always be 0 or 1, and then instead of doing something conditionally, it has an expression that puts the 1 into place and is a noop if the result was 0</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114266532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501997508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>it might be fun to rewrite it with an explicit conditional :) it also might be fun to either massage the code so you use the same bit pattern for both testing the input and setting the output, or to explain why you might not want to :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114266621,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Copying n-bits from char buffer into an int",
            "submessages": [],
            "timestamp": 1501997685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>The other error situation here is that malloc fails. This would result in a segfault on the next line unless you've <code>mmap</code>ed the zero page.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114315303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "return an alloc'd value after mutation",
            "submessages": [],
            "timestamp": 1502113574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something about the thought writing web applications in C fills me with worry, but I think this is so cool and shows off some interesting features of OpenBSD: <a href=\"http://www.learnbchs.org/\" target=\"_blank\" title=\"http://www.learnbchs.org/\">http://www.learnbchs.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114332110,
            "is_me_message": false,
            "last_edit_timestamp": 1502141361,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502141342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm tempted to do this -- the idea of a webapp in C and sqlite running in production <a href=\"https://sqlite.org/whentouse.html\" target=\"_blank\" title=\"https://sqlite.org/whentouse.html\">https://sqlite.org/whentouse.html</a> as a server side database has been on my mind for a few months now -- more so that I've spent most of my RC batch learning C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114332735,
            "is_me_message": false,
            "last_edit_timestamp": 1502142558,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502142539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do it! I think my worries are mostly present because usually when I'm looking at C code it's because I'm trying to exploit it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114334323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502145334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually think doing some basic binary exploitation should be a part of every C hacker's education.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114334387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502145417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's also a lot of fun. After getting some janky service to finally cough up a shell, I promise you will never look at a piece of C code the same way again.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114334457,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502145497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds like I need to continue reading \"Hacking: The Art of Exploitation\" <img alt=\":100:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f4af.png\" title=\"100\"></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114335253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502146739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, that book is great. I also highly recommend <a href=\"http://overthewire.org/wargames/\" target=\"_blank\" title=\"http://overthewire.org/wargames/\">http://overthewire.org/wargames/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114335520,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502147192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>C is, in my mind, much simpler than C++. I am afraid of C++. I am also afraid of C, but I like it anyway. <br>\nI suspect that introductory C tutorials might be a little boring for you if you already know C++. You might be better served by maybe skimming K&amp;R, looking at good C code, and then just writing some C.<br>\nFor good C code, the <a href=\"http://suckless.org/\" target=\"_blank\" title=\"http://suckless.org/\">http://suckless.org/</a> projects are small and readable.<br>\nFor project suggestions... well, you could do anything, but some thing that you might especially use C for would be things like<br>\n- Writing a kernel module. You can learn kernel APIs. It's cool, your code runs in ring 0. <br>\n- Writing a kernel exploit. There are vulnerable kernel modules that you can practice on.<br>\n- Writing unixy tools or utilities.<br>\n- Writing numeric code using GSL. You can solve nonlinear differential equations and generate phase-space diagrams or something.<br>\nWhat are you interested in? You can do that it C :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114337345,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Beginner/Intermediate C resources and projects",
            "submessages": [],
            "timestamp": 1502149920,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Agreed on suckless being a great learning resource, but also a great launching off point to think about why we're still writing C in 2017. I learnt a huge amount customizing my dwm config, then writing my own dwmstatus which I recommend if you're on linux and want to try a(nother) tiling window manager. Also 'st' is a super simple terminal that is great to look through the implementation, plus it's super extensible if you want to add features you miss from elsewhere.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114357477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Beginner/Intermediate C resources and projects",
            "submessages": [],
            "timestamp": 1502196718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, overthewire is pretty good, I should get back to those games at some point.  I started doing drifter a while back but was lazy and didn't feel like exploiting the call to the wrong dtor allowing a vtable overwrite.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114364567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502209546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a git bug if you want: <a href=\"https://www.spinics.net/lists/git/msg309617.html\" target=\"_blank\" title=\"https://www.spinics.net/lists/git/msg309617.html\">https://www.spinics.net/lists/git/msg309617.html</a> -- that's a  medium-sized C codebase which is relatively clean, and very friendly to new contributors.  The only downside is that you probably have to learn a fair amount about git to know what fast-export and mergetags mean.  But is that really such a downside?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114497928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Beginner/Intermediate C resources and projects",
            "submessages": [],
            "timestamp": 1502472964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Overthewire is great! Just found out about it last week and slowly been going through it. Still on bandit though...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114555434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Your next webapp?",
            "submessages": [],
            "timestamp": 1502608922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d922fc1f076ca5480a16c7d56a388a08?d=identicon&version=1",
            "client": "website",
            "content": "<p>Anyone interested in pairing to understand C at a low-level by looking at the generated assembly code? I'm pretty new to assembly. The end goal is to understand better how caching and memory work</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114658311,
            "is_me_message": false,
            "last_edit_timestamp": 1502834260,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jayantjain1992@gmail.com",
            "sender_full_name": "Jayant Jain (S2'17)",
            "sender_id": 101326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "assembly",
            "submessages": [],
            "timestamp": 1502833998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>Sure. Are you using Godbolt's site? Caching is super-interesting, but I'm not sure how much insight you can gain into it by looking at asm. It's more of a performance counter thing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114658804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "assembly",
            "submessages": [],
            "timestamp": 1502834913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jayantjain1992@gmail.com\" data-user-id=\"101326\">@Jayant Jain (S2'17)</span>  Sometime later today yes! I'm using GDB as we speak and often look at C generated assembly code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "assembly",
            "submessages": [],
            "timestamp": 1502860064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to add arbitrary precision numbers manually: my strategy is take two n-bit arrays and for each bit add the corresponding bit while keeping track of the carry. In this instance for each byte I add the corresponding bits. I'm  not sure why this isn't working.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* Adds arbitrary n-bit numbers in a char buffer</span>\n<span class=\"cm\"> * returns carry 1 or 0</span>\n<span class=\"cm\"> * char *num1, *num2, *result</span>\n<span class=\"cm\">*/</span>\n<span class=\"kt\">int</span> <span class=\"nf\">mprecision_add</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">num2</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// default result pointee to 0 just in case</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"kt\">char</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">carry</span><span class=\"p\">;</span> <span class=\"c1\">// sum is sometimes zero even when n or m isn&#39;t 0</span>\n    <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">|=</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"c1\">// printf(&quot;n: %d, m: %d, carry: %d, sum: %d result: %d\\n&quot;, n, m, carry, sum, result[i/8]);</span>\n    <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">carry</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n  <span class=\"c1\">// Creating 2 numbers as 2 char buffers</span>\n  <span class=\"kt\">char</span> <span class=\"n\">num1</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">};</span>\n  <span class=\"kt\">char</span> <span class=\"n\">num2</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">};</span>\n  <span class=\"kt\">char</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">mprecision_add</span><span class=\"p\">(</span><span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"n\">num2</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;carry: %d</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">carry</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%d &quot;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// expecting result = [7, 9, 11, 13, 15]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670368,
            "is_me_message": false,
            "last_edit_timestamp": 1502860607,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502860559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think you're not carrying as much as you should</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502860888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm also sceptical of the shift of the sum before ORing it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you print out all the computed bits as ones or zeros before sticking them in the result, does it look like you expect?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks kind of like you're assuming that (n + m) will only ever have one bit true?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861301,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>If I print out all the computed bits it looks as I expect. For ex, <code>n</code> and <code>m</code> have the current bits I'm examining at each iteration, when I print n and m I find the correct bits.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>No, for <code>sum = ((n + m) &lt;&lt; i/8) + carry;</code> I'm assuming this will give the sum of (n^(i/8)) + (m^(i/8)) + carry</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would have thought the shift need to be by <code>i%8</code>, not <code>i/8</code>, and that the carry needed to be shifted too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114670852,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502861741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes.. I meant to use <code>i%8</code> as opposed <code>i/8</code> (I've been up too long) <img alt=\":relieved:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/1f60c.png\" title=\"relieved\">   I don't get why the carry may need shifting. with the <code>i%8</code> shift of (n+m..) made an improvement..</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502862373,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you add 11 to 11, when you add 01 and 01 you get a carry bit 1 that should represent 10. If you don't shift it, it represents 01 instead.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671185,
            "is_me_message": false,
            "last_edit_timestamp": 1502862567,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502862544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>terrible explanation, sorry :(</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502862553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aaaaanyway, it's definitely possible to get to your expected result just changing your <code>carry=</code> and <code>sum=</code> lines. Would you like a spoiler?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502862711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"iain@mccoy.id.au\" data-user-id=\"100806\">@Iain McCoy (SP2'17)</span> No no spoilers yet :)<br>\nI think I uncovered something right now..  I think taking OR is wrong.. In GDB I've just hit an edge case where if I OR two odd numbers the result is the odd number:</p>\n<p>For ex  if <code>result[i/8] == 5</code> and I OR with 5 (adding the carry gives me odd) the addition I'm expecting doesn't happen.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think the OR is fine, it's the number of bits set in <code>sum</code> that bothers me.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you have the m,n,c_in,r,c_out truth table handy?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Alright.. no I'm not sure what that is, or how I'd construct that truth table.  But I think I could use a little spoiler  for <code>sum</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671580,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg\" target=\"_blank\" title=\"https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg\">https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg\" target=\"_blank\" title=\"https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg\"><img src=\"https://www.elprocus.com/wp-content/uploads/2014/12/Full-Adder-Truth-Table.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have <code>sum = ((n ^ m ^ carry) &lt;&lt; i%8);</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671628,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>The deal with the table is that you can look at this as a function from three inputs (the bit from the first number, the bit from the second number, and the carry from the last bit) to two outputs (the result bit and the carry for the next bit). The nice thing about a function with three binary inputs is that you can write out what should happen for every possible input combination, which you can then use as a thought/debugging aid when working on your <del>circuit</del> code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114671761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502863963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see. The <code>sum = ((n ^ m ^ carry) &lt;&lt; i%8);</code> didn't give me the expected results for my test case. Did you deduct that solution based on the full adder truth table?  I think this is pushing me on the right track nevertheless :) The suggestion to use a truth table for situations like this makes sense -- I'll give it a shot.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114672193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502865121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I could have got it from the truth table, but it's just the kind of fun fact I can shake out of the stuff rattling around in my head :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114672507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502865887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>It works because <code>^</code> is like a <code>+</code> that only returns the least significant bit, so it's equivalent to <code>(n + m + carry) &amp; 1</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114672515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502865959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d922fc1f076ca5480a16c7d56a388a08?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (F1'17)</span>  Great! will you be around later today?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114698386,
            "is_me_message": false,
            "last_edit_timestamp": 1502917616,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jayantjain1992@gmail.com",
            "sender_full_name": "Jayant Jain (S2'17)",
            "sender_id": 101326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "assembly",
            "submessages": [],
            "timestamp": 1502917607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-email=\"sabelo@sabelo.io\" data-user-id=\"101085\">@Sabelo Mhlambi (F1'17)</span>  Great! will you be around later today?</p>\n</blockquote>\n<p>Yep : ]</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114698544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "assembly",
            "submessages": [],
            "timestamp": 1502917808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the updated function based on the conversation in this thread -- it's still experiencing the same edge-case that prompted the initial question. It doesn't add up (pun intended)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* Adds arbitrary n-bit numbers in a char buffer</span>\n<span class=\"cm\"> * returns carry 1 or 0</span>\n<span class=\"cm\"> * char *num1, *num2, *result</span>\n<span class=\"cm\">*/</span>\n<span class=\"kt\">int</span> <span class=\"nf\">mprecision_add</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">num1</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">num2</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// default result pointee to 0 just in case</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"kt\">char</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">^</span> <span class=\"n\">m</span> <span class=\"o\">^</span> <span class=\"n\">carry</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n    <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">|=</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"c1\">// printf(&quot;n: %d, m: %d, carry: %d, sum: %d result: %d\\n&quot;, n, m, carry, sum, result[i/8]);</span>\n    <span class=\"n\">carry</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">carry</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114701933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502923957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Does it work for the least significant bit? When does it start going astray?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114706502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502933938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>It goes astray here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">^</span> <span class=\"n\">m</span> <span class=\"o\">^</span> <span class=\"n\">carry</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>On this edge case: let n = 2, let m = 7. This combination always sums to 1 as opposed to 9.</p>\n<p>Here are the contents of each variable when <code>sum = ((n ^ m ^ carry) &lt;&lt; i % 8);</code></p>\n<div class=\"codehilite\"><pre><span></span>n   m   sum   carry  result[i/8]\n0   1     1        0          1\n1   1     0        1          1\n0   1     0        0          1\n0   0     0        0          1\n</pre></div>\n\n\n<p>I'm expecting result to be <code>1001</code> instead of <code>0001</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114711230,
            "is_me_message": false,
            "last_edit_timestamp": 1502945212,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502945097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you done the addition of these numbers by hand? What was the carry going in to the fourth bit (which is the same as the carry coming out of the third bit)?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114711878,
            "is_me_message": false,
            "last_edit_timestamp": 1502946715,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502946637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Not by hand, but on GDB. The carry going on to the fourth bit was 0</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114711928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502946774,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is what I get when I do it by hand: <a href=\"/user_uploads/13/5uSx9is0ErzEouhCbJ_-4WFX/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/5uSx9is0ErzEouhCbJ_-4WFX/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/13/5uSx9is0ErzEouhCbJ_-4WFX/pasted_image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712053,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4f8",
                    "emoji_name": "camera_with_flash",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jroutley@gmail.com",
                        "full_name": "James Routley (S1'17)",
                        "id": 101082
                    },
                    "user_id": 101082
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry for the confusion -- In my truth table I'm taking the XOR. It's the truth table for sum = ((n ^ m ^ carry) &lt;&lt; i % 8) is:</p>\n<div class=\"codehilite\"><pre><span></span>n   m   sum   carry  result[i/8]\n0   1     1        0          1\n1   1     0        1          1\n0   1     0        0          1\n0   0     0        0          1\n</pre></div>\n\n\n<p>However if I add manually I get what you're getting. I added manually by hand, but I XOR'd using GDB</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712078,
            "is_me_message": false,
            "last_edit_timestamp": 1502947271,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, the questions are: Does that look right to you? How is it different from what your code is doing?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Your code is sending a carry bit of 0 into the fourth bit, but I believe it should be sending a 1.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947283,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right. That's the part I don't understand: using  <code>((n ^ m ^ carry) &lt;&lt; i % 8)</code> sends the wrong carry onto the 4th bit</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Isn't the carry bit going in to that line being set by the carry= line in the previous iteration of the loop?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's not.. and I think that's where the problem is at..</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, it's being set in that it's being set to either 0 or 1</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I forgot that the carry doesn't just depend on the current bits I'm adding from both integers, it depends on the previous carry value as well:</p>\n<p>This provides the fix <code>carry = (n &amp; m) | (n &amp; carry) | (m &amp; carry)</code>.  I'm sure it can be shortened, but for now it works! :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502947841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Whoop whoop! That's what we were looking for :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712456,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sabelo@sabelo.io",
                        "full_name": "Sabelo Mhlambi (F1'17)",
                        "id": 101085
                    },
                    "user_id": 101085
                }
            ],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502948088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>(my first version had <code>(n &amp; (m | carry)) | (m &amp; carry)</code>, but I decided that was silly and changed it to what you posted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502948190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Aaah yes that would've been right.<br>\nSomething I don't understand, however, is that we're using <code>^</code> to add. However this seems to not work on all cases -- for ex: when n == m, or when adding two odd numbers:<br>\n<code>0011 ^ 0001 = 0110</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712661,
            "is_me_message": false,
            "last_edit_timestamp": 1502948622,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502948614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>It does half of the work of adding... it loses any carry bits required</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502948692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>So this is what happens when you xor a single bit, which is also right for the least significant bit of the sum of the two bits</p>\n<div class=\"codehilite\"><pre><span></span>0 ^ 0 = 0        0 + 0 =  0\n0 ^ 1 = 1        0 + 1 =  1\n1 ^ 0 = 1        1 + 0 =  1\n1 ^ 1 = 0        1 + 1 = 10\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502948852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Understood.. so is it possible to add simply by using xor and perhaps other operations besides +  ?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Better yet are there beginner resources on this that I could be pointed to -- so far I've been looking at \"Hacker's Delight\" and \"The art of programming: vol 4\" which have good bitwise \"tricks\".</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't have good resources, unfortunately... I mostly learned this stuff at uni in the longago.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114712996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5693e93e0e540757b3d92c6350f39af0?d=identicon&version=1",
            "client": "website",
            "content": "<p>No worries, I appreciate the help however! It's a bit tedious yet extremely fun!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114713080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sabelo@sabelo.io",
            "sender_full_name": "Sabelo Mhlambi (F1'17)",
            "sender_id": 101085,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949487,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I suspect there's a way of doing the addition by slamming the whole number through a few bitwise ops, but I don't know it off the top of my head. I have vague memories of seeing discussion of a circuit for a fast adder recently... could be worth talking to people there who are doing hardware / nand2tetris / OS stuff?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114713219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've just been noodling about, and I think you can repeatedly say A + B = (A ^ B) + ((A &amp; B) &lt;&lt; 1) until one or other of A and B goes to 0.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114713259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502949935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like this!</p>\n<div class=\"codehilite\"><pre><span></span>0011        + 0001                                     // First iteration: A = 0011, B = 0001\n0011 ^ 0001 + ((0011 &amp; 0001) &lt;&lt; 1)\n0011 ^ 0001 + (0001 &lt;&lt; 1)\n0010        + 0010                                     // Second iteration: A = 0010, B = 0010\n0010 ^ 0010 + ((0010 &amp; 0010) &lt;&lt; 1)\n0000        + (0010 &lt;&lt; 1)\n0000        + 0100                                     // A = 0, we&#39;re done.\n0100\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114713311,
            "is_me_message": false,
            "last_edit_timestamp": 1502950070,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502950049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Dunno if that works in general or only for that example, though!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114713355,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "More bit shifting",
            "submessages": [],
            "timestamp": 1502950120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac678a1573aeedc46269bfc09724ef0?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working with c++ mat4 datatypes from the <a href=\"https://glm.g-truc.net/0.9.2/api/a00001.html\" target=\"_blank\" title=\"https://glm.g-truc.net/0.9.2/api/a00001.html\">glm library</a>. I'm trying to expose these in a C api. It says they are 'struct template references', but I'm not really sure what that means. Is it safe to cast these to a (void *) to pass around in the c code?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114779066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "charles@nrwhl.xyz",
            "sender_full_name": "Charles Chamberlain (F1'17)",
            "sender_id": 8318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "c++ mat4",
            "submessages": [],
            "timestamp": 1503086071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5ac678a1573aeedc46269bfc09724ef0?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah I see you can expose a C api with pointers to glm::mat4, just not by-value mat4's</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114779433,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "charles@nrwhl.xyz",
            "sender_full_name": "Charles Chamberlain (F1'17)",
            "sender_id": 8318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "c++ mat4",
            "submessages": [],
            "timestamp": 1503086811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>i've been working on a big embedded system for digital signal processing &amp; have been gradually abstracting pieces out into their own libraries.</p>\n<p>my main platform is an stm32f4 family which is a 32bit uC with a single-precision floating point unit. as a result i always use <em>float</em>s and not <em>double</em>s as they are supported by hardware, and accurate enough for my purposes.</p>\n<p>i've started building a command-line application for hosting &amp; dynamically connecting these libraries, and my hardware is clearly capable of using doubles instead of only floats. this will be more accurate and there's a lot of voodoo in the audio world where folks won't even touch a 32bit only processor. thus i'd like to make my libraries compile with floats or doubles as necessary for the project.</p>\n<p>today i discovered <code>-fsingle-precision-constant</code> which i can use in my embedded projects to force doubles to be converted to floats.</p>\n<p>my thought is i should convert all my libraries to explicitly use / return doubles when they are appropriate, then rely on the compiler flag to downgrade to floats for the 32b context. as these types are everywhere in the libraries (including in object-style structs, and as return values), i wanted to be sure this was going to be a reasonable solution before diving in and staring at disassembled code for hours... perhaps someone has some insight?!</p>\n<p>an example file: <a href=\"https://github.com/whimsicalraps/wrLib/blob/master/wrVactrol.c\" target=\"_blank\" title=\"https://github.com/whimsicalraps/wrLib/blob/master/wrVactrol.c\">https://github.com/whimsicalraps/wrLib/blob/master/wrVactrol.c</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115092615,
            "is_me_message": false,
            "last_edit_timestamp": 1503776175,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "doubles vs floats for embedded(32b) and x86-64 systems",
            "submessages": [],
            "timestamp": 1503775747,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could follow the example of <code>libsundials</code> and define a <code>realtype</code>, which becomes a <code>float</code>, <code>double</code> or <code>long double</code> depending on the compilation options<br>\nSee <a href=\"https://github.com/certik/sundials/blob/master/include/sundials/sundials_types.h\" target=\"_blank\" title=\"https://github.com/certik/sundials/blob/master/include/sundials/sundials_types.h\">https://github.com/certik/sundials/blob/master/include/sundials/sundials_types.h</a>  from line 63</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115093152,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f477",
                    "emoji_name": "construction_worker",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "doubles vs floats for embedded(32b) and x86-64 systems",
            "submessages": [],
            "timestamp": 1503777084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Having said that, off the top of my head, I would have thought the size of a <code>double</code> would depend on your hardware though, but it looks like I am mistaken.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115093252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "doubles vs floats for embedded(32b) and x86-64 systems",
            "submessages": [],
            "timestamp": 1503777333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah- similarly i would have thought the compiler would guess what i wanted better: <code>float result = (float)var + 1.0;</code> treats <code>1.0</code> as a double unless you write <code>1.0f</code> or use the abovementioned compiler flag.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115097236,
            "is_me_message": false,
            "last_edit_timestamp": 1503787108,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "doubles vs floats for embedded(32b) and x86-64 systems",
            "submessages": [],
            "timestamp": 1503787091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>Say I have the code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// result is always &gt;= 0</span>\n<span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000000</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"mi\">1000000000</span><span class=\"p\">;</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">%</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// do something with result</span>\n</pre></div>\n\n\n<p>It's been suggested to me that I don't need to modulo at every step. I can let the integer overflow, and if I modulo it at the end, I should get the right result. I can't really reason whether this is correct or not. Is it? If so, is it a common-practice, recommended thing to do, or should I take the performance hit of the modulo at every step and avoid doing something hacky. </p>\n<p>If it helps, real-life example is <a href=\"https://github.com/jamesroutley/write-a-hash-table/pull/8\" target=\"_blank\" title=\"https://github.com/jamesroutley/write-a-hash-table/pull/8\">here</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115252411,
            "is_me_message": false,
            "last_edit_timestamp": 1504117625,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504117473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/faad5e420e35c613eac0b16a547c66e229d055de?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>It's been suggested to me that I don't need to modulo at every step. I can let the integer overflow, and if I modulo it at the end, I should get the right result. I can't really reason whether this is correct or not. Is it? </p>\n</blockquote>\n<p>I don't think this is correct. In your example, <code>result</code> will always be 0 because <code>1000000000 % 50 = 0</code>, however <code>(result % 2**32) % 50</code> will not always be 0, for example (5,000,000,000 % (2**32)) % 50 = 4</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115257890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sam.x.patterson@gmail.com",
            "sender_full_name": "Sam Patterson (S1'17)",
            "sender_id": 101080,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504126432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>This is only correct if your modulo is a power of 2 :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115258936,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "veit@veitheller.de",
                        "full_name": "Veit Heller (he) (S1'17)",
                        "id": 101103
                    },
                    "user_id": 101103
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504128150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff7f41de2091a8d3f5ff0a0722bdeda1ab87faa3?x=x&version=2",
            "client": "website",
            "content": "<p>Got it - thanks all!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115274758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jroutley@gmail.com",
            "sender_full_name": "James Routley (S1'17)",
            "sender_id": 101082,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504162812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>As a related note, you might be interested in reading this article: <a href=\"https://fgiesen.wordpress.com/2010/12/14/ring-buffers-and-queues/\" target=\"_blank\" title=\"https://fgiesen.wordpress.com/2010/12/14/ring-buffers-and-queues/\">https://fgiesen.wordpress.com/2010/12/14/ring-buffers-and-queues/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115284234,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504184375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>(Also the reason why you might want to use pow2 sizes is that they are extremely efficient to compute since modulo is a simple bit mask operation. But note also that, a \"performance hit\" might not really be one. Unless you've profiled it explicitly, I don't expect any operation to be significant in \"regular code\" [as opposed to number crunching] like a hash table. Performance problems for years have been more due to the growing gap in terms of latency between RAM and the CPU, to the point that a lot of computation can be redone \"for free\" rather than waiting for the memory to come from main memory or even one of the caches. So don't think too much about the individual cost of an operation within code that does its share of memory accesses, because there's a good chance that it might not even be a problem.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115284396,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504184705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm no expert on optimizing hash table performance, but I'll note they may not be a place you want to use power of 2 sizes, some common collision resolution schemes suggest using a prime size / mod of the hash key to minimize collisions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115310012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Modulo + overflow",
            "submessages": [],
            "timestamp": 1504221386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>(This question isnt' really specific to C, but I think this is probably the best place to put it)<br>\nI'm making a small shell, and I'm kind of confused about how to implement multiple redirections. For example:<br>\n$ ls &gt; out1 &gt; out2<br>\nI can't just execute ls twice (calling dup2 each time for a new file descriptor) because if out2 doesn't initially exist, the contents of out1 will not list out2 which differs from the behavior or a normal unix shell. So I need to have stdout's file descriptor duplicate out1 and out2 simultaneously and then call ls once, if I'm understanding correctly. I'm not sure if I can do something like this, and there's a good chance I'm thinking of all of this in the wrong way.</p>\n<p>Anyone who can point out where I'm going wrong/what I'm not thinking of?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115489412,
            "is_me_message": false,
            "last_edit_timestamp": 1504637191,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504637181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"mnoronha@uchicago.edu\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span> I had never heard of this before (I've always used <code>tee</code>), and in fact I thought it wouldn't work at all.  Turns out it works in zsh but not in bash.  TIL!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115489576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504637502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>You definitely should not run <code>ls</code> twice; that would be devastating for many commands.  Have you tried the dup()x2 approach?  It seems reasonable to me.  Maybe <span class=\"user-mention\" data-user-email=\"indradhanush.gupta@gmail.com\" data-user-id=\"101105\">@Indradhanush Gupta (S1'17)</span> has some insight into this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115489709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504637689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"code@saul.pw\" data-user-id=\"100791\">@Saul Pwanson (SP2'17)</span> Oh wow I didn't even realize that zsh behaved differently from bash here! Based on how bash is behaving, I think what must be happening is that open is falled on each file followed by dup2 in sequence for each file, and then the command is only executed at the end. The result is that all the files are unmodified (or created if they didn't exist) and only the last one has output redirected into it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115489737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504637756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b28e2daa13e4d1fef90ce87fc9ccefda?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I think that's probably what bash does.  I wasn't aware zsh will do that, but I guess I shouldn't be that surprised given zsh, and really its not that complicated to implement.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115500239,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                }
            ],
            "recipient_id": 22639,
            "sender_email": "tbsaunde+recruiting@tbsaunde.org",
            "sender_full_name": "Trevor Saunders (S1'17)",
            "sender_id": 101125,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504655679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, I never implemented redirection in my shell. Reminds me that I should!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115503898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504663553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I think <span class=\"user-mention\" data-user-email=\"hello@kate.io\" data-user-id=\"2867\">@Kate Murphy (F1'17)</span> worked on that probably.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115503954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504663673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/88a1f942491dec0046f07117224ff9db?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a really interesting edge case <span class=\"user-mention\" data-user-email=\"mnoronha@uchicago.edu\" data-user-id=\"101318\">@Michael Noronha (S2'17)</span>! I did some testing and got three different implementations:</p>\n<ul>\n<li><code>zsh 5.2 (x86_64-apple-darwin15.4.0)</code>: both out1 and out1 contain the output of <code>ls</code>.</li>\n<li><code>GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin16)</code>: out1 exists and is empty; out2 contains the output of <code>ls</code>.</li>\n<li>In a toy shell I wrote: out1 is the output of <code>ls</code>; out2 exists and is empty.</li>\n</ul>\n<p>If you want to investigate this more I'd love to pair.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115504645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hello@kate.io",
            "sender_full_name": "Kate Murphy (she) (W1'17)",
            "sender_id": 2867,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504665187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"hello@kate.io\" data-user-id=\"2867\">@Kate Murphy (F1'17)</span> I'd love to pair. I was playing around with this more earlier, and things get reallly weird when you add in piping. For example, <code>ls &gt; out | sort &gt; out1</code> dumps the output of <code>ls | sort</code> into out and leaves out1 empty.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115504909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504665800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/88a1f942491dec0046f07117224ff9db?d=identicon&version=1",
            "client": "website",
            "content": "<p>HAH. For that line <code>zsh</code> gives me the output of <code>ls</code> in both files. <code>bash</code> only fills in <code>out</code> and my toy shell seems to get stuck.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115504991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hello@kate.io",
            "sender_full_name": "Kate Murphy (she) (W1'17)",
            "sender_id": 2867,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504665963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/88a1f942491dec0046f07117224ff9db?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmmm <code>sort &gt; out1</code> also makes <code>zsh</code> and <code>bash</code> get stuck. It isn't really a valid use of sort. If you did something similar in grep such as <code>grep -r .</code> you would get a warning <code>grep: warning: recursive search of stdin</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115505067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hello@kate.io",
            "sender_full_name": "Kate Murphy (she) (W1'17)",
            "sender_id": 2867,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504666152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/88a1f942491dec0046f07117224ff9db?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually don't understand why zsh fills both files. I think understand why my shell gets stuck, <code>ls &gt; out</code> never produces an <code>EOF</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115505349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "hello@kate.io",
            "sender_full_name": "Kate Murphy (she) (W1'17)",
            "sender_id": 2867,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504666771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "website",
            "content": "<p>right, I'm pretty sure  <code>sort</code> listens on stdin until it gets an EOF and then returns to stdout. So the redirection hangs; but I don't think redirection would ever prevent a command from terminating by itself. There are definitely plenty of arbitrary decisions to make while implementing a shell, but it'd be nice if there were more clearly-defined  (or obvious, if they exist) precedences (ex. output redirecting to the first file in one case but not the other).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115506528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "shell multiple redirection",
            "submessages": [],
            "timestamp": 1504669420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>So I've got a double-pointer to a struct <code>**foo</code>and I want to get a pointer to a field in that struct so I can malloc something into it. I'm writing <code>&amp;((*foo)-&gt;bar)</code>because I forget how operator precedence works and I don't want to think about it. But now I do want to think about it. Which of those parens can I drop without changing the meaning of the expression?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115884409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers to fields in structs",
            "submessages": [],
            "timestamp": 1505439817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>&amp;(*foo)-&gt;bar</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115884514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers to fields in structs",
            "submessages": [],
            "timestamp": 1505440022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p>(and that's it)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115884519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers to fields in structs",
            "submessages": [],
            "timestamp": 1505440028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>neato thank u</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 115884520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointers to fields in structs",
            "submessages": [],
            "timestamp": 1505440036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hey guys, so I've been meaning to create some tools to make my gamedev easier, but I'm pretty new to the whole world of app libraries. Does anyone have any advice? I only have experience with SDL &amp; openGL and those two aren't the easiest to work with. I just want something that can create things as quickly as possible!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117938178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509580963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>For pure C?  I tend to think writing graphical tooling in C is fairly painful; if you need to embed something that does GL, the <a href=\"https://github.com/Extrawurst/cimgui\" target=\"_blank\" title=\"https://github.com/Extrawurst/cimgui\">imgui</a> approach is popular these days.  I've used gtk successfully from C, but I prefer binding the C to Tcl and using Tk from Tcl.  If you need portability, wxWidgets is ok from C.  If you don't mind going to C++, Qt isn't awful.  But most higher-level languages, plus FFI bindings to C if you need to call into your game engine, are usually less painful for building graphical tools.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117940345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509585711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, if that's the case, I've been thinking about using LUA for tooling, but I'm not sure what libraries are available/best for that. Any suggestions?<br>\n(Also, thank you for the advice!)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117962732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509636236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Lua is nice; it's really easy to embed in C.  I've never used it for GUI tooling, though.  I would guess the wxWidgets bindings are probably the easiest but someone who knows the modern Lua ecosystem better than me should chime in.  (<a href=\"https://github.com/pkulchenko/wxlua\" target=\"_blank\" title=\"https://github.com/pkulchenko/wxlua\">wxLua</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117963016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509636661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>Don't take my advice too seriously here.</p>\n<p>Writing <em>any</em> GUI code in C is very painful compared to high level languages. I do not recommend it.</p>\n<p>If your goal is to get something working quickly, then Tcl/Tk is a good choice. It's not considered modern, but if you just want to throw up some grids with some input fields, it works. Interfacing Tcl with C is reasonably easy (comparable with Lua). However, Tcl itself is an inferior language, so if you write too much logic in it, it could be considered technical debt.</p>\n<p>Another approach not to rule out is to link a trivial HTTP server and then do your UI in Web technologies. Banging out a UI in HTML5 is probably easier than any other platform out there. You can also scale from really simple (fill out a form and hit submit when you're done) to very sophisticated (websockets to keep state synchronized between C and web). If you go this route, I strongly suggest using JSON as the data serialization format. Depending on exactly what you're doing, though, this may end up pretty messy.</p>\n<p>If you're willing to jump from C to C++ then I recommend Qt. It's possible to get very professional results, and you minimize the cost of interfacing between multiple languages. One hesitation though, even though Qt is in C++ it would not be considered \"modern\" C++, so the coding habits you learn won't be particularly transferable.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117963594,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22639,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509637565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>That's true, but I want to add for gamedev stuff IMGUI is really, really nice and easy to use. The biggest downside of IMGUI is that by nature it's non-native, it's more limited and less mature, and can be wasteful (at least for Dear IMGUI) because it relies on a game loop to push stuff out rather than being event driven. OTOH it's really easy to program and easy to integrate once you have as game loop, which you should already anyway :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117964264,
            "is_me_message": false,
            "last_edit_timestamp": 1509638659,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509638523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hmm, are there any \"professional\" libraries that support \"modern\" C++? I'd rather get my feet wet in something where I can grow transferable skills rather than having to relearn a bunch over and over.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117964573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509639049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think we covered all the major players.  Everybody just does GUIs in HTML5 these days anyway.  I mean, we didn't talk about WPF and such, which I suppose is an option, too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117964829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509639392,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, I forgot about <a href=\"https://www.juce.com/\" target=\"_blank\" title=\"https://www.juce.com/\">JUCE</a> which some people like a lot.  It's mostly oriented around music software, but I know some people like it for games tooling.  I don't recall the C++ approach being particularly modern (though at least it would be less eccentric than Qt with moc and so on).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117965255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509639991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Also, note that not all C++ is \"modern C++\" -- there are a LOT of companies who don't use the latest and shiniest from the C++ standards (which is what \"modern C++\" really is... one could argue whether it is really modern...).<br>\nAFAIK, Qt is the standard for multi platform GUI apps. Many games companies otherwise use C#/WPF (or sometimes WinForms), because they don't bother with platforms other than Windows for their internal tools. A bunch will use HTML apps, although there's some pushback. (Insomniac games did a pres on this at GDC: <a href=\"https://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A\" target=\"_blank\" title=\"https://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A\">https://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A</a>. tl;dr: they tried web tools and went back to C++/Qt. Some cos are going the IMGUI way, now that it's gaining traction. From what I've gathered on Twitter, this is what Media Molecule does, for example.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117965555,
            "is_me_message": false,
            "last_edit_timestamp": 1509640519,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509640436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks guys, this is a lot of help. Only loosely related question: I'm approaching an old code base with a whole bunch of code. Unfortunately vim is giving me a hard time when it comes to refactoring. There's a bunch I'd like to be able to refactor. Do you guys have any suggestions for transitioning to something that is a bit more no-nonsense? Getting a function struct overview would be super useful too. And just general tips for compartamentilizing C code for re-use (especially for gamedev related projects. I'd like to be able to build small games and doodads while I'm building the engine up). Sorry for all these questions! I'm trying to get back into C coding after being a bit burnt out from javascript and C#, trying to please random game companies with my application.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117971137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509649177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Alternatively, if there are refactoring tricks in vim, I would be greatly appreciative.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117981590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509667130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"sarkar.krishnan@gmail.com\" data-user-id=\"100326\">@Krishnan Sarkar (W1'16)</span> While I have never used it myself, I have heard good things about CLion, and have had very good experiences with the other Jetbrains IDEs, all of which that I've used have had very powerful refactoring support. <a href=\"https://www.jetbrains.com/clion/\" target=\"_blank\" title=\"https://www.jetbrains.com/clion/\">https://www.jetbrains.com/clion/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117990098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509685387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Hmmmmm, thanks for the advice. Unfortunately clion is a bit expensive for me, but I did rediscover 4coder (unfortunately it's still in alpha, I'm not sure how robust it is yet). My friend told me to just boot up visual studio when i need to refactor and use vim for everything else. I already do boot in to visual studio for debugging, so I guess this makes sense to me (until 4coder becomes awesome enough).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118059485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Best Libraries For Desktop Apps (GUI Drawing)",
            "submessages": [],
            "timestamp": 1509835239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi folks, I'm new to C and have encountered the lines</p>\n<div class=\"codehilite\"><pre><span></span>entry = (void(*)(void))(elf\u2212&gt;entry);\nentry();\n</pre></div>\n\n\n<p>(where elf is a struct representing an elf binary).  Am I correct in reading this as:<br>\n1. taking the entry element from the elf struct<br>\n2. casting it to a pointer to a function with no parameters and no return type<br>\n3. calling the function?</p>\n<p>I saw <a href=\"http://fuckingfunctionpointers.com/\" target=\"_blank\" title=\"http://fuckingfunctionpointers.com/\">http://fuckingfunctionpointers.com/</a> and <a href=\"http://c-faq.com/decl/spiral.anderson.html\" target=\"_blank\" title=\"http://c-faq.com/decl/spiral.anderson.html\">http://c-faq.com/decl/spiral.anderson.html</a> but just want to make sure I've got it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511993916,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511993942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yikes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511993956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, the function pointer syntax is... a thing that grows on you</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511993977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>grows on you...like some sort of awful disease?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118183,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jayantjain1992@gmail.com",
                        "full_name": "Jayant Jain (S2'17)",
                        "id": 101326
                    },
                    "user_id": 101326
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jeffowler@gmail.com",
                        "full_name": "Jeff Fowler (W'14)",
                        "id": 4998
                    },
                    "user_id": 4998
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkozak@fmail.co.uk",
                        "full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
                        "id": 8478
                    },
                    "user_id": 8478
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511993996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>hahahah</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>exactly</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i think this one was especially complicated because it's a cast, so there's no name next to the asterix</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Usually if you have a complex function pointer type, you typedef it so uses are a bit easier to read.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118286,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(BTW I totally agree that C type declaration syntax is bizarre and unfit for humans)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yeah I'm sort of viewing learning C as something akin to eating my vegetables</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(although for the receord I like vegetables, so who knows how that metaphor actually works out)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I think the aphorism usually inflicted is \"it builds character\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118411,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f605",
                    "emoji_name": "sweat_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jayantjain1992@gmail.com",
                        "full_name": "Jayant Jain (S2'17)",
                        "id": 101326
                    },
                    "user_id": 101326
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>actually, speaking of characters, I'm also seeing the bootloader for XV6 take a pointer to the ELF struct and cast it to a pointer to an unsigned char...any sense of why someone would do that?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118420,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>then pointer arithmetic is bytewise</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119118488,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511994447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>c is good ill pair with you on c stuff if you ever want</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119121471,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511999558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I may very well take you up on that! thanks</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119121589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1511999806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>im not an expert but i have enthusiasm!!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119121773,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hello@kate.io",
                        "full_name": "Kate Murphy (she) (W1'17)",
                        "id": 2867
                    },
                    "user_id": 2867
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ertysdl@gmail.com",
                        "full_name": "Erty Seidohl (he) (S'13)",
                        "id": 2154
                    },
                    "user_id": 2154
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
                        "full_name": "Cameron Finucane (they) (SP1'18)",
                        "id": 103055
                    },
                    "user_id": 103055
                }
            ],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1512000165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"phoebe@slub.co\" data-user-id=\"101991\">@phoebe beatrice jenkins (F2'17)</span> You gotta make t-shirts that say that = )</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119121848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1512000327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>im not an expert but i have enthusiasm!!</p>\n</blockquote>\n<p>I nominate this as RC's unofficial motto</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119124802,
            "is_me_message": false,
            "last_edit_timestamp": 1512005249,
            "reactions": [
                {
                    "emoji_code": "1f4c0",
                    "emoji_name": "dvd",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mindy.preston@yomimono.org",
                        "full_name": "Mindy Preston (she) (F2'19)",
                        "id": 4994
                    },
                    "user_id": 4994
                },
                {
                    "emoji_code": "1f4c0",
                    "emoji_name": "dvd",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f4c0",
                    "emoji_name": "dvd",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mnoronha@uchicago.edu",
                        "full_name": "Michael Noronha (he) (S2'20)",
                        "id": 101318
                    },
                    "user_id": 101318
                },
                {
                    "emoji_code": "1f4c0",
                    "emoji_name": "dvd",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkozak@fmail.co.uk",
                        "full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
                        "id": 8478
                    },
                    "user_id": 8478
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointers",
            "submessages": [],
            "timestamp": 1512005244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>What's the point of this?:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">pid</span>\n<span class=\"p\">{</span>\n<span class=\"p\">...</span>\n    <span class=\"k\">struct</span> <span class=\"n\">upid</span> <span class=\"n\">numbers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Why an array with length 1? Is this to make sure it gets allocated in a specific way or something?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150408,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>I'm also confused by this bit of code:</p>\n<p><code>upid = &amp;pid-&gt;numbers[ns-&gt;level];</code> (<code>pid</code> is a <code>struct pid</code>) - I don't think that there's any guarantee that <code>ns-&gt;level</code> == 0 - shouldn't this read past the end of the array?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is <code>numbers</code> the last element of the struct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Yes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059752,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It is; so it's being used as a variable-length array.  This is an old-school way to do this though, and I think you've been able to write <code>struct upid numbers[];</code> at the end of a struct since at least C99.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150692,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have some vague memories of people doing <code>struct upid numbers[0]</code> as well, and I can't remember if there was some difference between them or if that's even valid.  Lemme check.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>how do variable-length arrays work in c? i had no idea there was such a concept</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>C11 says: \u00a76.7.2.1</p>\n<blockquote>\n<p>18. As a special case, the last element of a structure with more than one named member may<br>\nhave an incomplete array type; this is called a flexible array member. In most situations, the flexible array member is ignored. In particular, the size of the structure is as if the<br>\nflexible array member were omitted except that it may have more trailing padding than<br>\nthe omission would imply. Howev er, when a . (or -&gt;) operator has a left operand that is<br>\n(a pointer to) a structure with a flexible array member and the right operand names that<br>\nmember, it behaves as if that member were replaced with the longest array (with the same<br>\nelement type) that would not make the structure larger than the object being accessed; the<br>\noffset of the array shall remain that of the flexible array member, even if this would differ<br>\nfrom that of the replacement array. If this array would have no elements, it behaves as if<br>\nit had one element but the behavior is undefined if any attempt is made to access that<br>\nelement or to generate a pointer one past it.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Ok, so when you use it, you just <code>malloc</code> some extra space on the end?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>right</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150798,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512059967,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Before flexible array members were accepted, you had to put a fake-sized array there instead</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512060000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, for arrays of length zero, there's <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html\">this GCC documentation</a> which clarifies that this code <em>could</em> have used <code>[0]</code> (because it compiles only with GCC) but to be C90, it needs to use <code>[1]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512060063,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"phoebe@slub.co\" data-user-id=\"101991\">@phoebe beatrice jenkins (F2'17)</span> I should have used the phrase <em>flexible array member</em> rather than <em>variable length array</em>, which has another, more precise meaning.</p>\n<p>In C99, you can declare an array that has a runtime-dependent length:</p>\n<div class=\"codehilite\"><pre><span></span>   int n;\n   assert(1 == scanf(&quot;%d&quot;, &amp;n));\n   char foo[n];\n   [...]\n</pre></div>\n\n\n<p>This is just like <code>alloca()</code> but portable, and I think some compilers can do better analysis of it because there's some situation where it's more restricted but which doesn't come to mind right now.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119150967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512060205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Alright, that makes sense. It seems like in this case they have a member of the struct to keep track of the length of the array, and then just always check that before doing array access.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119151242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512060530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>oh interesting! i didn't know you could do that!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119151259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512060576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>anyone skilled with inline assembly in C?  A little confused by input constraints in some code I'm reading</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119155992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1512067896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Related, aerospike no longer compiles with modern GCC for me partially because of abuse of this.  See also <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69550\" target=\"_blank\" title=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69550\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69550</a> which shows this is also a problem for Julia.  <span class=\"user-mention\" data-user-email=\"danluu@gmail.com\" data-user-id=\"820\">@Dan Luu (W'13)</span> might get a kick out of this, especially the GCC maintainers' reactions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119156852,
            "is_me_message": false,
            "last_edit_timestamp": 1512069555,
            "reactions": [
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                },
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down_face",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danluu@gmail.com",
                        "full_name": "Dan Luu (W'13)",
                        "id": 820
                    },
                    "user_id": 820
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512069190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since we talked about this earlier in the day: <a href=\"https://www.cl.cam.ac.uk/~srk31/research/papers/kell17some-preprint.pdf\" target=\"_blank\" title=\"https://www.cl.cam.ac.uk/~srk31/research/papers/kell17some-preprint.pdf\">https://www.cl.cam.ac.uk/~srk31/research/papers/kell17some-preprint.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119162513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Some Were Meant for C",
            "submessages": [],
            "timestamp": 1512078004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>Is this the same as using a pointer? I've just been using pointers for my variable length arrays. I've never seen this syntax before, but then again most of what I've seen in C are from tutorials or my own code. Is using this method somehow superior or is it closer to syntactic sugar?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119581089,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512931583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is different from having a pointer.  It's like having a pointer that points into the end of the struct, so you allocate space for both the struct and whatever follows it.  If you had a pointer instead, you'd need to set it to point to something, which could be more space you allocated after the struct, but could also be somewhere discontiguous.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119581232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512932027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(If we're still talking about <code>struct foo { char bar[1]; }</code>; if we're talking about VLAs, the main difference is that they are always stack allocated, whereas your pointer would be, too, if you pointed into something allocated on the stack or used <code>alloca</code>, but could point elsewhere.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119581283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1512932137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm stuggling to read some pointer-heavy code, anyone free to come help me out real fast?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119829540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "help reading some pointer-heavy code",
            "submessages": [],
            "timestamp": 1513377860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/87d462fec1585f4a4a3c65738c97d0cee5448583?x=x&version=1",
            "client": "website",
            "content": "<p>So if i understand correctly,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">char_array</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Normally not used this way.</span>\n  <span class=\"n\">char_array</span> <span class=\"n\">charArray</span><span class=\"p\">;</span>\n  <span class=\"n\">charArray</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;x&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// This is okay.</span>\n  <span class=\"n\">charArray</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;y&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// This throws a compiler error?</span>\n\n  <span class=\"c1\">// This would be typical usage.</span>\n  <span class=\"n\">char_array</span> <span class=\"o\">*</span><span class=\"n\">charArray</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">char_array</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"n\">charArray</span><span class=\"o\">-&gt;</span><span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;x&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// This is okay.</span>\n  <span class=\"n\">charArray</span><span class=\"o\">-&gt;</span><span class=\"n\">chars</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;y&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// This is okay.</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Is this correct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119866685,
            "is_me_message": false,
            "last_edit_timestamp": 1513463742,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "sarkar.krishnan@gmail.com",
            "sender_full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
            "sender_id": 100326,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1513463727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0ef04603cb0deb515c7510a0a495ebaff9a06a78?x=x&version=2",
            "client": "website",
            "content": "<p>that works, but you have an off-by-1 error (in the safe direction). chars starts at length 1, and you're adding 2, so it will hold at least 3 elements the way you're using it</p>\n<p>some compilers accept a 0 length array to work around that, and C99 accepts empty square brackets to mean roughly the same thing: <a href=\"https://en.wikipedia.org/wiki/Flexible_array_member\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Flexible_array_member\">https://en.wikipedia.org/wiki/Flexible_array_member</a></p>\n<p>or you can subtract 1 array element size from the malloc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119994673,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sarkar.krishnan@gmail.com",
                        "full_name": "Krishnan Sarkar (\u014d / \u014dr) (W1'16)",
                        "id": 100326
                    },
                    "user_id": 100326
                }
            ],
            "recipient_id": 22639,
            "sender_email": "0@hclarke.ca",
            "sender_full_name": "harrison clarke (he/they) (S2'17)",
            "sender_id": 101338,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "array with length 1",
            "submessages": [],
            "timestamp": 1513728044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Need some help translating a small assembly file to inline assembly. Anyone at RC and able to help?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120973942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515777376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have done a tiny bit of that, but there are probably people here who know more.  The thing that was most confusing to me was the clobbers (assuming we're talking about C)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120974079,
            "is_me_message": false,
            "last_edit_timestamp": 1515777600,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515777583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"danluu@gmail.com\" data-user-id=\"820\">@Dan Luu (W'13)</span> (not on this stream but here in the space today) might also be able to help, and <span class=\"user-mention\" data-user-email=\"roberto.n.thais@gmail.com\" data-user-id=\"105531\">@Roberto Thais (W2'18)</span> came up <a href=\"https://www.recurse.com/directory?q=assembly&amp;scope=current\" target=\"_blank\" title=\"https://www.recurse.com/directory?q=assembly&amp;scope=current\">from a directory search</a> of folks here now with \"assembly\" listed!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120974491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515778180,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/47cdb42d5b80601f2957b6bbf20a52102fd6a013?x=x&version=2",
            "client": "website",
            "content": "<p>i also did a tiiiny bit of this recently if you'd like another set of eyes on it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120974594,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
            "sender_full_name": "Cameron Finucane (they) (SP1'18)",
            "sender_id": 103055,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515778299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>There is also an <a href=\"https://recurse.zulipchat.com/#narrow/stream/assembly.20languages\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/stream/assembly.20languages\">assembly stream</a> where folks might be able to help :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120975096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515778941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f2dd65a218d9903df695657c0c5c33f6195b950f?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Thanks! I'll come look for some of you after lunch. <span class=\"user-mention\" data-user-email=\"ad@lamarque.fr\" data-user-id=\"9335\">@Adrien Lamarque (S1'16)</span> , thanks for the pointer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120976484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave.a.duthie@gmail.com",
            "sender_full_name": "David Andrew Duthie (W2'18)",
            "sender_id": 105241,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "inline assembly",
            "submessages": [],
            "timestamp": 1515780977,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Can someone explain to me why there are parens around gate in the code below?  For reference, gate is a struct.</p>\n<div class=\"codehilite\"><pre><span></span>#define SETGATE(gate, istrap, sel, off, d)                \\\n{                                                         \\\n  (gate).off_15_0 = (uint)(off) &amp; 0xffff;                \\\n  (gate).cs = (sel);                                      \\\n  (gate).args = 0;                                        \\\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121098791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516050843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>ugh, ok I'm dumb, I found the answer -- because if someone passes an expression when using the macro,  it can cause weird effects when it is substituted into the macro text.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121098870,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
                        "full_name": "Cameron Finucane (they) (SP1'18)",
                        "id": 103055
                    },
                    "user_id": 103055
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "modocache@gmail.com",
                        "full_name": "Brian Gesiak (he) (m1'18)",
                        "id": 105041
                    },
                    "user_id": 105041
                }
            ],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516051056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh, I don't think that's a dumb question! I found your question interesting and I set off googling for an answer. I found this, which contains an example of a pitfall of not \"parenthesizng\" macro arguments: <a href=\"https://www.mikeash.com/pyblog/friday-qa-2010-12-31-c-macro-tips-and-tricks.html\" target=\"_blank\" title=\"https://www.mikeash.com/pyblog/friday-qa-2010-12-31-c-macro-tips-and-tricks.html\">https://www.mikeash.com/pyblog/friday-qa-2010-12-31-c-macro-tips-and-tricks.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121098932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516051173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah I guess I felt dumb because I found the answer on google after a little bit more searching</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121098990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516051229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/92962cba326ba8580d840d84e67a8818c2d8ff39?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>But you're exactly right, I think the problem is because macros do pure textual replacement, if I passed in <code>SETGATE(x + y)</code>, and it didn't have parens, it would result in <code>x + y.off_15_0 = ...</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121098992,
            "is_me_message": false,
            "last_edit_timestamp": 1516051256,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "modocache@gmail.com",
            "sender_full_name": "Brian Gesiak (he) (m1'18)",
            "sender_id": 105041,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516051242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>I decided a while back that I shouldn't feel dumb when I ask a question and find the answer shortly after.  Suppose the amount of time required to find the answer to a question is Poisson-distributed, which seems plausible.  And suppose you have a threshhold time: after you've been searching that long, you ask someone and continue looking.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121133172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516122018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>Then it is mathematically near-certain that you are likely to find the answer shortly after asking someone, _regardless_ of where you place the threshhold.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121133200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516122085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>In fact, making the threshhold time larger just _increases_ the likelihood that you will discovering the answer yourself immediately after asking.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121133253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516122125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>It occurs to me that you don't have to assume that the times are Poisson-distributed.  Any distribution that falls off rapidly will have the same behavior.  Normally-distributed times will behave the same way.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121133289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516122216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>Speculative execution: I ask the question right before I start searching, in case anyone knows the answer offhand. When I find the answer myself before anyone answers, I answer my own question. In the past people on IRC would get mad at me for this behavior but if someone doesn't want to answer your question they don't have to, and especially on RC's zulip, channels like this are for asking questions so I think it's fine. Also I'm sure plenty of people would benefit from the question and the answer who might not have thought to ask at all or who hadn't encountered the issue the question was about at all, like the thing my professors used to say about asking questions because if one person is wondering surely many others are.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121134248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516123671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><code>if (!can_find_answer_myself()) { ask_someone() }</code>well surely this is faster if i do both in parallel. :P</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121134293,
            "is_me_message": false,
            "last_edit_timestamp": 1516123745,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516123727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e5845e045f9bcd4c95b82b01366893ed8b219f00?x=x&version=1",
            "client": "website",
            "content": "<p>People on IRC don't _get_ angry, they are _already_ angry.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121142716,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mjd@plover.com",
            "sender_full_name": "Mark Dominus (indifferent)",
            "sender_id": 7912,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516136177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>irc = IRate Chat?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121142725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "argument in parens in #define macro",
            "submessages": [],
            "timestamp": 1516136202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just wrote a <a href=\"https://anniecherkaev.com/grep-your-way-to-freedom\" target=\"_blank\" title=\"https://anniecherkaev.com/grep-your-way-to-freedom\">blog post</a> that is slightly unfinished (and cross-posted in writing review)- the summary is I tried to figure out what the size of the write buffer in grep was, and I actually can't figure it out. I'm getting results that are not consistent with the behavior I'm seeing- and I'm not sure what else to try. </p>\n<p>If anyone knows what else I could try to figure out why I'm seeing 64KB writes I would really appreciate any suggestions (though unfortunately I think the quickest way to explain what I'm talking about is to look at my blog post, which is a tad long)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121236332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "confused about write buffer size",
            "submessages": [],
            "timestamp": 1516309584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Never mind! Mystery solved! I was looking at the wrong version of the source file!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121244526,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ad@lamarque.fr",
                        "full_name": "Adrien Lamarque (they/he) (S1'16)",
                        "id": 9335
                    },
                    "user_id": 9335
                }
            ],
            "recipient_id": 22639,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "confused about write buffer size",
            "submessages": [],
            "timestamp": 1516320704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/606962c7ae66817bdd0830cc619b69a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working through K&amp;R right now, and have run into a bit of a confusion. So, a quick question for people who know C well!</p>\n<p>I'm writing a simple program that converts an integer into a character array. It seems to work just fine, but I've found that when I pass the number and an array to the itoa function, it doesn't seem to matter how much memory I allot to the array.  I can pass an array of size 1 and 2 ^31 as my int, and it still gives me the right answer. Can someone help me understand why?</p>\n<p>Here's my code, if that helps: <a href=\"https://gist.github.com/stuqdog/2835e22f20cf67d52b070b6c0cb9a3d7\" target=\"_blank\" title=\"https://gist.github.com/stuqdog/2835e22f20cf67d52b070b6c0cb9a3d7\">https://gist.github.com/stuqdog/2835e22f20cf67d52b070b6c0cb9a3d7</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121396267,
            "is_me_message": false,
            "last_edit_timestamp": 1516649872,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ethanrodkin@gmail.com",
            "sender_full_name": "Ethan Rodkin (he) (SP2'18)",
            "sender_id": 105054,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516649698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>C doesn't do array bounds checking, so it's just letting you write over the end of the string I believe :-/</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121397491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516651330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>when you write <code>char string[2];</code> it just allocates some space on the stack for a 3-byte string (2 characters plus the null terminator), <code>string</code> is really just a pointer to the base of the array, and there's nothing to stop you from accessing <code>string[10]</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121397517,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ethanrodkin@gmail.com",
                        "full_name": "Ethan Rodkin (he) (SP2'18)",
                        "id": 105054
                    },
                    "user_id": 105054
                }
            ],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516651428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/606962c7ae66817bdd0830cc619b69a1?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stuart.b.elston@gmail.com\" data-user-id=\"103057\">@Stuart Elston (W1'17)</span> Got it. Thanks for the explanation!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121398071,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ethanrodkin@gmail.com",
            "sender_full_name": "Ethan Rodkin (he) (SP2'18)",
            "sender_id": 105054,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516652260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4732fb4dbecf28e815a128fcd26ea6af42431ace?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"stuart.b.elston@gmail.com\" data-user-id=\"103057\">@Stuart Elston (W1'17)</span> doesn't<code>char string[2]</code> only allocate two bytes? My understanding is that if I were to, for example, do <code>int numbers[2]</code> I would get an array of 2 integers. The trailing <code>\\0</code> in strings would take up an extra slot that you need to make sure to allocate. My C is rusty though so I could be way off, sorry :(</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "john@jclo.co",
            "sender_full_name": "John Clover (m1'18)",
            "sender_id": 105282,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/47cdb42d5b80601f2957b6bbf20a52102fd6a013?x=x&version=2",
            "client": "website",
            "content": "<p>Hopefully this is OK to jump in and point out, but as far as I'm aware there is not any extra space allocated for a null terminator, so <code>char string[2]</code> really would only allocate 2 bytes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
            "sender_full_name": "Cameron Finucane (they) (SP1'18)",
            "sender_id": 103055,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/47cdb42d5b80601f2957b6bbf20a52102fd6a013?x=x&version=2",
            "client": "website",
            "content": "<p>Oh, or, what john said :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404098,
            "is_me_message": false,
            "last_edit_timestamp": 1516661718,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
            "sender_full_name": "Cameron Finucane (they) (SP1'18)",
            "sender_id": 103055,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh yeah you may be right about that, unsure</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404116,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah right, \"abc\" will result in a 4-byte string but c doesn't know what youre gonna store yet when you declare the variable or whatever</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404165,
            "is_me_message": false,
            "last_edit_timestamp": 1516661805,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4732fb4dbecf28e815a128fcd26ea6af42431ace?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yep, I went through a long phase of nit-picking the different ways to allocate strings in C, it's a wonderful rabbit hole to go down!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "john@jclo.co",
            "sender_full_name": "John Clover (m1'18)",
            "sender_id": 105282,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516661897,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/47cdb42d5b80601f2957b6bbf20a52102fd6a013?x=x&version=2",
            "client": "website",
            "content": "<p>To elaborate on <span class=\"user-mention\" data-user-email=\"stuart.b.elston@gmail.com\" data-user-id=\"103057\">@Stuart Elston (W1'17)</span>'s original answer: it might help to look at the disassembly to see exactly how the local variable storage is being laid out.  On my computer, the beginning of main looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>|           0x100000d20      55             push rbp\n|           0x100000d21      4889e5         mov rbp, rsp\n|           0x100000d24      4883ec10       sub rsp, 0x10\n|           0x100000d28      488d75f6       lea rsi, rbp - 0xa\n|           0x100000d2c      c745fc000000.  mov dword [local_4h], 0\n|           0x100000d33      c745f8000000.  mov dword [local_8h], 0x80000000\n|           0x100000d3a      8b7df8         mov edi, dword [local_8h]\n|           0x100000d3d      e82e000000     call sym._itoa\n</pre></div>\n\n\n<p><code>rsi</code> is used to pass the 2nd arg to <code>itoa</code> here, so we can see that your <code>string</code> is located <code>0xa</code> below the top of the stack frame, and <code>n</code> is located <code>0x8</code> below.  As Stu said, itoa will happily start to clobber <code>n</code> once you index beyond 4 chars into <code>string</code>, but since you aren't using  the value of <code>n</code> again you don't notice a problem.  If you were to index beyond 10 chars into <code>string</code> you would start overwriting the stored old value of <code>rbp</code> on the stack, which would lead to trouble later (though possibly not noticeable in this tiny program), and if you went just a little further you'd get control of the instruction pointer that will be popped when <code>main</code> returns <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span>  Happy to talk more about this if you happen to want to write an exploit for your K&amp;R exercise <span class=\"emoji emoji-1f643\" title=\"upside down face\">:upside_down_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404895,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "hammer_and_wrench",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                }
            ],
            "recipient_id": 22639,
            "sender_email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
            "sender_full_name": "Cameron Finucane (they) (SP1'18)",
            "sender_id": 103055,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516662982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I actually tried to clobber the instruction pointer and GCC got mad at me)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516663035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/47cdb42d5b80601f2957b6bbf20a52102fd6a013?x=x&version=2",
            "client": "website",
            "content": "<p>was it something about a stack canary? if so, try <code>-fno-stack-protector</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404915,
            "is_me_message": false,
            "last_edit_timestamp": 1516663074,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
            "sender_full_name": "Cameron Finucane (they) (SP1'18)",
            "sender_id": 103055,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516663055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/091c0c9965b28415105333a5fdcd7c37?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah maybe, it said something like \"stack smashing detected\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121404966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stuart.b.elston@gmail.com",
            "sender_full_name": "Stu Elston (he) (W1'17)",
            "sender_id": 103057,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Confusion about assigning array values beyond array sizes",
            "submessages": [],
            "timestamp": 1516663090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>i've been staring at this for the past 15 minutes:</p>\n<p><a href=\"https://godbolt.org/g/WCYCFi\" target=\"_blank\" title=\"https://godbolt.org/g/WCYCFi\">https://godbolt.org/g/WCYCFi</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122199489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518120432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>(credit: <a href=\"https://twitter.com/jckarter/status/961646984070180864\" target=\"_blank\" title=\"https://twitter.com/jckarter/status/961646984070180864\">https://twitter.com/jckarter/status/961646984070180864</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/jckarter/status/961646984070180864\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/37d94c904e0fdc13f1b65b0b0c39fd5a07e31457/687474703a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3935313135393031393235383738393838382f34364f366a57744d5f6e6f726d616c2e6a7067\"></a><p>Duff's Russian Roulette <a href=\"https://t.co/nMDgvGM9XJ\" target=\"_blank\" title=\"https://t.co/nMDgvGM9XJ\">https://godbolt.org/g/WCYCFi</a></p><span>- Joe Groff (@jckarter)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122199495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518120449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>arg wtf</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122221020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518161027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>wtf is that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122221021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518161029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>stop</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122221023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518161034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>pls stop</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122221024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518161035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>this hurts my mental model of C</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122221025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518161040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8b685fc189f3b87e207614dbbed889148f6eda41?x=x&version=21",
            "client": "website",
            "content": "<p>[extremely morpheus pose]</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122236209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "phoebe@slub.co",
            "sender_full_name": "phoebe beatrice jenkins (she) (m4'18)",
            "sender_id": 101991,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518190949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>Aagh, this is terrible</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122330798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518406625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>I've just been staring at this trying to figure out wtf is going on</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122330802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518406639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>why would someone do this</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122330805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518406646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Apparently this uses GNU's \"statement expression\" extension, which I found out by adding the \"-pedantic\" option. It doesn't otherwise make sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122334048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518414041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05345ed95e57e4d8f747e437671f5385?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@joeym.org\" data-user-id=\"105228\">@Joey Marianer (m1'18)</span> Note that, although the statement expression is a GNU extension, this use of it <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html\" target=\"_blank\" title=\"https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html\">isn't supported by gcc</a>:</p>\n<blockquote>\n<p>Jumping into a statement expression with goto or using a switch statement outside the statement expression with a case or default label inside the statement expression is not permitted.</p>\n</blockquote>\n<p>So this code will only compile with clang.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122627586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gabriellesinghcadieux@gmail.com",
            "sender_full_name": "Gabrielle Singh Cadieux (she) (F2'17)",
            "sender_id": 102044,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518900093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/05345ed95e57e4d8f747e437671f5385?d=identicon&version=1",
            "client": "website",
            "content": "<p>Trying to understand this code, I also found <a href=\"http://blog.robertelder.org/switch-statements-statement-expressions/\" target=\"_blank\" title=\"http://blog.robertelder.org/switch-statements-statement-expressions/\">How to Get Fired Using Switch Statements &amp; Statement Expressions</a>, which includes:</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n#define coroutine_begin() static int state=0; switch(state) { case 0:\n#define coroutine_return(x) { state=__LINE__; return x; case __LINE__:; }\n#define coroutine_finish() }\n\nint get_next(void) {\n        static int i = 0;\n        coroutine_begin();\n        while (1){\n                coroutine_return(++i);\n                coroutine_return(100);\n        }\n        coroutine_finish();\n}\n\nint main(void){\n        printf(&quot;i is %d\\n&quot;, get_next()); /*  Prints &#39;i is 1&#39; */\n        printf(&quot;i is %d\\n&quot;, get_next()); /*  Prints &#39;i is 100&#39; */\n        printf(&quot;i is %d\\n&quot;, get_next()); /*  Prints &#39;i is 2&#39; */\n        printf(&quot;i is %d\\n&quot;, get_next()); /*  Prints &#39;i is 100&#39; */\n        return 0;\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122627680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gabriellesinghcadieux@gmail.com",
            "sender_full_name": "Gabrielle Singh Cadieux (she) (F2'17)",
            "sender_id": 102044,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1518900288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>edit: sorry, nevermind! it's just a while()... i only had the extra step because <code>q = queue[ix]</code> is far more complex irl.</p>\n<p>///</p>\n<p>Was refactoring some code and found myself wanting to write the below with a goto. I couldn't see how to solve it with normal control-flow, but thought someone might have an elegant non-goto solution over here. I'm not averse to an occasional goto, but only when it's necessary to avoid additional overhead. I've been pretty burnt out on work, so perhaps this is a simple one my tiredness is preventing me from seeing...</p>\n<div class=\"codehilite\"><pre><span></span>my_struct_t queue[8];\nint ix=0;\n\nvoid my_fn(void){\n  my_struct_t* q; // pointer to a struct in an array\n\nskip_read:\n  q = queue[ix];\n  if( q-&gt;element == condition ){\n    free(q);\n    ix++;\n    goto skip_read;\n  }\n  use_q();\n}\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122668295,
            "is_me_message": false,
            "last_edit_timestamp": 1519000125,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "code@saul.pw",
                        "full_name": "Saul Pwanson (SP2'17)",
                        "id": 100791
                    },
                    "user_id": 100791
                }
            ],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to avoid this goto",
            "submessages": [],
            "timestamp": 1518999534,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/840b0106bf4b64a91f222c05f43054358db93f2d?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122671756,
            "is_me_message": false,
            "last_edit_timestamp": 1519008182,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "code@saul.pw",
            "sender_full_name": "Saul Pwanson (SP2'17)",
            "sender_id": 100791,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "How to avoid this goto",
            "submessages": [],
            "timestamp": 1519008168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>well what the heck? What is going on?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 122905291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "duff's russian roulette",
            "submessages": [],
            "timestamp": 1519438233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eff8f6d876233d41e341ecb555a54fb4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://lkml.org/lkml/2018/3/20/845\" target=\"_blank\" title=\"https://lkml.org/lkml/2018/3/20/845\">https://lkml.org/lkml/2018/3/20/845</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124368489,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "paul.gowder@gmail.com",
                        "full_name": "Paul Gowder (S2'17)",
                        "id": 101322
                    },
                    "user_id": 101322
                }
            ],
            "recipient_id": 22639,
            "sender_email": "nsmon@protonmail.ch",
            "sender_full_name": "Nicolas Montanaro (SP1'18)",
            "sender_id": 109169,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Linus praises wacky macro",
            "submessages": [],
            "timestamp": 1522333656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>For those who might not see it, this relies on the fact that <code>sizeof(void)</code>is 1 on gcc, but note that <code>sizeof(void)</code> is not legal according to the standard.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124379817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Linus praises wacky macro",
            "submessages": [],
            "timestamp": 1522350877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eff8f6d876233d41e341ecb555a54fb4?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Microsoft/winfile\" target=\"_blank\" title=\"https://github.com/Microsoft/winfile\">https://github.com/Microsoft/winfile</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124865367,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nsmon@protonmail.ch",
            "sender_full_name": "Nicolas Montanaro (SP1'18)",
            "sender_id": 109169,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Windows 3.0 file explorer source",
            "submessages": [],
            "timestamp": 1523326176,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/07dd7dc21512842545f774cd71650a1a3562a2ee?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/Microsoft/winfile/issues/29\" target=\"_blank\" title=\"https://github.com/Microsoft/winfile/issues/29\">https://github.com/Microsoft/winfile/issues/29</a> such a troll</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124866200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "elmisback@gmail.com",
            "sender_full_name": "Edward Misback (he) (SP1'18)",
            "sender_id": 109158,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Windows 3.0 file explorer source",
            "submessages": [],
            "timestamp": 1523327782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe3e47e3900f10b4833e6fd419feb70838f0ffae?x=x&version=6",
            "client": "website",
            "content": "<p>Howdy! I'm going to start working on the <a href=\"https://cryptopals.com/\" target=\"_blank\" title=\"https://cryptopals.com/\">cryptopals</a> challenges nowish. I am happy to pair at any time with anyone!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126885862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "burrowing-owl@aviary.biz",
            "sender_full_name": "jordan ryan reuter (they) (S1'18)",
            "sender_id": 116517,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "matasano cryptopals in C",
            "submessages": [],
            "timestamp": 1526928380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ad2ba84495ea4377d3d79ef8c11599a3?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>this looks fun! i'd be down to try it out with you!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126887135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "kevin_ouyang@brown.edu",
            "sender_full_name": "Kevin Hongyi Ouyang (they/he) (S1'18)",
            "sender_id": 116465,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "matasano cryptopals in C",
            "submessages": [],
            "timestamp": 1526929957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe3e47e3900f10b4833e6fd419feb70838f0ffae?x=x&version=6",
            "client": "website",
            "content": "<p>let's do it! I can find you :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126887250,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "burrowing-owl@aviary.biz",
            "sender_full_name": "jordan ryan reuter (they) (S1'18)",
            "sender_id": 116517,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "matasano cryptopals in C",
            "submessages": [],
            "timestamp": 1526930083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/41cecc0cbc51d1063dd0efe41a24ac60?d=identicon&version=3",
            "client": "ZulipElectron",
            "content": "<p>I am going through the K &amp; R book. If anyone wants to pair, I am going to be doing this through my batch so if anyone else wants to join I would be happy to pair.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126938795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jonathanv3232@gmail.com",
            "sender_full_name": "Matik Zed (he) (S1'18)",
            "sender_id": 116359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "K & R Book",
            "submessages": [],
            "timestamp": 1527015665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe3e47e3900f10b4833e6fd419feb70838f0ffae?x=x&version=6",
            "client": "website",
            "content": "<p>I have a question about the best way to silence some compiler warnings. I'm using the stdlib's <code>qsort()</code> to sort an array of structs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">label</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">score</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">entry</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">entry_show</span><span class=\"p\">(</span><span class=\"n\">entry</span> <span class=\"o\">*</span> <span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">limit</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">snprintf</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"s\">&quot;%c: %d&quot;</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">score</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">entries_print</span><span class=\"p\">(</span><span class=\"n\">entry</span> <span class=\"o\">*</span> <span class=\"n\">entries</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">len</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#define BUFLEN 16</span>\n    <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">BUFLEN</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">entry_show</span><span class=\"p\">(</span><span class=\"n\">entries</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">BUFLEN</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\t</span><span class=\"s\">%s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">entry_compare_by_score</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">entry</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">entry</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">score</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">score</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">score</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">score</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"n\">entry</span> <span class=\"n\">entries</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"p\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"p\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"p\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#define ENTRIES 3</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;sorting an array of structs</span><span class=\"se\">\\n</span><span class=\"s\">before:</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">entries_print</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">,</span> <span class=\"n\">ENTRIES</span><span class=\"p\">);</span>\n    <span class=\"n\">qsort</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">,</span> <span class=\"n\">ENTRIES</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">),</span> <span class=\"n\">entry_compare_by_score</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;after:</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">entries_print</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">,</span> <span class=\"n\">ENTRIES</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This works, but I get some compiler warnings about the type of my comparator function.</p>\n<div class=\"codehilite\"><pre><span></span>sorting.c: In function \u2018main\u2019:\nsorting.c:45:41: warning: passing argument 4 of \u2018qsort\u2019 from incompatible pointer type [-Wincompatible-pointer-types]\n  qsort(entries, ENTRIES, sizeof(entry), entry_compare_by_score);\n                                         ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from sorting.c:2:0:\n/usr/include/stdlib.h:741:13: note: expected \u2018__compar_fn_t {aka int (*)(const void *, const void *)}\u2019 but argument is of type \u2018int (*)(const entry *, const entry *) {aka int (*)(const struct &lt;anonymous&gt; *, const struct &lt;anonymous&gt; *)}\u2019\n extern void qsort (void *__base, size_t __nmemb, size_t __size,\n             ^~~~~\n</pre></div>\n\n\n<p>I can silence the warnings if I apply this patch:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/sorting.c b/sorting_no_warning.c</span>\n<span class=\"gh\">index ef4a196..c4a3195 100644</span>\n<span class=\"gd\">--- a/sorting.c</span>\n<span class=\"gi\">+++ b/sorting_no_warning.c</span>\n<span class=\"gu\">@@ -21,11 +21,11 @@ void entries_print(entry * entries, size_t len)</span>\n    }\n }\n\n<span class=\"gd\">-int entry_compare_by_score(const entry * a, const entry * b)</span>\n<span class=\"gi\">+int entry_compare_by_score(const void * a, const void * b)</span>\n {\n<span class=\"gd\">-   if (a-&gt;score &lt; b-&gt;score)</span>\n<span class=\"gi\">+   if (((entry *) a)-&gt;score &lt; ((entry *) b)-&gt;score)</span>\n        return -1;\n<span class=\"gd\">-   if (a-&gt;score &gt; b-&gt;score)</span>\n<span class=\"gi\">+   if (((entry *) a)-&gt;score &gt; ((entry *) b)-&gt;score)</span>\n        return 1;\n    else\n        return 0;\n</pre></div>\n\n\n<p>which declares the arguments as pointers to <code>void</code> and casts back to pointers to <code>entry</code> inside the function. Although that silences the warnings, is that the best way to do it? It feels a little icky, but then again there are lots of things in C that feel icky for a Ruby programmer like me :) Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126985188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "burrowing-owl@aviary.biz",
            "sender_full_name": "jordan ryan reuter (they) (S1'18)",
            "sender_id": 116517,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527094380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>it is, alas.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126991208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527102051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>IIRC, it is undefined behavior to cast a function pointer of one type to another. In other words, the function you pass to qsort has to have a signature like <code>int f(void, void)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126995853,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527107467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116517\">@Jordan Ryan Reuter (S1'18)</span> That's the right way to do it in C.</p>\n<p>C's type system can't express a generic sort function any other way (meaning you want a single function like <code>qsort</code> that can sort all types in various ways, not a function that sorts a particular type only.)</p>\n<p>C++ solves this problem with \"generics\" or parameterized types.  When you have something like <code>vector&lt;T&gt;</code>, <code>T</code> is a parameter of the type <code>vector</code>.  But this does not exist in C -- only C++.  When you sort a <code>vector&lt;int&gt;</code> or <code>vector&lt;Foo&gt;</code> you don't have to do any casting.</p>\n<p>Java had the same issue before it got generics maybe 10 years ago.  You would have to cast to and from <code>Object</code>, which is like <code>void *</code> in C.  In Java, everything is an object.  In C, every pointer is convertible to and from <code>void *</code>.</p>\n<p>Go has a similar issue with <code>interface{}</code> (everything satisfies the empty interface).  But unlike C or Java, Go has builtin containers like <code>map</code> and it has more useful arrays/slices.</p>\n<p>I'm not in today but I'll be happy to talk more tomorrow or Friday :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126996456,
            "is_me_message": false,
            "last_edit_timestamp": 1527108260,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527108206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe3e47e3900f10b4833e6fd419feb70838f0ffae?x=x&version=6",
            "client": "website",
            "content": "<p>alas! thanks for the confirmation.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126998174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "burrowing-owl@aviary.biz",
            "sender_full_name": "jordan ryan reuter (they) (S1'18)",
            "sender_id": 116517,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527110354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>it's not a performance loss, either. that cast is static and the type is resolved at compile time.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127002929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527117358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>i've got a quick silly question about how pointers get initialized! I'm seeing something like <code>struct Foo *foo;</code> followed by <code>func(&amp;foo)</code>, which I'm finding confusing. Clearly foo is a pointer to a Foo, but then isn't <code>&amp;foo</code> a pointer to a pointer to a Foo? Furthermore, since no memory has been allocated yet for a Foo in the first place, what happens when <code>func</code> receives that pointer-to-a-pointer-to-a-Foo?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127045307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527190398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>&amp;foo is in fact a pointer to a pointer to a <code>Foo</code>, and when <code>func</code> receives that pointer (let's say inside the function it's called <code>bar</code>), it can say something like <code>*bar = malloc(sizeof(struct Foo))</code> and thereby set <code>foo</code> to point to some space that is now allocated.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127045419,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                }
            ],
            "recipient_id": 22639,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527190561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Ah, ok, that makes sense! Thanks! Makes sense especially in this context, which is realtime audio. <code>func</code> probably provides the memory for the <code>Foo</code> from a preallocated pool so that it doesn't block</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127045578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527190757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (S1'18)</span> It might help to think of this as the \"out params\" pattern.</p>\n<p>C has a couple limitations that make this pattern common:</p>\n<p>1. You can't return multiple values from a function<br>\n2. It's not idiomatic to return large values (structs/arrays) because they get copied.</p>\n<p>For these reasons, instead of returning a value, you might pass a pointer an empty value of that type, and then the function \"returns\" it by filling in the area that the pointer addresses.</p>\n<p>So instead of thinking of it as a pointer-to-a-pointer (<code>Foo**</code>), you can think of it as an \"out param\" of <code>Foo*</code>.  In other words the function is logically returning a pointer to Foo through its param list.</p>\n<p>In other words these two functions logically do the same thing:</p>\n<div class=\"codehilite\"><pre><span></span>int f1() { return 42; }\nvoid f2(int* i) { *i = 42; }\n\nint result = f1();\nint result2;\nf2(&amp;result2);\n// result and result2 are both 42\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046018,
            "is_me_message": false,
            "last_edit_timestamp": 1527191463,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "phoebe@slub.co",
                        "full_name": "phoebe beatrice jenkins (she) (m4'18)",
                        "id": 101991
                    },
                    "user_id": 101991
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dfriedman58@gmail.com",
                        "full_name": "Daniel Friedman (he) (S1'18)",
                        "id": 116363
                    },
                    "user_id": 116363
                }
            ],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527191356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wow, well put, <span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span>, thanks so much!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046149,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "263a",
                    "emoji_name": "relaxed",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22639,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527191536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> I wish I had that explanation around when I was trying to explain multiple levels of pointers to my coworkers 20 years ago.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046263,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22639,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527191722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks!  I feel like you see it <em>everywhere</em> in real C code (e.g. OpenSSL), but I don't recall ever reading about it in a book on C.</p>\n<p>A co-worker at my first job explained this to me a long time ago.  Also the prevailing style at Google is that \"in params\" use const refs (in C++) and \"out params\" use pointers, so function calls look like <code>bool error = f(in1, in2, &amp;out1, &amp;out2)</code>.</p>\n<p>I'm pretty sure C# has explicit support for out params.  In C it is annoying that you can't easily tell in params from out params.  It's just a rough convention.  <code>Foo*</code> could be an out param of <code>Foo</code> or it can be an in param of <code>Foo*</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127046508,
            "is_me_message": false,
            "last_edit_timestamp": 1527192039,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "pointer initialization",
            "submessages": [],
            "timestamp": 1527192003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116517\">@Jordan Ryan Reuter (S1'18)</span> This was the project I mentioned -- a basic window system and basic terminal emulator.  It's written against XCB, which is apparently a \"newer\" API for X ?</p>\n<p><a href=\"http://norstrulde.org/system59/\" target=\"_blank\" title=\"http://norstrulde.org/system59/\">http://norstrulde.org/system59/</a></p>\n<p>The blog here looks kind of interesting:</p>\n<p><a href=\"http://norstrulde.org/journals/linuxgui/\" target=\"_blank\" title=\"http://norstrulde.org/journals/linuxgui/\">http://norstrulde.org/journals/linuxgui/</a></p>\n<p>What I like about it is that it seems small and study-able.  However I know very little about this area.  It might be interesting to just try to boot it in a VM.</p>\n<div class=\"codehilite\"><pre><span></span>$ wc -l *.c *.h |sort -n\n       9 keymap.h\n      59 shell.h\n     125 keymap-dvorak.c\n     125 keymap-qwerty.c\n     126 logo.c\n     145 build_fira_mono_tables.c\n     696 germ.c\n    1092 stb_image_write.h\n    1451 term.c\n    1584 shell.c\n    5412 total\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127105217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "X demo code and terminal emulator / window system",
            "submessages": [],
            "timestamp": 1527287848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe3e47e3900f10b4833e6fd419feb70838f0ffae?x=x&version=6",
            "client": "website",
            "content": "<p>thanks, <span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127105368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "burrowing-owl@aviary.biz",
            "sender_full_name": "jordan ryan reuter (they) (S1'18)",
            "sender_id": 116517,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "X demo code and terminal emulator / window system",
            "submessages": [],
            "timestamp": 1527288122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not sure if it's related to what you want to do (substituting Wayland for XCB), but maybe?  I haven't looked into it a lot myself.</p>\n<p>No rush since I still have a bunch of Oil bugs to fix :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127105822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "X demo code and terminal emulator / window system",
            "submessages": [],
            "timestamp": 1527288940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111924\">@Daniel Mayer (SP2'18)</span> Before I forget these are the diagrams I was mentioning:</p>\n<p><a href=\"https://manybutfinite.com/post/anatomy-of-a-program-in-memory/\" target=\"_blank\" title=\"https://manybutfinite.com/post/anatomy-of-a-program-in-memory/\">https://manybutfinite.com/post/anatomy-of-a-program-in-memory/</a></p>\n<p>This whole blog is very good: <a href=\"https://manybutfinite.com/archives/\" target=\"_blank\" title=\"https://manybutfinite.com/archives/\">https://manybutfinite.com/archives/</a></p>\n<p>For example this explanation of buffer overflows seems more detailed and specific than the one in the book, and it has better diagrams, but honestly I didn't go through it:</p>\n<p><a href=\"https://manybutfinite.com/post/epilogues-canaries-buffer-overflows/\" target=\"_blank\" title=\"https://manybutfinite.com/post/epilogues-canaries-buffer-overflows/\">https://manybutfinite.com/post/epilogues-canaries-buffer-overflows/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127149489,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "\"#!$%&'*+-/=?^_`{}|~\"@tomyumcorp.com",
                        "full_name": "Cameron Finucane (they) (SP1'18)",
                        "id": 103055
                    },
                    "user_id": 103055
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bogomolnyelad@gmail.com",
                        "full_name": "Elad Bogomolny (he) (S1'18)",
                        "id": 116355
                    },
                    "user_id": 116355
                }
            ],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Diagrams of Process Address Space",
            "submessages": [],
            "timestamp": 1527390398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>It might be worth mentioning the rationale here; one can imagine a machine where pointers to different types are different sizes or whose ABI passes them in different ways, so you absolutely need the signature of your function to match what qsort will call; and since C guarantees <code>void *</code> will be large enough to hold any pointer to any other type, you know you can safely cast back to your original type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127359042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "qsort's comparator function",
            "submessages": [],
            "timestamp": 1527768907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Noticed this weird quirk yesterday.. was pairing with <span class=\"user-mention\" data-user-id=\"117507\">@Lucy Zhang (S1'18)</span> and noticed that memset's signature on my Ubuntu laptop is<br>\n<code> void *memset(void *s, int c, size_t n); </code></p>\n<p>But (also on manpage) the second argument 'c' is used as a single <em>byte</em> to set the array memory to. So we both thought that it was very strange that the second parameter has an int type, which is typically 4 bytes in size. </p>\n<p>Passing in a second argument bigger than 255 seems to cause memset to fill in the given array with the <em>lowest byte</em> of the second argument.</p>\n<p>I wrote a quick demo to show this behaviour: <a href=\"/user_uploads/13/i837t6EiAX2bdtlAClfG7Gk-/memset-oddness.c\" target=\"_blank\" title=\"memset-oddness.c\">memset-oddness.c</a></p>\n<p>If I call memset with 2nd arg  'A' == 65 in ASCII, we get 1094795585 1094795585 1094795585 1094795585 (which is expected -- see code)<br>\nIf I call memset with 2nd arg 512, we get 0 0 0 0, since the lowest byte of 512 is 0b00000000<br>\netc.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127431258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527878688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>This may or may not be the reason why. IIRC, <code>int</code> is supposed to be the size of data the CPU. I believe when you pass a char argument to a function, it is first coerced to an int that is then passed in. There may be something similar going on here.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127431832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527879374,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>It looks like someone answered this question on stackoverflow: <a href=\"https://stackoverflow.com/a/5919802/3926024\" target=\"_blank\" title=\"https://stackoverflow.com/a/5919802/3926024\">https://stackoverflow.com/a/5919802/3926024</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127431861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527879441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>It looks like the answer is <code>memset</code> existed before function prototypes. This made it impossible to pass a char to a function, because the character 'a' is really an int (as I mentioned above).</p>\n<blockquote>\n<p>memset predates (by quite a bit) the addition of function prototypes to C. Without a prototype, you can't pass a char to a function -- when/if you try, it'll be promoted to int when you pass it, and what the function receives is an int.</p>\n<p>It's also worth noting that in C, a character literal like 'a' does not have type char -- it has type int, so what you pass will usually start out as an int anyway. Essentially the only way for it to start as a char and get promoted is if you pass a char variable.</p>\n<p>In theory, memset could probably be modified so it receives a char instead of an int, but there's unlikely to be any benefit, and a pretty decent possibility of breaking some old code or other. With an unknown but potentially fairly high cost, and almost no chance of any real benefit, I'd say the chances of it being changed to receive a char fall right on the line between \"slim\" and \"none\".</p>\n<p>Edit (responding to the comments): The CHAR_BIT least significant bits of the int are used as the value to write to the target.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127431957,
            "is_me_message": false,
            "last_edit_timestamp": 1527879622,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527879582,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's nutty. So it sounds like the signature of memset was chosen to maintain compatibility when the C89 standard came out.</p>\n<p>Not <em>super</em> sure why char is automatically promoted to int in the absence of function prototypes. My guess is that before prototyping was added, C compilers assumed every argument to a function had size = 4 bytes.</p>\n<p>sizeof(size_t) usually isn't 4 bytes nowadays though.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127432506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527880183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>When passing arguments to a function, it's usually either on the stack (which typically has alignment rules matching <code>int</code>) or in a register (which is usually <code>int</code> size), or at least that would have been the case in those times.  This is also related to all the wild bugs people have with argument promotion, particularly with varargs functions like <code>printf</code>, like how it's unsafe to <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/DCL11-C.+Understand+the+type+issues+associated+with+variadic+functions\" target=\"_blank\" title=\"https://wiki.sei.cmu.edu/confluence/display/c/DCL11-C.+Understand+the+type+issues+associated+with+variadic+functions\">pass a NULL to printf</a>.</p>\n<p>C is one of those languages where <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/X86_calling_conventions\">learning your ABI</a> can really elucidate things!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127435017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527883353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for the link! haven't delved into the ABI yet (had a faint idea that this was related to alignment/register sizes) , but will give it a shot :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127437808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527886998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is partially related to your question: if you look at old C code, you can see that arguments were assumed to be ints if no type was declared:</p>\n<p><a href=\"https://minnie.tuhs.org//cgi-bin/utree.pl?file=V2/cmd/cc.c\" target=\"_blank\" title=\"https://minnie.tuhs.org//cgi-bin/utree.pl?file=V2/cmd/cc.c\">https://minnie.tuhs.org//cgi-bin/utree.pl?file=V2/cmd/cc.c</a></p>\n<p>There <code>argv</code> is given an explicit type, but <code>argc</code> is not.</p>\n<p>It is weird that this legacy still exists, but I guess there's just a lot of C code out there so the benefit of breaking things has to outweigh the cost!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 127438761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is the type of memset's second parameter an int?",
            "submessages": [],
            "timestamp": 1527888248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>The text and code for my presentation are here:</p>\n<p><a href=\"https://github.com/andychu/javascript-vs-c\" target=\"_blank\" title=\"https://github.com/andychu/javascript-vs-c\">https://github.com/andychu/javascript-vs-c</a></p>\n<p>The diff is here:</p>\n<p><a href=\"https://github.com/andychu/javascript-vs-c/commit/e7c60bd5c72d1925b586b5a712737e6b4c7579de\" target=\"_blank\" title=\"https://github.com/andychu/javascript-vs-c/commit/e7c60bd5c72d1925b586b5a712737e6b4c7579de\">https://github.com/andychu/javascript-vs-c/commit/e7c60bd5c72d1925b586b5a712737e6b4c7579de</a></p>\n<p>Main points are:</p>\n<ul>\n<li>Porting code is another way to learn C.  There is a subset of JavaScript that is easy to port to C by adding types.</li>\n<li>Treat C like Python or Ruby by writing a tiny shell script.</li>\n<li>Learn to read error messages, and elicit better error messages with tools.  I added some docs on ASAN!</li>\n<li>JavaScript is as fast as C for this toy program</li>\n</ul>\n<p>I'd expect similar exercises to take 90 minutes or an afternoon.  Pair with someone on it and send me feedback! :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129208804,
            "is_me_message": false,
            "last_edit_timestamp": 1530891964,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                }
            ],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "JavaScript vs. C",
            "submessages": [],
            "timestamp": 1530891787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7c2c992516b3fd501ea15b5ec95473a8?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks for sharing, Andy! I thought this was a really nifty way to learn C from another language.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 129209878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ruoyi.lin@gmail.com",
            "sender_full_name": "Caroline Lin (S1'18)",
            "sender_id": 116367,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "JavaScript vs. C",
            "submessages": [],
            "timestamp": 1530892974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Can I take a function pointer of <code>*</code> or similar infix functions? I know I could wrap it in a function and then get a pointer to that, but just curious if this is possible. I think part of the problem is that these symbols are used in other contexts beyond just being infix functions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131011082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointer of builtin infix function",
            "submessages": [],
            "timestamp": 1533600353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af0a4685e93e44ffcd2935fa31ff1c4?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>*</code> isn't a function in C, so, no.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131013820,
            "is_me_message": false,
            "last_edit_timestamp": 1533605605,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "novalis@novalis.org",
            "sender_full_name": "David Turner",
            "sender_id": 8449,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointer of builtin infix function",
            "submessages": [],
            "timestamp": 1533605578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/333bbc33b9eca3de56596185538e752c4e82dd63?x=x&version=4",
            "client": "ZulipAndroid",
            "content": "<p>Gotcha, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131084686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mnoronha@uchicago.edu",
            "sender_full_name": "Michael Noronha (he) (S2'20)",
            "sender_id": 101318,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "function pointer of builtin infix function",
            "submessages": [],
            "timestamp": 1533698337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've got two libraries which I'd like to merge into a single library, but I've run into a wall.  It's a little hard to describe (though hopefully the example code I wrote below will make it clearer): both of the functions I'm trying to merge from each library take a function pointer, and I'd like to nest a function from one library into a function from the other library (having the inner function call the passed function pointer), but I'm not sure how to do it or if it's even possible.  As far as I know, it's not possible to dynamically create functions in C (unless there's some magical way to duplicate bytecode on the fly, modify it, and then run it), and I'm guessing it'd be possible to achieve what I want using static/global variables (but I'd like to avoid that if possible).  Below is some sample code to show what I'm trying to do:</p>\n<div class=\"codehilite\"><pre><span></span>//lib1.c\nvoid lib1f(void (*f)())\n{\n    printf(&quot;lib1 now calling function:\\n&quot;);\n    f();\n    printf(&quot;lib1 done!\\n&quot;);\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>//lib2.c\nvoid lib2f(void (*f)())\n{\n    printf(&quot;lib2 now calling function:\\n&quot;);\n    f();\n    printf(&quot;lib2 done!\\n&quot;);\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>//mergelib.c\n#include &quot;lib1.h&quot;\n#include &quot;lib2.h&quot;\nvoid mergelibf(void (*f)())\n{\n    void (*tempf)() = magicalJavaScriptyFunctionCreator(lib2f(f));\n    lib1f(tempf);\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>//main.c\n#include &quot;mergelib.h&quot;\n\nvoid udf() // user defined function\n{\n    printf(&quot;Hello World!\\n&quot;);\n}\n\nint main(int argc, char* argv)\n{\n    mergelib(udf);\n\n    return 0;\n}\n</pre></div>\n\n\n<p>Basically, I'd like two write mergelib in a way where <code>mergelibf(udf)</code> will output the following:</p>\n<div class=\"codehilite\"><pre><span></span>lib1 now calling function:\nlib2 now calling function:\nHello World!\nlib2 done!\nlib1 done!\n</pre></div>\n\n\n<p>And I'd like to achieve this without changing anything except the code inside the body of mergelibf.  Is there some elegant way to do this that I haven't thought of, or am I basically SOL?</p>\n<p>I hope that makes sense (if you have any questions please ask).  Thanks in advance!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132529169,
            "is_me_message": false,
            "last_edit_timestamp": 1534873301,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534871267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you are using gcc: <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html\" target=\"_blank\" title=\"http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html\">http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html</a> could give you something lambda-ish.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132532143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534874539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm using gcc but also emscripten (which is based on clang I think), so that won't work unfortunately.  Thanks for pointing it out though, I wasn't aware of that!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132532534,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534875007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">tf</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"n\">lib2f</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">mergelibf</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)())</span>\n<span class=\"p\">{</span>\n     <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n     <span class=\"n\">lib1f</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132533489,
            "is_me_message": false,
            "last_edit_timestamp": 1534876710,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534876114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does that work ? I didn't test.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132533494,
            "is_me_message": false,
            "last_edit_timestamp": 1534876155,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534876124,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>except for the parens after the <code>*g</code> it does work!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534013,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "baccou@normalesup.org",
                        "full_name": "Pierre-Yves Baccou (F'13)",
                        "id": 2865
                    },
                    "user_id": 2865
                }
            ],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534876608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://gist.github.com/jfo/ca6d575219788d7c7fa2a93b22b0e09c\" target=\"_blank\" title=\"https://gist.github.com/jfo/ca6d575219788d7c7fa2a93b22b0e09c\">https://gist.github.com/jfo/ca6d575219788d7c7fa2a93b22b0e09c</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534876717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah that works, I was thinking of doing something like that, but I was hoping to do it without using the global variable (I might be using this on multiple threads in the future... though I suppose I could add a mutex...)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534877208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't think of a way to do it without the global var, which btw remains local to the file mergelib.c ...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534877316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/aba1e26cd3f268ad4224f3522011f17b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, it's not actually too bad in a sense.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534699,
            "is_me_message": false,
            "last_edit_timestamp": 1534877353,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "baccou@normalesup.org",
            "sender_full_name": "Pierre-Yves Baccou (F'13)",
            "sender_id": 2865,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534877341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah that's true, and if I add a mutex then it won't be an issue if I decide to use this on multiple threads later... ah hell, I guess I'm just married to the idea of it being stateless, but it's not that big of a deal.  I guess I'll go that route.  Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132534744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534877400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Blargh I just realized, the user defined functions might take a while, so if I have two threads going they'll have to wait for each other to finish (and if one is holding a resource the other needs... that could lead to some sort of jam right?  I'm still pretty new to multithreading).  I suppose I could just use an array of function pointers though, and make each thread use it's own function pointer... bah screw it, I'm probably not going to use this in multiple threads anyway, hehe, I'll just jot all this down in a comment in the file, and if I decide to use it on multiple threads in the future I'll worry about it then.  Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132535508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534878201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You may want to look into <a href=\"https://en.wikipedia.org/wiki/Thread-local_storage\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Thread-local_storage\">Thread-local storage</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132535607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534878306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah sweet that's perfect!  I think I'll do what you suggested then Pierre, thanks guys!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132535819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534878561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I think I have a way to do this</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132538914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534882018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Without globals or TLS. I'll make an attempt once I get back home</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132538928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534882045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span> is architecture portability a requirement?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132539035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534882170,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>The common way I've seen for dealing with situations like this is the functions <code>lib1f</code> and <code>lib2f</code> would take an extra <code>arg</code> argument. That argument would be directly passed to <code>f</code>. This allows you to pass extra context to <code>f</code> that it wouldn't have otherwise. Since <code>lib1f</code> and <code>lib2f</code> don't take the extra <code>arg</code> argument, you instead have to pass the context through a global variable.</p>\n<p>You can see this pattern used in the <code>qsort_r</code>. It's a GNU extension. It provides the same interface as <code>qsort</code> except has an extra <code>arg</code> option which can be used to pass extra context to the <code>comparator</code> function: <a href=\"https://linux.die.net/man/3/qsort_r\" target=\"_blank\" title=\"https://linux.die.net/man/3/qsort_r\">https://linux.die.net/man/3/qsort_r</a>.</p>\n<p>This pattern is a way to emulate closures in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543042,
            "is_me_message": false,
            "last_edit_timestamp": 1534887107,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruoyi.lin@gmail.com",
                        "full_name": "Caroline Lin (S1'18)",
                        "id": 116367
                    },
                    "user_id": 116367
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "Eric@erdaniels.com",
                        "full_name": "Eric Daniels (he) (m5'18)",
                        "id": 125078
                    },
                    "user_id": 125078
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nelhage@nelhage.com",
                        "full_name": "Nelson Elhage",
                        "id": 100476
                    },
                    "user_id": 100476
                }
            ],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "website",
            "content": "<p>Instead of me writing it myself, Russ Cox's explanation of how golang does this is pretty good if you're fine sticking to a set of architectures : <a href=\"https://docs.google.com/document/d/1bMwCey-gmqZVTpRax-ESeVuZGmjwbocYs1iHplK-cjo/pub\" target=\"_blank\" title=\"https://docs.google.com/document/d/1bMwCey-gmqZVTpRax-ESeVuZGmjwbocYs1iHplK-cjo/pub\">https://docs.google.com/document/d/1bMwCey-gmqZVTpRax-ESeVuZGmjwbocYs1iHplK-cjo/pub</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "website",
            "content": "<p>agreed with <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (S1'15)</span> , if you owned the libraries, that would be an ideal solution.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (S1'15)</span>'s response is what I was going to say. I'm used to most mature C libraries that accept callbacks allowing you to also pass in a <code>void *</code> that the library will also give the callback. If there's no <code>void *</code> or similar, then all your options will be either architecture-specific or involve global/thread-local state.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I believe this is the relevant part of Russ Cox's explanation that Eric Daniels is referring to:</p>\n<blockquote>\n<p>In general a func literal value has two parts: a function that can be generated at compile time, and then some associated hidden arguments that are known at run time when the func literal expression is evaluated and its value saved. In order to match the calling convention expected for an indirect call of a func value, the current implementation uses run time-generated code that supplies the hidden arguments to a compile time-generated function body.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "website",
            "content": "<p>thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543335,
            "is_me_message": false,
            "last_edit_timestamp": 1534887439,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Go adopted the proposal in that doc and no longer uses codegen for this, but the option there relies on having control of the compiler's runtime data representations and semantics, which isn't available to you in C :))</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543419,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>To clarify, what I quoted is how Go use to do things. It now has a less hacky approach by representing closures as a (function, data) pair.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543490,
            "is_me_message": false,
            "last_edit_timestamp": 1534887617,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534887608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span> If you go with the global variable approach, you will have to make sure nothing modifies the global variable between when you set it and when <code>tf</code> calls it. There are situations where that can occur like if <code>lib2f</code> makes a call to <code>f</code> multiple times and <code>f</code> makes a call to <code>mergelibf</code>. The first <code>lib2f</code> call to <code>f</code> will call <code>mergelibf</code> which will change the global variable. Then the second <code>lib2f</code> call to <code>f</code> will now have a different value of the global variable since <code>mergelibf</code> changed it in between.</p>\n<p>In this case, <code>mergelibf</code> isn't necessary reentrant. i.e. A call to <code>mergelibf</code> that calls <code>mergelibf</code> may not be safe.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132543741,
            "is_me_message": false,
            "last_edit_timestamp": 1534888118,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534888007,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "website",
            "content": "<p>Right, the new golang way still requires assembly code if you wanted to do it within C. You could emulate the code, data pair approach though depending on the reentrancy requirements. You could have the data pointer in a predictable location in the stack that is set up prior to calling the first lib func.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132544124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534888668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dbfaba9f794e06717bee38c2b6f34a5a7fcf6bc3?x=x&version=2",
            "client": "website",
            "content": "<p>All being said, TLS is probably the cleanest approach if you have little control over the libraries. The TLS var can even be a stack/array if you need reentrancy.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132544193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "Eric@erdaniels.com",
            "sender_full_name": "Eric Daniels (he) (m5'18)",
            "sender_id": 125078,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534888739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>It is best to find a solution that does not involve global variables or function pointers - in my experience both cause you pain in the end. I am sorry I can\u2019t think of a good C recipe for your requirement. Maybe the original goal which lead you to this requirement can be met in a different way.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132551033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534898981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I actually do own the libraries... I was initially against the additional void* idea, because it'd be harder to implement given how the libraries work (in my actual code, the \"lib1\" function takes a pointer to a constant struct with a bunch of function pointers and then runs them in an endless loop, and the \"lib2\" takes a similar type of constant struct with function pointers, and I'd like my wrapper library to have the lib2 functions executed within one of the calls to the lib1 functions).  After reading what you guys have said, I'm thinking the best way to go may be to just alter the way \"lib1\" works... it'll make the code a little awkward to use if lib1 is used on it's own, but I'm probably never going to use it on it's own anyway.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132555443,
            "is_me_message": false,
            "last_edit_timestamp": 1534908472,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Combining two functions that take a function pointer",
            "submessages": [],
            "timestamp": 1534907256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>I saw this code today:</p>\n<p><code>#define RETURN_FALSE_IF(x) do { if (x) { return false; } } while (0)</code></p>\n<p>Shouldn't the do while be a NOP? Is this to try to get the compiler to emit some more efficient code, or something?</p>\n<p>If I change it to <code>if (x) { return false }</code>, there is a diff in the generated binary, but I haven't looked into what it is yet. If I plug it into godbolt, there is no difference, so I don't know why there is with our prod compiler (possibly I don't have the right optimization flags).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133068909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535644758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>(This code is C++, but posting here because it's valid C, so I don't think it's likely to be relevant)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133068996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535644817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>do {...} while (0)</code> is a common technique in writing C macros. It causes <code>RETURN_CALSE_IF(foo);</code> (note the semicolon) to be one statement instead of two. Specifically, it makes this code valid:</p>\n<div class=\"codehilite\"><pre><span></span>if (something)\n    RETURN_FALSE_IF(foo);\nelse\n    do_something_else;\n</pre></div>\n\n\n<p>Without the do-while, the semicolon would make that expand into invalid code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133069223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535645079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that\u2019s a pretty common construct within <code>define</code>. basically it allows you to put a <code>;</code> after the invocation like so: <code>RETURN_FALSE_IF(1);</code> while still just being one statement (which is important if you put it in a conditional without braces)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133069259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535645125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105228\">@Joey Marianer (m1'18)</span> jinx\u2019d me</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133069271,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@joeym.org",
                        "full_name": "Joey Marianer (he) (m1'18)",
                        "id": 105228
                    },
                    "user_id": 105228
                }
            ],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535645140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Ah, that make sense. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133069457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535645376,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/187931dc9ca73b56a4e014e6009c00a1?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you do decide to go down that rabbit-hole, I'd be curious as to what the difference is in the binary with and without the while. My (fake) money is on some optimization hijinks that go away if you compile with -O2 or something like that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133069669,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@joeym.org",
            "sender_full_name": "Joey Marianer (he) (m1'18)",
            "sender_id": 105228,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535645590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ae10295946402ccf3e7f7dd024cc2ab5?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>As a brief aside, GCC and clang support a \"statement-expression\" aside that solves this problem (and others) in a somewhat cleaner way. But the <code>do/while</code> hack is the portable approach.</p>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html\" target=\"_blank\" title=\"http://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html\">http://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133234159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nelhage@nelhage.com",
            "sender_full_name": "Nelson Elhage",
            "sender_id": 100476,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Why is this code like this",
            "submessages": [],
            "timestamp": 1535935903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all, I'm looking for general advice / thoughts on managing dependencies in C. I find this to be extremely frustrating.</p>\n<p>If you have a system lib, it \"just works\", like your compiler _is_ going to know where stdio.h is and how to link it, but \"installing\" some other library, just for example <a href=\"https://libusb.info/\" target=\"_blank\" title=\"https://libusb.info/\">https://libusb.info/</a>, just never seems to go right. </p>\n<p>I'm using nixos and that makes everything much more convoluted of course, but I've experienced this before. What is the \"right\" way to include an external dependency in a small C project? is my only option to dump it in <code>$PROJDIR/vendor/</code> and write a build script that passes the correct search paths to the compiler?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137027160,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541166689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>also this is tangentially related only I guess, but a <code>.hex</code> file is an intel hex file, and a <code>.elf</code> file is binary data with metadata about sections etc in it, right? and you can turn an elf into a hex, but is that lossy so you can't turn a hex into an elf? am I understanding this right? and of course you could convert a hex file into just a file of unencoded binary data or back, which is ultimately what ends up on the eprom on the chip?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137027807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541166850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's my take from a few months ago.  Basically, use Linux and record your dependencies with a tiny shell script.  This works well for small \"learning\" projects. </p>\n<p><a href=\"#narrow/stream/24319-C.2B.2B/subject/installing.20dependencies\" title=\"#narrow/stream/24319-C.2B.2B/subject/installing.20dependencies\">https://recurse.zulipchat.com/#narrow/stream/24319-C.2B.2B/subject/installing.20dependencies</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137041504,
            "is_me_message": false,
            "last_edit_timestamp": 1541170085,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541170054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> that actually feels a bit similar to a nix workflow where a <code>default.nix</code> file in the project root does the same thing as your script</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137052921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541172580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>with a lot more opaque magic of course</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137052954,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541172590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>now I'm fighting with avr-gcc not being able to find <code>-lm</code> or <code>-lc</code> and I just can't even</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137055315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541173106,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> I have some thoughts and experiences with this problem!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541353943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>C[++] does not have any native mechanism for managing dependencies.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541353988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>It has some standard heuristics for finding them when asked for.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541354012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>and some crude mechanisms for hinting or controlling how they're brought into the final binary executable that runs in memory on a computer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541354057,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>but those duties are split across several different systems and contexts. At compile time, it's controlled by the front-end of the compiler and the static linker. The compiler does things like parse the <code>#include</code> directives. In C++, possibly in C as well, paths that are enclosed with double quotes are meant to be rooted in the directory that contains the file including it (local headers), while paths enclosed with angle-brackets are meant to be rooted in the \"standard include path\", which is usually like <code>/usr/lib/include:/usr/local/lib/include:...</code>. When you're compiling and you wish to inform the compiler of other places to look, you can use the <code>-I/custom/include/path</code> to add new \"system\" paths.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541354335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Then there are the libraries that get brought in, like libm, or libc. Those are controlled at compile time by the static linker, and you can control that resolution a few different ways.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541354432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>By convention, when you're asking to link in a library statically (like you've invoked <code>gcc -static ....</code> or whatever), and you don't specify an absolute path, then you strip the name of library of any leading \"lib\", strip the version (unless you're asking for a particular one, which you probably are, but for illustration here) to make it as generic as possible by lopping off dotted tail components, and then ask the static linker to find it with that stripped name with the <code>-l</code> flag, and it will search the standard lib path (or \"LPATH\") for an archive that satisfies your request. The lib path is usually like <code>/usr/lib:/usr/local/lib:....</code> etc. You can search for some help flags to, eg, gcc to find out what its default LPATH is. You can control LPATH by setting that as an environment variable, but that sets it only to whatever you explicitly tell it to, OR, you can use the <code>-L</code> flag.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541354959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Concretizing that, if you want libm (which is the math library, because unix has dumb names), and you don't care what version, and you want the static linker to look in your homedir or something, you could do:</p>\n<p><code>gcc -static -L /home/jefffwiththreefsplustheoneafterthree/special-lib-dir -lm ...</code> (I imagine you have a real hard time telling people your username over the phone)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165718,
            "is_me_message": false,
            "last_edit_timestamp": 1541355473,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>the same resolution heuristics and conventions apply to specifying dynamic libs (\".so\" on linux, \".dynlib\" on os x, I think), which is the default. The static linker will verify that there's a lib there but it won't get inlined into the binary, unlike with a static lib.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165771,
            "is_me_message": false,
            "last_edit_timestamp": 1541358034,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>which brings us to LPATH's runtime friend, RPATH.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you can set that with <code>-R</code>; it will embed that path into the binary as a place to look for dynamic libs.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you can override the binary's built-in RPATH with our old friend <code>LD_PRELOAD</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165852,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>RPATH and LD_PRELOAD are inputs to the <em>dynamic linker</em>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>RPATH is set at compile time, LD_PRELOAD at runtime.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Anyway, the usual solution for ensuring dependency compatibility I've seen is for binaries to be built as statically as possible.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>nowadays, you can do docker or nix.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137165979,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>if you give an absolute path to <code>-l</code>, then you don't need to specify LPATH.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137166050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355707,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>because it will just look for the lib there (subject to satisfying version info).</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137166094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>So if you have a custom libm in <code>/home/jeff/dope-libs/libm.a</code>, you could grab it with <code>gcc -l/home/jeff/dope-libs/libm.a</code>. Note also that you leave all the filename bits intact.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137166158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541355905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Anyway, I think this is nearly a complete overview of the mechanisms and affordances. Let me know if you have any questions!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137166641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541356851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>djin:~&gt; cat foo.c\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char** argv) {\n  long x = powl(atoi(argv[1]), atoi(argv[2]));\n  printf(&quot;%li\\n&quot;, x);\n  return 0;\n}\ndjin:~&gt; gcc foo.c -lm\ndjin:~&gt; ldd a.out\n    linux-vdso.so.1 (0x00007ffdecf41000)\n    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4d1502f000)\n    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4d14c3e000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f4d155cf000)\ndjin:~&gt;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137167262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541358090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>HILARIOUSLY, I'm now finding myself unable to affect what versions of libm I'm picking up in that trivial program!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137167627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541358805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>also, here's an actually comprehensive guide to this, from 2003, because it hasn't really changed since then : <a href=\"http://tldp.org/HOWTO/Program-Library-HOWTO/index.html\" target=\"_blank\" title=\"http://tldp.org/HOWTO/Program-Library-HOWTO/index.html\">http://tldp.org/HOWTO/Program-Library-HOWTO/index.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 137170202,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541363785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9097\">@Joe Ardent (SP1'17)</span> thanks for that comprehensive response, I had no idea about RPATH. I think the thing I find most frustrating is how non-discoverable a lot of these mechanisms are just from reading <code>--help</code> and various, though all the information is there it's so opaque and lumped together with an alphabatized list of flags that do all sorts of things</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146787037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541413331,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f47c30352bcf26bb97f17f9ee3db944cf167e09b?x=x&version=2",
            "client": "website",
            "content": "<p>It doesn't solve all problems but pkg-config is often a useful for providing compiler flags for libraries.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146811297,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jeffowler@gmail.com",
                        "full_name": "Jeff Fowler (W'14)",
                        "id": 4998
                    },
                    "user_id": 4998
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 22639,
            "sender_email": "williamsykesfisher@gmail.com",
            "sender_full_name": "William Sykes Fisher (he) (F2'18)",
            "sender_id": 129933,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541439840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f47c30352bcf26bb97f17f9ee3db944cf167e09b?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>$ pkg-config --cflags --libs libusb-1.0\n-I/usr/include/libusb-1.0 -lusb-1.0\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146811345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "williamsykesfisher@gmail.com",
            "sender_full_name": "William Sykes Fisher (he) (F2'18)",
            "sender_id": 129933,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541439859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f47c30352bcf26bb97f17f9ee3db944cf167e09b?x=x&version=2",
            "client": "website",
            "content": "<p>Or with the compiler: <code>$ gcc example.c $(pkg-config --cflags --libs libusb-1.0)</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 146811378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "williamsykesfisher@gmail.com",
            "sender_full_name": "William Sykes Fisher (he) (F2'18)",
            "sender_id": 129933,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "lib paths",
            "submessages": [],
            "timestamp": 1541439926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c01fa66cd5fa025861dc065d5a18974f2806a9b3?x=x&version=5",
            "client": "ZulipElectron",
            "content": "<p>just FYI in case anyone was curious, I was struggling to do pointer arithmetic into multidimensional arrays (ugh). I figured I was stuck with that problem as the array was dynamically allocated. Turns out you can still use array indexing, this guide explains how in a really straightforward way <a href=\"https://www.eskimo.com/~scs/cclass/int/sx9b.html\" target=\"_blank\" title=\"https://www.eskimo.com/~scs/cclass/int/sx9b.html\">https://www.eskimo.com/~scs/cclass/int/sx9b.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 150886405,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mattg@leema.org",
                        "full_name": "Matthew Graham (he) (F1'18)",
                        "id": 125276
                    },
                    "user_id": 125276
                }
            ],
            "recipient_id": 22639,
            "sender_email": "avery.erwinmcguire@gmail.com",
            "sender_full_name": "Avery Erwin-McGuire (she) (S1'18)",
            "sender_id": 116351,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "multidimensional arrays",
            "submessages": [],
            "timestamp": 1543964039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is anyone aware of an open source Javascript/wasm based C compiler, that would allow me to make a webpage where a user can type C code in the browser, which is then compiled into web assembly and executed (all in-browser, without having to interact with a server)?  I know online C compilation webpages already exist (like <a href=\"http://godbolt.org\" target=\"_blank\" title=\"http://godbolt.org\">godbolt.org</a> ), but I don't know if they're doing the compilation in-browser or if they're sending the code to a server (which either compiles it and runs it natively and returns the output, or compiles it to wasm and returns that?).</p>\n<p>After five minutes of searching I can't find anything like this, and Emscripten is a goddamn beast (it's nearly a gig on my harddrive), so I'm wondering if a browser-based compiler like this wouldn't even be feasible atm.  Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152521567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Javascript-based C compiler?",
            "submessages": [],
            "timestamp": 1545765932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span> I believe most such services run server-side:</p>\n<ul>\n<li><a href=\"http://godbolt.org\" target=\"_blank\" title=\"http://godbolt.org\">godbolt.org</a> runs a node.js back end calling out to the actual compilers on cloud VMs.  There are some details in these recorded presentations:</li>\n</ul>\n<p><a href=\"https://www.youtube.com/playlist?list=PL2HVqYf7If8dNYVN6ayjB06FPyhHCcnhG\" target=\"_blank\" title=\"https://www.youtube.com/playlist?list=PL2HVqYf7If8dNYVN6ayjB06FPyhHCcnhG\">https://www.youtube.com/playlist?list=PL2HVqYf7If8dNYVN6ayjB06FPyhHCcnhG</a></p>\n<ul>\n<li>I read over most of the blog for replit, which is an impressive service that includes C and C++ compilers.  They also run a pretty heavy back end on AWS, with containers and so forth.</li>\n</ul>\n<p><a href=\"https://repl.it/site/blog/aws-simple-guide\" target=\"_blank\" title=\"https://repl.it/site/blog/aws-simple-guide\">https://repl.it/site/blog/aws-simple-guide</a></p>\n<p>IIRC, they said they started out with Emscripten compiled with Emscripten in the browser?  This was like 2011 era.  But I think that is was slow or big.  I don't recall the details.</p>\n<p>In any case, I think doing it in the browser is pretty hard, and most people do it on the server.  If you didn't have the WebAssembly requirement, I would suggest compiling something like tcc to JavaScript/WebAssembly with Emscripten, because it's small.  But tcc doesn't generate WebAssembly.</p>\n<p>Hope that helps!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152580018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Javascript-based C compiler?",
            "submessages": [],
            "timestamp": 1545875313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would using Emscripten (once) to compile a C interpreter be an option? I've never used a C interpreter, though (depending on your use case something like picoc might be enough, according to Google, but I can't vouch for that).</p>\n<p>Also, <a href=\"https://github.com/felixhao28/JSCPP\" target=\"_blank\" title=\"https://github.com/felixhao28/JSCPP\">https://github.com/felixhao28/JSCPP</a> is an interpreter for a subset of C++, written in JavaScript, so maybe you can do without Emscripten.</p>\n<p>If compiling is the preferred option, then maybe the compiling-Emscripten-to-WebAssembly route isn't as bandwidth-heavy as it sounds at first. <a href=\"https://kripken.github.io/clangor/demo.html\" target=\"_blank\" title=\"https://kripken.github.io/clangor/demo.html\">https://kripken.github.io/clangor/demo.html</a> plus <a href=\"https://kripken.github.io/llvm.js/demo.html\" target=\"_blank\" title=\"https://kripken.github.io/llvm.js/demo.html\">https://kripken.github.io/llvm.js/demo.html</a> together are 70MB of non-minified asm.js.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152580522,
            "is_me_message": false,
            "last_edit_timestamp": 1545879005,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Javascript-based C compiler?",
            "submessages": [],
            "timestamp": 1545876368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the replies guys!  I didn't even know C interpreter's were a thing; that might work, I'll have to look into that.  <br>\nI suppose it wouldn't need to be compiled to wasm, as long as it's able to somehow call outside functions from a library that's been compiled to wasm.  Basically,  I'm thinking of making a series of tutorials which teach game programming concepts, and I'd like to have interactive demonstrations where a user could write C code in their browser (which would call graphics routines and input handling functions from a library I've compiled to wasm in advance), and then the user could see what their code does immediately in the browser.  It'd be sort of like the interactive demos I've got on <a href=\"http://www.andrewdesharnais.com/test/graphics/translations.html\" target=\"_blank\" title=\"http://www.andrewdesharnais.com/test/graphics/translations.html\">this page</a>, but with C instead of JavaScript.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 152615840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Javascript-based C compiler?",
            "submessages": [],
            "timestamp": 1545937640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e16d91c3e9f167feb3f057a2c54e9750?d=identicon&version=1",
            "client": "website",
            "content": "<p>as per <span class=\"user-mention\" data-user-id=\"811\">@Nick Bergson-Shilcock</span> 's request:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160828494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "m.bionchik@gmail.com",
            "sender_full_name": "Mike Bionchi (W2'16)",
            "sender_id": 8974,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552602285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e16d91c3e9f167feb3f057a2c54e9750?d=identicon&version=1",
            "client": "website",
            "content": "<p>sources here: <a href=\"https://github.com/mbionchi/telnet-site\" target=\"_blank\" title=\"https://github.com/mbionchi/telnet-site\">https://github.com/mbionchi/telnet-site</a><br>\nlive demo here: <a href=\"http://escape-sequence.net\" target=\"_blank\" title=\"http://escape-sequence.net\">escape-sequence.net</a> port 4444</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160828514,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f41a",
                    "emoji_name": "seashell",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                },
                {
                    "emoji_code": "1f578",
                    "emoji_name": "spider_web",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "karthik.188@gmail.com",
                        "full_name": "Karthik Nayak (he) (W2'19)",
                        "id": 158588
                    },
                    "user_id": 158588
                },
                {
                    "emoji_code": "1f578",
                    "emoji_name": "spider_web",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aissam.belhachmi@gmail.com",
                        "full_name": "Aissam Belhachmi (he) (F1'16)",
                        "id": 100040
                    },
                    "user_id": 100040
                },
                {
                    "emoji_code": "1f41a",
                    "emoji_name": "seashell",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "web@stillinbeta.com",
                        "full_name": "Liz Frost (she) (SP1'19)",
                        "id": 203700
                    },
                    "user_id": 203700
                },
                {
                    "emoji_code": "1f578",
                    "emoji_name": "spider_web",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                },
                {
                    "emoji_code": "1f5fa",
                    "emoji_name": "world_map",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 22639,
            "sender_email": "m.bionchik@gmail.com",
            "sender_full_name": "Mike Bionchi (W2'16)",
            "sender_id": 8974,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552602309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e16d91c3e9f167feb3f057a2c54e9750?d=identicon&version=1",
            "client": "website",
            "content": "<p>to connect, type in your favorite terminal: <code>telnet escape-sequence.net 4444</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160828526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "m.bionchik@gmail.com",
            "sender_full_name": "Mike Bionchi (W2'16)",
            "sender_id": 8974,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552602334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"8974\">@Mike Bionchik (W2'16)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160831746,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552605132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>This was great fun to log into and poke around :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160831914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552605304,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"8974\">@Mike Bionchik (W2'16)</span> you should <a href=\"http://joy.recurse.com/posts/new\" target=\"_blank\" title=\"http://joy.recurse.com/posts/new\">submit this to Joy of Computing</a>! :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160884102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552662969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e16d91c3e9f167feb3f057a2c54e9750?d=identicon&version=1",
            "client": "website",
            "content": "<p>A few people suggested some interesting features last night -- I will after implementing them. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160903105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "m.bionchik@gmail.com",
            "sender_full_name": "Mike Bionchi (W2'16)",
            "sender_id": 8974,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552676099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I love it, but the only control that worked for me was 'q'</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160904092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "i wrote a telnet site!",
            "submessages": [],
            "timestamp": 1552676785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2a23c123a06d38add911cf6b4e97b0e2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey, it might be pretty awesome to write some C programs that will run on some of the legacy computers downstairs - the biggest obstacle might be getting a floppy disk reader/writer in this day and age. :D</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162552898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "shanti@shanti.im",
            "sender_full_name": "Shanti Chellaram (she) (SP2'19)",
            "sender_id": 215332,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554401991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c4af750426d3bf0c15347009913c0323596658f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215332\">@Shanti Chellaram (SP2'19)</span> I am... pretty sure my dad might still have his <span aria-label=\"no mouth\" class=\"emoji emoji-1f636\" role=\"img\" title=\"no mouth\">:no_mouth:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162553035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "katelaurel@gmail.com",
            "sender_full_name": "Kate-Laurel Agnew (she) (SP2'19)",
            "sender_id": 215254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554402048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9c4af750426d3bf0c15347009913c0323596658f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>also (slightly off-topic) : I'm up for taking a break from my current stuff to pair on C whenever anyone's interested.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162553086,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                }
            ],
            "recipient_id": 22639,
            "sender_email": "katelaurel@gmail.com",
            "sender_full_name": "Kate-Laurel Agnew (she) (SP2'19)",
            "sender_id": 215254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554402081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e7e052a001d4b99e3852711d2d115f67?d=identicon&version=1",
            "client": "website",
            "content": "<p>Am up for writing some C/C++ programs. Am not able to pair today though as am trying to finish up some work. I have been been hanging around the linux kernel codebase trying to investigate race conditions there. I have written a fix for one I found there. Its quite interesting stuff to do while polishing my C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162554079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nanjekyejoannah@gmail.com",
            "sender_full_name": "Joannah Nanjekye (she) (SP2'19)",
            "sender_id": 216353,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554402580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162554659,
            "is_me_message": false,
            "last_edit_timestamp": 1605719643,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554402933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes! Recursers have even written specialized programs to get code onto the Apple II via the audio port: <a href=\"http://blog.nullspace.io/apple-2-lisp-part-1.html\" target=\"_blank\" title=\"http://blog.nullspace.io/apple-2-lisp-part-1.html\">http://blog.nullspace.io/apple-2-lisp-part-1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162554865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554403053,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/858a58fe0743232a7c917e5efdeb219900894b4e?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I think <span class=\"user-mention\" data-user-id=\"134387\">@Alan Chu (SP2'19)</span>  is interested in programming in C too</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162555374,
            "is_me_message": false,
            "last_edit_timestamp": 1554403710,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "joe@mou.fo",
            "sender_full_name": "Joe Mou (he) (SP1'19)",
            "sender_id": 204428,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554403388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162556564,
            "is_me_message": false,
            "last_edit_timestamp": 1554404090,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554404073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71197eae9ccbfe8bac564b94ff51a368f091b337?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I'm interested in learning C.  Going to attempt some advent of code and simple basic structures in C  :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162563457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alancodes@gmail.com",
            "sender_full_name": "Alan Chu (he) (SP2'19)",
            "sender_id": 134387,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554408586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"101701\">@Raph Levien (F1'17)</span> (not subscribed to this stream) here as he did a lot of work on this!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162641182,
            "is_me_message": false,
            "last_edit_timestamp": 1554484444,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554484427,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71197eae9ccbfe8bac564b94ff51a368f091b337?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"216115\">@Brandon Hopkins (SP2'19)</span>  as I think he might also be interested!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162644770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "alancodes@gmail.com",
            "sender_full_name": "Alan Chu (he) (SP2'19)",
            "sender_id": 134387,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554486729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e53f7dbb47c94693d5ecb4059df20f05?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, I'm interested! But have no idea where to even begin... Let me know if y'all are going to try this.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162645966,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "katelaurel@gmail.com",
                        "full_name": "Kate-Laurel Agnew (she) (SP2'19)",
                        "id": 215254
                    },
                    "user_id": 215254
                }
            ],
            "recipient_id": 22639,
            "sender_email": "brhpkns@gmail.com",
            "sender_full_name": "Brandon Hopkins (he) (SP2'19)",
            "sender_id": 216115,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "apple II",
            "submessages": [],
            "timestamp": 1554487546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/555d9fc8b9f9a919e308a050961eced4?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on an embedded platform where I need to temporarily disable system-wide interrupts during certain actions (those that speak to time-sensitive peripherals). At present I:<br>\n1. save the state of the IRQ masks<br>\n2. disable interrupts<br>\n3. call the uninterruptable code<br>\n4. reactivate the IRQs, applying the saved mask (to handle any queued interrupts)<br>\nIt looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>int myfn( int arg )\n{\n    int error = 0;\n    { // scoping the old_primask variable\n        uint32_t old_primask = __get_PRIMASK();\n        __disable_irq();\n\n        if( sensitive_function( arg ) ){ error = 1; }\n\n        __set_PRIMASK( old_primask );\n    }\n    return error;\n}\n</pre></div>\n\n\n<p>What I'd like to do is convert this wrapping of an IRQ sensitive function call into a macro called <code>BLOCK_IRQS</code> something like this:</p>\n<div class=\"codehilite\"><pre><span></span>int myfn( int arg )\n{\n    int error = 0;\n    BLOCK_IRQS(\n        if( sensitive_function( arg ) ){ error = 1; }\n    )\n    return error;\n}\n</pre></div>\n\n\n<p>Which leads to a macro something like:</p>\n<div class=\"codehilite\"><pre><span></span>#define BLOCK_IRQS(code) do{ \\\n                            uint32_t old_primask = __get_PRIMASK(); \\\n                            __disable_irq(); \\\n                            code \\\n                            __set_PRIMASK( old_primask ); \\\n                        } while(0);\n</pre></div>\n\n\n<p>As with all things C-macros, I'm worried about unintended consequences! Any wisdom on if there's a better way to implement such a behaviour would be much appreciated!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164410166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "trent.gill@gmail.com",
            "sender_full_name": "Trent Gill (he) (SP2'17)",
            "sender_id": 100932,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Wrapping code with macros",
            "submessages": [],
            "timestamp": 1556489736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i\u2019m not quite sure of all of the possible consequences of this, but one thing that i\u2019d definitely do just to be sure would be to wrap <code>code</code> in a block of its own (maybe using the <code>do { ... } while(0);</code> style you\u2019re using anyway)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164440092,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f6e0",
                    "emoji_name": "working_on_it",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Wrapping code with macros",
            "submessages": [],
            "timestamp": 1556533006,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>I think you checked all the right boxes for as far as C macros as concerned! I'd say it's a good thing to still have that icky feeling when using a macro, even when they look fine :P</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 164590133,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f922",
                    "emoji_name": "nauseated",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "trent.gill@gmail.com",
                        "full_name": "Trent Gill (he) (SP2'17)",
                        "id": 100932
                    },
                    "user_id": 100932
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Wrapping code with macros",
            "submessages": [],
            "timestamp": 1556671679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>is the size of a struct without members truly <code>0</code>\u2014as <code>sizeof</code> tells me? i\u2019m asking because carp (a language i\u2019m working on that compiles to c), will sometimes sue empty structs for various use cases, and i\u2019m thinking whether they could be use for enum-like behaviours.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165567862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557780651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(please tell me if that was unclear and/or obtuse and how to expand on that)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165567884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557780668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Apparently <a href=\"https://stackoverflow.com/questions/3849334/sizeof-empty-structure-is-0-in-c-and-1-in-c-why\" target=\"_blank\" title=\"https://stackoverflow.com/questions/3849334/sizeof-empty-structure-is-0-in-c-and-1-in-c-why\">it is undefined behaviour in C to have a struct with no members</a>! <br>\nIn C++ it is allowed, but the size will always be at least 1 (because the addresses of two difference objects need to be different as per the C++ standard)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165568484,
            "is_me_message": false,
            "last_edit_timestamp": 1557781095,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557781085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p>If you want inspiration from Zig, it handles structs without members truly as 0, and  emits no-ops for usage of it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165571315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557783194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://ziglang.org/documentation/master/#Zero-Bit-Types\" target=\"_blank\" title=\"https://ziglang.org/documentation/master/#Zero-Bit-Types\">https://ziglang.org/documentation/master/#Zero-Bit-Types</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165571352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557783240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>thanks! but we\u2019re compiling to c instead of cooperating, sadly</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165581439,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557793061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>that\u2019s a bummer, because what we emit for our maybe type relies on that, for instance.</p>\n<p>maybe is defined like this in carp:</p>\n<div class=\"codehilite\"><pre><span></span>(deftype (Maybe a)\n  (Just [a])\n  (Nothing []))\n</pre></div>\n\n\n<p>and it emits this (specialized for ints in this case):</p>\n<div class=\"codehilite\"><pre><span></span>typedef struct {\n    union {\n    struct {\n        int member0;\n    } Just;\n    struct {\n    } Nothing;\n    };\n    char _tag;\n} Maybe__int;\n#define Maybe__int_Just_tag 0\n#define Maybe__int_Nothing_tag 1\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165581551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557793178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>which makes sense in this case, but also kind of sucks if its ub</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165581627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557793243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2a23c123a06d38add911cf6b4e97b0e2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, it just needs to be as small as the smallest type in the union, right?</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165584447,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "shanti@shanti.im",
            "sender_full_name": "Shanti Chellaram (she) (SP2'19)",
            "sender_id": 215332,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557796877,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2a23c123a06d38add911cf6b4e97b0e2?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might want to structure it this way instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">union</span> <span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">_tag</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">member0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"n\">Just</span><span class=\"p\">;</span>\n  <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">_tag</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"n\">Nothing</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Maybe__int</span><span class=\"p\">;</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165584714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "shanti@shanti.im",
            "sender_full_name": "Shanti Chellaram (she) (SP2'19)",
            "sender_id": 215332,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557797320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2a23c123a06d38add911cf6b4e97b0e2?d=identicon&version=1",
            "client": "website",
            "content": "<p>according to C99 Section <a href=\"http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf\">6.5.2.3.5</a></p>\n<blockquote>\n<p>One special guarantee is made in order to simplify the use of unions: if a union contains<br>\nseveral structures that share a common initial sequence (see below), and if the union<br>\nobject currently contains one of these structures, it is permitted to inspect the common<br>\ninitial part of any of them anywhere that a declaration of the complete type of the union is<br>\nvisible. Two structures share a common initial sequence if corresponding members have<br>\ncompatible types (and, for bit-fields, the same widths) for a sequence of one or more<br>\ninitial members.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165584796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "shanti@shanti.im",
            "sender_full_name": "Shanti Chellaram (she) (SP2'19)",
            "sender_id": 215332,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557797448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215332\">@Shanti Chellaram (SP2'19)</span> thats pretty neat! i think we should probably go with that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165611012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557830332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>actually, i found a better solution. we were already special-casing types with exclusively empty members cases, and i just had to generaluze that. that just prunes all the empty cases, but leaves the tag</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165613803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557833139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1920d37780c9a711b0030870b0c726098e0efb10?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> does it compile to portable C or target a specific compiler?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165653006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "superjoe30@gmail.com",
            "sender_full_name": "Andrew Kelley (he) (SP1'17)",
            "sender_id": 2911,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557861593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2911\">@Andrew Kelley (SP1'17)</span> it compiles to portable c, or at least tries to :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165660630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "size of structs without members",
            "submessages": [],
            "timestamp": 1557866839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9285e36f75f9742ae56a71f3af3bf460badd8c11?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does anyone know a good way to debug with C on a mac? I've tried GDB (<code>Unable to find Mach task port for process-id 5621: (os/kern) failure (0x5).</code>) and SublimeGDB (can't figure out how to use it)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166277801,
            "is_me_message": false,
            "last_edit_timestamp": 1558538259,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ngozi.n.nwogwugwu@gmail.com",
            "sender_full_name": "Ngozi Nwogwugwu (she) (SP2'19)",
            "sender_id": 215979,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558538251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9285e36f75f9742ae56a71f3af3bf460badd8c11?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The next thing I want to try is to make a docker container that _isn't_ on macOS, but if someone knows a better way, I'd love to hear it!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166277894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ngozi.n.nwogwugwu@gmail.com",
            "sender_full_name": "Ngozi Nwogwugwu (she) (SP2'19)",
            "sender_id": 215979,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558538289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>have you tried <code>lldb</code>, that should come with xcode and clang. Getting gdb to work on new macs is a huge pain because of system integrity protection.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166278204,
            "is_me_message": false,
            "last_edit_timestamp": 1558665081,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558538482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9285e36f75f9742ae56a71f3af3bf460badd8c11?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Really? I'll give lldb a try. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166278445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ngozi.n.nwogwugwu@gmail.com",
            "sender_full_name": "Ngozi Nwogwugwu (she) (SP2'19)",
            "sender_id": 215979,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558538592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/9285e36f75f9742ae56a71f3af3bf460badd8c11?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey! lldb is great! Thanks for the suggestion, <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Jonathan Goldbaum (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166283905,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "peter@push.cx",
                        "full_name": "Peter Bhat Harkins (he) (F2'17)",
                        "id": 102004
                    },
                    "user_id": 102004
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ngozi.n.nwogwugwu@gmail.com",
            "sender_full_name": "Ngozi Nwogwugwu (she) (SP2'19)",
            "sender_id": 215979,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558541817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it is possible to codesign gdb, and thereby satisfy the security constraint, but I have never gotten it to work and am no longer using mac...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166405066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558649748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8651a8565e010cd3aebcd360badf2a92?d=identicon&version=1",
            "client": "website",
            "content": "<p>If for some reason you really want to use gdb (there are plugins and extensions and such that are useful if you are doing low-level debugging)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166405119,
            "is_me_message": false,
            "last_edit_timestamp": 1558649804,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "e.alexander.segura@gmail.com",
            "sender_full_name": "Alex Segura (SP1'19)",
            "sender_id": 2899,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1558649773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ad0a2dd3306606ccbd235ecca26f9c64?d=identicon&version=1",
            "client": "website",
            "content": "<p>hio,<br>\nI'd like a C compiler that emits only a reduced set of x86 instructions (32bit), and I figured the easiest way to go about it would be to change the backend of one of the myriads of C compilers already out there. Is anybody aware of a compiler where that would be very simple to do? I looked into the Tiny C Compiler (<a href=\"https://github.com/TinyCC/tinycc/blob/dev/i386-gen.c\" target=\"_blank\" title=\"https://github.com/TinyCC/tinycc/blob/dev/i386-gen.c\">https://github.com/TinyCC/tinycc/blob/dev/i386-gen.c</a>), but that code is a bit messy, and not quite as short as I expected.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169610866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ant6nd@gmail.com",
            "sender_full_name": "Ant6n Dubrau (W2'17)",
            "sender_id": 100465,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562198009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you familiar with LLVM? I'm not sure how well the codegen part is documented but it looks like it's not a total ghost-town, ie, there's <a href=\"https://llvm.org/docs/WritingAnLLVMBackend.html\" target=\"_blank\" title=\"https://llvm.org/docs/WritingAnLLVMBackend.html\">tutorial</a> on writing a custom backend. </p>\n<p>It's probably not the friendliest option but it might not be terrible. I've got some experience working with LLVM in general &amp; the backend of LLVM in particular, so I'm happy to talk more about either if that'd be helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169611124,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562198377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/af4823dc0c1278b09771a37fca3a75a0562dcb3b?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, the old <a href=\"https://github.com/huangguiyang/plan9-cc\" target=\"_blank\" title=\"https://github.com/huangguiyang/plan9-cc\">plan 9 suite</a> might be worth a look, though it is very terse R&amp;D C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169615259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ertel.chris@gmail.com",
            "sender_full_name": "Christopher Ray Ertel (he) (S1'19)",
            "sender_id": 221817,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562205531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>heh; it took me a sec to realize you meant <a href=\"https://www.sanfoundry.com/difference-between-ansi-c-knr-c/\" target=\"_blank\" title=\"https://www.sanfoundry.com/difference-between-ansi-c-knr-c/\">\"K&amp;R C\"</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169632524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562231971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/af4823dc0c1278b09771a37fca3a75a0562dcb3b?x=x&version=2",
            "client": "website",
            "content": "<p>Well, I think of it more as \"practical C from an org performing R&amp;D\". :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169660158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ertel.chris@gmail.com",
            "sender_full_name": "Christopher Ray Ertel (he) (S1'19)",
            "sender_id": 221817,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562258712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/82951f8ff0d983b6c1fac73bf0e8416c?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Echoing the plan 9 suggestion. It's terse but well written. Also highly portable</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 169661843,
            "is_me_message": false,
            "last_edit_timestamp": 1562260771,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ben@brittain.org",
            "sender_full_name": "Benjamin Brittain (he) (S'12)",
            "sender_id": 873,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1562260762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"215979\">@Ngozi Nwogwugwu (she) (SP2'19)</span> Are you still looking for an answer? I spent an unbelievable amount of time trying to code sign gdb on mac and I really don't think it's possible anymore.  I really needed it for a compiler I'm working on. </p>\n<p>lldb UI is really awful and the TUI kept crashing on me again and again. </p>\n<p>I eventually switched to gdb in Docker, but I really missed the GUI integration with Emacs which I really love. Luckily I figured out very recently that gdb comes with a remote protocol out of the box! You might be able to run gdbserver in docker and still use whatever GDB UI you like locally! </p>\n<p>I wrote some docs on how to do this just last week. <a href=\"https://github.com/jaseemabid/inc#debugging-with-gdb\" target=\"_blank\" title=\"https://github.com/jaseemabid/inc#debugging-with-gdb\">https://github.com/jaseemabid/inc#debugging-with-gdb</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175428641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1568207022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Instead of codesigning gdb (which I was also never able to get working), you can also disable SIP.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175435039,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                }
            ],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1568210677,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I did that in order to get dtrace to work, but getting gdb was a nice side effect.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 175435072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "debugging C on a mac?",
            "submessages": [],
            "timestamp": 1568210701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ad0a2dd3306606ccbd235ecca26f9c64?d=identicon&version=1",
            "client": "website",
            "content": "<p>I came across a compiler framework including C which is written in python, with one focus on making it easy to create new backends: <a href=\"https://bitbucket.org/windel/ppci\" target=\"_blank\" title=\"https://bitbucket.org/windel/ppci\">https://bitbucket.org/windel/ppci</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 176428127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ant6nd@gmail.com",
            "sender_full_name": "Ant6n Dubrau (W2'17)",
            "sender_id": 100465,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "compiler with a easily modifiable codegen?",
            "submessages": [],
            "timestamp": 1569293674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hoping that someone here might have input on something I'm trying to figure out.</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n#include &quot;local_1.h&quot;\n#include &quot;local_2.h&quot;\n\nvoid some_func() {\n    func_from_local_1();\n}\n\nvoid some_other_func() {\n    func_from_local_2();\n}\n\nint main (int argc, char **argv) {\n    some_func();\n    some_other_func();\n    return 0;\n}\n</pre></div>\n\n\n<p>Basically, I have a main.c that includes functions from a few .h files. Currently I have a makefile that compiles all of this into an executable. </p>\n<p>I want to instead of compiling, add all those functions used (and only those functions/their helpers needed for compilation) to the main.c file.</p>\n<p>End result would be something like:</p>\n<div class=\"codehilite\"><pre><span></span>#include &lt;stdio.h&gt;\n\n\nvoid some_helper_func() {\n\n}\n\nvoid func_from_local_1() {\n    some_helper_func()\n}\n\nvoid func_from_local_2() {\n    some_helper_func()\n}\n\nvoid some_func() {\n    func_from_local_1();\n}\n\nvoid some_other_func() {\n    func_from_local_2();\n}\n\nint main (int argc, char **argv) {\n    some_func();\n    some_other_func();\n    return 0;\n}\n</pre></div>\n\n\n<p>The closet thing I've seen is <a href=\"https://www.sqlite.org/amalgamation.html\" target=\"_blank\" title=\"https://www.sqlite.org/amalgamation.html\">https://www.sqlite.org/amalgamation.html</a> which is created by this makefile command <a href=\"https://github.com/mackyle/sqlite/blob/master/Makefile.in#L750\" target=\"_blank\" title=\"https://github.com/mackyle/sqlite/blob/master/Makefile.in#L750\">https://github.com/mackyle/sqlite/blob/master/Makefile.in#L750</a> using <a href=\"https://github.com/mackyle/sqlite/blob/master/tool/mksqlite3c.tcl\" target=\"_blank\" title=\"https://github.com/mackyle/sqlite/blob/master/tool/mksqlite3c.tcl\">https://github.com/mackyle/sqlite/blob/master/tool/mksqlite3c.tcl</a>. The biggest difference here is that as far as I can tell this script concats every function, I only want whatever is being used by my main.</p>\n<p>Any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179139501,
            "is_me_message": false,
            "last_edit_timestamp": 1572120623,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572120407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>this doesn't seem like a good idea -- can you talk more about why you want this?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179144436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572129568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's unlikely you'd find a tool that does this, and I think it would be challenging to create one because the compiler is the only tool that really knows how to determine which functions are used where, and the thing you're asking for is not a function the compiler has.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179144497,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572129679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>It may not be a good idea- use case was basically educational to show someone who doesn't know C exactly what functions are going into the binary and put them in one place.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179147951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572136954,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>ahh, I see</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179147965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, one thing you can do is to let the compiler and linker generate the binary, then use tools that operate directly on the binary to get the list of functions that were included</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>you might be surprised though -- depending on your compiler/linker settings, there are likely to be functions present that you didn't call</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148008,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting, whats a tool that would examine a binary like this?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess that solution isn't perfect because it may not show functions that are 'static' or otherwise do not have external linkage</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>the tool I normally use is \"nm\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>on OS X, \"nm -U binary\" will show all the functions defined in 'binary' that are in the symbol table (which may be mostly empty for system binaries, which are stripped to reduce size)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh, also -- if you're actually compiling as C++ rather than C, you will see mangled names with type information encoded in them. In C you will see the original function names.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61a5effebbad27a89955428726bd527a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, just started playing around with nm looks like it can be an easier solution for what I was trying to do- really appreciate it!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148287,
            "is_me_message": false,
            "last_edit_timestamp": 1572137670,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "michaelzaneri@gmail.com",
            "sender_full_name": "Mike Zaneri (SP1'19)",
            "sender_id": 203453,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572137650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c97a0d7ab8eb6034a735e9788ecc8af9?d=identicon&version=1",
            "client": "website",
            "content": "<p>you're welcome, glad I could be helpful!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179148576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "gwillen@nerdnet.org",
            "sender_full_name": "Glenn Willen (he) (F1'19)",
            "sender_id": 234254,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572138307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I want to write a tool like this for Rust: include the minimal transitive lexical closure of all source dependencies in a single module.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179188532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572212942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9097\">@Joe Ardent (he) (SP1'17)</span> I want you to as well! Please let me know when you are ready for beta testers = )</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179189909,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 22639,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572215282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>You might be interested in how sqlite does it:</p>\n<p><a href=\"https://www.sqlite.org/amalgamation.html\" target=\"_blank\" title=\"https://www.sqlite.org/amalgamation.html\">https://www.sqlite.org/amalgamation.html</a></p>\n<p>It can also make the code faster!</p>\n<blockquote>\n<p>Combining all the code for SQLite into one big file makes SQLite easier to deploy \u2014 there is just one file to keep track of. And because all code is in a single translation unit, compilers can do better inter-procedure optimization resulting in machine code that is between 5% and 10% faster. </p>\n</blockquote>\n<p>Tcl script to make it:</p>\n<p><a href=\"https://www.sqlite.org/src/artifact/5fed3d75069d8f66\" target=\"_blank\" title=\"https://www.sqlite.org/src/artifact/5fed3d75069d8f66\">https://www.sqlite.org/src/artifact/5fed3d75069d8f66</a></p>\n<p>I haven't looked at how it works, but I might do something like this for <a href=\"https://www.oilshell.org/\" target=\"_blank\" title=\"https://www.oilshell.org/\">https://www.oilshell.org/</a></p>\n<p>It involves a lot of code generation just like SQLite does (e.g. for its parser generator, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179196754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572227995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<hr>\n<p>Oops, I linked the exact thing you did!  Sorry I didn't scroll down to below the quoted code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179196863,
            "is_me_message": false,
            "last_edit_timestamp": 1572228172,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572228162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing to keep in mind is that you'll probably want to redeclare these functions as static once you've done this, to give the compiler the most help possible.  OTOH modern optimizing compilers on suitable optimization levels are pretty aggressive; especially if you do link-time optimization, this may be unimportant.</p>\n<p>If the goal is primarily pedagogical and we're talking about small programs, it might be sufficient to modify a tags program like <code>ctags</code> or maybe even script something like <code>cscope</code> to do the \"refactoring\" for you.</p>\n<p>Alternately, if you concat everything, make all the functions except <code>main</code> static, and then turn on the right warnings (should be enabled by <code>-Wall -Wextra</code> on a modern gcc), your compiler should tell you exactly which functions are unused.</p>\n<p>On GNU platforms, <code>objdump</code> has a lot of nice features for inspecting binaries, particularly if you compiled with lots of DWARF information.  For sufficiently trivial programs compiled without optimization, there might even be an invocation of <code>objdump -S</code> that produces the source code you want!  (Entertaining, but not a recommended general strategy!)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179395487,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Script to add all functions to one .c file?",
            "submessages": [],
            "timestamp": 1572399557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm a bit new to writing C and I'm currently trying to write a basic version of <code>wzip</code> and I'm stuck on a few parts. Would really appreciate some rubber ducking / advice from anyone with C experience. LMK if anyone has time to pair today</p>\n<p>Update: </p>\n<p>ok I think I'm good. So my main goal was to have a program <code>wzip</code> that takes in multiple files and perform run length encoding on the streams as if they all belonged to a _single_ file. I had this working for a single file but when I passed in multiple files I got the encoding for _each_ file (I just wanted one for all of them). </p>\n<p>At first I was trying to find a way to read multiple files into a single buffer but that wasn't working + seemed weird to do. Then I went the route of creating a array of buffers (one for each file) and while that was fine it just seemed wasteful. </p>\n<p>It just occurred to me that I don't need to save the contents of all the files in the buffer... I should just continue reading one file at a time and just fix the bug in my run length encoding function to not reset for every new file...</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 181570892,
            "is_me_message": false,
            "last_edit_timestamp": 1574367782,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "could use some help with a C utility",
            "submessages": [],
            "timestamp": 1574361451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>Just FYI. I'm very excited about it, too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197950062,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "perezv815@gmail.com",
                        "full_name": "Vincent Perez (F2'19)",
                        "id": 240629
                    },
                    "user_id": 240629
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ori@eigenstate.org",
                        "full_name": "Ori Dean Bernstein (he) (W2'20)",
                        "id": 255045
                    },
                    "user_id": 255045
                },
                {
                    "emoji_code": "2763",
                    "emoji_name": "heart_exclamation",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tedroden@gmail.com",
                        "full_name": "Ted Roden (he) (S1'20)",
                        "id": 301217
                    },
                    "user_id": 301217
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "maxwellp777@gmail.com",
                        "full_name": "Maxwell Pollack (they) (S2'19)",
                        "id": 228530
                    },
                    "user_id": 228530
                }
            ],
            "recipient_id": 22639,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "I'm getting re-acquainted with C",
            "submessages": [],
            "timestamp": 1589815232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey :)<br>\nI'm preparing for a job interview at a game company that's going to require very good knowledge of C.<br>\nAnyone have resources for practicing C such as problem sets or small projects?</p>\n<p>I'm currently going through \"C Programming: A Modern Approach\" and doing some of the exercises in that book.</p>\n<p>Thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198554206,
            "is_me_message": false,
            "last_edit_timestamp": 1590628282,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590271609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>The K&amp;R book is a bit old, but still quite good. This one's also pretty good, as far as I recall. <a href=\"https://www.amazon.com/dp/0131774298\">https://www.amazon.com/dp/0131774298</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198555420,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tedroden@gmail.com",
                        "full_name": "Ted Roden (he) (S1'20)",
                        "id": 301217
                    },
                    "user_id": 301217
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590273758,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Dunno if this is applicable, but I found that I really came to understand (and enjoy) C during my data structures class, when I began implementing things like linked lists and trees and stuff.  That's when pointers sort of clicked for me, and when I found a few use cases for pointers to pointers (i.e. int**) I began wishing they were available in other languages.  If you haven't implemented data structures like that in C before, maybe that could be a good exercise?</p>\n<p>I'm far from an expert on C, but if it'd be helpful to pair on anything while you're prepping (especially anything game dev related), let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198562174,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "slight_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590287613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's a cool idea! Thanks<br>\nEsp considering I should do some algo studying</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198562912,
            "is_me_message": false,
            "last_edit_timestamp": 1590288970,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590288933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. There's lots of elegant things pointers let you do -- eg, if you want to insert into a linked list:</p>\n<div class=\"codehilite\"><pre><span></span><code> dest = &amp;head;\n for(p = head; !predicate(p); p = p-&gt;next)\n         dest = &amp;p-&gt;next;\n *dest = node;\n</code></pre></div>\n\n\n<p>No <code>if (head == null) head = ...</code> mess. You just remember where you want to put something.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198563029,
            "is_me_message": false,
            "last_edit_timestamp": 1590289202,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590289183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Implementing small shell utilities is a good practice I think. Stuff like cat, ls, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198585362,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590330136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p>I'm doing advent of code in C!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198592561,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkrippy@gmail.com",
                        "full_name": "Jonathan Rippy (he) (m6'19)",
                        "id": 240597
                    },
                    "user_id": 240597
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vsrinivas@ops101.org",
                        "full_name": "Venkatesh Srinivas (he) (S2'18)",
                        "id": 120560
                    },
                    "user_id": 120560
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590341976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Writing a small snake game in C for practice</p>\n<p>Any chance someone who's fluent in C would be willing to do a high level code review to let me know if the way I'm writing C code is clean: <a href=\"https://github.com/SourenP/cnake\">https://github.com/SourenP/cnake</a><br>\nThe code is fairly small<br>\nOOP seems clunky in C <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> </p>\n<p>I would really appreciate it <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198937148,
            "is_me_message": false,
            "last_edit_timestamp": 1590606318,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590606270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm not great at writing clean code so I can't really weigh in on cleanliness, but what you've got so far looks good to me.  I looked at that snake.c file and was able to make sense of what the code in there was doing (wasn't able to compile and run it due to problems with my machine)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198943962,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590609171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>One small thing maybe not worth fixing: for the snake_size function, you could check if <code>n</code> is null instead of <code>n-&gt;next</code>, which would kill the necessity for the <code>n==null</code> check at the top, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>size_t snake__size(Snake s) {\n    struct node *n = s-&gt;top;\n\n    count = 0;\n\n    while(n)\n    {\n        count++;\n        n = n-&gt;next;\n    }\n\n    return count;\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198944281,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590609330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>OOP seems clunky in C <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>Yeah. I just prefer not to do OOP in C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198950984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590612420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Overall it's pretty clean, here's a first pass:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198954467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590614147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>n the Makefile:</p>\n<div class=\"codehilite\"><pre><span></span><code>CC = clang\n\nCXXFLAGS += -g -fsanitize=address -std=c99\n</code></pre></div>\n\n\n<p>Use the system default, which is probably either cc or c99.<br>\n<code>CXXFLAGS</code> are for C++ CFLAGS are for C.</p>\n<p>In defs.h:</p>\n<div class=\"codehilite\"><pre><span></span><code>#define START_X (int)GAME_WIDTH / 2\n</code></pre></div>\n\n\n<p>Parenthesize, so that when you expand, you don't get screwed by<br>\nassociativity. Imagine that you were doing something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>#define START_X (int)GAME_WIDTH + 10\n</code></pre></div>\n\n\n<p>Then:</p>\n<div class=\"codehilite\"><pre><span></span><code>START_X / 2\n</code></pre></div>\n\n\n<p>Would expand to:</p>\n<div class=\"codehilite\"><pre><span></span><code>(int)GAME_WIDTH + 10/2\n</code></pre></div>\n\n\n<p>Or:</p>\n<div class=\"codehilite\"><pre><span></span><code>(int)GAME_WIDTH + 5\n</code></pre></div>\n\n\n<p>In structs.h:</p>\n<p>Not a big deal, but you can eliminate the useless struct<br>\nname. From:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct foo { ... } Foo\n</code></pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct { ... } Foo\n</code></pre></div>\n\n\n<p>Or, my preference, since it allows mutually recursive types:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct Foo Foo;\nstruct Foo {};\n</code></pre></div>\n\n\n<p>In game.h:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct game_type *Game;\n</code></pre></div>\n\n\n<p>Please don't do this -- I was reading the code and wondering why<br>\nyou were passing around the game by value. If your goal is to hide<br>\nthe definition of struct game (also, probably something I wouldn't<br>\nbother with), then you can just define an incomplete type.</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct Game Game;\n</code></pre></div>\n\n\n<p>Snake_push seems to be unused.</p>\n<p>I'd probably collapse the structure down to something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Snake {\n    /*\n\n     * Ring buffer of paths, which makes\n     * updating position pretty easy/efficient,\n     * though growing it means claring the new\n     * path elements.\n     */\n    Pos *path;\n    int npath;\n    int offset;\n};\n\nstruct Food {\n    Pos p;\n};\n\nstruct Game {\n    /* Curses */\n    WINDOW *wnd;\n\n    /* Grid */\n    char    *grid;\n    size_t  width;\n    size_t  height;\n\n    Snake  *snake[Maxsnakes];\n    size_t  nsnake;\n\n    Food    food[Maxfood]\n    size_t  nfood;\n};\n</code></pre></div>\n\n\n<p>As far as inputs, I'd probably turn that into either<br>\na callback in the game struct, or just embrace the curses<br>\ndependency.</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Game {\n    /* Curses */\n    void *ctx;\n    Input (*getch)(void *ctx);\n    ...\n}\n\ngame-&gt;input(game-&gt;ctx)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198954476,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tedroden@gmail.com",
                        "full_name": "Ted Roden (he) (S1'20)",
                        "id": 301217
                    },
                    "user_id": 301217
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590614157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wow thanks <span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span>  and <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> :D <br>\nThe feedback makes a lot of sense <br>\n&lt;3 &lt;3 &lt;3</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198956375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>The way that I tend to think about writing C code (well, most code) is as a set of functions operating on a small set of dumb \"central\" data structure, with extension points and hooks where you don't know what will need to be plugged in.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198956893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615500,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p><code>typedef struct game_type *Game;</code><br>\n Please don't do this -- I was reading the code and wondering why<br>\nyou were passing around the game by value. If your goal is to hide<br>\nthe definition of struct game (also, probably something I wouldn't<br>\nbother with), then you can just define an incomplete type.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> you mean I should make <code>Game</code> a struct and pass around <code>Game *game</code> to functions?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah. I tend to interpret 'Foo x' as a value type, not a reference type.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>kk</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>the opaque typedef doesn't depend on it being a pointer, so:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef struct Game Game;\nvoid frob(Game *g);\n</code></pre></div>\n\n\n<p>is perfectlly valid.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957445,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590615862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think I got the idea of defining the struct that way from the book \"C Programming: A Modern Approach\" where it discusses \"Abstract Data Types (ADT)\"</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957649,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>But I prefer your way of making the reference explicit</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957726,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"/user_uploads/13/YSNEJQPc645JoLw8aF2_hWEC/Screen-Shot-2020-05-27-at-2.48.25-PM.png\">Screen-Shot-2020-05-27-at-2.48.25-PM.png</a> <a href=\"/user_uploads/13/P7TL0a-0XSY9HzsInHtcHMPG/Screen-Shot-2020-05-27-at-2.48.27-PM.png\">Screen-Shot-2020-05-27-at-2.48.27-PM.png</a> <a href=\"/user_uploads/13/mgZ4ognqwHEOokEWw_QmXkXz/Screen-Shot-2020-05-27-at-2.48.34-PM.png\">Screen-Shot-2020-05-27-at-2.48.34-PM.png</a> <a href=\"/user_uploads/13/JwsLb4u79kQc1DT31NjpNXkJ/Screen-Shot-2020-05-27-at-2.48.38-PM.png\">Screen-Shot-2020-05-27-at-2.48.38-PM.png</a><br>\n<a href=\"user_uploads/13/JylEXNHAb53U4IjuEQaCLQXR/Screen-Shot-2020-05-27-at-2.50.56-PM.png\">Screen-Shot-2020-05-27-at-2.50.56-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/YSNEJQPc645JoLw8aF2_hWEC/Screen-Shot-2020-05-27-at-2.48.25-PM.png\" title=\"Screen-Shot-2020-05-27-at-2.48.25-PM.png\"><img src=\"/user_uploads/13/YSNEJQPc645JoLw8aF2_hWEC/Screen-Shot-2020-05-27-at-2.48.25-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/13/P7TL0a-0XSY9HzsInHtcHMPG/Screen-Shot-2020-05-27-at-2.48.27-PM.png\" title=\"Screen-Shot-2020-05-27-at-2.48.27-PM.png\"><img src=\"/user_uploads/13/P7TL0a-0XSY9HzsInHtcHMPG/Screen-Shot-2020-05-27-at-2.48.27-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/13/mgZ4ognqwHEOokEWw_QmXkXz/Screen-Shot-2020-05-27-at-2.48.34-PM.png\" title=\"Screen-Shot-2020-05-27-at-2.48.34-PM.png\"><img src=\"/user_uploads/13/mgZ4ognqwHEOokEWw_QmXkXz/Screen-Shot-2020-05-27-at-2.48.34-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/13/JwsLb4u79kQc1DT31NjpNXkJ/Screen-Shot-2020-05-27-at-2.48.38-PM.png\" title=\"Screen-Shot-2020-05-27-at-2.48.38-PM.png\"><img src=\"/user_uploads/13/JwsLb4u79kQc1DT31NjpNXkJ/Screen-Shot-2020-05-27-at-2.48.38-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"user_uploads/13/JylEXNHAb53U4IjuEQaCLQXR/Screen-Shot-2020-05-27-at-2.50.56-PM.png\" title=\"Screen-Shot-2020-05-27-at-2.50.56-PM.png\"><img src=\"user_uploads/13/JylEXNHAb53U4IjuEQaCLQXR/Screen-Shot-2020-05-27-at-2.50.56-PM.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957789,
            "is_me_message": false,
            "last_edit_timestamp": 1590616207,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>lol sorry about the format, the text isn't copyable</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198957828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> <br>\nI didn't really understand these lines:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"cm\">/* Curses */</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">Input</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">getch</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">game</span><span class=\"o\">-&gt;</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>Could you explain?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198958679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's a pointer to a function that takes a <code>void *</code> arg and returns <code>Input</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198958729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>What's the <code>ctx</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198958786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590616700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh. Sure -- if you want to decouple the game loop from the way you're getting input, you can pass a callback. So, something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>== uicurses.c ==\nInput\ncurses_input(void *ctx)\n{\n     return input_map[wgetch(ctx)];\n}\n\n== uigui.c ==\nInput\ngui_input(void *ctx)\n{\n      return input_map[gui_input(ctx)];\n}\n</code></pre></div>\n\n\n<p>Then, in your game initializer:</p>\n<div class=\"codehilite\"><pre><span></span><code>Game {\n     .ctx = wnd,\n     .input = curses_input,\n     ...\n};\n</code></pre></div>\n\n\n<p>Or:</p>\n<div class=\"codehilite\"><pre><span></span><code>GuiState st  = {\n    .xdisplay = dpy,\n    .window = win_id,\n};\n\nGame {\n     .ctx = &amp;st,\n     .input = gui_input,\n     ...\n};\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198959329,
            "is_me_message": false,
            "last_edit_timestamp": 1590617049,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590617020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh -- that's another thign you can do, by the way: indexed and named initializers.</p>\n<div class=\"codehilite\"><pre><span></span><code>     Input input_map[] = {\n         [&#39;q&#39;] = INPUT_QUIT,\n         [KEY_UP] = INPUT_UP,\n         ...\n    };\n    int ch = wgetch(win);\n    return ch &lt; 0 || ch &gt;= nelem(input_map) ? INPUT_NONE : input_map[ch];\n}\n</code></pre></div>\n\n\n<p>For this code it doesn't make too much of a difference, but it's a really nice way to encode some things. You can, for example, index a direction table that you initialize that way.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198959598,
            "is_me_message": false,
            "last_edit_timestamp": 1590618294,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590617181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span>  Oh cool</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198960983,
            "is_me_message": false,
            "last_edit_timestamp": 1590618165,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The array map is cool, i was wondering how to do something like that</p>\n<p>I'll def use this generic function way. Been meaning to learn how to use <code>void *</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961013,
            "is_me_message": false,
            "last_edit_timestamp": 1590618195,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I just didn't get how you checked whether or not the index is present in <code>input_map</code> in this line:<br>\n<code>return ch &lt; 0 || ch &gt; nelem(input) ? INPUT_NONE : input_map[input];</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961069,
            "is_me_message": false,
            "last_edit_timestamp": 1590618221,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>what's <code>input</code> here?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961075,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618130,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oops, garbled that.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>edited.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, <code>#define nelem(a) (sizeof(a)/sizeof(a[0]))</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198961296,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590618264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Got it<br>\nThanks so much :) <br>\nLearned a bunch</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198963441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590619821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>void* isn't really very magical -- it's just a pointer that is guaranteed to be able to hold any other pointer value.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198964932,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590620826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and has an implicit cast to/from all pointer types.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198964948,
            "is_me_message": false,
            "last_edit_timestamp": 1590620860,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590620842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>think of it kind of like Java's <code>Object</code>, or Go's <code>interface{}</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198965025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590620891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>C is a dynamically typed, interpreted language</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198970311,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "lol",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f606",
                    "emoji_name": "lol",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 22639,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590625354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone know where I can find 'complicated' 'well written' C code that I could read to practice my comprehension</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198973196,
            "is_me_message": false,
            "last_edit_timestamp": 1590628397,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590628322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>i may be a bit biased, but i think <a href=\"https://github.com/doy/runes\">https://github.com/doy/runes</a> is pretty well written(:</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198973648,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590628771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I generally quite like Michael Forney's code: </p>\n<p><a href=\"https://github.com/michaelforney/samurai\">https://github.com/michaelforney/samurai</a><br>\n<a href=\"https://git.sr.ht/~mcf/cproc/tree\">https://git.sr.ht/~mcf/cproc/tree</a></p>\n<p>Going down that rabbithole gets you to Quentin Carbonneax's code:</p>\n<p><a href=\"https://c9x.me/git/qbe.git/tree/\">https://c9x.me/git/qbe.git/tree/</a></p>\n<p>On a different track, OpenBSD's code is quite good -- for example, BGPd or SMTPd. Note, these programs will tend to be privilege separated, which means that there's a pattern of message passing between separate sandboxed processes.</p>\n<p><a href=\"https://github.com/openbsd/src/tree/master/usr.sbin/bgpd\">https://github.com/openbsd/src/tree/master/usr.sbin/bgpd</a><br>\n<a href=\"https://github.com/openbsd/src/tree/master/usr.sbin/smtpd\">https://github.com/openbsd/src/tree/master/usr.sbin/smtpd</a></p>\n<p>As is anything written by cinap_lenrek -- for example, the 9front SMB server (Windows file sharing):</p>\n<p><a href=\"https://code.9front.org/hg/plan9front/file/a0578c798e10/sys/src/cmd/ip/cifsd/\">https://code.9front.org/hg/plan9front/file/a0578c798e10/sys/src/cmd/ip/cifsd/</a></p>\n<p>And, finally, a bit of self promotion: I'm pretty happy with how git9 turned out:</p>\n<p><a href=\"https://github.com/oridb/git9\">https://github.com/oridb/git9</a></p>\n<p>Specifically, there are two interesting parts: fs.c and pack.c</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198974290,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "souren@papazian.info",
                        "full_name": "Souren Papazian (he) (SP2'20)",
                        "id": 255060
                    },
                    "user_id": 255060
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590629426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3623090b52bac8ecada233272cb050d05771d590?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Merci</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198974456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "souren@papazian.info",
            "sender_full_name": "Souren Papazian (he) (SP2'20)",
            "sender_id": 255060,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590629627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh -- for the plan 9 ones (the last 2 links), keep in mind that the system is not 100% standard C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198975139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590630406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>specifically, <code>&lt;u.h&gt;</code> and <code>&lt;libc.h&gt;</code> replace the mess of standard C headers, and the functions provided are slightly different.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198975165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Practice",
            "submessages": [],
            "timestamp": 1590630439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>G'evening! I was wondering if anyone had some advice for starting unit testing C code and managing projects. I've been working though Algorithms in C text by Loudon and need to begin verifying that the data structures behave as I expect. Below is a link to the repository.</p>\n<p><a href=\"https://github.com/OpenJ92/DataStructures/tree/master/MasteringAlgorithmsInC\">https://github.com/OpenJ92/DataStructures/tree/master/MasteringAlgorithmsInC</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204492679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595284996,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I tend to just put a rule into my makefiles for tests, with a simple runner script.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204578679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595353205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also tend to just use asserts, and maybe a few macros.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204578766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595353248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a8755809612b3b2e2b30b65bd71786d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I haven't used it myself but was planning on it before I got sidetracked off my C project, but this unit testing framework for C looks amazing:</p>\n<p><a href=\"https://github.com/Snaipe/Criterion\">https://github.com/Snaipe/Criterion</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204604013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andrew.montalenti@gmail.com",
            "sender_full_name": "Andrew Montalenti (he) (m7'19)",
            "sender_id": 247727,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595366274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm sorry for not getting back until today!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205195020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595906759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> What do you mean by putting a rule in your makefile? I'll be looking into makefiles in the mean time</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205195068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595906802,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"247727\">@Andrew Montalenti (he) (m7'19)</span> I'll take a look into this tomorrow morning! Thanks for the input.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205195079,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595906827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>TESTS=\\\n     foo.test\\\n     bar.test\\\n     baz.test\n\ncheck: $TESTS\n\n%.test: %.c test/%.c $OTHER_DEPS\n        $CC -o test/$*.test $*.c test/$*.c\n         test/$*.test\n\n.PHONY check %.test\n</code></pre></div>\n\n\n<p>So, if I have <code>foo.c, bar.c, baz.c</code> and <code>test/foo.c. test/bar.c, test/baz.c</code>, <code>make check</code> builds and runs the test programs. For the tests themselves, I usually do a few simple assert defines and utility functions to verify things. Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>#define EQ(a, b, msg) assert((a) == (b) &amp;&amp; msg)\n</code></pre></div>\n\n\n<p>Assert stringifies its arguments, so when the assert fails you get an output that will look vaguely like:</p>\n<div class=\"codehilite\"><pre><span></span><code>assertion failed: (expr) == (other) &amp;&amp; some message\n</code></pre></div>\n\n\n<p>I might also do something a bit fancier that prints the expected and actual values.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205196560,
            "is_me_message": false,
            "last_edit_timestamp": 1595911684,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595909384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> This is great! I love the simplicity over Unit Testing frames. I'll post here the fruits of this in a day or two.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205264806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1595956903,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> I've been learning a lot about makefiles in the last few days. I wish I sought it out earlier.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205547374,
            "is_me_message": false,
            "last_edit_timestamp": 1596155317,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1596155259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205547377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1596155281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>G'morning! I'm looking for some help on a leetcode problem [1] that's thrown me for a loop in the last day. A more specific description can be seen in the link to the problem below, but I'll describe it here succinctly. Provided a <code>char**</code> of email addresses, one needs to refine them to a base form and count the unique elements from amongst them. </p>\n<p>My strategy is as follows. </p>\n<p>Firstly, I'm placing each email into an Email struct which hold the <code>char*</code> to the start and end of the given email. I've constructed helper functions like construct_email which take 'empty' email and start and end <code>char*</code> to initialize and a find_end function which takes a start <code>char*</code> and searches for a NULL char and returns the <code>char*</code> previous. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Email</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Email</span><span class=\"p\">;</span>\n\n<span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"nf\">construct_string</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">string</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"n\">string</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"nf\">find_end</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">do</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Stuck in here. %c</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">email</span><span class=\"p\">);</span>\n        <span class=\"n\">email</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">email</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"o\">--</span><span class=\"n\">email</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>These functions are used to prepare a provided <code>char*</code> in leetcode's <code>main</code> function for use in the split | partition function which will follow.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"nf\">numUniqueEmails</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">emails</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">emailsSize</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_strings</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">split_strings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">emailsSize</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">email</span> <span class=\"o\">&lt;</span> <span class=\"n\">emailsSize</span><span class=\"p\">;</span> <span class=\"n\">email</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">current_email</span><span class=\"p\">;</span>\n        <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">find_end</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">emails</span> <span class=\"o\">+</span> <span class=\"n\">email</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// destroy split_strings if fail to allocate memory.</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">current_email</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"n\">current_email</span> <span class=\"o\">=</span> <span class=\"n\">construct_string</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,(</span><span class=\"o\">*</span><span class=\"n\">emails</span> <span class=\"o\">+</span> <span class=\"n\">email</span><span class=\"p\">),</span><span class=\"n\">end</span><span class=\"p\">);</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>With the current char* prepared as an Email* we pass it to my split function which takes and <code>Email*</code>,  a char comparison pointer and a maximum number of splits to carry out. I've documented the code below as best I can to describe it's process.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">compare</span><span class=\"p\">)(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">),</span> <span class=\"kt\">int</span> <span class=\"n\">max_splits</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Allocate an email container with enough memory to store the max number of partitions given the max splits.</span>\n    <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">container</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">max_splits</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">container_position</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">container</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Capture a cursor for scanning the screen and a psudo start that tracks the start point of each new substring</span>\n    <span class=\"c1\">// and store which split (or how many partitions we severed).</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">temp_start</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">num_split</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cursor</span> <span class=\"o\">!=</span> <span class=\"n\">string</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// if the predicate is met, allocate an Email* for storage of new substring</span>\n            <span class=\"c1\">// and destroy container if fail to allocate.</span>\n            <span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">string</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">string_cursor</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">container</span><span class=\"p\">;</span> <span class=\"n\">string_cursor</span> <span class=\"o\">!=</span> <span class=\"n\">container_position</span><span class=\"p\">;</span> <span class=\"n\">string_cursor</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">string_cursor</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// Grab the position of the current split in container and construct string from the</span>\n            <span class=\"c1\">// known start to the current cursor position and initialize the newly allocated Email*</span>\n            <span class=\"c1\">// struct and point the found position to that string.</span>\n            <span class=\"n\">container_position</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">container</span> <span class=\"o\">+</span> <span class=\"n\">num_split</span><span class=\"p\">;</span>\n            <span class=\"n\">container_position</span> <span class=\"o\">=</span> <span class=\"n\">construct_string</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">temp_start</span><span class=\"p\">,</span> <span class=\"n\">cursor</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// update the starting point  and number of splits.</span>\n            <span class=\"n\">temp_start</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"p\">;</span>\n            <span class=\"n\">num_split</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num_split</span> <span class=\"o\">==</span> <span class=\"n\">max_splits</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                 <span class=\"c1\">// construct one last email from cursor to string-&gt;end and insert into container</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cursor</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">container</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The problem that I'm facing is occuring in leetcode's <code>main</code> function. When I reach the second call to split I hit an error that I don't understand.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"nf\">numUniqueEmails</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">emails</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">emailsSize</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_strings</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">split_strings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">emailsSize</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">email</span> <span class=\"o\">&lt;</span> <span class=\"n\">emailsSize</span><span class=\"p\">;</span> <span class=\"n\">email</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Email</span><span class=\"o\">*</span> <span class=\"n\">current_email</span><span class=\"p\">;</span>\n        <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">find_end</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">emails</span> <span class=\"o\">+</span> <span class=\"n\">email</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// destroy split_strings if fail to allocate memory.</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">current_email</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"n\">current_email</span> <span class=\"o\">=</span> <span class=\"n\">construct_string</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,(</span><span class=\"o\">*</span><span class=\"n\">emails</span> <span class=\"o\">+</span> <span class=\"n\">email</span><span class=\"p\">),</span><span class=\"n\">end</span><span class=\"p\">);</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_at</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,</span> <span class=\"n\">compare_at</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_plus</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">split_at</span><span class=\"p\">,</span> <span class=\"n\">compare_plus</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>  <span class=\"c1\">// &lt;--- Breaking here</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>runtime error: member access within misaligned address 0xbebebebeb... for struct Email which requires an 8 byte alignment\n</code></pre></div>\n\n\n<p>I can reproduce the result before the second call by trying to access <code>*split_at-&gt;start</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"nf\">numUniqueEmails</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">emails</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">emailsSize</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">email</span> <span class=\"o\">&lt;</span> <span class=\"n\">emailsSize</span><span class=\"p\">;</span> <span class=\"n\">email</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n        <span class=\"p\">.</span>\n        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_at</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,</span> <span class=\"n\">compare_at</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%p&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">split_at</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">);</span>             <span class=\"c1\">// &lt;--- Breaking here</span>\n        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_plus</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">split_at</span><span class=\"p\">,</span> <span class=\"n\">compare_plus</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>I'm not sure what to do from here as my mental model for pointers (which is clearly wrong in this instance) suggests that I can access the start attribute of the container's first element through <code>*split_at-&gt;start</code>. It seems like the <code>Email**</code> returned from split is malformed, but it might have occurred earlier in execution. </p>\n<p>[1] <a href=\"https://leetcode.com/problems/unique-email-addresses/\">https://leetcode.com/problems/unique-email-addresses/</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207539303,
            "is_me_message": false,
            "last_edit_timestamp": 1597939879,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597938999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is it possible split_at is NULL? And when you attempt to access <code>char* cursor = string-&gt;start;</code> it breaks there?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207540968,
            "is_me_message": false,
            "last_edit_timestamp": 1597939864,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597939811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Let me run a printf on split_at proper to see. Should I expect to see 0x00?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597939962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>When I place printf following the first split I receive this output</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_at</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,</span> <span class=\"n\">compare_at</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%p&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">split_at</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<p><code>0x602000000030</code></p>\n<p>When I deference it becomes this. It seems to be the problem. Am I not assigning the container properly in split? </p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_at</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,</span> <span class=\"n\">compare_at</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%p&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">split_at</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<p><code> 0xbebebebebebebebe </code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541425,
            "is_me_message": false,
            "last_edit_timestamp": 1597940210,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hmmmm, I'm not too sure what you should expect to see there, but its not NULL. I'm thinking now its a field that you probably didn't explicitly set as NULL / some data</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Where in your split function to you set the start &amp; end positions of the returning object?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>oh wait you do that in construct_string</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh wait yeah, disregard my above 3 messages, i didnt see your printed dereference</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207541975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have a feeling its within this snippet</p>\n<div class=\"codehilite\"><pre><span></span><code>container_position = *container + num_split;\ncontainer_position = construct_string(string, temp_start, cursor);\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207542346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hmm. I'm reading that as place the pointer reached by dereferenced container <code>:: Email*</code> plus the number of current splits to move <code>*container + sizeof(Email*)*num_split</code> and change that pointer to the string <code>Email*</code>. Would you say that's a proper interpretation?</p>\n<p>I'll investigate with some printf statements.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207542759,
            "is_me_message": false,
            "last_edit_timestamp": 1597940829,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is the split you're referring to, is it suppose to split per character or per Email struct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I understand you're trying to move the pointer to the position at the split correct?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I bet there is some off by 1 error happening when you're moving the pointer.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940929,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That is causing some misalignment in the memory</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543188,
            "is_me_message": false,
            "last_edit_timestamp": 1597940941,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>But i could be wrong, that's just what my intuition is</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597940959,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah. I have a cursor that scans the string whose head and tail are stored in the Email struct. Once I hit a valid comparison iterating from the head, I make a new Email with the start = start to end = cursor and proceed with scanning with start being the location of successful cursor comparison until I run out of char* or splits. I'm going to deep dive into my split function and see if I can find an off by one error.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207543476,
            "is_me_message": false,
            "last_edit_timestamp": 1597941249,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597941094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I just changed the snippet you sent to the following and now I'm getting a heap-buffer-overflow.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">container</span><span class=\"p\">[</span><span class=\"n\">num_split</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">construct_string</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">temp_start</span><span class=\"p\">,</span> <span class=\"n\">cursor</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<p>but the print of the dereferenced return now has an address</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">split_at</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">current_email</span><span class=\"p\">,</span> <span class=\"n\">compare_at</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%p&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">split_at</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<p><code> 0x602000000050 </code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207546477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597942480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>just as a general suggestion, gdb is probably more useful for debugging this than printf\u2019s, you\u2019ll get pretty-printed versions of the strings and struct members at least</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207550410,
            "is_me_message": false,
            "last_edit_timestamp": 1597944697,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597944599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm going to move this off leetcode to test it out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207557766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597948439,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>do you have the full code somewhere?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207570551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's hard to look at snippets and see what's going on.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207570560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>wait, never mind -- should have expanded the messages.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207570587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your 'find_end' is off-by-one: you normally want to return the address <em>after</em> the end, so you can use it for-loop style:</p>\n<div class=\"codehilite\"><pre><span></span><code>for(p = start; p != end; p++) { use(*p); }\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207570792,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, I'd take a slightly different approach to the problem than you're taking, but... let's see.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207571031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>printf(\"%p\", *split_at-&gt;start);             // &lt;--- Breaking here</p>\n<p>^-- I'm a bit surprised that compiles; you're doing <code>*(split_at-&gt;start)</code>, not <code>(*split_at)-&gt;start</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207571778,
            "is_me_message": false,
            "last_edit_timestamp": 1597955985,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597955958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Huh. I see what you're saying. It's dereferencing split_at <code>Email**</code> with an offset of <code>sizeof(_-&gt;start)</code>. I was thinking I was doing the second version where I dereference then offset by start. I'm goin to double check the source and make sure I'm explicitly dereferencing. </p>\n<p>I'll link the source later tonight with a proper entry function so I can test it locally and use lldb | gdb to properly debug.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207574869,
            "is_me_message": false,
            "last_edit_timestamp": 1597958129,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597957789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>What would your approach be? I was trying to model it off my python solution as seen below.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">emails</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_email</span><span class=\"p\">,</span> <span class=\"n\">emails</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">place</span> <span class=\"o\">=</span> <span class=\"n\">local</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"n\">maxsplit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">))</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207575282,
            "is_me_message": false,
            "last_edit_timestamp": 1597958419,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597957990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd canonicalize in-place</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207576134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597958495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>then qsort so I could deduplicate easily (sorting the canonical strings would put all identical emails side by side)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207576170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597958520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can canonicalize by just doing a forward scan with two pointers -- an input pointer, and an output pointer -- and skipping the input pointer ahead when you want to drop the character.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207576291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597958581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Would you say that I should replace the split character with a unique char that I know cannot be in a email? For example, these two emails would be eq.</p>\n<p><code>test.email+jacob@leetcode.com -&gt; test*email******@leetcode.com -&gt; testemail@leetcode.com</code><br>\n<code>test.email+vartuli@leetcode.com -&gt; test*email********@leetcode.com -&gt; testemail@leetcode.com</code></p>\n<p>where <code>*</code> is the char to skip? Then the eventual compare function used in qsort would take them into account? I should say that I understand canonicalize ==? standardize.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207577355,
            "is_me_message": false,
            "last_edit_timestamp": 1597959974,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597959355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>nah, I'd just copy it forward in one pass</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207579629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597961000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>something like (untested, but less buggy -- old version had some missed increments that would infinitely loop):</p>\n<div class=\"codehilite\"><pre><span></span><code>/*\n * Canonicalize in-place: this works because a\n * canonical email address is never longer than\n * an uncanonical one.\n */\nchar*\ncanonicalize(char *email)\n{\n    char *p, *q;\n\n    p = email;  /* the read pointer */\n    q = email;  /* the write pointer */\n    /* compress the &#39;username.stuff+foo&#39; bit */\n    while(*p != &#39;\\0&#39;) {\n        if(*p == &#39;.&#39;) p++;\n        if(*p == &#39;+&#39; || *p == &#39;@&#39;) break;\n        *q++ = *p++;\n    }\n    /* skip to the &#39;@&#39; */\n    while(*p != &#39;@&#39;)\n        p++;\n    /* copy the part after the &#39;@&#39; */\n    while(*p != &#39;\\0&#39;)\n        *q++ = *p++;\n    /* terminate */\n    *q = &#39;\\0&#39;;\n    return email;\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207579674,
            "is_me_message": false,
            "last_edit_timestamp": 1597968540,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597961036,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>that should turn 'foo.bar...+baz@quux.com' to '<a href=\"mailto:foobar@quux.com\">foobar@quux.com</a>'</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207587500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597967210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Whoa! Let me parse this out into english to verify that I understand.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207587778,
            "is_me_message": false,
            "last_edit_timestamp": 1597968271,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597967462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Sorry for the delay! I went for a walk to Washington Square Park to do some reading.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207587816,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597967506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, tested it -- the above should be correct.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207590154,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597969790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>anyways, looking at your code again, I think this line is quite wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>            container_position = *container + num_split;\n</code></pre></div>\n\n\n<p>The containers are allocated as <code>Email**</code>, and aren't necessarily laid out sequentially in memory, so <code>*container + num_split</code> will probably be pointing into the middle of nowhere. It's equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code>container_position = &amp;container[0][num_split]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207591375,
            "is_me_message": false,
            "last_edit_timestamp": 1597971305,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1597971066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm going to dive back into this later today. I have lldb installed (can't get gdb to work despite codesign) to take a closer look at the allocations.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207646477,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598023028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I thought that when you execute a malloc like below:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">Email</span><span class=\"o\">**</span> <span class=\"n\">container</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">max_splits</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>the memory manager would provide a pointer with access to <code>sizeof(Email*)*(max_splits+1)</code> contiguous bytes with Email* data.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207646843,
            "is_me_message": false,
            "last_edit_timestamp": 1598023755,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598023207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>My expectation is that the container_position variable is of type Email* at the first position</p>\n<div class=\"codehilite\"><pre><span></span><code>container + 0                                      container+1\n *container+0\n|e|e|e|e|e|e|e|e|z|z|z|z|z|z|z|z|w|w|w|w|w|w|w|w| |e|e|e|e|e|e|e|e|z|z|z|z|z|z|z|z|w|w|w|w|w|w|w|w|\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>                 *container+1\n|e|e|e|e|e|e|e|e|z|z|z|z|z|z|z|z|w|w|w|w|w|w|w|w|\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>                                 *container+2\n|e|e|e|e|e|e|e|e|z|z|z|z|z|z|z|z|w|w|w|w|w|w|w|w|\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207647334,
            "is_me_message": false,
            "last_edit_timestamp": 1598023702,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598023446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll also go over the chapter on multiple indirection in my pointers text in the meantime.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207647696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598023628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, you get<code>sizeof(Email*)*(max_splits+1)</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598024964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>the problem is that you're dereferencing the container.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598024979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>container+1</code> is the same as '&amp;container[1]`</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598025000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>but -- you're doing <code>*container + 1</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650385,
            "is_me_message": false,
            "last_edit_timestamp": 1598025024,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598025013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>*container</code> evaluates to the first <code>Email*</code> in the container.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598025044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's a diagram:</p>\n<div class=\"codehilite\"><pre><span></span><code>container:               [e e e] (Email**)malloc(3*sizeof(Email*)]\n                          / | \\\n                         /  |  \\\n                        /   |   \\\ncontainer[i]       [eml]  [eml] [eml].  container[i] = malloc(sizeof(Email))\nOR                 ^   ^\n*(container+i)     |   +-- *container + 1\n                   |\n                   *container\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207650882,
            "is_me_message": false,
            "last_edit_timestamp": 1598026273,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598025285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Oh, I see! So if I was to do <code>*(container + 1) == container[1]</code>, I would arrive at the middle node of the second layer of the tree above. Dereferencing is then higher precedence than plus? Furthermore, If I was to do <code>*(container + 1) + 1</code>, I would arrive at the closing bracket of the middle node, which if I tried to do <code>(*(container + 1) + 1)-&gt;start</code> would read <code>*char</code> bytes from unallocated memory, b/c each email is allocated individually?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207683201,
            "is_me_message": false,
            "last_edit_timestamp": 1598043742,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598042983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207688006,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598046123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>C operator precedence is <a href=\"https://s3.amazonaws.com/codechef_shared/upfiles/C.PNG\">https://s3.amazonaws.com/codechef_shared/upfiles/C.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"https://s3.amazonaws.com/codechef_shared/upfiles/C.PNG\"><img src=\"https://s3.amazonaws.com/codechef_shared/upfiles/C.PNG\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207688109,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598046216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's mostly unsurprising -- except that the bitwise operators are in an exceedingly silly place.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207689187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598047008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(Tangent about C operator precedence: a friend of mine wrote this very simple tool to display how C expressions are parsed: <a href=\"https://git.causal.agency/src/tree/bin/order.y\">https://git.causal.agency/src/tree/bin/order.y</a> \u2014 despite its simplicity, I find myself using it all the time to very quickly check my assumptions about operator precedence.  It's quick to invoke from emacs or vi on a selected expression, too.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207689195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598047013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>a == b &amp; c</code> is the same as <code>(a == b) &amp; c</code>, not <code>a == (b &amp; c)</code> as you may expect</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207689236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598047050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>neat. interesting choice about putting break <em>before</em> the 'case'</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207689317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598047098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Huh. <span class=\"user-mention\" data-user-id=\"101992\">@Julian Squires (he) (F2'17)</span> , how would I go about setting this up for use in vi? I use vim 8.x.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207701498,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598060659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>:'&lt;,'&gt;!commandname</code> sends the selection to a command's stdin</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207704943,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598066477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can script it however you want.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207704944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598066488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Oh, cool. Visual select with external command. tyty.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207705460,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598067484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101992\">@Julian Squires (he) (F2'17)</span> neat tool, thanks for linking</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207962200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Memory Issue in LeetCode Problem",
            "submessages": [],
            "timestamp": 1598362046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b6389a3870b2757624fefd85d08b75b08f6dc815?x=x&version=2",
            "client": "website",
            "content": "<p>I'm reading lines from a file into a linked list and I have two questions, if anyone can help:</p>\n<ol>\n<li>When I create the node struct, it seems I have to specify the size of its data (in this case text) field. If so, how do I make sure it will be big enough for every line in the file? I'm using getline to fetch the data from the file.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>struct node {\n    char text[4096]; // &lt;-- how do I initialize this so it&#39;s the right size\n                     // since getline expands to accommodate any line size?\n    struct node* next;\n};\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>Follow-up question: is there some pointer magic I can do/should be doing to avoid having to copy strings into the linked list?</li>\n</ol>\n<p>I got all the tests to pass for this problem set, but I would like to understand things a little better, and hopefully learn some idioms for working with C.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209512386,
            "is_me_message": false,
            "last_edit_timestamp": 1599666509,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert@schuessler.org",
            "sender_full_name": "Robert Schuessler (W1'17)",
            "sender_id": 103047,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599659309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>For the first question:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct node {\n    char text[4096]; // &lt;-- how do I initialize this so it&#39;s the right size\n                     // since getline expands to accommodate any line size?\n    struct node* next;\n};\n</code></pre></div>\n\n\n<p>Could become:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct node {\n    char *text;\n    size_t ntext;\n    struct node *next;\n}\n</code></pre></div>\n\n\n<p>Which you'd read into with:</p>\n<div class=\"codehilite\"><pre><span></span><code>n-&gt;text = NULL;\nif(getline(&amp;n-&gt;text, &amp;n-&gt;ntext, f) == -1)\n     /* EOF or error */\n</code></pre></div>\n\n\n<p>and later, free with:</p>\n<div class=\"codehilite\"><pre><span></span><code>free(n-&gt;text);\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209515815,
            "is_me_message": false,
            "last_edit_timestamp": 1599660867,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599660691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>for the second: that depends on what you're trying to do with the lines, but almost always there is. I usually try to structure my code so that I'm just processing things as a stream. This is the option I'd strongly prefer in almost all cases:</p>\n<div class=\"codehilite\"><pre><span></span><code>    char *ln;\n    size_t n;\n\n     while(1){\n             text = NULL;\n            if(getline(&amp;ln, &amp;n, f)  == -1)\n                    break;\n            process(ln);\n            free(ln);\n     }\n</code></pre></div>\n\n\n<p>That  kind of structure has a few advantages. It's simpler: you don't need a data structure to track lines. It's more efficient: you only need to store one line at a time. It's localized logic: you don't need to jump from the line reading code to the processing code, it just says what it does to each line.</p>\n<p>If you really need all the lines (for example, you're sorting them or deduplicate them), then there are a few approaches. You can just use an array instead of a linked list:</p>\n<div class=\"codehilite\"><pre><span></span><code>    char *ln, **lines;\n    size_t n, nlines, linesz;\n\n     linesz = 64; // doesn&#39;t matter, just needs to be &gt; 0 so growing works.\n     nlines = 0;\n     lines = emalloc(linesz * sizeof(char*));\n     while(1){\n             text = NULL;\n            if(getline(&amp;ln, &amp;n, f)  == -1)\n                    break;\n            if((nlines == linesz){\n                 linesz += linesz/2; // Exponential growth for O(1) ammortized appends.\n                 lines = erealloc(lines, linesz * sizeof(char*));\n            }\n            lines[nlines++] = ln;\n     }\n</code></pre></div>\n\n\n<p>Where emalloc and erealloc are just wrappers for malloc that abort on out of memory:</p>\n<div class=\"codehilite\"><pre><span></span><code>void *emalloc(size_t sz) {\n    void *p;\n    if((p = malloc(sz)) == NULL) abort();\n    return p;\n}\n</code></pre></div>\n\n\n<p>Another option is to read the whole file into memory, and scan through for '\\n's, replacing them and storing where they were.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209517932,
            "is_me_message": false,
            "last_edit_timestamp": 1599662370,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599661522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>That would look something like this -- and it's probably the most efficient since you're doing big reads to get as much data into your program as possible, but it's also a chunk of code that's unlikely to be worth while; I probably wouldn't do it to handle lines:</p>\n<div class=\"codehilite\"><pre><span></span><code>        +----------------------------------+\nfile:   |this is\\na file with\\nmany lines\\n|\n        +----------------------------------+\n</code></pre></div>\n\n\n<p>Turns into:</p>\n<div class=\"codehilite\"><pre><span></span><code>        +----------------------------------+\nfile:   |this is\\0a file with\\0many lines\\0|\n        +----------------------------------+\n         ^        ^            ^\n         |        |            |\n         |  +-----+            |\n         |  |                  |\n         |  |  +---------------+\n         |  |  |\nlntab:  [0][1][2]\n</code></pre></div>\n\n\n<p>with code something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>char *fdata, *p, **lines;\nsize_t nfdata, fdatasz, nlines, linesz;\nssize_t n;\n\n/* Read whole file into buffer */\nnfdata = 0;\nfdatasz = 128;\nchar *fdata = emalloc(fdatasz);\nwhile(1){\n    if(fdatasz == nfdata){\n        fdatasz += fdatasz/2;\n        fdata = erealloc(fdata, fdatasz + 1);\n    }\n    n = read(fd, &amp;fdata[nfdata], fdatasz-nfdata);\n    if(n == -1)\n        err(1, &quot;read %s:&quot;, filename);\n    if(n == 0)\n        break;\n    nfdata += n;\n}\n/* make sure to terminate the string */\nfdata[nfdata] = &#39;\\0&#39;;\n\n/* Break it into lines */\nnlines = 0;\nlinesz = 128;\nchar *lines = emalloc(linesz*sizeof(char*));\np = fdata;\nwhile(p != nil) {\n    if(nlines == linesz){\n        linesz += linesz/2;\n        lines = erealloc(lines, linesz*sizeof(char*));\n    }\n    lines[nlines++] = p;\n    if(p = strchr(p, &#39;\\n&#39;)) == NULL)\n        break;\n    /* replace &#39;\\n&#39; with nul terminator, step past it */\n    *p = &#39;\\0&#39;;\n    p++;\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209519821,
            "is_me_message": false,
            "last_edit_timestamp": 1599662968,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599662327,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>finally: you can just accept arbitrary limits on line length; that's fine too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209519855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599662347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>And finally: I almost never use linked lists when I want to store a sequence of items. They're relatively inefficient to traverse compared to an array, <em>and</em> almost always more code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209521538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599663021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>They're useful when you want to push and pop from both the head and tail of a structure -- so, I'll use them for queues.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209521611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599663058,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b6389a3870b2757624fefd85d08b75b08f6dc815?x=x&version=2",
            "client": "website",
            "content": "<p>Such a helpful answer, <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> \u2014 I appreciate your taking the time to write this up. Thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209530060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert@schuessler.org",
            "sender_full_name": "Robert Schuessler (W1'17)",
            "sender_id": 103047,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599666577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the way, I recently wrote some code following the \"do things line by line accumulating some information\" pattern, if you're interested. Around line 165 of this: <a href=\"https://github.com/oridb/git9/blob/master/serve.c#L165\">https://github.com/oridb/git9/blob/master/serve.c#L165</a></p>\n<p>I also wrote up what I was doing there and what it's parsing here: <a href=\"https://orib.dev/gitserve.html\">https://orib.dev/gitserve.html</a></p>\n<p>Beware that the APIs aren't entirely standard Unix APIs, since it's not running on Unix.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209593531,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "robert@schuessler.org",
                        "full_name": "Robert Schuessler (W1'17)",
                        "id": 103047
                    },
                    "user_id": 103047
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599709720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe that'd be helpful as an example.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209593537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599709730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I hesitate to even write this, because Ori has given such a comprehensive answer, but I have two notes which you probably won't use soon; I tend to think it's still useful to know about things you're unlikely to use soon.</p>\n<p>Sometimes you'll see people mmap a file instead of reading it in.  The thing that's nice is that you get a pointer to the file's contents, so it can be fairly easy to work with.  For example, one might just walk over it, storing an array of offsets to line breaks.  Beware, because there is an incorrect folk myth that this is faster than allocating and reading, but rarely is this the case, and certainly not for sequential access on any modern machine that I know.  It has some advantages when working with very large files that you aren't modifying, as long as you have enough address space for them.  E.g., pages can be shared or paged out.</p>\n<p>The other thing is to second the comment on linked lists, but to note that linked structures have their merits in concurrent, shared-memory code, and you'll see modern uses of them there, as well as intrusive structures as defined in /usr/include/sys/queue.h / man queue(3) on various Linux and BSD systems.  So pedagogical time spent mastering their subtleties in C isn't wasted.  (Not that Ori implied otherwise, I just wanted to emphasize it.)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209690977,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ori@eigenstate.org",
                        "full_name": "Ori Dean Bernstein (he) (W2'20)",
                        "id": 255045
                    },
                    "user_id": 255045
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "robert@schuessler.org",
                        "full_name": "Robert Schuessler (W1'17)",
                        "id": 103047
                    },
                    "user_id": 103047
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599763398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b6389a3870b2757624fefd85d08b75b08f6dc815?x=x&version=2",
            "client": "website",
            "content": "<p>OK, thank you both again for these very useful responses. I am doing some small exercises to use the ideas and try to ingrain them.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209691951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert@schuessler.org",
            "sender_full_name": "Robert Schuessler (W1'17)",
            "sender_id": 103047,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599763843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b6389a3870b2757624fefd85d08b75b08f6dc815?x=x&version=2",
            "client": "website",
            "content": "<p>I feel lucky to get tips like this as I'm learning.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209692014,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "robert@schuessler.org",
            "sender_full_name": "Robert Schuessler (W1'17)",
            "sender_id": 103047,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599763878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, definitely. Arrays, linked lists, hash tables -- the 3 data structures that cover 95% of your needs. Probably in that order.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209694133,
            "is_me_message": false,
            "last_edit_timestamp": 1599764782,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Reading lines into a linked list",
            "submessages": [],
            "timestamp": 1599764705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e3fda2fd1d67e162591fca24980ed91e?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's also the tried and true method of just creating a bunch of build scripts for various platforms! E.g. for windows I make a build.bat, for mac/linux I make a <a href=\"http://build.sh\">build.sh</a> file</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209935749,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andychup@gmail.com",
                        "full_name": "Andy Chu (S1'18)",
                        "id": 116399
                    },
                    "user_id": 116399
                }
            ],
            "recipient_id": 22639,
            "sender_email": "nick23hi@gmail.com",
            "sender_full_name": "Nick Aversano (he) (SP2'19)",
            "sender_id": 215548,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Unit Testing and Build Software",
            "submessages": [],
            "timestamp": 1600010246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>hey! i am learning C + asm and wrote a function for cloning a string using the C convention.. but i may have a memory leak.  <br>\nThis is my code(there are some spanish comments :P)</p>\n<div class=\"codehilite\"><pre><span></span><code>        ;; argumentos recibidos\n    ;; rdi -&gt; char* a\n\n    ;; variables locales\n    ;; rbx -&gt; char* a\n    ;; r12 -&gt; iterador\n        ;; rdi -&gt; valor referenciado por rbx\n\n    push rbp\n    mov rbp,rsp\n    push rbx\n    push r12\n\n    mov rbx, rdi         ;guardo en rbx el char* a\n\n    call strLen                ;char* a esta en rdi\n    inc eax                    ;eax -&gt; strLen(a)\n\n\n    mov edi, eax               ;actualizo edi para pedir memoria\n    call malloc                ;rax -&gt; *(clon de a)\n\n    xor r12, r12               ;iterador en 0\n    xor rdi, rdi               ;rdi -&gt; char a\n    mov rdi, [rbx]\n\n    .copio_caracter:\n        cmp byte rdi, 0      ;comparo si llegue al final del string\n        je .fin\n        mov [rax + r12], dil\n        inc r12\n        mov rdi, [rbx + r12]\n        jmp .copio_caracter\n\n    .fin:\n        mov byte [rax +r12], 0  ;fin del string\n\n        pop r12\n        pop rbx\n        pop rbp\n        ret\n</code></pre></div>\n\n\n<p>this is valgrind error:</p>\n<div class=\"codehilite\"><pre><span></span><code>==26878== Memcheck, a memory error detector\n....\n==26878== Invalid write of size 1\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210827179,
            "is_me_message": false,
            "last_edit_timestamp": 1600749238,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600748995,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>are you allocating enough space to copy the string into? based on the error message, i'd guess that you don't have enough space for the null termination in the buffer you're cloning into, but i haven't looked much at the code so i may be wrong about that</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210827681,
            "is_me_message": false,
            "last_edit_timestamp": 1600749726,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600749696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yes (i think so) it works on some unit tests.. but valgrind says that i am having a memory leak. i was wondering if there is a better way to copy one bit than this <code>mov [rax + r12], dil</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210828161,
            "is_me_message": false,
            "last_edit_timestamp": 1600750634,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600750545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>why do you say memory leak? from the error you've posted, it seems like valgrind is saying that you're writing to a part of memory that you shouldn't be (and that the write has a size of one) - this is different from a leak, which would be where you're allocating memory and then not freeing it.</p>\n<p>if might help in debugging it to print out the whole section of memory around the string that you're cloning/the area that you're cloning to before and after the clone, so that you can see if the effect on the entire memory region is what you expect it to be.</p>\n<p>when you say \"copy one bit\", do you mean \"copy one byte\"? if so, then yeah, that's the way to do it. however, a typical strcpy implementation might optimize this by copying 8 byte chunks of data at a time for most of the string, and then only copy the leftover bytes byte-by-byte.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210828936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600751879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yes, my bad! here full error <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> :</p>\n<div class=\"codehilite\"><pre><span></span><code>==26878== Memcheck, a memory error detector\n==26878== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==26878== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==26878== Command: ./tester\n==26878==\n==26878== Invalid write of size 1\n==26878==    at 0x402B73: ??? (lib.asm:90)\n==26878==    by 0x4009D9: test_strings (tester.c:57)\n==26878==    by 0x401B73: test_1 (tester.c:237)\n==26878==    by 0x400852: main (tester.c:23)\n==26878==  Address 0x522e2f5 is 0 bytes after a block of size 5 alloc&#39;d\n==26878==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==26878==    by 0x402B65: ??? (lib.asm:82)\n==26878==    by 0x4009D9: test_strings (tester.c:57)\n==26878==    by 0x401B73: test_1 (tester.c:237)\n==26878==    by 0x400852: main (tester.c:23)\n==26878==\n==26878== Invalid write of size 1\n==26878==    at 0x402B75: ??? (lib.asm:91)\n==26878==    by 0x4009D9: test_strings (tester.c:57)\n==26878==    by 0x401B73: test_1 (tester.c:237)\n==26878==    by 0x400852: main (tester.c:23)\n==26878==  Address 0x522e2f6 is 1 bytes after a block of size 5 alloc&#39;d\n==26878==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==26878==    by 0x402B65: ??? (lib.asm:82)\n==26878==    by 0x4009D9: test_strings (tester.c:57)\n==26878==    by 0x401B73: test_1 (tester.c:237)\n==26878==    by 0x400852: main (tester.c:23)\n==26878==\n\nvalgrind: m_mallocfree.c:307 (get_bszB_as_is): Assertion &#39;bszB_lo == bszB_hi&#39; failed.\nvalgrind: Heap block lo/hi size mismatch: lo = 80, hi = 4480272566701075571.\nThis is probably caused by your program erroneously writing past the\nend of a heap block and corrupting heap metadata.  If you fix any\ninvalid writes reported by Memcheck, this assertion failure will\nprobably go away.  Please try that before reporting this as a bug.\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210830437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600754267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><em>if might help in debugging it to print out the whole section of memory around the string that you're cloning/the area that you're cloning to before and after the clone, so that you can see if the effect on the entire memory region is what you expect it to be</em>. ----&gt; +1000, THANKS <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210830605,
            "is_me_message": false,
            "last_edit_timestamp": 1600754456,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600754430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>cmp byte rdi, 0      ;comparo si llegue al final del string\n</code></pre></div>\n\n\n<p><del>Did you mean <code>[byte rdi]</code>?</del> </p>\n<p>(Ignore this, I misread the code)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210870922,
            "is_me_message": false,
            "last_edit_timestamp": 1600813325,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mssarratea@gmail.com",
                        "full_name": "Sol Sarratea (she) (SP1'20)",
                        "id": 255051
                    },
                    "user_id": 255051
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600782065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>What assembler/flags are you using to build this?  I used to do a lot of Intel syntax, but since years of AT&amp;T, I get confused, so I tried to build this in nasm just to make sure the operand sizes are what I'd expect (first possible culprit; also I'm surprised there aren't bad reads since you're reading off the end of the string), and it errored out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210917526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600801810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>BTW, for something like this I'd usually use the string instructions (<code>stosb</code> and friends) if I'm trying to write compact, readable assembly, even though I guess they're really slow in this day and age.  If you're doing x86 assembly for fun, though, might as well get to use all the fun instructions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210917694,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600801905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, it looks like the byte annotation in <code>cmp byte rdi, 0</code> isn't working as you'd hope; it's ignored, and it turns into REX CMP r64, imm32.  Consider operating on <code>dil</code> everywhere instead of <code>rdi</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210921320,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mssarratea@gmail.com",
                        "full_name": "Sol Sarratea (she) (SP1'20)",
                        "id": 255051
                    },
                    "user_id": 255051
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600803765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hello! Is it possible to print names (with file paths?) of all the function calls a compiled executable makes after you invoke it on the command line? (to visualize the code execution path)</p>\n<p>I compiled ghostscript from source: <a href=\"https://www.ghostscript.com/doc/9.53.1/Make.htm#Unix_build\">https://www.ghostscript.com/doc/9.53.1/Make.htm#Unix_build</a> and wanted to see if it is possible to print all the function calls and header file imports when I invoke the executable using <code>bin/gs -sDEVICE=png16m -o foo.png -r300 foo.pdf</code>to do a PDF-&gt;PNG conversion, as a way to navigate the large codebase.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210992696,
            "is_me_message": false,
            "last_edit_timestamp": 1600864495,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600863300,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://man7.org/linux/man-pages/man1/ltrace.1.html\">https://man7.org/linux/man-pages/man1/ltrace.1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211010402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600870988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is magic!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211011406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600871413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for the pointer Ori!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211011564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600871485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Need to discover all the *traces</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211011645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600871517,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can do horrific hacks with LD_PRELOAD and the dynamic linker</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211015696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600873237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I just learned about the LD_LIBRARY_PATH as I'm trying to understand how static and dynamic linking works, I'll check out LD_PRELOAD too! What kinds of hacks have you done using it?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018027,
            "is_me_message": false,
            "last_edit_timestamp": 1600874237,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>basically, it lets you replace any function call with your own version of it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018618,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(well, any dynamic, uninlined call)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, you can do things like tracing malloc/free, redirecting attempts to open certain files, etc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you want to understand dynamic linking at a deep level, the best writeup is probably Ulrich Drepper's DSO howto</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.akkadia.org/drepper/dsohowto.pdf\">https://www.akkadia.org/drepper/dsohowto.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>may be a bit much at the moment, but it's definitely worth a read.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211018899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(...and, that complexity is also a great argument for static linking... there's a lot to dynamic linking)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211019393,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600874820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"255045\">Ori Dean Bernstein (he) (W2'20)</span> <a href=\"#narrow/stream/20283-C/topic/Tracing.20code.20execution.20path/near/211018656\">said</a>:</p>\n<blockquote>\n<p>so, you can do things like tracing malloc/free, redirecting attempts to open certain files, etc</p>\n</blockquote>\n<p>WOAH</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211020339,
            "is_me_message": false,
            "last_edit_timestamp": 1600875266,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600875211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for the link, this looks awesome, I'll definitely read it</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211020394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600875237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>hah, and tedu has just posted something that is a decent intro to  LD_PRELOAD: <a href=\"https://flak.tedunangst.com/post/small-views-of-large-files\">https://flak.tedunangst.com/post/small-views-of-large-files</a></p>\n<p>The specific overrides to make certain things work may be a touch openbsd-specific.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211022093,
            "is_me_message": false,
            "last_edit_timestamp": 1600876240,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600875943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll check this out too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I have too many links open in my browser right now lol</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211023511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600876559,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"255045\">Ori Dean Bernstein (he) (W2'20)</span> <a href=\"#narrow/stream/20283-C/topic/Tracing.20code.20execution.20path/near/211022093\">said</a>:</p>\n<blockquote>\n<p>hah, and tedu has just posted something that is a decent intro to  LD_PRELOAD: <a href=\"https://flak.tedunangst.com/post/small-views-of-large-files\">https://flak.tedunangst.com/post/small-views-of-large-files</a></p>\n<p>The specific overrides to make certain things work may be a touch openbsd-specific.</p>\n</blockquote>\n<p>there are a lot of gems on this page, starting with the gratuitous \"rendering\" progress bar, and including this quip:</p>\n<blockquote>\n<p>The mode handling is rather incomplete, but good enough for production.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211028117,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600878563,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(edited)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211030267,
            "is_me_message": false,
            "last_edit_timestamp": 1600886313,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600879635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Do you all subscribe to any other nice C/Linux blogs?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211030269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600879638,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://github.com/wolfcw/libfaketime\">https://github.com/wolfcw/libfaketime</a> is another nice LD_PRELOAD hack example; that kind of thing can be really useful when writing tests to reproduce certain conditions.  <a href=\"https://cwrap.org/\">https://cwrap.org/</a> has a bunch of useful libraries for that kind of thing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211031430,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600880228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>tbh, I tend to just use gdb for this kind of thing.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211044032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600885918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>find a function that seems interesting, 'b funcname', and then get a stack trace with <code>bt</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211044107,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600885938,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>as far as keeping up with the linux ecosystem, you can't go wrong with lwn -- well worth the subscription, but the articles are free after a week too.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211044188,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600885983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://undeadly.org\">https://undeadly.org</a> has some great summaries of openbsd news</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211044238,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thank you for all the tips!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211044773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>another really nice thing you can do with gdb: start up the program, and call arbitrary functions in it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045212,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>`call printf(\"hello world\\n\");'</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>'call pretty_dump(datastructure)'</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>etc</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045295,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>thinking about it, I suspect I get the bulk of my updates over project mailing lists and IRC</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Which project mailing lists do you subscribe to? And which IRC channels do you hang out in? Also, you should write a blog post about all the C/Linux tips you wish you knew when you started! It would be really useful for beginners like me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211045599,
            "is_me_message": false,
            "last_edit_timestamp": 1600886691,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600886680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>hah. too many, not sure how much firehose you want to drink out of.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047442,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f605",
                    "emoji_name": "sweat_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Edit: actually, not a useful response)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047752,
            "is_me_message": false,
            "last_edit_timestamp": 1600887610,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm involved with OpenBSD, so I'm on the OpenBSD-Tech list, and I keep an eye on the FreeBSD-Hackers and FreeBSD-Net lists. I'm also on the git list and llvm list, though I really need to keep a better eye on it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>9front as well, though that's pretty specific to plan9; same with the <code>#cat-v</code> irc chanel.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047957,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>#C</code> on freenode is decent</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>really, I just find that I accumulate lists and irc channels as I poke at various projects</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211048039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>rather than joining general interest ones ahead of time</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211048060,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600887732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks again for the pointers! I agree with the firehose aspect, I joined some Python mailing lists some time ago and there's a LOT of emails. I'll check out these mailing lists too. Btw, I joined <code>#C</code> on Freenode and ended up in <code>##namespace</code>, then I figured out that it is <code>##C</code> like <code>##linux</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211048844,
            "is_me_message": false,
            "last_edit_timestamp": 1600888262,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600888095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so it is.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211048894,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1600888123,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yessssssssss!!!!changing that line <code> cmp byte rdi, 0</code> by<code> cmp dil, byte 0</code> worked. but I still did not know why with my unit test worked, but then when running a tester.c didnt. so  using what Wesley suggested me, I print the whole section of memory around and found out the problem, when running just unit test by coincidence there 0 in the rest of the bytes. I also realized, that this line  <code>mov rdi, [rbx + r12]</code> could be simplified because i was bringing the 8 bytes of memory each time over the loop</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211062807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600895425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>thanks everyone for replying :) &lt;3</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211062827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600895437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101992\">@Julian Squires (he) (F2'17)</span>  i will look up <code>stosb</code> :)  thanks :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211063047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600895561,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i guess maybe after learning asm and having an idea of how does lib.c implement stuff/  i can start thinking of building a compiler or my own languag :P :P :P</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211063088,
            "is_me_message": false,
            "last_edit_timestamp": 1600895756,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ori@eigenstate.org",
                        "full_name": "Ori Dean Bernstein (he) (W2'20)",
                        "id": 255045
                    },
                    "user_id": 255045
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600895589,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8530d9a875ac7f3fa94f11ef887b9c2d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i am also SUPER curious on knowing how openGL works, glsl syntax is like C, but i did not find anything on how it compiles</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211063239,
            "is_me_message": false,
            "last_edit_timestamp": 1600895704,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "mssarratea@gmail.com",
            "sender_full_name": "Sol Sarratea (she) (SP1'20)",
            "sender_id": 255051,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600895673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can always read the code for libc :)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211069975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600900000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>musl isn't too bad for linux, OpenBSD and 9front libc are also pretty nice to read.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211069998,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600900015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://git.musl-libc.org/cgit/musl/tree/src\">https://git.musl-libc.org/cgit/musl/tree/src</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211070025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600900040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://github.com/openbsd/src/tree/master/lib/libc/string\">https://github.com/openbsd/src/tree/master/lib/libc/string</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211070150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600900098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://code.9front.org/hg/plan9front/file/tip/sys/src/libc/port\">https://code.9front.org/hg/plan9front/file/tip/sys/src/libc/port</a></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211070172,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600900120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>...also, for OpenGL, it's complicated, and depends on the graphics card.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211077361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "implementing string clone",
            "submessages": [],
            "timestamp": 1600906771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327359\">@Vinayak Mehta (he) (F1'20)</span> Have you seen uftrace?</p>\n<p><a href=\"https://github.com/namhyung/uftrace\">https://github.com/namhyung/uftrace</a></p>\n<p>It's not very well known, but I'm using it right now and it's gold !  It does exactly what you say</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212003868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601613117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>There is a short demo I copied here</p>\n<p><a href=\"https://github.com/oilshell/oil/blob/master/benchmarks/uftrace.sh\">https://github.com/oilshell/oil/blob/master/benchmarks/uftrace.sh</a></p>\n<p>Basically you compile with <code>-pg</code>, and then you run the program under <code>uftrace</code></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212003923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601613166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>It does <strong>not</strong> require dynamic linking, but it does require recompiling the program with <code>-pg</code></p>\n<p>Demo from my shell script:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ benchmarks/uftrace.sh hello-demo\nHello world\n# DURATION     TID     FUNCTION\n   0.408 us [  6473] | __monstartup();\n   0.242 us [  6473] | __cxa_atexit();\n            [  6473] | main() {\n   7.418 us [  6473] |   puts();\n   7.813 us [  6473] | } /* main */\n</code></pre></div>\n\n\n<p>You can add some code in the <code>main()</code> function and see it appear there.</p>\n<p>I'm pretty sure that is what you're asking for, let me know if it helps!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212003987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601613254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW I just used it to find a stray <code>memset()</code> that was taking 300 ms</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212004007,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601613294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>Very cool tool that even Python doesn't have AFAIK (and other dynamic languages)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212004013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601613309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116399\">@Andy Chu (S1'18)</span> Thank you for pointing me to this! This looks like exactly what I was looking for, I'll try it out today <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212046812,
            "is_me_message": false,
            "last_edit_timestamp": 1601628790,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Tracing code execution path",
            "submessages": [],
            "timestamp": 1601627718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is making templates with macros like <a href=\"#narrow/stream/20283-C/topic/Preprocessor.20templating\">this</a> generally accepted, or is it something that's frowned upon, like using goto?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212483591,
            "is_me_message": false,
            "last_edit_timestamp": 1602017512,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602017230,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd avoid it.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212495312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602024306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I'd also avoid getters/setters)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212495338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602024334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wouldn't say <em>never</em> use it, but I'd question writing code like that regularly.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212495444,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602024405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be interested in seeing a complete program where you felt the need for this, and maybe looking at some alternatives.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212495919,
            "is_me_message": false,
            "last_edit_timestamp": 1602024867,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602024831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah that'd be great, thanks!  I used it in a wrapper I wrote for SDL2 for handling player input ( <a href=\"/user_uploads/13/F07W7qXwlMFktdT1S0x-8LBK/input.c\">input.c</a> <a href=\"/user_uploads/13/CRxPX3Pxt4Bu_YwNZL5Jtuf9/input.h\">input.h</a> ); if you search for MOUSETEMPLATE you'll find all the bits of relevant code.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212585440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602088624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Overall, this wrapper basically uses SDL2 to detect all inputs that have happened within the last game tick, and populates a bunch of bools (or floats, for joystick input) that reflect the state of input devices before the last call to \"lnxInputUpdate\".  Then you can check those bools with the lnxInputGet functions (also, do getters seem appropriate in this context)?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212585998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602088927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>For this, I'd use tables:</p>\n<p>mouseState[NAME][BUTTON] = 1;</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212591664,
            "is_me_message": false,
            "last_edit_timestamp": 1602091570,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602091554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>one really nice thing that C99 brought was designated initializers, so you can declare tables that look like:</p>\n<p>int mouseState[] = {<br>\n    [UP] = 0,<br>\n    [DOWN] = 0,<br>\n    ...,<br>\n};</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212594195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602092703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is mouseState a 2D array in that case, or is that some sort of preprocessor syntax that looks similar?  And I wasn't aware of designated initializers, that's really handy!</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212597712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602094405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>We've been discussing <a href=\"https://www.inf.usi.ch/carzaniga/edu/sysprog17s/hashmap.h\">this API for a hashmap</a> in the Sys Prog weekly group, and it'd be great to hear interpretations of <code>hashmap_set_hash_function</code>, <code>hashmap_put</code>, and <code>hahsmap_get</code> from experienced folks... in particular, why would the interface ask for pointers <code>key_begin</code> and <code>key_end</code>, rather than just a pointer to a key? (And what would be a good way to think about turning a key into the two pointers..?)</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212598660,
            "is_me_message": false,
            "last_edit_timestamp": 1602095209,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602094883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, mouseState[name][button] would be a 2d array</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212599182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Preprocessor templating",
            "submessages": [],
            "timestamp": 1602095111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, I don't particularly like that API -- but I can answer the questions.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212600132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602095564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>htab_set_hash_function</code> is something you'd want if you want any sort of customizability; imagine you only want to hash the <code>name</code> field of a struct. Passing a begin/end is a common way of specifying a range -- it's roughly equivalent to a (start, length) pair.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212600347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602095657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>eg:</p>\n<div class=\"codehilite\"><pre><span></span><code>start = str\nend = str + len\n\nfor(p = start; p != end; p++) hash *= *p\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212600401,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602095689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>my <em>guess</em> from not looking at the code is that they have an assumption that the keys are an opaque binary blob of bytes</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212601309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602096076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, I think I understand... thanks! Out of curiosity, what do you dislike about the API? <br>\ncc <span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"327414\">@Dan Miller (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"329808\">@Peter Stefek (he) (F2'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212603826,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                }
            ],
            "recipient_id": 22639,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097226,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>sure -- so:</p>\n<ol>\n<li>It doesn't make sense to change the hash function after creating a hash table; that'll just make things break horribly if you've done an insert.</li>\n<li>the 'start/end' api for a key is clunky</li>\n<li>it's missing an equality comparison -- do two different strings compare equal? What if I pass a case insensitive cistrhash() function?</li>\n<li>the iterator API is a little clunky, though it's not so bad.</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604265,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think our main problem with it was it was too generic so it was hard to do element wise comparison. For example if it required customizable compare function which the user gave along with the hash  you could actually implement collision resolution</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604638,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> actually said this above as well</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604654,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd probably write something like this (note, designed for linear or quadratic probing, instead of the more textbook chained buckets):</p>\n<div class=\"codehilite\" data-code-language=\"/\"><pre><span></span><code>typedef struct Htab Htab;\ntypedef struct Hentry Hentry;\ntypedef size_t Hiter;\nstruct Htab {\n    uint32_t (*hash)(void *a);\n    int (*eq)(void *a, void *b);\n    size_t  entsz;\n    size_t  entcnt;\n    Hentry  *ent;\n};\n\n\nstruct Hentry {\n    void    *key;\n    void    *val;\n    int32_t hash;\n    char    live;\n};\n\nvoid    htinit(Htab *h,  int32_t (*hash)(void*), int (*eq)(void*, void*));\nvoid    htget(Htab *h, void *k);\nvoid    htput(Htab *h, void *k, void *v);\nvoid    htdel(Htab *h, void *k);\nint htiter(Htab *h, Htiter *i, void **k, void **v);\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604689,
            "is_me_message": false,
            "last_edit_timestamp": 1602099013,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>the htiter function can actually be implemented so that you could use it in an idomatic for loop, too</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>oops, missing one thing to find out if it's done -- though you could look inside the htab struct</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604847,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>...eh. actually.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>for(i = 0; htiter(&amp;h, &amp;i, &amp;k, &amp;v); i++) { ... }</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212604944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>implementation would be something like</p>\n<div class=\"codehilite\"><pre><span></span><code>int\nhtiter(Htab *h, size_t *i, void **k, void **v)\n{\n    if(*i == h-&gt;entsz)\n        return 0;\n\n    for(; *i &lt; h-&gt;entsz; *i += 1){\n        if(h-&gt;ent[*i].live){\n            *k = h-&gt;ent[*i].k;\n            *v = h-&gt;ent[*i].v;\n            return 1;\n        }\n    }\n    return 0;\n}\n</code></pre></div>\n\n\n<p>the tricky bit of this api is that it's returns the first live item &gt;= i, which means that it returns the same index over and over -- until the 'i++' at the end of the for loop steps past it -- and then it skips the dead entries and returns the next live one.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212605041,
            "is_me_message": false,
            "last_edit_timestamp": 1602098424,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602097702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yes without a comparison function too, this api makes it impossible to check for collisions, unless it is done in user space</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212605944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602098121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah -- or you do pointer equality of the keys.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212605995,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "C Hashmap",
            "submessages": [],
            "timestamp": 1602098149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>I'm trying to write a very small binary in C with no stdlib. I'm writing some inline asm to make syscalls, and things seem to be working. However, there's strange behavior that occurs, and I think my code works only by accident. For instance, the following code causes a segfault:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s\">\"AAAA\"</span><span class=\"p\">;</span>\n<span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">'X'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>What's more is that I have a for loop that never terminates, even though it's of the form <code>for (int i = 0; i &lt; 10; i++)</code>. Trying to printf the value of <code>i</code> causes a segfault as well. printf in other parts of the program does not segfault.</p>\n<p>I'm working with a ton of random compiler flags because I want to keep my binary very small. Is anyone available to take a look at this some time this week?</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216797607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Inline asm clobbers registers?",
            "submessages": [],
            "timestamp": 1605453419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>char* foo = &quot;AAAA&quot;;\nfoo[0] = &#39;X&#39;;\n</code></pre></div>\n<p>...man, that's a historical footgun; string literals are const, even though it's not reflected in the type. Because once they weren't const.</p>\n<p>Try char foo[], which makes it into an array.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216803345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Inline asm clobbers registers?",
            "submessages": [],
            "timestamp": 1605461120,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>What's more is that I have a for loop that never terminates, even though it's of the form for (int i = 0; i &lt; 10; i++). Trying to printf the value of i causes a segfault as well. printf in other parts of the program does not segfault.</p>\n</blockquote>\n<p>Printf uses the stdlib, so if you're not initializing the stdlib, you're going to get crashes. I'm surprised it works in other parts of the program. But if you <em>are</em> initializing the stdlib, what could be happening is that you're smashing the stack.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216803390,
            "is_me_message": false,
            "last_edit_timestamp": 1605461220,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Inline asm clobbers registers?",
            "submessages": [],
            "timestamp": 1605461167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>happy to help out.</p>",
            "content_type": "text/html",
            "display_recipient": "C",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216803392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22639,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20283,
            "subject": "Inline asm clobbers registers?",
            "submessages": [],
            "timestamp": 1605461174,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
