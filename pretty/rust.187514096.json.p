{
    "anchor": 187514096,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>putting <code>Foo: Sized</code> on the trait itself makes it not object safe, which also doesn't work. you can put it on the method though: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=794fca2e77d47ca5ba712464eacd1eef\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=794fca2e77d47ca5ba712464eacd1eef\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=794fca2e77d47ca5ba712464eacd1eef</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm. At a high-level  I'm thinking of this as a sort of \"copy on write\", and in my mind it seems easier for the callers to not have to worry about it and isolate all of the cloning bits inside the trait implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954495,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> check out the <code>Cow</code> type, then! <span aria-label=\"cow\" class=\"emoji emoji-1f404\" role=\"img\" title=\"cow\">:cow:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also, eep, I had \"object safety\" in the back of my mind to look up when I have the time, guess now is that time (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514179,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, i still don't quite understand object safety - i should also get around to that sometime(:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954578,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"6426\">@Jesse Luehrs (he) (F1'14)</span> Cool! One question, why is the <code>where Self: Clone + Sized + 'static </code> on the method? Since it is constraining <code>Self</code>, I would have expected it to be on the entire trait.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>putting it on the trait itself makes the trait not object safe, which means you can't make trait objects out of it (so <code>Box&lt;dyn Foo&gt;</code> is illegal</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514268,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>What's <code>Self</code> refer to in that constraint? The type of the object implementing the trait?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, the method won't be available unless the type of the object matches those constraints</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514371,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm, okay. And what's the deal with the <code>'static</code> lifetime? I'm used to thinking of that as meaning \"for my entire program\". But is that what it means here?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580954946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Presumably not, since these structs could be dropped.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll have to spend more time wrapping my head around this. Looks like it should solve my problem though, thanks a ton for the help!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>'static</code> as a trait bound essentially means that it can't have a lifetime shorter than <code>'static</code> - in particular types without lifetime constraints are satisfied by <code>'static</code>, so it only excludes like <code>&amp;'a Foo</code> or <code>Bar&lt;'a&gt;</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514631,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>but <code>&amp;'static Foo</code> or <code>Bar</code> are fine</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955179,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, okay. I must have gotten mixed up thinking about toplevel statics, but that makes sense if you consider them as types that just never drop because their scope never ends.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's also not something i'm 100% clear on, but i think that's the basic idea</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "website",
            "content": "<p>the lifetime <code>'static</code> basically just means \"contains no references\" or \"any references it does contain are <code>'static</code>\"</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514854,
            "is_me_message": false,
            "last_edit_timestamp": 1580955518,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Uh oh, I just tried this approach in my codebase and got an error at the callsite: \"error: the <code>add_prefix</code> method cannot be invoked on a trait object\"</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514863,
            "is_me_message": false,
            "last_edit_timestamp": 1580955542,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>We don't actually need trait objects in our app --- my understanding is that they're useful when you want to expose an open dispatch system for calling code. But in our case we have an app rather than a library crate or whatever. We considered <code>enum Section {KindA, KindB}</code> but went with traits because they felt like the code would be a bit cleaner (separate impl blocks rather than every-method-is-a-big-match)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But maybe the latter would work better? Or there's some other approach we haven't considered?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187514944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580955712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the example updated to show the problem I mean: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ede69ded8c60b78b2c1691703678641\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ede69ded8c60b78b2c1691703678641\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ede69ded8c60b78b2c1691703678641</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187515403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1580956332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>rustc folks confirmed that; it's been picked up for beta, so the fix will be stable by 1.42.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187516633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "hard-to-repro rustc hang",
            "submessages": [],
            "timestamp": 1580958597,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>seems like there should be a 1.41.1?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187551722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "hard-to-repro rustc hang",
            "submessages": [],
            "timestamp": 1580999097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>Hey, I'm trying to use a bindgen'ed C library, which uses this pattern:<br>\nThe library passes around <code>image</code>s, which can store different things in the pixels, eg, either RGBA values,  or 16 bit depth values.</p>\n<p>When it's time to get the data, the library will call <code>get_buffer(image)</code>, which returns a <code>*uint8_t</code> then does the (normal in C but terrifying in Rust)  thing of casting it to <code>void *</code> then casting it to the pointer of the appropriate type. Eg:</p>\n<div class=\"codehilite\"><pre><span></span>    uint16_t *depth_data = (uint16_t *)(void *)k4a_image_get_buffer(depth_image);\n</pre></div>\n\n\n<p>How do I do this in unsafe Rust?</p>\n<p>Bindgen gave me a wrapper function for <code>k4a_image_get_buffer</code> that returns <code>*u8</code>, but <code>mem::transmute</code> won't let me because u8 and u16 are different sizes:</p>\n<div class=\"codehilite\"><pre><span></span>        let depth_data: &amp;[u16] = mem::transmute(&amp;k4a_image_get_buffer(depth_image));\n</pre></div>\n\n\n<p>I've found <code>transmute_copy</code> which doesn't have the sizedness check, but I don't want to copy, I want to do like C and treat this blob of memory behind this pointer as bunch of <code>u16</code>s one after another.</p>\n<p>I know this is blindingly dangerous, but I don't know how else to do it, if all the library does is give me a pointer and tells me my buffer data is behind it, I can only trust it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187555872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581001764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Do you need to do it in unsafe code? Can you return an iterator that packs the u16s with bit operations? (I would expect that this would get optimized out by llvm)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187556254,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581002019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>.buffer_by_u16() etc</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187556351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581002075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You probably want <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\">https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187558617,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581003482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can cast the pointer to *u16 first and then call that to get a &amp;[u16], then do the rest in safe rust</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187558685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581003518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>ok, so you're saying I implement some wrapper that does the byte un/packing operations myself, so that when I want to read/write <code>depth_data[5]</code>, reads do <code>myu16 = buffer[10] &lt;&lt; 8 + buffer[11]</code> and writes <code>buffer[10] = myu16&gt;&gt; 8; buffer[11] = myu16 &amp; 256</code> (or similar bit fiddling ops)</p>\n<p>I'm up for it, just seems like work, instead of trusting the library and casting... Also this is a common C pattern, so I thought unsafe rust would have that ability<br>\nI guess LLVM would probably remove that stuff, which is good. I'm considering also writing extra C functions that do those casts in the C, so like <code>image_get_buffer_u16(depth_image) -&gt; *u16</code>, and another <code>image_get_buffer_u32(rgba_image) -&gt; *u32</code>, then the transmute would work.</p>\n<p>Seems like a fun unsafe+FFI detail to look into, I'm going to go read how others do it</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187558708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581003536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>ah thanks Jamie, will look at that</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187558756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581003572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"256969\">@Am\u00e9d\u00e9e d'Aboville (they) (W2'20)</span> I used <code>from_raw_parts</code> a couple times in my bindgen wrapper; there's examples here: <a href=\"https://github.com/capnfabs/blitz/blob/master/libraw/src/lib.rs#L187\" target=\"_blank\" title=\"https://github.com/capnfabs/blitz/blob/master/libraw/src/lib.rs#L187\">https://github.com/capnfabs/blitz/blob/master/libraw/src/lib.rs#L187</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187559503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581004060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>thanks Fabian!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187562736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581006051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>One reason this is unsafe is that &amp;[u8] has a 1-byte alignment requirement, while &amp;[u16] is 2-byte. If your pointer is odd, that's UB.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187565499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581007736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>They did nominate the fix for stable, but made no promises it would get released as a point release</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187571491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "hard-to-repro rustc hang",
            "submessages": [],
            "timestamp": 1581011543,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68873#issuecomment-582711502\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68873#issuecomment-582711502\">https://github.com/rust-lang/rust/issues/68873#issuecomment-582711502</a> is the reply I got (which seems reasonable but I don't know much about rust's release processes)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187571565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "hard-to-repro rustc hang",
            "submessages": [],
            "timestamp": 1581011616,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting. The linked PR has a comment saying it was \"stable-accepted\" which is still cryptic. <a href=\"https://github.com/rust-lang/rust/pull/67667#issuecomment-582973854\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67667#issuecomment-582973854\">https://github.com/rust-lang/rust/pull/67667#issuecomment-582973854</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187593165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "hard-to-repro rustc hang",
            "submessages": [],
            "timestamp": 1581026458,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Is this also endian-unsafe? Do the buffers every hit the disk or network?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187593462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581026655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Is there any way to assert that all types implementing the trait Foo will have a field prefix so we can access it directly?</p>\n</blockquote>\n<p>Fields in traits is something the people want but the other people haven't figured out yet. This would be something like saying which struct field the trait should map to. There was a WIP RFC once upon a time: <a href=\"https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md\" target=\"_blank\" title=\"https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md\">https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md</a></p>\n<blockquote>\n<p>Or do we need to implement a method that returns a mutable borrow? If the latter, is there any way to make it clear that the method should only be used by the trait internals and not by consumers?</p>\n</blockquote>\n<p>You may need to do the mutable borrow accessor thing. One way to have internal methods on a trait is to use <code>#[doc(hidden)]</code> on them to prevent them from being documented. Another would be to have two almost-identical traits <code>Foo</code> and <code>FooInternal</code>, and have a blanket <code>impl &lt;T: FooInternal&gt; Foo for T</code> that forwards all the methods. The mutable accessor would be on <code>FooInternal</code>, and your crate's types <code>impl FooInternal</code>. </p>\n<p>(It's unclear from the question if consumers are meant to be able to implement <code>Foo</code> for their types, and what it means to rely on a \"field\" if they should be able to but can't say what the \"field\" is.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187594615,
            "is_me_message": false,
            "last_edit_timestamp": 1581027590,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1581027557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>you're right, that would be bananas! Should I check if my pointer is odd (&amp;panic) before casting it to &amp;[u16]?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187609574,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581044795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>alignment rules are typically an implementation detail of the architecture/allocator/etc - i don't think that implementing your own hardcoded checks is likely to be the right thing</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187609718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581045032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>alignment rules are one of the reasons why that kind of transmute can't be done safely in full generality, but if you're given a pointer to a chunk of memory that the underlying c library claims is correct, i think just accepting it is the right thing to do (c doesn't really give you tools to do much better)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187609754,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581045114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I just found this crate: <a href=\"https://docs.rs/retry/1.0.0/retry/\" target=\"_blank\" title=\"https://docs.rs/retry/1.0.0/retry/\">retry</a>, and it's both quite well-documented and works in a way that is .... completely reasonable?! I'm amazed (and inspired, accepting an iterator for a retry delay sequence is genius!)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187610823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "retry crate",
            "submessages": [],
            "timestamp": 1581046800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>The only thing that I think might be missing is <code>async</code> support. But now that futures are stable, this might be quickly added. I need it only for sync things, so that's not a problem (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187610885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "retry crate",
            "submessages": [],
            "timestamp": 1581046847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is a very nice series talking about tradeoffs between enums and classes for modeling variation: <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/05/05/where-rusts-enum-shines/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2015/05/05/where-rusts-enum-shines/\">http://smallcultfollowing.com/babysteps/blog/2015/05/05/where-rusts-enum-shines/</a> (note the date --- I think this was before trait objects were fully worked out in Rust)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187617997,
            "is_me_message": false,
            "last_edit_timestamp": 1581058872,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "trait method returning same type",
            "submessages": [],
            "timestamp": 1581058840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>alignment rules are typically an implementation detail of the architecture/allocator/etc</p>\n</blockquote>\n<p>Rust also has its own alignment rules (<a href=\"https://doc.rust-lang.org/nomicon/repr-rust.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nomicon/repr-rust.html\">https://doc.rust-lang.org/nomicon/repr-rust.html</a>) and unaligned reads/writes are UB even on platforms that allow them.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187632613,
            "is_me_message": false,
            "last_edit_timestamp": 1581076466,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Sketchy Transmute",
            "submessages": [],
            "timestamp": 1581076428,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255475\">@Akshay Aurora (he) (W2'20)</span> and I paired a bit looking into Rust Analyzer today, and he saw that they <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members\">already support this</a>!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187793514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581318957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>That's fantastic - also I just learned that lsp-mode had added a RA backend, and it automatically adds use statements now. Guess it leapfrogged again (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187814850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581341464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>The C library I'm binding against uses this pattern:</p>\n<div class=\"codehilite\"><pre><span></span>#[repr(C)]\npub union k4a_float3_t {\n    #[doc = &quot;&lt; X, Y, Z representation of a vector.&quot;]\n    pub xyz: k4a_float3_t__xyz,\n    #[doc = &quot;&lt; Array representation of a vector.&quot;]\n    pub v: [f32; 3usize],\n    _bindgen_union_align: [u32; 3usize],\n}\n\n#[repr(C)]\npub struct k4a_float3_t__xyz {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32,\n}\n</pre></div>\n\n\n<p>I guess this is a way to have one's cake and eat it too, by being able to refer to a single 3d point in memory either as an array or by individual x,y,z names. I'm guessing/hoping that this is because the two branches of the union actually have the same layout.<br>\nIs this common in C?<br>\nIt's kind of weird in Rust though, because union access is <code>unsafe</code>. Am I ok if I just pick one of the union's options and eg change my binding to <code>type k4a_float3_t = k4a_float3_t__xyz </code>?  Users who really want to write a <code>[f32;3]</code> into the type can use <code>mem:transmute</code> and have to type unsafe, but the majority of the users will be able to access the individual <code>.x .y .z</code> components without unsafe.<br>\nIs that ok, or is there some alignment/API structure to consider?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187860736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "C Unions in Rust",
            "submessages": [],
            "timestamp": 1581370476,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I think what you're suggesting will work fine :) You're also able to do both if you really wanted to; e.g. if you had a wrapper called Float3 you could do this:</p>\n<div class=\"codehilite\"><pre><span></span>struct Float3(k4a_float3_t__xyz);\n\nimpl Float3 {\n    pub fn as_float_slice() -&gt; &amp;[f32] {\n        unsafe {std::slice_from_raw_parts(&amp;self.0 as *const f32)}\n    }\n}\n</pre></div>\n\n\n<p>which would be ok because bindgen has applied <code>repr(C)</code> and therefore has guaranteed that x,y,z are all stored sequentially.</p>\n<p>There's more details here: <a href=\"https://users.rust-lang.org/t/struct-as-slice/23513/3\" target=\"_blank\" title=\"https://users.rust-lang.org/t/struct-as-slice/23513/3\">https://users.rust-lang.org/t/struct-as-slice/23513/3</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187867756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "C Unions in Rust",
            "submessages": [],
            "timestamp": 1581375475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>ooh, can anyone get that working in vim? I'm using coc-rust-analyzer and can't figure out how to fire off that assist (or maybe assists in general)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187936693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581444200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/82cf9a87a747f31d266859823a2e5b71?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203403\">@Colin Rothfels (he) (SP1'19)</span> Check this issue I created to inquire about assists - <a href=\"https://github.com/fannheyward/coc-rust-analyzer/issues/128\" target=\"_blank\" title=\"https://github.com/fannheyward/coc-rust-analyzer/issues/128\">https://github.com/fannheyward/coc-rust-analyzer/issues/128</a>. Although, I still haven't figured out how to use them to fill in missing imports.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187957385,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "colin.rofls@gmail.com",
                        "full_name": "Colin Rothfels (he) (SP1'19)",
                        "id": 203403
                    },
                    "user_id": 203403
                }
            ],
            "recipient_id": 22680,
            "sender_email": "akshayaurora@yahoo.com",
            "sender_full_name": "Akshay Aurora (he) (W2'20)",
            "sender_id": 255475,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581456385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>awesome, works like a charm. thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187957827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581456620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/82cf9a87a747f31d266859823a2e5b71?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203403\">@Colin Rothfels (he) (SP1'19)</span> I'm curious on how you are using the assists? It's hard to know when to trigger the CocAction manually, since it doesn't show up while you are typing in insert mode.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187965519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "akshayaurora@yahoo.com",
            "sender_full_name": "Akshay Aurora (he) (W2'20)",
            "sender_id": 255475,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581462293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have the following in my vimrc:</p>\n<div class=\"codehilite\"><pre><span></span>nmap &lt;silent&gt; &lt;leader&gt;ca &lt;Plug&gt;(coc-codeaction)\nnmap &lt;silent&gt; &lt;leader&gt;cf &lt;Plug&gt;(coc-fix-current)\n</pre></div>\n\n\n<p>the first shows a list of actions available in the current scope, and you can select them; the second will just try whatever it can think of to fix the next error on the current line. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187965624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581462386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>but I do have to go to command mode.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187965635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581462395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>but the actions should generally correspond to warnings/errors</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187965680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581462442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/82cf9a87a747f31d266859823a2e5b71?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks, I didn't know about <code>coc-fix-current</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187965892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "akshayaurora@yahoo.com",
            "sender_full_name": "Akshay Aurora (he) (W2'20)",
            "sender_id": 255475,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581462613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>me neither, but I found it buried in the docs</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187966937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581463526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>and so far it's doing what I want? <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 187966952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "RLS / compiler introspection to support editing?",
            "submessages": [],
            "timestamp": 1581463539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/43629df76ff51972188919f392a50fccf6233dfb?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>was reading some bug reports and responses on an issue i ran into where Rust won't handle non-blocking IO correctly on stdin and saw a general sentiment along the lines of \"Rust isn't meant for non-blocking I/O\".  if that's the case, threads and async I/O are needed for just that.</p>\n<p>here's what i ran into, maybe there's a way around this but:</p>\n<div class=\"codehilite\"><pre><span></span>unsafe {\n    libc::fcntl(fd.as_raw_fd(), libc::F_SETFL, libc::O_NONBLOCK);\n}\nlet r = io::stdin().read_line(&amp;mut buffer)?;\n</pre></div>\n\n\n<p>with nothing available to be read on stdin, the above results in what looks like something unhandled from libc (not a rust Error that you can match against): <br>\n<code>Error: Os { code: 35, kind: WouldBlock, message: \"Resource temporarily unavailable\" }</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188450270,
            "is_me_message": false,
            "last_edit_timestamp": 1582056665,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamesmlee@gmail.com",
            "sender_full_name": "James M Lee (F1'15)",
            "sender_id": 8477,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "udp with tokio and futures",
            "submessages": [],
            "timestamp": 1582032647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "website",
            "content": "<p>it looks like iterating through the lines of a file moves the \"cursor\" to the end of the file, even with a brand new <code>BufReader</code>, even if neither the file nor the bufreader is mutable, does that sound right to folks?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188470948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "file buffers and seeks",
            "submessages": [],
            "timestamp": 1582046363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>rust stdlib file handling is probably really not good with non-blocking IO. I have had success with either fully <code>nix</code>-based  IO, or fully tokio IO. But mixing the two is going to go about as well as doing the same in C - mixing raw FD IO and C stdlib <code>FILE*</code> IO is not going to go very well. There's bufferrs in the way, and idiosyncratic ways that the various libraries handle their file descriptors that you have to actively work against if you do nonblocking stuff yourself.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188483482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "udp with tokio and futures",
            "submessages": [],
            "timestamp": 1582054475,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263714\">@Tamreen Khan (he) (SP1'20)</span> what you're describing sounds surprising to me, but I'm not familiar enough with Rust's file APIs to know exactly what you're referring to. Can you paste in a code snippet that shows exactly (with an assertion?) what's happening that doesn't seem right?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188504248,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "file buffers and seeks",
            "submessages": [],
            "timestamp": 1582070614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Java streams have <code>peek</code> which works exactly like this, an intermediate op that doesn't terminate.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188511563,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "iterator inspect",
            "submessages": [],
            "timestamp": 1582080178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have a crate with a library part and a binary part (via <code>[lib]</code> and <code>[[bin]]</code> parts in Cargo.toml); the library is faiiirly platform-agnostic, but the binary only works on linux. Is there a way to prevent the binary from getting built &amp; installed on non-linux platforms? I have contemplated conditionalizing out the whole <code>main.rs</code> module via <code>#![cfg(target_os = \"linux\")]</code>, but that prevents <code>cargo test</code> from running on non-linux platforms. Is there a way to do that?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188512839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582082463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>So I was playing around with this, and it seems you can't just have binaries ... not compile? Either they all have to compile on all the platforms (and risk doing something wrong on the unsupported ones) or be unable to compile _any_ code on that unsupported platform - I was using <code>#[cfg(all(not(test), (target_os = \"linux\")))]#[compile_error(\"not supported\")]</code> in <a href=\"http://main.rs\" target=\"_blank\" title=\"http://main.rs\">main.rs</a>, and weirdly enough - <code>cargo test</code> now fails to compile on a non-linux platform. But there's no way to tell it to not compile!</p>\n<p>Weird and frustrating. I'll just panic on startup, I guess? Not ideal for any user /:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188515128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582086606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>can you just put the <code>#[cfg(...)]</code> on <code>fn main</code> directly, instead of the whole module?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188517768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582091465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Nope. A main-less main file will fail to compile, and prevent cargo test /:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188518083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582092092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Hello! I have a very non-urgent profiling / performance optimisation task to do in my current project and figured it could be a fun thing to pair on :) If anyone is interested, let me know!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188554759,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582126369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yep, I'm in -- grabbing lunch a bit later, but if you're still up for it in a bit...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188565991,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582133656,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>what I normally do is have a main function like,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[cfg(not(target_os = </span><span class=\"s\">&quot;linux&quot;</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;this executable only works on linux&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(target_os=</span><span class=\"s\">&quot;linux&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// your program here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188578615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582142015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>hey <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> ! I could work on this now for the next hour or so (cc <span class=\"user-mention\" data-user-id=\"263501\">@Miles McCain (he) (SP1'20)</span> who was also interested I think? )</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188578790,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582142126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I'm sitting in the pairing space.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188578815,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582142145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>there's <a href=\"https://async.rs/\" target=\"_blank\" title=\"https://async.rs/\">async-std</a> as a third alternative. I haven't used it but I greatly enjoy <a href=\"https://async.rs/blog/stop-worrying-about-blocking-the-new-async-std-runtime/\" target=\"_blank\" title=\"https://async.rs/blog/stop-worrying-about-blocking-the-new-async-std-runtime/\">their blog post on their new executor</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188584335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "udp with tokio and futures",
            "submessages": [],
            "timestamp": 1582145666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah - it's unfortunate that you have to panic at runtime... I was hoping we could stop the compiler from chomping out all that code. panicking is what I do now, too, though.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188590786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582149983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess I can separate the main and lib crates into two bits, and leave the lib separately testable... make it a cargo workspace (that'll be testable only on linux, but component crates will be fine)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188590860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582150033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just read and really enjoyed this blog post: <a href=\"https://fasterthanli.me/blog/2020/working-with-strings-in-rust/\" target=\"_blank\" title=\"https://fasterthanli.me/blog/2020/working-with-strings-in-rust/\">https://fasterthanli.me/blog/2020/working-with-strings-in-rust/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188596624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "blog post: working with strings in rust",
            "submessages": [],
            "timestamp": 1582154676,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>it really clearly explains why C not having &amp;str and String is Very Bad and why rust having it is Very Nice Even If It Seems Annoying At First</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188596643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "blog post: working with strings in rust",
            "submessages": [],
            "timestamp": 1582154716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>... though, the JS version of the code will break on emoji.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188598475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "blog post: working with strings in rust",
            "submessages": [],
            "timestamp": 1582156593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(Well. The whole concept of uppercasing a character is poorly defined.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188598823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "blog post: working with strings in rust",
            "submessages": [],
            "timestamp": 1582156837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Don't know how I feel about this article. It kind of touches on the Unicode bits, but not very well, and it feels like it obscures the point. And generally goes through all of the mess of implementing utf8 decoding and handling for C, but just using a library for Rust -- which of course makes rust look cleaner; but you should be using a library in <em>ANY</em> language.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188599001,
            "is_me_message": false,
            "last_edit_timestamp": 1582157535,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "blog post: working with strings in rust",
            "submessages": [],
            "timestamp": 1582157041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Could you use a build script and look at the <code>CARGO_CFG_TARGET_OS</code> env var?  <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\" target=\"_blank\" title=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188642836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582209651,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Aaah that might work!! For now I did the above - separate the lib into a crate and put them both in a workspace</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188643552,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582209997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>The ws doesn't test - same problem, but the lib does so that's fine for me now (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188643608,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582210019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Oh right this still might not do what you want...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188643685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "cargo targets dependent on the platform?",
            "submessages": [],
            "timestamp": 1582210072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Ok, here's what we tried yesterday:</p>\n<ul>\n<li>cargo-instruments was a good start, but we ended up hitting a limitation because the code has been aggressively inlined and so we couldn't obviously see what was slow</li>\n<li>We decided to try valgrind/kcachegrind to figure out the exact control flow on <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> 's suggestion. Valgrind doesn't work on OSX since forever though, so I am currently setting up a docker container to run valgrind.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188681414,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f3c7",
                    "emoji_name": "horse_racing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ttumiel@gmail.com",
                        "full_name": "Tom Tumiel (SP1'20)",
                        "id": 263646
                    },
                    "user_id": 263646
                }
            ],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582235041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Also tried using <code>cargo flamegraph</code>, which produces similar, but less useful, results than <code>cargo instruments</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188681517,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582235085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>(I'm keeping some notes here as I work because it would be good to write this up at some point too)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188681570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582235112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Huh -- ok, if you're getting a linux environment anyways, it's worth taking a shot with perf, too.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188682071,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582235382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Valgrind turned up some interesting stuff! </p>\n<ul>\n<li>Apparently I was spending a lot of instructions in <code>read_bits</code> making bitmasks (the instruction <code>(1 &lt;&lt; bit_num) - 1</code>. But because there's only 32 possible values for <code>bit_num</code>, I made a precomputed array for this instead and it's way quicker <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></li>\n<li>Realised that I could halve the number of calls to <code>read_bits</code> by changing the signature of a different method (because you would call count_1s_in_a_row() and then 'read off' the terminating zero, but you already knew what it was and would just throw it away). So I changed the contract of <code>count_1s_in_a_row()</code> to also throw away the zero, which saved more time again.</li>\n</ul>\n<p>These changes mean we're now spending 300 ms in the bit-reading code down from 800 ms when I started optimising this part of the code <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>\n<p>Telling the compiler to inline those methods takes us down to around 100ms, but I'm not convinced that results are statistically significant anymore.</p>\n<p>Going to start looking into that extremely suspicious <code>malloc</code> (which is where 20% of the samples fall, according to <code>instruments</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188686985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582238604,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Valgrind says that about 22% of the instructions being run are malloc / free - related</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188687918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582239390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/siu9a5f33ciMqPOScmt2wN_0/Screen-Shot-2020-02-20-at-5.57.51-pm.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-20-at-5.57.51-pm.png\">Screen-Shot-2020-02-20-at-5.57.51-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/siu9a5f33ciMqPOScmt2wN_0/Screen-Shot-2020-02-20-at-5.57.51-pm.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-20-at-5.57.51-pm.png\"><img src=\"/user_uploads/13/siu9a5f33ciMqPOScmt2wN_0/Screen-Shot-2020-02-20-at-5.57.51-pm.png\"></a></div><p>Also extremely cool how you can see traces of your data in the output - it's a 4038 x 6144 image, which is 24,809,472 pixels, and there's exactly that many calls to 'read bits' and 'count continuous zeros', and the two grad_and_weighted_avg functions total to that value too <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188688219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582239606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is super cool, thanks for sharing your journey on this thread!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>using timing to judge code performance can get very tricky since things like CPU throttling and OS scheduling start to come into play and introduce noise</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>for cachegrind you have access to other metrics which should be more stable, like # of cache misses or instruction counts</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>which you used :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689519,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f609",
                    "emoji_name": "wink",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>two questions:</p>\n<ul>\n<li>Did it end up being easy to run docker / valgrind on OS X? I'm not sure where I'd start with that, especially to get what looks like nice GUI output</li>\n<li>Did you find any \"lightweight\" perf tools that only talk about your code? When I've done profiling with Instruments in the past, I always end up digging through the stacktraces to figure out which bits are from my program --- that's what I can change, so often I don't care about how my fn calls some system fn that calls 5 other things that takes a lot of time.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>you might be interested in victor stinner's blog posts he wrote during the development of <a href=\"https://pypi.org/project/pyperf/\" target=\"_blank\" title=\"https://pypi.org/project/pyperf/\">pyperf</a>: <a href=\"https://vstinner.github.io/category/benchmark.html\" target=\"_blank\" title=\"https://vstinner.github.io/category/benchmark.html\">https://vstinner.github.io/category/benchmark.html</a>, which go into gory detail about how hard this can be in general</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>pyperf itself might be useful, <code>pyperf system tune</code> can control things like CPU throttling and NUMA pinning</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>(a lot of stuff only works on linux though, and won't work in a linux VM, you need linux running on actual hardware)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>sorry to just shout out a bunch of information, hope some of that is useful</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689709,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> how stable are instruction counts? Would it be reasonable to expect runs on identical inputs (data, random seed, etc.) to take exactly the same number of instructions? I.e., could one use it for performance regression testing?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think so? I'm definitely not an expert here.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582240927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It sounds like one needs linux on actual hardware though? Raspberry Pi is probably the best I could do in that dept, but seems like the results might not be transferrable</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188689904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582241046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>not specifically for valgrind</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188690205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582241325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p>the linux on actual hardware bit was for <code>pyperf system tune</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188690214,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582241337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://pyperf.readthedocs.io/en/latest/system.html\" target=\"_blank\" title=\"https://pyperf.readthedocs.io/en/latest/system.html\">https://pyperf.readthedocs.io/en/latest/system.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188690222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582241349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I <em>also</em> don't know much about this, but I would expect instruction counts to be pretty deterministic, especially for stuff with well-defined inputs and outputs. The fact that I could look at my instruction count and correlate it with my data today gives me lots of confidence in that. </p>\n<p>Observationally from my work today though, using Valgrind for something like this is <em>slow</em>. It runs a couple orders of magnitude slower than with a sampling profiler. That would make me reluctant to use it in e.g. a CI config, but I guess it would be a useful tool otherwise.</p>\n<p>I'll keep writing about it here as I work, and probably put it into a blog post or something in the end.</p>\n<p>Regarding Valgrind on Docker / getting a nice UI:</p>\n<ul>\n<li>My Dockerfile (with a comment for how to build / run) is here: <a href=\"https://github.com/capnfabs/blitz/blob/master/machine-images/valgrind/Dockerfile\" target=\"_blank\" title=\"https://github.com/capnfabs/blitz/blob/master/machine-images/valgrind/Dockerfile\">Dockerfile</a>. That drops you in to a bash shell, with your pwd mounted to <code>/repo</code>in Docker.</li>\n<li>Then, I run <code>cargo build --release &amp;&amp; $ valgrind --tool=callgrind --dump-instr=yes --collect-jumps=yes --simulate-cache=yes target/release/blitz</code></li>\n<li>This drops a <code>callgrind.out.[pid]</code> file into the mounted dir, which is then also accessible from OSX</li>\n<li>Meanwhile, on OSX, you can <code>brew install qcachegrind</code> and then open the <code>callgrind.out</code> files in <code>qcachegrind</code>. You'll need to modify some settings to get it to load your Rust sources correctly (because the mappings in the files are wrong, because the file paths are different from the container to OSX), but it works pretty well!</li>\n</ul>\n<p>Thanks for the encouragement / collaborative brainstorming / following along! It's been fun writing these notes as I go and getting quick feedback.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188702693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582258859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I also found this blog post to be super helpful: <a href=\"http://www.codeofview.com/fix-rs/2017/01/24/how-to-optimize-rust-programs-on-linux/\" target=\"_blank\" title=\"http://www.codeofview.com/fix-rs/2017/01/24/how-to-optimize-rust-programs-on-linux/\">http://www.codeofview.com/fix-rs/2017/01/24/how-to-optimize-rust-programs-on-linux/</a></p>\n<p>And lifted the Dockerfile from here originally: <a href=\"https://hub.docker.com/r/retep007/rust-valgrind/dockerfile\" target=\"_blank\" title=\"https://hub.docker.com/r/retep007/rust-valgrind/dockerfile\">https://hub.docker.com/r/retep007/rust-valgrind/dockerfile</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188702829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582259143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> regarding your q2:</p>\n<blockquote>\n<p>Did you find any \"lightweight\" perf tools that only talk about your code?</p>\n</blockquote>\n<p>No, I didn't. This isn't a problem for my code because it's just crunching a bunch of numbers and therefore basically <em>all</em> slowness is my fault :) I could see the value in it, and could also see that it would be hard to implement filtering like this well <img alt=\":thinking_face_3d:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/14067.gif\" title=\"thinking face 3d\"> </p>\n<p>I think also more broadly, there hasn't been heaps of attention paid to ergonomics of profiling tools like there has been for other aspects of development... I wonder what a gentle learning curve would look like for a profiler, for example? But this could also just be that I'm brand new to this and haven't found a tool that \"really works for me\" yet. cargo-instruments <em>was</em> pretty great as a first pass though, and I did manage to double my performance with about 30 mins of work using that.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188703082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582259560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>I've tentatively put a Rust GUI workshop on the calendar for 10-12 next Tuesday. The exact format of it is still open to discussion. I can present my talk on reactive UI patterns in Rust. Also <span class=\"user-mention\" data-user-id=\"203403\">@Colin Rothfels (he) (SP1'19)</span> and I can help you \"cargo new\" a new project based on druid, and talk through some of the tricky parts.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188735798,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "davidelu93@gmail.com",
                        "full_name": "David E Lu (he) (W1'16)",
                        "id": 100322
                    },
                    "user_id": 100322
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "s@aljmz.com",
                        "full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
                        "id": 263563
                    },
                    "user_id": 263563
                }
            ],
            "recipient_id": 22680,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582295370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Totally agree re: ergonomics. I suspect that software would be significantly faster and better if profilers were half as developed as, e.g., type systems or unit testing tools.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188762539,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582311221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I was spoiled when I saw my first programming environment while I was in a physics lab. We were doing something with (I think?) Matlab, and when you ran the program it put percentages next to every line (like where you'd see line numbers in an editor) that showed how much time your program spent on that line. It just automatically did that, and so it was very easy to see how much time each part of your program took.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188762708,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on profiling / performance optimisation",
            "submessages": [],
            "timestamp": 1582311326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>Kind of a small-answers-style post: I am coming back to a somewhat complex Rust project after a year or two away and quickly became frustrated with how past-me handled errors by converting everything into <code>String</code>s. I knew there was a better way to do this, and it had something to do with <code>From</code>, but I wasn't sure how to connect the pieces. Lo and behold, there is an amazing <a href=\"https://blog.burntsushi.net/rust-error-handling/\" target=\"_blank\" title=\"https://blog.burntsushi.net/rust-error-handling/\">BurntSushi blog post</a> on this very subject!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188774030,
            "is_me_message": false,
            "last_edit_timestamp": 1582319140,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dylnuge@gmail.com",
                        "full_name": "Dylan Nugent (he) (S1'20)",
                        "id": 263512
                    },
                    "user_id": 263512
                }
            ],
            "recipient_id": 22680,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Blog post about error handling",
            "submessages": [],
            "timestamp": 1582318960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>A bit late notice but I created an event for a Rust interest group for Monday afternoon at 2pm in Hopper, if any of y'all are interested. It seems we have a lot of Rust interest this batch! <a href=\"https://www.recurse.com/calendar/9017?date=2020-2-23\" target=\"_blank\" title=\"https://www.recurse.com/calendar/9017?date=2020-2-23\">https://www.recurse.com/calendar/9017?date=2020-2-23</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188836400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Interest Group",
            "submessages": [],
            "timestamp": 1582411615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/10bd7dfd5cc9443a996e952ed8483c4f?d=identicon&version=1",
            "client": "ZulipTerminal",
            "content": "<p>Intro to macros: <a href=\"https://danielkeep.github.io/practical-intro-to-macros.html\" target=\"_blank\" title=\"https://danielkeep.github.io/practical-intro-to-macros.html\">https://danielkeep.github.io/practical-intro-to-macros.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188958678,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "azymi@azymi.dev",
            "sender_full_name": "Daniel Keriazis (SP1'20)",
            "sender_id": 264477,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Interest Group",
            "submessages": [],
            "timestamp": 1582573269,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/10bd7dfd5cc9443a996e952ed8483c4f?d=identicon&version=1",
            "client": "ZulipTerminal",
            "content": "<p>Oh also a really good one on Strings vs &amp;str: <a href=\"https://fasterthanli.me/blog/2020/working-with-strings-in-rust/\" target=\"_blank\" title=\"https://fasterthanli.me/blog/2020/working-with-strings-in-rust/\">https://fasterthanli.me/blog/2020/working-with-strings-in-rust/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188959122,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "azymi@azymi.dev",
            "sender_full_name": "Daniel Keriazis (SP1'20)",
            "sender_id": 264477,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Interest Group",
            "submessages": [],
            "timestamp": 1582573580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e4681bc5bff25e25068895223319c149ef4d898f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101701\">@Raph Levien (F1'17)</span> I'm not in the current batch and the workshop is during batch hours, is it possible for me to attend regardless?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188975012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "davidelu93@gmail.com",
            "sender_full_name": "David E Lu (he) (W1'16)",
            "sender_id": 100322,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582584810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>It's certainly fine with me. What I would do to make sure is ask <span class=\"user-mention\" data-user-id=\"811\">@Nick Bergson-Shilcock (he)</span> or <span class=\"user-mention\" data-user-id=\"810\">@David Albert (he)</span> whether they have any problems with it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188975106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582584864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100322\">@David E Lu (he) (W1'16)</span> I think it's fine. If there are other alumni who want to come to this workshop, please ping me on this thread \u2013 I want to make sure we have enough space</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188975925,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "davidelu93@gmail.com",
                        "full_name": "David E Lu (he) (W1'16)",
                        "id": 100322
                    },
                    "user_id": 100322
                }
            ],
            "recipient_id": 22680,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582585541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>want to mention that there was some time zone confusion; this is actually at 1pm tomorrow!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188992344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582607585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/590c575e650d30da45fb6b65616519acc3ac782f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey everyone - I'm new to Rust (and by that I mean I have glanced at the documentation a couple of times) but I'm working on creating weird interactive widgets, so I am intrigued by the workshop! Is a baseline familiarity with the language necessary to attend today?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189018481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kalli.retzepi@gmail.com",
            "sender_full_name": "Kalli Retzepi (she) (SP1'20)",
            "sender_id": 263505,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582636957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>You're certainly welcome, it'll be an opportunity to learn a little more about Rust, but I imagine some of it might be confusing. One idea might be to pair with someone to make one of these widgets. A strange thing about druid is that I've seen less friction for people to create custom widgets than to build things by wiring up standard widgets.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189018839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582637270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/590c575e650d30da45fb6b65616519acc3ac782f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh interesting, I will def drop by and check things out - thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189019565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kalli.retzepi@gmail.com",
            "sender_full_name": "Kalli Retzepi (she) (SP1'20)",
            "sender_id": 263505,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582637808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/590c575e650d30da45fb6b65616519acc3ac782f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also, just noticed you guys wrote druid. That's cool!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189019785,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f575",
                    "emoji_name": "detective",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "colin.rofls@gmail.com",
                        "full_name": "Colin Rothfels (he) (SP1'19)",
                        "id": 203403
                    },
                    "user_id": 203403
                },
                {
                    "emoji_code": "1f603",
                    "emoji_name": "smiley",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "raph.levien@gmail.com",
                        "full_name": "Raph Levien (F1'17)",
                        "id": 101701
                    },
                    "user_id": 101701
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kalli.retzepi@gmail.com",
            "sender_full_name": "Kalli Retzepi (she) (SP1'20)",
            "sender_id": 263505,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582637982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>For convenience I've put together a simple starter project that gets dependencies set up and includes basic boilerplate: <a href=\"https://github.com/cmyr/druid-template\" target=\"_blank\" title=\"https://github.com/cmyr/druid-template\">https://github.com/cmyr/druid-template</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189039723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582651024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I now want to spend the day making widgets in druid instead of refactoring authentication code at work.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189159454,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "raph.levien@gmail.com",
                        "full_name": "Raph Levien (F1'17)",
                        "id": 101701
                    },
                    "user_id": 101701
                }
            ],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust GUI workshop",
            "submessages": [],
            "timestamp": 1582751485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a94df6a414bc64771690399a940d1c52?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm working on adding threading to a server I've created. The server connections are using a single shared socket (since multiple sockets can't all bind to the same port), which I've wrapped in an Arc, and am passing around as a reference to the receive and respond functions (this is a UDP socket, there's no long-lived connections).</p>\n<p>Here's the server main code I have right now:</p>\n<div class=\"codehilite\"><pre><span></span>    let socket = Arc::new(net::UdpSocket::bind(&quot;127.0.0.1:5300&quot;)?);\n    loop {\n        let (buf, amt, client) = recieve(&amp;socket)?;\n        let sock_ref = Arc::clone(&amp;socket);\n        let responder = thread::spawn(move || {\n            let response = resolve_query(buf, amt);\n            match response {\n                Ok(response) =&gt; {\n                    respond(&amp;*sock_ref, &amp;response, client).unwrap();\n                }\n                Err(error) =&gt; {\n                    println!(&quot;Error processing response! {:?}&quot;, error);\n                }\n            }\n        });\n    }\n</pre></div>\n\n\n<p>The <code>&amp;*sock_ref</code> looks ugly to me, and makes me think I'm not using the right pattern here. The reason I have both of those is <code>sock_ref</code> is an <code>Arc</code> containing a <code>UdpSocket</code>, but the <code>respond</code> function I wrote takes an immutable reference to a socket. Am I doing this wrong? What's the clean way to have a shared socket for the server (or is that itself not the right idea)?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189343624,
            "is_me_message": false,
            "last_edit_timestamp": 1582919128,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dylnuge@gmail.com",
            "sender_full_name": "Dylan Nugent (he) (S1'20)",
            "sender_id": 263512,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "References and Threads and Arcs, Oh My!",
            "submessages": [],
            "timestamp": 1582918826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry to not directly answer your question, but I wanted to suggest <code>SO_REUSEPORT</code> if the platforms you're targeting support it.  I find it makes this kind of pattern much simpler, since each thread or process can have its own socket on the same port.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189356005,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dylnuge@gmail.com",
                        "full_name": "Dylan Nugent (he) (S1'20)",
                        "id": 263512
                    },
                    "user_id": 263512
                }
            ],
            "recipient_id": 22680,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "References and Threads and Arcs, Oh My!",
            "submessages": [],
            "timestamp": 1582927724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a94df6a414bc64771690399a940d1c52?d=identicon&version=1",
            "client": "website",
            "content": "<p>That is <strong>awesome</strong> and totally solves my problem, thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189360366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dylnuge@gmail.com",
            "sender_full_name": "Dylan Nugent (he) (S1'20)",
            "sender_id": 263512,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "References and Threads and Arcs, Oh My!",
            "submessages": [],
            "timestamp": 1582931375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a94df6a414bc64771690399a940d1c52?d=identicon&version=1",
            "client": "website",
            "content": "<p>Plus it feels kind of right since right now this server doesn't have any other shared memory</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189360429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dylnuge@gmail.com",
            "sender_full_name": "Dylan Nugent (he) (S1'20)",
            "sender_id": 263512,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "References and Threads and Arcs, Oh My!",
            "submessages": [],
            "timestamp": 1582931407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a94df6a414bc64771690399a940d1c52?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also I learned that I can just do <code>&amp;sock_ref</code> instead of <code>&amp;*sock_ref</code> here; it correctly determines I want the reference the Arc contains, and not a reference to the Arc itself (smart pointers are cool, still getting used to the semantics)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189360624,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dylnuge@gmail.com",
            "sender_full_name": "Dylan Nugent (he) (S1'20)",
            "sender_id": 263512,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "References and Threads and Arcs, Oh My!",
            "submessages": [],
            "timestamp": 1582931600,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone,<br>\nI wrote a simple rust app which let's you copy files while keeping track of old versions and rolling back if needed. Would anyone be willing to look it over and let me know what you think? This is pretty much the first thing I've written in rust, so not really sure if I'm doing things reasonably... <a href=\"https://github.com/adamrk/easy-deploy/\" target=\"_blank\" title=\"https://github.com/adamrk/easy-deploy/\">It's on github</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189397870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "code review a simple app?",
            "submessages": [],
            "timestamp": 1582997280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255843\">@Andrew Chien (he) (W2'20)</span> this is the post we were talking about in the group:<br>\n<a href=\"https://blog.burntsushi.net/rust-error-handling/\" target=\"_blank\" title=\"https://blog.burntsushi.net/rust-error-handling/\">https://blog.burntsushi.net/rust-error-handling/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189523491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Burntsushi error handling post",
            "submessages": [],
            "timestamp": 1583175480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Oh, I missed the group today <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189531041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Burntsushi error handling post",
            "submessages": [],
            "timestamp": 1583179720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Haha, that post was what finally got me started on rust! It\u2019s quite cool (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189560388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Burntsushi error handling post",
            "submessages": [],
            "timestamp": 1583206262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/13ff61eb4b711984a7377a5aa11a5eff518e499e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm sure lots of folks have seen this but I thought it would be worth sharing here, I think this is the best practical rust introduction I've seen? <a href=\"https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/\" target=\"_blank\" title=\"https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/\">https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189714240,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cxielamiko@gmail.com",
                        "full_name": "Vitaly Pavlenko (he) (W2'20)",
                        "id": 255299
                    },
                    "user_id": 255299
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pius@alum.mit.edu",
                        "full_name": "Pius Uzamere (he) (SP2'20)",
                        "id": 256945
                    },
                    "user_id": 256945
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@bellisar.io",
                        "full_name": "Alessia Bellisario (she) (m3'19)",
                        "id": 214910
                    },
                    "user_id": 214910
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tamreenkhan@gmail.com",
                        "full_name": "Tamreen Khan (he) (SP1'20)",
                        "id": 263714
                    },
                    "user_id": 263714
                }
            ],
            "recipient_id": 22680,
            "sender_email": "colin.rofls@gmail.com",
            "sender_full_name": "Colin Rothfels (he) (SP1'19)",
            "sender_id": 203403,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A half hour to learn rust",
            "submessages": [],
            "timestamp": 1583342850,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/523da7ab50b368701be60ddf77adff60cc9a7610?x=x&version=3",
            "client": "website",
            "content": "<p>to those who humoured my question about go channel semantics in rust last week: crossbeam was indeed what i was looking for.</p>\n<p>i played a bit with it and it's great. thanks for the suggestion <span class=\"user-mention\" data-user-id=\"256969\">@Am\u00e9d\u00e9e d'Aboville (they) (W2'20)</span>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190020567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "s@aljmz.com",
            "sender_full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
            "sender_id": 263563,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "select",
            "submessages": [],
            "timestamp": 1583687356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/523da7ab50b368701be60ddf77adff60cc9a7610?x=x&version=3",
            "client": "website",
            "content": "<p>curious what other people's opinions are with respect to concurrency paradigms in rust. i'm used to think in go/csp terms, so i'm kinda biased towards that. but there seems to be a bunch of other approaches (e.g. tokio) with various learning curves.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190020710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "s@aljmz.com",
            "sender_full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
            "sender_id": 263563,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "select",
            "submessages": [],
            "timestamp": 1583687622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/523da7ab50b368701be60ddf77adff60cc9a7610?x=x&version=3",
            "client": "website",
            "content": "<p>it doesn't seem to help that i don't know what futures are</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190020843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "s@aljmz.com",
            "sender_full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
            "sender_id": 263563,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "select",
            "submessages": [],
            "timestamp": 1583687830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e13b7988e47316d670ea05e88ede7bd4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey folks, I'm trying to do some changes to a lib called <a href=\"https://github.com/tessi/wasmex\" target=\"_blank\" title=\"https://github.com/tessi/wasmex\">Wasmex</a>, which is a wrapper of the rust crate <a href=\"https://wasmer.io/\" target=\"_blank\" title=\"https://wasmer.io/\">Wasmer</a> that is a runtime for webassembly modules.<br>\nI just know a little bit of Rust, so I'd love to pair on that if anyones are feeling like it.<br>\nMy goal is to make instance calls async, as described by <a href=\"https://github.com/tessi/wasmex/issues/6\" target=\"_blank\" title=\"https://github.com/tessi/wasmex/issues/6\">this issue</a>.<br>\nSo it will involve some kind of threads or async/await kind of stuff in Rust, which I'm not that familiar with.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190322913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bamorim2@gmail.com",
            "sender_full_name": "Bernardo Dornellas Cysneiros Gomes de Amorim (he) (SP1'20)",
            "sender_id": 263612,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Pairing on elixir and rust project (wasmex)",
            "submessages": [],
            "timestamp": 1583955770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p>There's a remote conference (10 lightning talks!) happening this Friday about Embedded Rust (some talks don't look like they are about embedded rust?) </p>\n<p><a href=\"https://oxidizeconf.com/oxidize-1k/\" target=\"_blank\" title=\"https://oxidizeconf.com/oxidize-1k/\">https://oxidizeconf.com/oxidize-1k/</a></p>\n<p>(Not associated with the conference, just a messenger :) )</p>\n<p>(Ooh I just noticed one of the talks is by Bryan Cantril!!)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190928412,
            "is_me_message": false,
            "last_edit_timestamp": 1584683601,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wgrisaitis@gmail.com",
                        "full_name": "William Grisaitis (he) (F1'19)",
                        "id": 234883
                    },
                    "user_id": 234883
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584491737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>This looks awesome, thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191195874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584668890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I keep needing things like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">map4</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">xs</span>: <span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I hate it, but I don't know how to do this another way.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191195906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Help?",
            "submessages": [],
            "timestamp": 1584669001,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>in general, working with fixed size arrays is still not very nice - typically the recommendation is to use slices and iterators instead</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191198068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Help?",
            "submessages": [],
            "timestamp": 1584671945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's not entirely straightforward to give a better code example here because generally a function like that just shouldn't be necessary at all</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191198136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Help?",
            "submessages": [],
            "timestamp": 1584672008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>also, the situation may improve at some indeterminate point in the future: <a href=\"https://github.com/rust-lang/rust/issues/44580\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44580\">https://github.com/rust-lang/rust/issues/44580</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191198222,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Help?",
            "submessages": [],
            "timestamp": 1584672174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> If one of you are going to attend this, would you mind recording it for me? I'm an early supporter of Oxidize and so got invited to attend myself, but I'm currently in Taiwan and so it's scheduled to happen in the middle of the night for me. I've emailed the organizers to ask if there will be a recording but they haven't gotten back to me yet.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191200793,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584676215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I do have some microcontroller hardware here in my quarantined hotel room, so I'm ready to rust =)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191200803,
            "is_me_message": false,
            "last_edit_timestamp": 1584676260,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584676252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/48e493d515af67a1512d977689cd051b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> on the tickets page, it says all talks will be posted publicly after the event on youtube</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191201469,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 22680,
            "sender_email": "outofthemadness@gmail.com",
            "sender_full_name": "James A. Keene (he) (m2'18)",
            "sender_id": 887,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584677506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ohhh! Thanks James. I missed that part, weird they put it in the \"Not Attending\" ticket description.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191201569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584677688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p>I can still record it if you don't want a latency <span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span>  :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191204987,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584683649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> Yeah, I'd appreciate that just in case there are Q&amp;A's or something that don't make it into the published videos. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191206042,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "9129",
                    "emoji_name": "animatedoctopus",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584685501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span>  are you planning to attend this? :) I have a case of the jet lag and might not make it all the way through, will you be able to record this? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191256425,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584717573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I have a conflict unfortunately</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191258693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584718403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p>No worries! I just asked the organizers and they will put the whole zoom recording on the website! (And the Q&amp;A is mostly on the matrix chat rooms)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191264597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584720710,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> Thanks for posting this! I'm checking it out right now.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191265029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1584720876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>anyone know a good 2d graphics library? i want to draw lines and circles, which i figure should be easy. ideally cross platform, with backends for linux, wasm canvas, and still images, but i'm not too picky about that.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"101701\">@Raph Levien (F1'17)</span> - i found your blog post about this: <a href=\"https://raphlinus.github.io/rust/graphics/2018/10/11/2d-graphics.html\" target=\"_blank\" title=\"https://raphlinus.github.io/rust/graphics/2018/10/11/2d-graphics.html\">https://raphlinus.github.io/rust/graphics/2018/10/11/2d-graphics.html</a> anything new since 2018?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191331955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584773044,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>maybe <a href=\"https://crates.io/crates/piston2d-graphics\" target=\"_blank\" title=\"https://crates.io/crates/piston2d-graphics\">https://crates.io/crates/piston2d-graphics</a>? but examples seem hard to come by, and i'm not so sure about wasm</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191332068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584773296,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>possibly wasm would work via the gfx backend: <a href=\"https://github.com/gfx-rs/gfx/pull/2554\" target=\"_blank\" title=\"https://github.com/gfx-rs/gfx/pull/2554\">https://github.com/gfx-rs/gfx/pull/2554</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191332215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584773682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>maybe <a href=\"https://github.com/jrmuizel/raqote\" target=\"_blank\" title=\"https://github.com/jrmuizel/raqote\">https://github.com/jrmuizel/raqote</a>?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191333167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584775895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>while not generally to my liking, raqote turned out to be entierly suitable <a href=\"/user_uploads/13/s4uj-OhhosUhoN3k5uTE5RH7/2020-03-21-035148_691x670_scrot.png\" target=\"_blank\" title=\"2020-03-21-035148_691x670_scrot.png\">.</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/s4uj-OhhosUhoN3k5uTE5RH7/2020-03-21-035148_691x670_scrot.png\" target=\"_blank\" title=\".\"><img src=\"/user_uploads/13/s4uj-OhhosUhoN3k5uTE5RH7/2020-03-21-035148_691x670_scrot.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191333787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584777150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I've used piston2d-graphics, and it seems fairly cross platform and I can confirm it works. I haven't used anything else, so I don't know how it stacks up against other options</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191361555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584818046,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I had a lot of fun messing with nannou during my batch</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191361798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584818438,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I believe Nannou uses Piston under the hood</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191369805,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584832198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/db3bb2e8cfa9c62e206a0fa100a024da6f6e41df?x=x&version=4",
            "client": "website",
            "content": "<p>The followup to that blogpost is <a href=\"https://github.com/linebender/piet\" target=\"_blank\" title=\"https://github.com/linebender/piet\">piet</a>. But raqote is also fine for software-only rendering.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191379779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "raph.levien@gmail.com",
            "sender_full_name": "Raph Levien (F1'17)",
            "sender_id": 101701,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1584851613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>I learned a bunch of things about unicode sequences over the weekend, and oh boy are there many ways to represent \"flag\" in unicode. I knew about:</p>\n<ul>\n<li>A single codepoint (<span aria-label=\"black flag\" class=\"emoji emoji-1f3f4\" role=\"img\" title=\"black flag\">:black_flag:</span>)</li>\n<li>A combination of two codepoints, the regional identifier letters A-Z that form the ISO country code (\ud83c\udde6\ud83c\uddf9)</li>\n<li>zwj combinations (<span aria-label=\"white flag\" class=\"emoji emoji-1f3f3\" role=\"img\" title=\"white flag\">:white_flag:</span>\ufe0f\u200d\ud83c\udf08, which is the white flag zwj-ed together with the rainbow).</li>\n</ul>\n<p>But did you know there exists YET ANOTHER way?! It's, honestly, quite weird. You combine the <span aria-label=\"black flag\" class=\"emoji emoji-1f3f4\" role=\"img\" title=\"black flag\">:black_flag:</span> emoji with the \"unicode tag block\" (a large subset of ascii bitwise-or'ed with <code>0xE0000</code>), terminate it with <code>U+E007F</code> and call it a flag! The only flags recommended for general usage are the ones for England, Scotland and Wales. \ud83e\udd2a</p>\n<p>Oh, and how does this fit into rust? I wrote a program to let you generate arbitrary combinations of \"start character\" + tag + end tag, for ... experimentation and not-not-shitposting purposes. enjoy: <a href=\"https://github.com/antifuchs/unicode-tagger\" target=\"_blank\" title=\"https://github.com/antifuchs/unicode-tagger\">https://github.com/antifuchs/unicode-tagger</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191698403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Unicode is weird, y'all",
            "submessages": [],
            "timestamp": 1585107069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "website",
            "content": "<p>(heh, I guess zulip doesn't yet know about the rainbow flag! It's in unicode 12! and unicode 13 extends that further with the trans pride flag!!)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191698415,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Unicode is weird, y'all",
            "submessages": [],
            "timestamp": 1585107118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>That third way is blowing my mind \ud83e\udd2f</p>\n<p>Emoji are hella weird. Also with \"people doing things\" -- \"woman astronaut\" is woman <span aria-label=\"woman\" class=\"emoji emoji-1f469\" role=\"img\" title=\"woman\">:woman:</span> + rocket <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> = <span aria-label=\"woman\" class=\"emoji emoji-1f469\" role=\"img\" title=\"woman\">:woman:</span>\u200d\ud83d\ude80 and \"man running\" is person running \ud83c\udfc3\u200d+ male sign \u2642 = \ud83c\udfc3\u200d\u2642\ufe0f</p>\n<p>I wrote up a <a href=\"https://capnfabs.net/posts/emoji-haiku-v2/#lets-talk-about-unicode-again\" title=\"https://capnfabs.net/posts/emoji-haiku-v2/#lets-talk-about-unicode-again\">bunch of the oddities</a> I discovered a while back when working on a project if you're interested in more!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191733332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Unicode is weird, y'all",
            "submessages": [],
            "timestamp": 1585137042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Haha, all these examples are great. I entirely love the emoji variant selector because it necessitates the existence of a text variant selector. </p>\n<p>And so the symbol for a shitpost is the <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span>with a <code>FE0E</code> (Text variant selector).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191829717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Unicode is weird, y'all",
            "submessages": [],
            "timestamp": 1585184040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've run into a problem where my solution is half type annotations due to rust's lack of recursive closures. Is there a nicer way I can rewrite the following?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashSet</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">nodes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashSet</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_score</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">matches</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">section</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"p\">.</span><span class=\"n\">ancestors</span><span class=\"p\">(</span><span class=\"n\">sections</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">//This is gross --- rust doesn&#39;t support recursive closures...</span>\n<span class=\"k\">fn</span> <span class=\"nf\">add_to_results</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Indent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Section</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sections</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Sections</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nodes</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Section</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">indent</span>: <span class=\"nc\">Indent</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">n</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Section</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">indent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cid</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sections</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">cid</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">add_to_results</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sections</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nodes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">().</span><span class=\"n\">is_none</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">add_to_results</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sections</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">nodes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">results</span><span class=\"w\"></span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191891771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585232812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>To explain a bit more what's happening: I have a bunch of nodes (type <code>Section</code>) coming from a search, and I want to display them according to their natural hierarchy. (Each node has <code>parent</code> and <code>children</code>\"pointers\" which are actually indexes into a <code>Vec&lt;Section&gt;</code>)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191891984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585232904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>What I do is put every node's index and the index of all its ancestors up to the root into a hash set, <code>nodes</code>. Then starting from the root(s) I walk down through the children and add each node to the <code>results</code> iff its a node in the ancestry of one of the original matching nodes.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191892273,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585233012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>this approach took me a minute to think up but then an hour to implement because Rust doesn't support recursive closures --- I had to write out <code>add_to_results</code> as a full <code>fn</code> with all of the associated types and lifetime stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191892479,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585233112,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a nicer way to do what I'm trying here? I'm open to both other ways to implement this same algorithm, as well as entirely different approaches to solve this problem.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191892671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585233174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Well you can always force rust to support recursive closures by making one of the closure arguments a reference to itself, but that is probably not better than what you have</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191909684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585239489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">nodes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VecDeque</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">indent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">pop_front</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">indent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">cid</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sections</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">cid</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">((</span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 191952860,
            "is_me_message": false,
            "last_edit_timestamp": 1585262379,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wishing for recursive closures",
            "submessages": [],
            "timestamp": 1585258912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c54638d11a1a9c46d0d3f909f3d0f6a13572029f?x=x&version=2",
            "client": "website",
            "content": "<p>I'm using Pathfinder (<a href=\"https://github.com/servo/pathfinder\" title=\"https://github.com/servo/pathfinder\">https://github.com/servo/pathfinder</a>) on a project. It's not really ready yet, but it's worth keeping an eye on it!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192085059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kyythane@gmail.com",
            "sender_full_name": "Lillian Calytrix Primrose (she) (S2'18)",
            "sender_id": 120093,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "2d graphics",
            "submessages": [],
            "timestamp": 1585346149,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span>  the whole livestream is on YouTube now :) <a href=\"https://youtu.be/zPuELAzJyno\" title=\"https://youtu.be/zPuELAzJyno\">https://youtu.be/zPuELAzJyno</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zPuELAzJyno\" href=\"https://youtu.be/zPuELAzJyno\" title=\"https://youtu.be/zPuELAzJyno\"><img src=\"https://i.ytimg.com/vi/zPuELAzJyno/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192404087,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kevin@keminglabs.com",
                        "full_name": "Kevin Lynagh (he)",
                        "id": 2172
                    },
                    "user_id": 2172
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                }
            ],
            "recipient_id": 22680,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Embedded Rust remote conference",
            "submessages": [],
            "timestamp": 1585668032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi, I'm new to rust and learning about references today. I learned you can do something like <code>println!(\"{}\", &amp;5 + &amp;6);</code> or even </p>\n<div class=\"codehilite\"><pre><span></span>fn five() -&gt; u8 {\n    return 5;\n}\nfn main() {\n    let x = five();\n    println!(&quot;{}&quot;, &amp;x + &amp;6);\n}\n</pre></div>\n\n\n<p>I would think of this as creating a variable x whose value is 5, and trying to add a pointer to x (i.e. the address of x) to 6, but what actually happens is it adds the value referenced by &amp;x to 6 to get 11. Why is this the case, and how is it any different than writing <code>x + 6</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192674752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585838454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>I think you're observing <code>Deref</code> coercions. Deref coercions are one of the few cases where Rust will do automatic conversions for you.</p>\n<p>There's an explanation <a href=\"https://doc.rust-lang.org/stable/book/ch15-02-deref.html?highlight=deref#implicit-deref-coercions-with-functions-and-methods\" title=\"https://doc.rust-lang.org/stable/book/ch15-02-deref.html?highlight=deref#implicit-deref-coercions-with-functions-and-methods\">here</a> in the book.</p>\n<p>In a nutshell, rust will sometimes insert <code>*</code> or <code>&amp;</code> for you, in order to make your code work. Operators in rust map to traits in the standard library. In this case, <code>+</code>is actually the trait method <code>std::ops::Add::add</code>. Desugared, it's doing something like <code>(&amp;x).add(&amp;6)</code>.</p>\n<p>Reference types, like <code>&amp;u8</code>, don't have a <code>.add</code> method, so rust adds a <code>*</code>, and sees if the resulting type has a <code>.add</code> method. It does, since <code>u8</code> implements <code>std::ops::Add</code>. Then, it sees that the argument to <code>u8::add</code> should be another <code>u8</code>, so it inserts a <code>*</code> before <code>&amp;6</code>. </p>\n<p>So the complete call looks like this <code>(*&amp;x).add(*&amp;6)</code>.</p>\n<p>I think that Rust does this because, if it didn't, programmers would throw their hands up in disgust at having to write things like <code>(*foo).bar(*baz)</code> all the time. </p>\n<p>Not sure if I did a good job explaining, since writing this down made me feel like I barely understand the feature myself, so feel free to ask follow-up questions!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192686568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585842726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That makes a lot of sense. I've run into the same situation where it felt like some magic coercion/conversion was going on because what I thought was a reference seemed to be getting used as a value. I guess it's a matter of getting used to things until I'm able to predict when that automatic coercion is going to happen.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192688136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>is this only true for types that implement clone or is that unrelated?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192688163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>ah it is unrelated</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192688505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<blockquote>\n<p>Here\u2019s the rule: If you have a type U, and it implements Deref&lt;Target=T&gt;, values of &amp;U will automatically coerce to a &amp;T</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192688515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://doc.rust-lang.org/1.29.0/book/first-edition/deref-coercions.html\" title=\"https://doc.rust-lang.org/1.29.0/book/first-edition/deref-coercions.html\">https://doc.rust-lang.org/1.29.0/book/first-edition/deref-coercions.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192688672,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>That's correct. There is some trickiness though, because although references implement <code>Clone</code>, Rust somehow knows that it should call the underlying type's clone:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3a72b58f5c52c953b46dea6dc4255dd\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3a72b58f5c52c953b46dea6dc4255dd\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3a72b58f5c52c953b46dea6dc4255dd</a></p>\n<p>I'm not entirely sure how this works. <code>&amp;T</code> is probably special in that regard.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192689039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585843590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks for the explanation!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192702136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585849695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"6935\">Casey Rodarmor (SP2'18)</span> <a href=\"#narrow/stream/20305-rust/topic/Question.20about.20references/near/192686568\" title=\"#narrow/stream/20305-rust/topic/Question.20about.20references/near/192686568\">said</a>:</p>\n<blockquote>\n<p>Reference types, like <code>&amp;u8</code>, don't have a <code>.add</code> method, so rust adds a <code>*</code>, and sees if the resulting type has a <code>.add</code> method. It does, since <code>u8</code> implements <code>std::ops::Add</code>. Then, it sees that the argument to <code>u8::add</code> should be another <code>u8</code>, so it inserts a <code>*</code> before <code>&amp;6</code>. </p>\n</blockquote>\n<p>So <code>&amp;x</code> here is some sort of object representing a reference, not a number representing the address of x? I'm a bit confused because I would expect memory addresses to just be numbers (things that would implement <code>add</code>), but if the reference type is not just a number that would make a bit more sense.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192702400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585849836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>it\u2019s a smart pointer, you would need to be working with unsafe \u201craw\u201d pointers to treat references like an address</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192705399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585851239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>although i think for stack allocated data you do get raw pointers, although still treating them like memory addresses that can be added is unsafe</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192705607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585851358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.pointer.html\" title=\"https://doc.rust-lang.org/std/primitive.pointer.html\">https://doc.rust-lang.org/std/primitive.pointer.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192705614,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585851360,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>for a heap allocated structure allocated in rust i think it would have to be a Vec, Rc, Box, or Ref</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192705781,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585851445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>got it, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192717878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585857572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>Under the hood, <code>&amp;T</code>, that is, \"a reference to a value of type T\", is just a pointer. (Ignoring slices, <code>&amp;[T]</code>, and trait objects, <code>&amp;dyn SomeTrait</code>.) But rust doesn't expose any of the pointer functionality that you would expect unless you ask for it, by converting a <code>&amp;T</code> to a <code>*T</code> with something like <code>&amp;3 as *const u8</code>. You can make a pointer from a references in safe rust, just not dereference it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192751205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585880199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>I'm not entirely sure how this works. &amp;T is probably special in that regard.</p>\n</blockquote>\n<p>it's not exactly that <code>&amp;T</code> is special - the specific thing that's special is that the method signature of <code>clone</code> for <code>T</code> is <code>fn clone(&amp;self)</code>, so calling <code>clone</code> on a reference automatically passes that reference as the <code>&amp;self</code> parameter unmodified, and <code>&amp;self</code> matches <code>&amp;T</code> for the implementation of <code>Clone</code> for <code>T</code> (and if you called <code>clone</code> on a non-reference <code>T</code>, it would automatically insert a <code>&amp;</code> to make it valid, as you described above). to clone the reference itself, you'd need to call <code>(&amp;x).clone()</code>, since that would match <code>&amp;self</code> with a <code>&amp;&amp;T</code>, which is provided by the <code>Clone</code> impl for <code>&amp;T</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192764428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585897342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, nice, that clarifies it. Thank you! Damn, that's actually pretty elegant. I assumed there was some special machinery there to get it to work.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192776351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Question about references",
            "submessages": [],
            "timestamp": 1585905116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>I wrote a <a href=\"https://github.com/casey/resume\" title=\"https://github.com/casey/resume\">very simple rust program</a> to generate my resume.</p>\n<p>I wasn't originally going to publish the code, but I thought that RC people might find it useful.</p>\n<p>You can see it rendered, with some additional custom fonts, <a href=\"https://rodarmor.com/resume/\" title=\"https://rodarmor.com/resume/\">here</a></p>\n<p>Sadly, I don't have permission to distribute Verlag, the font I used, so I stripped them out of the code for the public version. It uses the slightly less attractive <code>Montserrat</code> from Google Fonts, which messes up some of the spacing.</p>\n<p>The HTML markup, CSS styling, and YAML input data are as simple and general as I could make them.</p>\n<p>The resume is composed of multiple sections. You can see the input data in <code>input.yaml</code>, which is where to put your own info, if you want to use it.</p>\n<p>To edit the HTML, check out <code>template/index.html</code>, and to edit the CSS, check out <code>template/index.css</code>.</p>\n<p>It uses <a href=\"https://github.com/djc/askama\" title=\"https://github.com/djc/askama\">askama</a> templates, which is a sweet template library that generates rust code at compile time, so data access in templates is statically typed.</p>\n<p>Since everything's hard-coded, you'll have to fork it to make modifications to it. On the upside, since everything's hard-coded, it's as simple as can be.</p>\n<p>It uses <a href=\"https://www.w3.org/People/Raggett/tidy/\" title=\"https://www.w3.org/People/Raggett/tidy/\">Tidy</a> to clean up the generated HTML, which can also catch some errors, so you'll need to have the <code>tidy</code> binary installed. On MacOS, you can get it with <code>brew install tidy-html5</code>.</p>\n<p>I hope it's useful! Feel free to ask me questions if anything is unclear, or you can't get it to work.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192792772,
            "is_me_message": false,
            "last_edit_timestamp": 1585915537,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tamreenkhan@gmail.com",
                        "full_name": "Tamreen Khan (he) (SP1'20)",
                        "id": 263714
                    },
                    "user_id": 263714
                }
            ],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust Resume Generator",
            "submessages": [],
            "timestamp": 1585915084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Recently I had to fix a compiler error by changing something from just <code>state: &amp;mut StateType</code> to <code>mut state: &amp;mut StateType</code>. Does anyone have a link to a doc that explains what adding that second <code>mut</code> does? It's a bit tricky to try looking up on a search engine.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192816646,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "double mut in type sig",
            "submessages": [],
            "timestamp": 1585925884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>Oh! I've run into this one before. This is in a method signature, right? The <code>state: &amp;mut StateType</code> indicates to the callee that you're going to change the data that is referenced, and the <code>mut state: ...</code>indicates to the compiler that you'll change what <code>state</code> refers to somewhere in your method body. You could equivalently change your method to:</p>\n<div class=\"codehilite\"><pre><span></span>fn whatever(state: &amp;mut StateType) {\n    let mut state = state;\n    // keep going\n}\n</pre></div>\n\n\n<p>and it should work fine. I think, at least!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192821136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "double mut in type sig",
            "submessages": [],
            "timestamp": 1585927610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Thanks! That's interesting, I didn't think I was changing what it referred to, but maybe something weird is happening in one of the functions deeper in the stack.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192846301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "double mut in type sig",
            "submessages": [],
            "timestamp": 1585938714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I've found this <a href=\"https://docs.rs/embedded-hal/0.2.3/src/embedded_hal/fmt.rs.html#6-17\" title=\"https://docs.rs/embedded-hal/0.2.3/src/embedded_hal/fmt.rs.html#6-17\">Nice Thing</a> I'd like to use, but I don't know how to import it properly. I'd like to call <code>write!(...)</code> which requires the first argument to be an instance of <code>core::fmt::Write</code>. I think the <code>SerialPort</code> I've got should have the proper trait instance defined because it has a definition for <code>embedded_hal::serial::Write</code> and the code in the linked file seems to provide definitions of <code>core::fmt::Write</code> for instances of <code>embedded_hal::serial::Write</code>, but I've peppering my code with all the use statements I can think of and the compiler is still complaining:</p>\n<blockquote>\n<p>no method named <code>write_fmt</code> found for type <code>&amp;mut SerialPort&lt;'static, hal::usb::UsbBus&gt;</code> in the current scope<br>\n       note: the method <code>write_fmt</code> exists but the following trait bounds were not satisfied:<br>\n<code>&amp;mut SerialPort&lt;'static, hal::usb::UsbBus&gt; : core::fmt::Write</code></p>\n</blockquote>\n<p>I've got these imports right now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cw</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">embedded_hal</span>::<span class=\"n\">serial</span>::<span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ew</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">usbd_serial</span>::<span class=\"n\">SerialPort</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">embedded_hal</span>::<span class=\"n\">fmt</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The compiler is also complaining that the last three imports are not being used, so I suspect that might be related to what I'm doing wrong <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192894256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Traits of traits",
            "submessages": [],
            "timestamp": 1585984224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Ahh the <code>impl Trait for OtherTrait</code> defines it for the \"trait object\", so what I needed to do was</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">=</span><span class=\"n\">UsbError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">write</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;It {}% works!&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 192967589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Traits of traits",
            "submessages": [],
            "timestamp": 1586105345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>Hi! I'm working my way through the <a href=\"https://doc.rust-lang.org/book/\" title=\"https://doc.rust-lang.org/book/\">Rust book</a> and I've hit something I want to check my understanding of.</p>\n<p>In <a href=\"https://doc.rust-lang.org/book/ch12-03-improving-error-handling-and-modularity.html\" title=\"https://doc.rust-lang.org/book/ch12-03-improving-error-handling-and-modularity.html\">this CLI example</a>, there's a snippet that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"s\">&quot;not enough arguments&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// snip</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The text explains the <code>&amp;'static str</code> error type parameter by saying that \"<code>&amp;'static str</code> is the type of string literals, which is our error message type for now.\" But the code seems to compile happily if I change it to just plain <code>&amp;str</code> with no lifetime specifier.</p>\n<p>Is the behavior with <code>&amp;str</code> here just coincidentally correct, where the error type's lifetime is assumed to be the same as that of <code>args</code>? Or is there something else going on that I'm missing?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193239703,
            "is_me_message": false,
            "last_edit_timestamp": 1586382375,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586289464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also a noob, and recently got to this page which may explain it: <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\" title=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\">https://doc.rust-lang.org/nomicon/lifetime-elision.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193240452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586289816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(Perhaps that's not the explanation, and someone with more experience can chime in)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193240535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586289845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>thanks! i think this line describes this situation:</p>\n<blockquote>\n<ul>\n<li>If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided output lifetimes.</li>\n</ul>\n</blockquote>\n<p>so yes, sounds like the output lifetime picked up the lifetime of <code>args</code>, which it shouldn't really be tied to, hence the explicit <code>'static</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193240934,
            "is_me_message": false,
            "last_edit_timestamp": 1586290085,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586290062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>it may be the case that the code in that section required the lifetime specification when the book was written but the compiler has since grown the ability to elide those lifetimes</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193246367,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586292728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>there are a few places like that in the book</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193246376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586292736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>notably (to me) that it does not use the dbg! macro last time i checked and spends a lot of time explaining the semantics of println!, which i find to be more confusing personally</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193246437,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586292781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>ok, one more thing that the book doesn't make explicit that i want to confirm my understanding of. in <a href=\"https://doc.rust-lang.org/book/ch16-02-message-passing.html#sending-multiple-values-and-seeing-the-receiver-waiting\" title=\"https://doc.rust-lang.org/book/ch16-02-message-passing.html#sending-multiple-values-and-seeing-the-receiver-waiting\">this section</a> about message passing, there's an example that sends some values to a channel from a worker thread, then iterates over the receiving end of the channel in the main thread:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mpsc</span>::<span class=\"n\">channel</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;hi&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;from&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;the&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;thread&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">vals</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">received</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Got: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">received</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this seems to work the way you'd want it to! the main thread prints all the values sent through the channel, then exits. how does that work? i assume the <code>rx</code> iterator is emitting <code>None</code> at some point to signal that there's nothing more to iterate over, but how does the channel know that it's done? does the channel automatically decide it's closed because the worker thread finishes executing and the <code>tx</code> end of the channel  goes out of scope?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193383350,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586382898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/03b09da34cb8cffe34e982bde9598e5a?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like Sender implements the Drop trait which is called when the value goes out of scope. Internally this <a href=\"https://doc.rust-lang.org/src/std/sync/mpsc/mod.rs.html#893-902\" title=\"https://doc.rust-lang.org/src/std/sync/mpsc/mod.rs.html#893-902\">calls drop_chan</a> which <a href=\"https://doc.rust-lang.org/src/std/sync/mpsc/stream.rs.html#281-282\" title=\"https://doc.rust-lang.org/src/std/sync/mpsc/stream.rs.html#281-282\">sends a disconnection then wakes up a blocker</a>. Then the iterator returns None when the <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.iter\" title=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.iter\">\"channel has hung up\"</a>. (Linking to everything because I've never looked at this before so hopefully I'm not missing anything!)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193524330,
            "is_me_message": false,
            "last_edit_timestamp": 1586476171,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "aechien@gmail.com",
            "sender_full_name": "Andrew Chien (he) (W2'20)",
            "sender_id": 255843,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586476163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255843\">@Andrew Chien (he) (W2'20)</span> oh awesome thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193530934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "newbie questions",
            "submessages": [],
            "timestamp": 1586482948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>I'm going to announce the first release of my current project tomorrow, and I wanted to share it here.</p>\n<p>It's called Intermodal, and for now it's a command-line BitTorrent metainfo utility. I wrote a blog post about the project, its current state, and its future ambitions <a href=\"https://rodarmor.com/blog/intermodal/\" title=\"https://rodarmor.com/blog/intermodal/\">here</a>.</p>\n<p>It's written in Rust, and at the end of the post there is a list of good first issues, if you'd like to work on it. I am super happy to make time to pair! Just ping this thread or send me a private message. I'm sure we can find something to work on that's appropriate for any level of Rust expertise.</p>\n<p>The homepage, which has a link to the GitHub repo, is <a href=\"https://imdl.io/\" title=\"https://imdl.io/\">here</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193537873,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "soenkehahn@gmail.com",
                        "full_name": "S\u00f6nke Hahn (he) (S1'18)",
                        "id": 116583
                    },
                    "user_id": 116583
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "First release of Intermodal!",
            "submessages": [],
            "timestamp": 1586493901,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i have a bunch of structs which can be serialized and deserialized to <code>Vec&lt;u8&gt;</code> via some procmacros i wrote. for instance, i have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[cfg_attr(test, derive(Arbitrary))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Clone, Debug, PartialEq, McProto)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">PlayerPosition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">on_ground</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the <code>derive(McProto)</code> gives me <code>serialize</code> and <code>deserialize</code> methods, via the procmacro i've written.</p>\n<p>i wrote a test like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_arbitrary_playerposition</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rand</span>::<span class=\"n\">thread_rng</span><span class=\"p\">().</span><span class=\"n\">fill_bytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">unstructured</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Unstructured</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PlayerPosition</span>::<span class=\"n\">arbitrary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">unstructured</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PlayerPosition</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">serialize</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>what this does is checks that serializing and deserializing a given struct does not change the struct. however, this fails if any of the fields are NaN, because NaN != NaN. this is... not what i want. is there an easy way around this?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193745311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586753529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could wrap them in <a href=\"https://docs.rs/ordered-float/1.0.2/ordered_float/struct.OrderedFloat.html\" title=\"https://docs.rs/ordered-float/1.0.2/ordered_float/struct.OrderedFloat.html\">https://docs.rs/ordered-float/1.0.2/ordered_float/struct.OrderedFloat.html</a>, at the cost of some boilerplate. That might be useful anyway if you want to eg sort or hash some of the structs.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193807072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586804246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Can you generate random player positions instead of serialized representations for this property? or maybe skip the equality testing if there are any nans in the position after deserialization if its important that any vec of data be deserializable?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193848317,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586836854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"863\">@Jamie Brandon (W2'15)</span> that seems useful, but i'd rather not pollute the interface with <code>OrderedFloat</code> if i can avoid it, since that's not really fundamental to the representation or needed for things other than testing. it seems like what i want is a special version <code>derive(PartialEq)</code> that has the behavior i want for <code>f64</code>s</p>\n<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> the thing is, i do want to check that if i put in a NaN, i get a NaN back in the same position - if that's not true, then the code is incorrect - however, representing that seems hard...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193848736,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586837471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess since you already have a procedural macro you could generate the equality code too inside a <code>#[cfg(test)]</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193850054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586839501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I guess the abnormal thing about this setup is that you aren't testing equality of the structure you are generating. This isn't a perfect solution, but you could test that round trips to/from the byte array are equal and also if you wanted to that round trips to from the PlayerPosition are equal. For that second one you would have to write your own generator, but from what I gather that is pretty common for generative testing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193850149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586839679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also wary of complicated testing systems because debugging them always feels like an especially stupid waste of time. Sometimes its needed, but I try to avoid it if possible.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193850216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586839797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<blockquote>\n<p>I guess since you already have a procedural macro you could generate the equality code too inside a <code>#[cfg(test)]</code></p>\n</blockquote>\n<p>yeah, i might do this</p>\n<blockquote>\n<p>I guess the abnormal thing about this setup is that you aren't testing equality of the structure you are generating. </p>\n</blockquote>\n<p>currently, or with your suggestion? currently, i'm generating <code>PlayerPosition</code> struct.</p>\n<p>it sounds like you're suggesting checking generated.serialize() = generated.serialize().deserialize().serialize(), which does seem like a pretty reasonable test, even if it's not ideal - that seems like a good first pass that would let me avoid any complicated equality shenanigans.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193850586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586840311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I misread your generation code. Thought <code>arbitrary</code> was the same as <code>deserialize</code>. But yeah my suggestion was to test the equality of the serialized data.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193852103,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22680,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586842669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is maybe not a useful answer, but have you considered just not using floats? in my experience, it's usually a mistake to use them for anything other than numerical analysis/linear algebra/other specialized cases where being able to vary across a few hundred orders of magnitude is important, because of weird edge cases like this</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193994163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586936419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>integers or some kind of fixed point representation is usually much easier to deal with</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193994198,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586936452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i agree with that, but unfortunately this is a protocol that i don't have control over that i'm parsing :(</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 193994625,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "floats, PartialEq, and generative testing",
            "submessages": [],
            "timestamp": 1586936735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I figured out why my inline linting was taking so long. I think there's some weird interaction with it and having it also format-on-save where it caused a loop that tried to save the file (and thus retrigger the linting and formatting) dozens of times. </p>\n<p>Turning off the auto formatting seems to have fixed it. Just posting here in case this has bitten anyone else</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194323043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Slow linting in emacs",
            "submessages": [],
            "timestamp": 1587051215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>I just published a simple crate that performs lexical path cleaning: <a href=\"https://github.com/casey/lexiclean\" title=\"https://github.com/casey/lexiclean\">https://github.com/casey/lexiclean</a></p>\n<p>Lexical path cleaning simplifies paths by removing <code>.</code>, <code>..</code>, and double separators: <code>//</code>, without querying the filesystem. It is inspired by Go's <a href=\"https://golang.org/pkg/path/#Clean\" title=\"https://golang.org/pkg/path/#Clean\">Clean</a> function, and differs from the Go version by not removing <code>.</code> if that is the only path component left.</p>\n<p>I implemented this for a <a href=\"https://github.com/casey/intermodal/\" title=\"https://github.com/casey/intermodal/\">command line utility</a> I'm working on, but split it off so others could use it.</p>\n<p>There are a few reasons I prefer lexical path cleaning to <code>fs::canonicalize</code>:</p>\n<ul>\n<li>\n<p>If the input is a relative path, the output will be a relative path. This means that if the input is a path the user typed, and the output path is displayed in an error message, the message is more likely to make sense to the user, since it will more obviously relate to the input path.</p>\n</li>\n<li>\n<p>It simplifies <code>some-file/..</code> to <code>.</code> without any fuss, even if <code>some-file</code> is not a directory.</p>\n</li>\n<li>\n<p>It never returns an error, because it makes no system calls.</p>\n</li>\n</ul>\n<p>There are some reasons you might prefer <code>fs::canonicalize</code>:</p>\n<ul>\n<li>\n<p><code>fs::canonicalize</code> respects symlinks.</p>\n</li>\n<li>\n<p><code>fs::canonicalize</code> always returns an absolute path. (Although you can do <code>std::env::current_dir().join(path).lexiclean()</code> if you want an absolute path.)</p>\n</li>\n</ul>\n<p>Are there any other reasons to prefer one over the other? I'd love to hear them!</p>\n<p>It is very lightly tested! If you intend to use it, I encourage you to submit additional tests containing paths you might encounter, if you think the existing tests don't cover them. In particular, I haven't thought about all the exotic prefixes that Windows paths might be adorned with, so there might be bugs there.</p>\n<p>I don't expect to modify the crate or add features to it beyond what I need for my own purposes, so if there are additional features you want, please consider opening a PR! Of course, if you find a bug, I will happily fix it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194898403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587542348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>The big one: cleanname-style functions will work if the path doesn't exist.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194962150,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587575395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and (unless they use syscalls for this) they will work on unveiled paths, where elements <em>along</em> the path may not exist, even though the destination might.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194962269,
            "is_me_message": false,
            "last_edit_timestamp": 1587575444,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587575433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>for the last case -- this is absolutely a valid situation, at least on OpenBSD:</p>\n<div class=\"codehilite\"><pre><span></span>      open(&quot;/home/username&quot;) # will claim that the path does not exist\n</pre></div>\n\n\n<p>but:</p>\n<div class=\"codehilite\"><pre><span></span>     open(&quot;/home/username/Downloads/output.txt&quot;) # works fine\n</pre></div>\n\n\n<p>because programs like Chrome sandbox themselves so that their view of the file system is restricted. Realpath(), as a result, needs to be done as a system call. A naive state of each path element will blow up.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194962618,
            "is_me_message": false,
            "last_edit_timestamp": 1587575639,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587575585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm getting up to speed with rust-- I'm about to finish <a href=\"https://rust-unofficial.github.io/too-many-lists/\" title=\"https://rust-unofficial.github.io/too-many-lists/\">learning rust with too many linked list</a> and have a feel for the ownership system and lifetimes but not much experience using / debugging them. I'd like to use all this new found knowledge to jump into something fun this weekend, and would love to pair program on it-- anyone interested in joining? I've got some ideas of things to implement or happy to join someone on a project they're working on.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194963599,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Weekend rust pair programming?",
            "submessages": [],
            "timestamp": 1587575991,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Last weekend, I had the great pleasure of jumping into some pairing with <span class=\"user-mention\" data-user-id=\"6935\">@Casey Rodarmor (SP2'18)</span> on his Intermodal project based on his offer to pair here:</p>\n<p><a href=\"#narrow/stream/20305-rust/topic/First.20release.20of.20Intermodal!/near/193537873\" title=\"#narrow/stream/20305-rust/topic/First.20release.20of.20Intermodal!/near/193537873\">https://recurse.zulipchat.com/#narrow/stream/20305-rust/topic/First.20release.20of.20Intermodal!/near/193537873</a></p>\n<p>(and I'd be excited to do some pairing with you as well, but probably not until the following weekend if the offer still stands)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194969639,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Weekend rust pair programming?",
            "submessages": [],
            "timestamp": 1587578729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i'd be down to pair this weekend! i have a few projects i'm interested in, but i'm not sure how many of them are good for this sort of thing, i'd also be happy to work on something you're interested in :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194971358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Weekend rust pair programming?",
            "submessages": [],
            "timestamp": 1587579596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>as an aside, this book looks amazing. i got through the main rust book and then immediately got really confused as soon as i tried to implement the basic data structures that i'm seeing in my algorithms textbook.</p>\n<p>and yes would totally be up for pairing on some rust stuff!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194972258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Weekend rust pair programming?",
            "submessages": [],
            "timestamp": 1587580029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>Ahh, that's great, I didn't think about paths to entries which didn't exist or are unavailable for some other reason.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194990575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587589152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>Another nice thing is that you can always get the parent of a path, by doing <code>path.join(\"..\").clean()</code>, whereas <code>Path::parent</code> returns an option.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194996058,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Lexiclean: Lexically clean paths",
            "submessages": [],
            "timestamp": 1587592483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/813126b0289ae35cb6de4ee22d838f962dcfadac?x=x&version=1",
            "client": "website",
            "content": "<p>Is there a default plotting library that the community has converged upon? <br>\nBefore I dive further into learning plotters, I wanted to check if y'all had other suggestions. (I'm not overwhelmed by plotters's ease of use, thought it does seem to have the features I care about.)</p>\n<p>I care about being able to create beautiful figures that are suitable for academic papers (so, information-dense, often many panels, different types of plotting on top of each other). I am agnostic to being able to embed on a webpage, though easy interoperability with Jupyter Notebook is nice.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195149897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lindzey@gmail.com",
            "sender_full_name": "Laura Lindzey (she) (m1'19)",
            "sender_id": 2131,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587708692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/813126b0289ae35cb6de4ee22d838f962dcfadac?x=x&version=1",
            "client": "website",
            "content": "<p>(In python, I use matplotlib. I certainly don't love it, but I can almost always eventually get it to produce what I want.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195149966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lindzey@gmail.com",
            "sender_full_name": "Laura Lindzey (she) (m1'19)",
            "sender_id": 2131,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587708755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1a7b7bb06ea84ea8aa68986ba5a3d936?d=identicon&version=2",
            "client": "website",
            "content": "<p>I've used <a href=\"https://github.com/38/plotters\" title=\"https://github.com/38/plotters\">https://github.com/38/plotters</a> and I was happy with it. There are example plots in the readme, so you could get an idea of what's possible with it. One issue is there was pretty limited documentation in my opinion.</p>\n<p>I haven't used other plotting libraries in Rust, so I don't know how it compares to other options.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195155048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "clample@crimson.ua.edu",
            "sender_full_name": "Chris Lample (he) (W2'17)",
            "sender_id": 100452,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587714072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1a7b7bb06ea84ea8aa68986ba5a3d936?d=identicon&version=2",
            "client": "website",
            "content": "<p>Ah, I just reread your comment and saw you already saw plotters. Didn't notice that earlier, sorry</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195179275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "clample@crimson.ua.edu",
            "sender_full_name": "Chris Lample (he) (W2'17)",
            "sender_id": 100452,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587730686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1a7b7bb06ea84ea8aa68986ba5a3d936?d=identicon&version=2",
            "client": "website",
            "content": "<p>I felt the same way, it wasn't straightforward to use</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195179335,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "clample@crimson.ua.edu",
            "sender_full_name": "Chris Lample (he) (W2'17)",
            "sender_id": 100452,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587730726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I don\u2019t think rust has anything to rival matplotlib at the moment for making scientific figures, tbh I\u2019d probably write data out using rust and then read data in with python and use matplotlib to to make plots. There\u2019s a lot of room (but also <em>a lot</em> of work) to make rust a suitable environment for day-to-day scientific computing. Definitely not there yet.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195184689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587733572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/813126b0289ae35cb6de4ee22d838f962dcfadac?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah =) At this point, if my goal was to make publishable figures, I'd definitely do what <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> suggested and split the data generation from the plot creation, moving plotting to matplotlib. I'm spending some of my unemployed time trying to learn Rust, and part of that for me is using it for all the pieces of my project, and seeing which pieces it does well for.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195220101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lindzey@gmail.com",
            "sender_full_name": "Laura Lindzey (she) (m1'19)",
            "sender_id": 2131,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587749198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>another thing you could do is target vega or vegalite, generating a json description of a plot that gets rendered by javascript (perhaps using rust via wasm?)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195221127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587749687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>although vega\u2019s declarative style isn\u2019t really what matplotlib or matlab plotting is like</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195221181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587749715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>you can also call matplotlib directly from rust (no idea how difficult the data munging gets) using PyO3: <a href=\"https://pyo3.rs/v0.9.2/\" title=\"https://pyo3.rs/v0.9.2/\">https://pyo3.rs/v0.9.2/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195221656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "plotting libraries?",
            "submessages": [],
            "timestamp": 1587749941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm trying to figure out how to deserialize json data into a hashmap with serde; would anyone be able to help? Serialization was pretty straightforward; it looks like</p>\n<div class=\"codehilite\"><pre><span></span>        let mut file = File::create(&quot;foo.txt&quot;).expect(&quot;Couldn&#39;t create file&quot;);\n        let mut serializer = Serializer::new(&amp;mut file);\n        map.serialize(&amp;mut serializer).unwrap();\n</pre></div>\n\n\n<p>but I'm having a lot of trouble with the deserialize function. I can't figure out how to create a visitor without defining a struct that implements the visitor trait, which seems like major overkill. A lot of the docs seem to explain how you would implement serialize and deserialize for custom data types but I would hope that's not necessary here (my hashmap only contains primitives).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195230826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "serde_json + hashmaps",
            "submessages": [],
            "timestamp": 1587754862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>what is the value type of your hashmap? i'd imagine that you should be able to use <code>serde_json::from_str</code>, but i'm not 100% sure on that...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195231146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "serde_json + hashmaps",
            "submessages": [],
            "timestamp": 1587755020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>for instance, if they're all a single type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">serde_json</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">serde</span>::<span class=\"n\">Deserialize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;{ </span><span class=\"se\">\\&quot;</span><span class=\"s\">foo</span><span class=\"se\">\\&quot;</span><span class=\"s\">: 42, </span><span class=\"se\">\\&quot;</span><span class=\"s\">bar</span><span class=\"se\">\\&quot;</span><span class=\"s\">: 999 }&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>if you want it to work with multiple types, you can probably <code>#[derive(Deserialize)]</code> on an enum.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195231723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "serde_json + hashmaps",
            "submessages": [],
            "timestamp": 1587755340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2669d08c7cc2a3ca8152110ff9a6b64de04e39a1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>oh my gosh.. you're right.. I can't believe how much of my life I just spent on that. thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195231969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lee.a.bernick@gmail.com",
            "sender_full_name": "Lee Bernick (she) (SP2'20)",
            "sender_id": 276211,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "serde_json + hashmaps",
            "submessages": [],
            "timestamp": 1587755471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>no problem! serde is honestly pretty confusing in this way, since people talk about \"serde\" to refer to both a really generic serialization/deserialization library and a specifically json-focused thing built on top of that generic library, and it's easy to get sucked into the wrong part of the docs and have things become very confusing - i've definitely run into similar problems before :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195232332,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lee.a.bernick@gmail.com",
                        "full_name": "Lee Bernick (she) (SP2'20)",
                        "id": 276211
                    },
                    "user_id": 276211
                }
            ],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "serde_json + hashmaps",
            "submessages": [],
            "timestamp": 1587755652,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span>  and I are trying to write a <a href=\"https://github.com/anniecherk/and-now-with-feeling\" title=\"https://github.com/anniecherk/and-now-with-feeling\">very silly macro</a> which should let you rename <code>Ok</code> and <code>Err</code> to more exciting identifiers (with mandatory exclamation points) like <code>wow!</code> and <code>woe!</code>. <br>\nThere seem to be two contexts in which a Result may appear: one is as an expression, and the other is as a pattern, as in a pattern match. ie, </p>\n<div class=\"codehilite\"><pre><span></span># case 1: this Result is an expression\nlet t: Result&lt;i32, i32&gt; = wow!(32);\n\n# case 2: this Result is a pattern\n    match raw.parse::&lt;i32&gt;() {\n        wow!(n) =&gt; n,\n        woe!(_) =&gt; default,\n    }\n</pre></div>\n\n\n<p>We figured out that you can write macros that match on either patterns or expressions which is great. We also figured out that you can have multiple cases in the macro. That seems like all we need but...</p>\n<p>We're seeing a problem where case 1 is being matched as a pattern instead of an expression. It kind of makes sense because 32 _could_ be a pattern, but it's weird because it's being used as an expression. </p>\n<p>Anyone have any suggestions on how to write this macro to match both cases (or to recognize case 1 as an expression rather than a pattern?) (<a href=\"https://github.com/anniecherk/and-now-with-feeling/blob/master/src/lib.rs#L7\" title=\"https://github.com/anniecherk/and-now-with-feeling/blob/master/src/lib.rs#L7\">This</a> is what the macro currently does.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195318276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "macro matching an expression as a pattern",
            "submessages": [],
            "timestamp": 1587878502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I don't have anything useful to add here but TIL you can write macros that define other macros \ud83e\udd2f</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195339259,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "macro matching an expression as a pattern",
            "submessages": [],
            "timestamp": 1587914911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dc0740096986096748221be2e7b3a8d3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think Racket has had some influence on Rust macros so I wanted to mention how Racket handles this in case there's a similar mechanism in Rust (which I don't know very well unfortunately). There is a <code>define-match-expander</code> macro that helps you define different meanings for syntax when it appears in an expression context vs. a match pattern context: <a href=\"https://docs.racket-lang.org/reference/match.html#%28part._.Extending_match%29\" title=\"https://docs.racket-lang.org/reference/match.html#%28part._.Extending_match%29\">https://docs.racket-lang.org/reference/match.html#%28part._.Extending_match%29</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195368630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "mail@greghendershott.com",
            "sender_full_name": "Greg Hendershott (he) (F2'14)",
            "sender_id": 6678,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "macro matching an expression as a pattern",
            "submessages": [],
            "timestamp": 1587958353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Blast from the past, life comin' atcha fast! I just saw this announcement from last week:</p>\n<p><a href=\"https://rust-analyzer.github.io/blog/2020/04/20/first-release.html\" title=\"https://rust-analyzer.github.io/blog/2020/04/20/first-release.html\">https://rust-analyzer.github.io/blog/2020/04/20/first-release.html</a></p>\n<p>I can't recall what I've got set up exactly at this point with Rust and emacs (maybe eglot; definitely something with RLS), but this line from the post is making me eager to give rust-analyzer a heavy-handed try:</p>\n<blockquote>\n<p>For the users, the most immediately relevant facet is the first one\u2009\u2014\u2009a language server you can install to get smart code completion in <del>Emacs</del> your favorite editor. This is what this post focuses on.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195473547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588020735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9097\">@Joe Ardent (he) (SP1'17)</span> This looks wonderful. I'd be open to pairing on this yak shave sometime --- it'd be good to see how someone else uses Rust in Emacs anyway in case I am missing some helpful tips.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195496192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588040957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm in Taipei, GMT+8 and pretty open this week.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195496236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588041003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"2172\">Kevin Lynagh (he)</span> <a href=\"#narrow/stream/20305-rust/topic/emacs.3F/near/195496236\" title=\"#narrow/stream/20305-rust/topic/emacs.3F/near/195496236\">said</a>:</p>\n<blockquote>\n<p>I'm in Taipei, GMT+8 and pretty open this week.</p>\n</blockquote>\n<p>Well well, I'm in Los Angeles, GMT-7, so it seems like my evenings are your mornings :) How about day after tomorrow (Thursday for you, Wednesday for me), around 02:00 GMT (10am, 7pm)?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195498428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588044553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"9097\">Joe Ardent (he) (SP1'17)</span> <a href=\"#narrow/stream/20305-rust/topic/emacs.3F/near/195473547\" title=\"#narrow/stream/20305-rust/topic/emacs.3F/near/195473547\">said</a>:</p>\n<blockquote>\n<p>I can't recall what I've got set up exactly at this point with Rust and emacs (maybe eglot; definitely something with RLS), but this line from the post is making me eager to give rust-analyzer a heavy-handed try:</p>\n</blockquote>\n<p>Also, now that I'm on my laptop and not phone and can look at my setup, I'm using Racer for Rust, but LSP for Go. So, <code>lsp-mode</code> is there and working, but unused for Rust. Most things are being managed with straight.el.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195500840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588048530,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/29b9dce46d67940051338881a4b4021e859d7b1f?x=x&version=2",
            "client": "website",
            "content": "<p>hiya! I am learning rust (I've completed all the easy projects on exercism, read through the Rust Book, and done Rustlings). I'm feeling a bit stuck on couple slightly trickier projects, and would love to pair with someone more experienced. Ping me here or DM if interested :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195568932,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22680,
            "sender_email": "marielleefoster@gmail.com",
            "sender_full_name": "Marf Foster (she/they) (S2'16)",
            "sender_id": 9513,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "pairing on rust",
            "submessages": [],
            "timestamp": 1588082838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Cool, I've wanted something like this for a while (having heard the same experiences of instability with racer). Excited to try rust-analyzer.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195578641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588086784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9513\">@Marf Foster (she/they) (S2'16)</span> I might be up for something during NGW* in a week and a bit? It's been a while since I wrote Rust so I'll be _rusty_ on idiomatic code. But I've really been wanting to get back to some outside-of-work programming and was thinking of NGW.</p>\n<p>\u200c* I really really should book this time off.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 195652099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "pairing on rust",
            "submessages": [],
            "timestamp": 1588125864,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I often use \"jump to definition\" and end up in someone else's code, which I often want to change (make something public, edit a hardcoded constant, etc.). Right now I have to jump out of emacs, google for the crate, find a git URL, clone it into my project dir somewhere, then add some lines to my Cargo.toml to use the local version (whether as a dependency or transitive dep override). All this is really tedious and breaks my flow.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196056272,
            "is_me_message": false,
            "last_edit_timestamp": 1588432921,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "auto-fork-and-edit?",
            "submessages": [],
            "timestamp": 1588432855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Does anyone have suggestions for a better approach? I looked around a bit and saw \"cargo vendor\" which allllmost does what I want (clones everything to my local dir) but then won't let me make changes because it checksums = (</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196056282,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "auto-fork-and-edit?",
            "submessages": [],
            "timestamp": 1588432896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6263e852a5789e39c4bacd700eeba2cce3fe6f8f?x=x&version=5",
            "client": "website",
            "content": "<p>so, I've never used rust -- but does the code you jump to still have a notion of a cloned repo? if so you might be able to hack something together with <a href=\"https://github.com/sshaw/git-link\" title=\"https://github.com/sshaw/git-link\">https://github.com/sshaw/git-link</a> (to get the repo of the code you're looking at) and <a href=\"https://github.com/magit/forge/blob/master/lisp/forge-github.el#L617\" title=\"https://github.com/magit/forge/blob/master/lisp/forge-github.el#L617\">https://github.com/magit/forge/blob/master/lisp/forge-github.el#L617</a> (to fork the repo remotely)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196056567,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathanisom27@gmail.com",
            "sender_full_name": "Nathan Isom (he) (W2'20)",
            "sender_id": 255190,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "auto-fork-and-edit?",
            "submessages": [],
            "timestamp": 1588433239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I've changed the binding to <code>C-+</code>, but it works great.</p>\n<p><a href=\"/user_uploads/13/n81mWN6HtPfbhN8lQkRn6hEJ/rust-anaylyzer-victory.png\" title=\"rust-anaylyzer-victory.png\">rust-anaylyzer-victory.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/n81mWN6HtPfbhN8lQkRn6hEJ/rust-anaylyzer-victory.png\" title=\"rust-anaylyzer-victory.png\"><img src=\"/user_uploads/13/n81mWN6HtPfbhN8lQkRn6hEJ/rust-anaylyzer-victory.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196126121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588544444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>it's much snappier than Racer in emacs was.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196126137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588544485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>it's not the cleanest diff, but here's what I changed to go from Racer to Rust Analyzer:</p>\n<p><a href=\"https://gitlab.com/nebkor/dotfiles/-/commit/1e3fa26841d6785a69d11c30750641cbdb0c496e\" title=\"https://gitlab.com/nebkor/dotfiles/-/commit/1e3fa26841d6785a69d11c30750641cbdb0c496e\">https://gitlab.com/nebkor/dotfiles/-/commit/1e3fa26841d6785a69d11c30750641cbdb0c496e</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196138555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588565620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>Yep, that diff worked great for getting emacs aware of rust-analyzer (<a href=\"https://github.com/alphor/.emacs.d/commit/43ef94b6d04d70949b13a39697a5fbdacf43c7d7#diff-aacb4ce123f9200898dff4a35e6a8461R119-R123\" title=\"https://github.com/alphor/.emacs.d/commit/43ef94b6d04d70949b13a39697a5fbdacf43c7d7#diff-aacb4ce123f9200898dff4a35e6a8461R119-R123\">here's mine</a>, based off yours). It boots up in spirit, but all the interactive lsp-requests don't return results... they just finish.</p>\n<p><code>(lsp-describe-session)</code> lists a renameProvider (for <code>lsp-rename</code>) in the capabilities.. so not sure what's going on.</p>\n<p>Edit: Figured it out -- had to stop accessing my project from a symlink.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196824534,
            "is_me_message": false,
            "last_edit_timestamp": 1588900380,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1588882412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Sweet, even jump to definition works for files (like <a href=\"http://process.rs\">process.rs</a>) in the Nix store using lorri + direnv.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197627613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1589496167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fe57e785301dd511709aa6b2e04de867df8e4c06?x=x&version=2",
            "client": "website",
            "content": "<p>hi, do you think <code>Combinator</code> is the best name for what i'm trying to do here?</p>\n<div class=\"codehilite\"><pre><span></span><code>enum Combinator&lt;T&gt; {\n    And(Combinator, Combinator),\n    Or(Combinator, Combinator),\n    Not(Combinator),\n    T,\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198216590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "wyc@fastmail.fm",
            "sender_full_name": "Wayne Chang (he) (m4'20)",
            "sender_id": 301047,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "help me name this thing",
            "submessages": [],
            "timestamp": 1589989050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>depends on the context, i'd say - i would maybe call it <code>Expr</code>, unless there's a higher level thing you're already calling <code>Expr</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198216839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "help me name this thing",
            "submessages": [],
            "timestamp": 1589989157,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/03b09da34cb8cffe34e982bde9598e5a?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know if Combinator has a specific meaning but this makes sense to me. Also it seems like a unique enough name where it'd be pretty easy to rename if you change your mind later!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198226421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "aechien@gmail.com",
            "sender_full_name": "Andrew Chien (he) (W2'20)",
            "sender_id": 255843,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "help me name this thing",
            "submessages": [],
            "timestamp": 1589993586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>I wrote a long post documenting how I organize the codebase of <code>just</code>, a fairly large Rust program that I wrote:</p>\n<p><a href=\"https://rodarmor.com/blog/tour-de-just/\">https://rodarmor.com/blog/tour-de-just/</a></p>\n<p>I found learning how to organize Rust programs to be quite challenging, so hopefully someone finds this useful!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198583446,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "asf@boinkor.net",
                        "full_name": "Andreas Fuchs (he/they)",
                        "id": 9362
                    },
                    "user_id": 9362
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alee@aaronosaur.us",
                        "full_name": "Aaron Lee (he) (S1'20)",
                        "id": 301228
                    },
                    "user_id": 301228
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ashley.blewer@gmail.com",
                        "full_name": "Ashley Blewer (she) (SP2'18)",
                        "id": 111914
                    },
                    "user_id": 111914
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                }
            ],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "How I organize large codebases",
            "submessages": [],
            "timestamp": 1590326899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/813126b0289ae35cb6de4ee22d838f962dcfadac?x=x&version=1",
            "client": "website",
            "content": "<p>I <em>love</em> the name of this tool. And,  janus sounds like a really kind way to do your regression testing =)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198585231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lindzey@gmail.com",
            "sender_full_name": "Laura Lindzey (she) (m1'19)",
            "sender_id": 2131,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "How I organize large codebases",
            "submessages": [],
            "timestamp": 1590329909,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/423a5327ed896db2dfd052de561709d0e6ae2689?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks! Yah, Janus is probably overkill, but I reeeeeaally don't want to break anything for my users. I think I wrote it when I did a big overhaul of the lexer, which is exactly the kind of thing that I could imagine subtly screwing up and breaking a bunch of weird justfiles.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198605146,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "casey@rodarmor.com",
            "sender_full_name": "Casey Rodarmor (SP2'18)",
            "sender_id": 6935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "How I organize large codebases",
            "submessages": [],
            "timestamp": 1590363119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This is helpful! The module system is flexible enough and has changed enough over time that it's difficult as a beginner to figure out where things go.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198707892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "How I organize large codebases",
            "submessages": [],
            "timestamp": 1590448389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I added an event to the calendar Monday if anyone wants to get together and chat. It's not structured, but is more of a bring-what-you-want chat. <a href=\"https://www.recurse.com/calendar/10556\">https://www.recurse.com/calendar/10556</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199037092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590679178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(And if you have any more adjectives that start with <code>R</code> I'd be happy to edit the calendar entry.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199037330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590679284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>thank you for setting this up!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199040601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590680771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>Ruthless? Raucous? Recursive?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199040889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590680931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh no, how could I miss Recursive?!?!?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199040961,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "66",
                    "emoji_name": "recursecenter",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@captnemo.in",
                        "full_name": "Nemo (he) (S1'20)",
                        "id": 301256
                    },
                    "user_id": 301256
                },
                {
                    "emoji_code": "66",
                    "emoji_name": "recursecenter",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adam@cthulahoops.org",
                        "full_name": "Adam Kelly (they/he) (S1'20)",
                        "id": 301014
                    },
                    "user_id": 301014
                }
            ],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590680972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Repeating?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199045339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1590683080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Has anyone gotten the Rust analyzer \"assists\" to work within Emacs? They look very handy (for example: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members</a>) but I can't figure out what emacs lsp-mode function they correspond to</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199299623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590919337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Filling match arms also looks super handy: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#fill_match_arms\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#fill_match_arms</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199299634,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590919369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"2172\">Kevin Lynagh (he)</span> <a href=\"#narrow/stream/20305-rust/topic/emacs.3F/near/199299623\">said</a>:</p>\n<blockquote>\n<p>Has anyone gotten the Rust analyzer \"assists\" to work within Emacs? They look very handy (for example: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/assists.md#add_impl_missing_members</a>) but I can't figure out what emacs lsp-mode function they correspond to</p>\n</blockquote>\n<p>Hilariously, that URL has already gone stale, since the file is now <code>generated_assits.adoc</code>: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/899570ad7abbc644e87d8379862c1b9f940eaf07/docs/user/generated_assists.adoc\">https://github.com/rust-analyzer/rust-analyzer/blob/899570ad7abbc644e87d8379862c1b9f940eaf07/docs/user/generated_assists.adoc</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199318137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590953663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>But, it seems from this comment (<a href=\"https://github.com/emacs-lsp/lsp-ui/issues/443#issuecomment-627262644\">https://github.com/emacs-lsp/lsp-ui/issues/443#issuecomment-627262644</a>), you can invoke <code>lsp-execute-code-action</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199318193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590953804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>It also looks like some of the assists are meant to be used with yasnippet</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199318404,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590954144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>OK, I just tried it out, and that worked! (<code>M-x lsp-execute-code-action</code>). In my case, I typed <code>a&lt;TAB&gt;</code>, which completed to <code>Add</code>, then the minibuffer prompted me to choose either <code>c</code>ustom impl or <code>d</code>erive default</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590957993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I was following the state of flow for the <code>add_custom_impl</code>, which was the first thing at the top of the generated_assists.adoc linked above.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320647,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Though my cursor did not end up where the <code>$0</code> is inside the custom impl of <code>Debug</code> in the \"after\" state.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>in spite of <code>yas-minor-mode</code> being activated.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>though at least the literal <code>$0</code> wasn't there, and the \"Debug\" where my point had been in the declaration block (shit, what do you call the <code>#[derive(...)]</code> entity in the program text? anyway, inside there) was no longer present, as desired after running the action.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320775,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Just doing <code>M-x lsp-execute-code-action &lt;TAB&gt;</code> brings up a minibuffer dialog letting me know my options.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320858,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>a++++, will bind to key</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199320917,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590958632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Hilariously, that URL has already gone stale</p>\n</blockquote>\n<p>That's what I get for not pressing \"y\" on Github to turn it into a permalink!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199329882,
            "is_me_message": false,
            "last_edit_timestamp": 1590975408,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590975403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interesting that you got it to work. I wrote out</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">//cursor here</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199329892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590975455,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But when I invoke<code> lsp-execute-code-actions</code> my minibuffer just says \"no code actions\"</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199329896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590975478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh, interesting! It was because I didn't have <code>rust-analyzer</code> setup properly (I downloaded the binary and put it on my path, but forgot to mark it as executable). I still can't get this particular example to work, but <code>lsp-execute-code-actions</code> now fills in fields in structs and stuff like that, which is cool.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199330133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590975946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm very curious how this was working at all (jump to definition, etc.) before --- maybe rust-mode implements that somehow outside of lsp?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199330177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590975970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Just doing M-x lsp-execute-code-action &lt;TAB&gt; brings up a minibuffer dialog letting me know my options.</p>\n</blockquote>\n<p>I wonder if there's a way to combine this options list with the regular completion options. I would love to see them in the same place, but don't know enough about how Helm/Company works to figure it out.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199330205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590976050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>But I would really like to have a single \"please do something for me, computer\" key, and then just select from the provided, contextually reasonable options</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199330258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1590976083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"2172\">Kevin Lynagh (he)</span> <a href=\"#narrow/stream/20305-rust/topic/emacs.3F/near/199330177\">said</a>:</p>\n<blockquote>\n<p>I'm very curious how this was working at all (jump to definition, etc.) before --- maybe rust-mode implements that somehow outside of lsp?</p>\n</blockquote>\n<p>specifically jump to definition just uses emacs built in xref, which chokes on multiple definitions with the same name but in different modules or something.</p>\n<p>Anyone figure out how to suppress cargo checks on save? These take forever, and hold up the virtuous write/compile/test cycle.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199536879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>are you using racer?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>or maybe flycheck/make?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>I hope not currently, I used to. Flymake is in my modeline, but nothing in my config explicitly enables it (descendant of rust-mode?)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124348,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>not sure. Also, formatting on save requires parsing, too</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>That said the thing that writes to the minibuffer is likely <a href=\"http://ra_flycheck.rs\">ra_flycheck.rs</a>, there's a line in there that spawns a flycheck thread.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>ah!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>This line specifically is the hunch: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/2020-04-20/crates/ra_flycheck/src/lib.rs#L161\">https://github.com/rust-analyzer/rust-analyzer/blob/2020-04-20/crates/ra_flycheck/src/lib.rs#L161</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199537780,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not on my personal laptop, so I don't have access to my rusty emacs setup right now. But I'm surprised that the checks blocks the UI in emacs, since it should be running in the background? Maybe there's a config to have it not block?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199538226,
            "is_me_message": false,
            "last_edit_timestamp": 1591124686,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124671,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>It doesn't block the emacs UI thread, but it does block cargo invocations, it waits for a file lock probably held by cargo check.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199538784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591124896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>/run/current-system/sw/bin/cargo test --manifest-path /home/ajarara/projects/yubi-pgp/Cargo.toml\n    Blocking waiting for file lock on build directory\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199539059,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591125016,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a0dee7b2f79915213075f1ca226224764407ad4d?x=x&version=4",
            "client": "website",
            "content": "<p>It might be solved by disabling flymake. I'm okay with losing squigglies (if that's what Flymake actually does lol).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199539187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ajarara94@gmail.com",
            "sender_full_name": "Ahmad Jarara (S2'17)",
            "sender_id": 101400,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591125089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"101400\">Ahmad Jarara (S2'17)</span> <a href=\"#narrow/stream/20305-rust/topic/emacs.3F/near/199539187\">said</a>:</p>\n<blockquote>\n<p>It might be solved by disabling flymake. I'm okay with losing squigglies (if that's what Flymake actually does lol).</p>\n</blockquote>\n<p>yeah, that's one of the ways to get the squigglies</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199555687,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "emacs?",
            "submessages": [],
            "timestamp": 1591132820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm sending data over USB and am designing a struct that exposes a nice API so the rest of my application doesn't need to worry about breaking data up into multiple packets. (USB packets are 64 bytes max). My struct is generic on data type <code>D</code>, which I made subject to the constraint <code>AsRef&lt;[u8]&gt;</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591506721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>My hope was to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">UsbSender</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data_being_transmitted</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data_to_be_transmitted</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">iter</span>: <span class=\"nc\">core</span>::<span class=\"n\">slice</span>::<span class=\"n\">Chunks</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591506841,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>And then when the CPU is ready to send data, it calls this <code>poll</code> method which handles the actual work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_to_be_transmitted</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">//write one packet&#39;s worth of bytes to USB</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">//if we are out of bytes, it means we sent a full message, so swap the queued up message</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_being_transmitted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">data_being_transmitted</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"n\">MAX_PACKET_SIZE</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//recur so first chunk of new data is sent</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">//do nothing</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008589,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591506989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>However, I can't figure out how to convince Rust that the chunks iterator is referencing some data that will live as long as the chunks iterator itself.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591507125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I know I could solve this if just copy/pasted the chunks iterator code into my struct (maintaining a \"chunks already sent\" counter and doing the bounds checking and slicing on every poll), but I'd like to get better at Rust and see if it's possible to do this using the existing chunks iterator.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008697,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591507234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Though I am also open to hearing that trying to maintain an inner iterator / self-referential struct is unidiomatic Rust and I shouldn't be trying this. That's how I <em>feel</em> right now, but I'd like to hear it what more experienced Rust programmers think = )</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200008753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591507345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> initially I thought this lifetime annotation might do it:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct UsbSender&lt;&#39;a, D&gt;\nwhere\n    D: AsRef&lt;[u8]&gt; + &#39;a,\n{\n    data_being_transmitted: Option&lt;D&gt;,\n    data_to_be_transmitted: Option&lt;D&gt;,\n    iter: core::slice::Chunks&lt;&#39;a, u8&gt;,\n}\n</code></pre></div>\n\n\n<p>but I don't think it'll work. One way to think about it: a struct in Rust must be moveable by memcpy. The iterator will contain a reference to the byte slice, which is an absolute pointer. If it was memcpy'd, the location of the <code>D</code> thing would change, but the pointer would be invalid since it would point to the old location.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200027355,
            "is_me_message": false,
            "last_edit_timestamp": 1591541638,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591541418,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>And self-referential structs are definitely unidiomatic because even if you can make them safe to use, you will need to write <code>unsafe</code> blocks to create them.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200027430,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591541536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>That said, there are a couple of things that help with this that I know of:</p>\n<ul>\n<li><a href=\"https://docs.rs/owning_ref/\">owning_ref</a></li>\n<li><a href=\"https://docs.rs/rental/\">rental</a> (unmaintained as of a couple of weeks ago)</li>\n</ul>\n<p>Haven't used either, so I can't give you any useful experience reports.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200027546,
            "is_me_message": false,
            "last_edit_timestamp": 1591541814,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591541755,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thinking about it in terms of <code>memcpy</code>is helpful, thanks. Do you think there's any way to convince the lifetime system that I won't be moving the owned <code>D</code> while the iterator is around?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200027756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591542075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>owning_ref</code> won't help unfortunately, because I don't think it'll work in a<code>no_std</code> environment. <code>rental</code> looks like it might (based on having <code>std</code> as a feature flag) but yeah, author seems to think it'll be increasingly unidiomatic as Rust evolves.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200027769,
            "is_me_message": false,
            "last_edit_timestamp": 1591542208,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591542101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>You could take a look at <a href=\"https://doc.rust-lang.org/std/pin/\">Pin</a>, but honestly I'm way out of my depth. withoutboats has some blog posts from when they were devising the API that might be useful:</p>\n<ul>\n<li><a href=\"https://boats.gitlab.io/blog/post/2018-01-25-async-i-self-referential-structs/\">https://boats.gitlab.io/blog/post/2018-01-25-async-i-self-referential-structs/</a></li>\n<li><a href=\"https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/\">https://boats.gitlab.io/blog/post/2018-02-07-async-iv-an-even-better-proposal/</a> (and, really, the entire series)</li>\n<li><a href=\"https://boats.gitlab.io/blog/post/rethinking-pin/\">https://boats.gitlab.io/blog/post/rethinking-pin/</a></li>\n</ul>\n<p>oh and this seems relevant: <a href=\"https://boats.gitlab.io/blog/post/pin-cell/\">https://boats.gitlab.io/blog/post/pin-cell/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028243,
            "is_me_message": false,
            "last_edit_timestamp": 1591542925,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591542853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you think of an alternative approach for solving this problem by reusing the <code>chunks</code> iterator? Or is the Rustiest thing to do here to just rewrite that same logic?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591542860,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I was just looking at Pin too. From <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2349-pin.md\">the RFC</a>, Pin is to \"provide a reference type where the referent is guaranteed to never move before being dropped.\"</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591542975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which does sound like what I need here. I guess the compiler would somehow force me to drop the old iterator before the data it points to?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591543017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>Like I said, out of my depth.</p>\n<p>The other thing that comes to mind: trying to use <code>async/await</code>. There was a <a href=\"https://ferrous-systems.com/blog/stable-async-on-embedded/\">blog post</a> a few weeks ago that made it look like this is possible, no idea of difficulty.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028442,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591543197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>How would you use async/await together with the <code>chunks</code> iterator?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591543315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>I think you'd await inside a for loop over the iterator:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">UsbSender</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">send_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">PresumablyThisCanFail</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"n\">MAX_PACKET_SIZE</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_a_packet</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_a_packet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chunk</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">PresumablyThisCanFail</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// no idea what goes here... write to some hardware place? not sure how</span>\n<span class=\"w\">    </span><span class=\"c1\">// you get notified when the data has gone out, either</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>but to make that work you'd need some kind of async executor for your platform. Again: out of my depth so no solid answers here!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200028854,
            "is_me_message": false,
            "last_edit_timestamp": 1591543930,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591543818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, interesting. Yeah, then maybe we just make the struct/lifetime stuff async/await's problem. I haven't used that stuff at all, so no idea how it'll work either. I'm hopeful about the Pin idea, I'll put together a minimal example and put a playground together to make things more concrete for anyone reading this thread.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200029583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591544980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the smallest repro I can make: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=10dcaa950037750c68740366f679072a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=10dcaa950037750c68740366f679072a</a> Gotta sleep on this for now, but curious to see what other Rusty RCers come up with!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200031806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591548169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would just make an owning version of the Chunks iter. It's very little code. I think you'll end up doing vastly more work trying to reuse the stdlib chunks in an owning context.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200031944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591548423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=13e36490e78b6f3937f5b23085d10ec3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=13e36490e78b6f3937f5b23085d10ec3</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200032617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591549399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Totally agree, that'd be the fastest way to get it done. But I'm interested in learning more about Rust and in particular this situation of having existing code that takes a reference but needing to use it as if it was something that could take ownership.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200052323,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591581302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>To me, it feels like having ownership of the data <em>should be</em> sufficient to use code that only requires a reference, but my understanding of Rust isn't good enough to make that happen.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200052378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591581382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fixing that is the real motivation behind my question, not solving this particular problem.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200052380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591581401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you want to make a self-referential struct then pin is definitely the starting point. You also have to unsafely erase the lifetime and then manually annotate each exposed method on that struct with safe lifetimes. The whole point of pin is to prevent you getting an &amp;mut, without which you can't add stuff to the queue or call next on the chunks iter, so all of that will need to live inside the unsafe boundary too. I also recommend writing a lot of tests and running them under miri because it's surprisingly hard to use pin correctly.</p>\n<blockquote>\n<p>ownership of the data should be sufficient to use code that only requires a reference<br>\nFixing that is the real motivation behind my question, not solving this particular problem.</p>\n</blockquote>\n<p>It _is_ sufficient, but you can't store the owned thing and the borrowed thing in the same struct in safe rust because the type-system has no way to express that lifetime. I didn't intend to be dismissive of the underlying problem above - what I was getting at is that though this feels like a thing you should be able to abstract over, in practice it's so far off the rust happy-path that doing so typically causes more problems than it solves and usually your best option is to just manually work around it by either:</p>\n<ul>\n<li>storing the owned and borrowed data separately (eg have the same three fields but put them on the stack separately instead of packing them in a struct)</li>\n<li>using some indirect reference (like the usize in my example above) and reborrow each time you need to access the data</li>\n<li>rewriting the code to take ownership instead</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200060965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591596019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Basically self-referential structs are a giant tarpit. If you want to knowingly jump in to the tarpit for educational purposes then look at pin. If you just want to get to the other side then have a look at the practical but unsatisfying workarounds.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200061300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591596573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"863\">@Jamie Brandon (W2'15)</span> your answer helps a lot! I did actually write it out this morning after deciding I didn't want to get into the Pin tarpit = )</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200067193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591603184,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's what I ended up with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Reporter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"nc\">UsbBus</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">transmitting</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">queued</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">interface</span>: <span class=\"nc\">InterfaceNumber</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">write_ep</span>: <span class=\"nc\">EndpointIn</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and then </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">transmitting</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">cmp</span>::<span class=\"n\">min</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MAX_PACKET_SIZE</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">packet</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()[</span><span class=\"o\">*</span><span class=\"n\">offset</span><span class=\"o\">..</span><span class=\"n\">end</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_ep</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">packet</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">packet</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">transmitting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">queued</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">transmitting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_data</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//recur so first chunk of new data is sent</span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200067262,
            "is_me_message": false,
            "last_edit_timestamp": 1591603274,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "self-referential struct iterator woes",
            "submessages": [],
            "timestamp": 1591603227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yes, it's scheduled again in 10 minutes :-) <a href=\"https://www.recurse.com/calendar/10705\">https://www.recurse.com/calendar/10705</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200122068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "BoF session Monday",
            "submessages": [],
            "timestamp": 1591633270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi everyone, so I am trying to learn rust over the summer. I am trying to write a simple program that will generate a card deck and then run the war game on it. It is not working, it seems like the length of the deck doesn't hold up. I was wondering if someone could take a look at this. I have been stuck on this for a long time. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rand</span>::<span class=\"n\">seq</span>::<span class=\"n\">SliceRandom</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rand</span>::<span class=\"n\">thread_rng</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// generating the deck</span>\n<span class=\"k\">fn</span> <span class=\"nf\">deck_gen</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">([</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thread_rng</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">deckp1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">deckp2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">deckp1</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">deckp2</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">deckp1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">deckp2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// the recursive war function: the main of what the function is doing.</span>\n<span class=\"c1\">// taking in p1,p2,runcount,spoils</span>\n<span class=\"k\">fn</span> <span class=\"nf\">recwar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p1</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p2</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">runcount</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">spoils</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// incriment the runcount by 1</span>\n<span class=\"w\">    </span><span class=\"n\">runcount</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// get the last element of both and remove it</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">p2f</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">p1f</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// check the value of p2</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// insert both into p2 at 0</span>\n<span class=\"w\">        </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// append spoils at the beginning too</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2 before extend{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">spoils</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2 after extend{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// check the val of p1 and p2</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">p1f</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">p2f</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// check the val of p1</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// insert both into p1 at position 0</span>\n<span class=\"w\">        </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// append spoils at beginning too</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1 before extend{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">spoils</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1 after extend{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// check the val of p1 and p2</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// if it is a tie add 3 of each to spoils and then push it</span>\n<span class=\"w\">    </span><span class=\"c1\">// also add the p1f and p2f</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p1f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p2f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// and then make it recursive</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">recwar</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runcount</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">spoils</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">runcount</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// the main func</span>\n<span class=\"c1\">// testing recwar</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//creating the deck</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">deck_gen</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//making sure they sum to 52</span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// convert everything to vec</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// printing them before they go into function</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1beforewar{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2beforewar{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// the war func</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_runcount</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">recwar</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// printing after the war</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p1outofwar{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;p2outofwar{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// making sure the lengths are equal to 52 (they are not)</span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>sorry for a lot of code</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200927647,
            "is_me_message": false,
            "last_edit_timestamp": 1592245750,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592245725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>here is the output <a href=\"/user_uploads/13/SQ9jo8g_puOgiLRvJs8AUpPd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/SQ9jo8g_puOgiLRvJs8AUpPd/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/SQ9jo8g_puOgiLRvJs8AUpPd/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200927933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592245867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>The thing is that I have to run it 100 times because it only happens during a war i think.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200928547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592246209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>Hey a quick debugging tip I would do is add an assert at the top of recwar asserting that the length of p1 + p2 + spoils is 52, and also maybe one before the end of the function (also before returning the recursive call), this would help you figure out where the invariant is broken</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200942101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592253315,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>My guess: should</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p1f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p2f</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>be outside the loop? The way you currently have it I could see it creating extra cards</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200942255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592253377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/387835e71cae8ffc38a86624de2c74fe59a06ce5?x=x&version=2",
            "client": "website",
            "content": "<p>yeah that does it<br>\nif you add</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">spoils</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>at the top of the function<br>\nand also a print statement</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Making the recursive call:&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>before <code>return recwar(...)</code><br>\nYou can see it panic as soon as it goes in the recursive call:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Making</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">recursive</span><span class=\"w\"> </span><span class=\"n\">call</span>:\n<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"na\">&#39;main</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"mi\">56</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"mi\">52</span><span class=\"err\">`&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">27</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and then moving the 2 <code>spoils.push</code> lines out of the loop makes everything run smoothly.<br>\nGood luck!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200943190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "amedee.daboville@gmail.com",
            "sender_full_name": "Am\u00e9d\u00e9e d'Aboville (they) (W2'20)",
            "sender_id": 256969,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592253849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thank you. I have been stumped on this for a very long time and this is really helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200944424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "A beginner trying to understand what is wrong",
            "submessages": [],
            "timestamp": 1592254522,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>sorry for the short notice but i recently found out about this stream (which is live now) regarding various smart pointers and containers and things: <a href=\"https://www.twitch.tv/jonhoo\">https://www.twitch.tv/jonhoo</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201197094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "smart pointers",
            "submessages": [],
            "timestamp": 1592426242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>an update on this: there are now <a href=\"https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html\">official docs</a> on this which are pretty good.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202889899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "webassembly without npm?",
            "submessages": [],
            "timestamp": 1593894203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202891186,
            "is_me_message": false,
            "last_edit_timestamp": 1593899718,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "webassembly without npm?",
            "submessages": [],
            "timestamp": 1593896481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>do you like statically linked binaries way too much? do you want to write a web server that serves some static files, but don't want deployment to be a nightmare? i just learned about <a href=\"https://github.com/pyros2097/rust-embed\">rust-embed</a>, which is a procmacro that embeds a file hierarchy into a binary, with a super simple api to query it. it also lets you load from the real filesystem in debug mode, but have the files embedded into the binary in release mode.</p>\n<p>i've wanted this for a long time, but apparently wasn't googling the right things to find it, so i figured i'd post here so other people will hear about it :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202891986,
            "is_me_message": false,
            "last_edit_timestamp": 1593898006,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593897928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>huh! i had previously hacked together something like this using <a href=\"https://crates.io/crates/lazy_static_include\">https://crates.io/crates/lazy_static_include</a> but rust-embed looks way nicer</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202892582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593898925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>wow what a cool idea</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202893088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593899797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i'm writing a little webserver in rust, and the frontend is in wasm. this is really nice, since it means that i can share the types between the backend and the frontend, but still have a real type system. i wrote this little function which i'm pretty happy with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">api_get</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JsValue</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;de</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">serde</span>::<span class=\"n\">de</span>::<span class=\"n\">Deserialize</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;de</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">web_sys</span>::<span class=\"n\">window</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;no global `window` exists&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">opts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestInit</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">opts</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"s\">&quot;GET&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">opts</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">RequestMode</span>::<span class=\"n\">SameOrigin</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Request</span>::<span class=\"n\">new_with_str_and_init</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">opts</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JsFuture</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">.</span><span class=\"n\">fetch_with_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">resp_value</span><span class=\"p\">.</span><span class=\"n\">is_instance_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Response</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resp</span>: <span class=\"nc\">Response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resp_value</span><span class=\"p\">.</span><span class=\"n\">dyn_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">json</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JsFuture</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">into_serde</span><span class=\"p\">().</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">JsValue</span>::<span class=\"n\">NULL</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>that way i can do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">objects</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Object</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">api_get</span><span class=\"p\">(</span><span class=\"s\">&quot;/api/objects&quot;</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tags</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">api_get</span><span class=\"p\">(</span><span class=\"s\">&quot;/api/tags&quot;</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and it all just works, i don't have to write any extra boilerplate. very nice.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202894208,
            "is_me_message": false,
            "last_edit_timestamp": 1593902304,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1593902035,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ohh, this does seem really handy! Thanks for sharing it!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202902037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593917891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>reminding me that I kind of wish std had an abstract filesystem API...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202906717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593927432,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>nifty! what's the size impact of using serde? also is your code available somewhere to peek at?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202906771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1593927558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>the code isn't online anywhere right now - i don't have a great idea of how much it impacts binary size - probably a lot, but that's not something i care about a ton for this application. this is some of what <code>twiggy top</code> reports:</p>\n<div class=\"codehilite\"><pre><span></span><code> Shallow Bytes \u2502 Shallow % \u2502 Item\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n         22545 \u250a    16.53% \u250a &quot;function names&quot; subsection\n         16361 \u250a    12.00% \u250a data[0]\n          6700 \u250a     4.91% \u250a &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct::h2d94aa8eeefd9834\n          5410 \u250a     3.97% \u250a dlmalloc::dlmalloc::Dlmalloc::malloc::h8fb48bb7fc76f671\n          4283 \u250a     3.14% \u250a core::num::flt2dec::strategy::dragon::format_shortest::hddde897f8c489246\n          3566 \u250a     2.61% \u250a &lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll::h20decbe08c5a6f5a\n          3450 \u250a     2.53% \u250a core::num::flt2dec::strategy::dragon::format_exact::h0fa4909a69d5c563\n          2550 \u250a     1.87% \u250a serde_json::error::make_error::h77206aa9fcf1e774\n          2433 \u250a     1.78% \u250a serde_json::read::parse_escape::h6214946373bc6190\n          2318 \u250a     1.70% \u250a core::num::flt2dec::strategy::grisu::format_shortest_opt::h4a81cc8a7af3c976\n          2108 \u250a     1.55% \u250a uuid::parser::&lt;impl uuid::Uuid&gt;::parse_str::h0ea3c2805ad97475\n          1822 \u250a     1.34% \u250a &lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str::hf5ddb75ec527b000\n          1654 \u250a     1.21% \u250a hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash::h94b94188407964c2\n          1610 \u250a     1.18% \u250a core::num::flt2dec::strategy::grisu::format_exact_opt::ha4aa7db84196eb88\n          1482 \u250a     1.09% \u250a core::fmt::float::float_to_decimal_common_exact::hada3b859d87d6d46\n          1343 \u250a     0.98% \u250a core::str::pattern::StrSearcher::new::hae540b6bb0221282\n          1236 \u250a     0.91% \u250a core::fmt::float::float_to_decimal_common_shortest::h6c31f9bdd567b5e4\n          1180 \u250a     0.87% \u250a &lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt::h99aecc2c63a53875\n          1176 \u250a     0.86% \u250a serde_json::de::Deserializer&lt;R&gt;::peek_invalid_type::h56d5d8352e62fc1b\n          1165 \u250a     0.85% \u250a &lt;str as core::fmt::Debug&gt;::fmt::hd5903e4d703e474f\n          1130 \u250a     0.83% \u250a dlmalloc::dlmalloc::Dlmalloc::free::he8209e6a31d913bc\n          1123 \u250a     0.82% \u250a core::str::slice_error_fail::h8b093177d05c9d69\n          1014 \u250a     0.74% \u250a hashbrown::map::HashMap&lt;K,V,S&gt;::insert::h9e7a6f159b5ce6b2\n           918 \u250a     0.67% \u250a core::fmt::Formatter::pad::h586f6d71b806515e\n           864 \u250a     0.63% \u250a serde_json::de::Deserializer&lt;R&gt;::parse_any_number::h1b614950e24ca7d3\n           860 \u250a     0.63% \u250a core::unicode::printable::is_printable::hd5be97b4f7f5229e\n           838 \u250a     0.61% \u250a dlmalloc::dlmalloc::Dlmalloc::dispose_chunk::hff30ad28a5bb55de\n           827 \u250a     0.61% \u250a core::fmt::write::h2015767c537fd2fe\n           780 \u250a     0.57% \u250a &lt;uuid::parser::error::Error as core::fmt::Display&gt;::fmt::hfb564eef18b6800d\n           778 \u250a     0.57% \u250a core::fmt::Formatter::pad_integral::he4c195eeee2c5fad\n           765 \u250a     0.56% \u250a serde_json::de::Deserializer&lt;R&gt;::ignore_integer::h7eeafac768810e55\n           764 \u250a     0.56% \u250a core::num::bignum::Big32x40::mul_digits::he33bb6001362624b\n           749 \u250a     0.55% \u250a &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str::hd96c11e78f7e6083\n           728 \u250a     0.53% \u250a serde_json::de::Deserializer&lt;R&gt;::parse_exponent::hc767be90b84764a6\n           726 \u250a     0.53% \u250a &lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str::h1185a25399c034bf\n           700 \u250a     0.51% \u250a &lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq::h77a2bfa434f801e3\n           699 \u250a     0.51% \u250a serde_json::de::Deserializer&lt;R&gt;::parse_decimal::h1fe6815a51d8fb26\n           682 \u250a     0.50% \u250a &lt;wasm_bindgen_futures::JsFuture as core::convert::From&lt;js_sys::Promise&gt;&gt;::from::hcb409edc4ac0b837\n           672 \u250a     0.49% \u250a dlmalloc::dlmalloc::Dlmalloc::realloc::h0e99f950c16f3974\n           658 \u250a     0.48% \u250a &lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::h0a5e791475508b9c\n           652 \u250a     0.48% \u250a &lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write::h933c32ba16e11d00\n           624 \u250a     0.46% \u250a core::fmt::Formatter::pad_formatted_parts::h81eda0ef5fd70b1e\n           594 \u250a     0.44% \u250a core::fmt::Formatter::write_formatted_parts::h90e2a8e786f5d5f6\n           585 \u250a     0.43% \u250a data[1]\n           550 \u250a     0.40% \u250a &lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str::h617f6d44b6a3eae5\n           540 \u250a     0.40% \u250a hashbrown::map::make_hash::h7b5848b9391eb92c\n           536 \u250a     0.39% \u250a core::num::bignum::Big32x40::mul_pow2::he3171d2c347309f7\n           533 \u250a     0.39% \u250a wasm_bindgen_futures::task::singlethread::Task::spawn::he4154f7c34b7b725\n           519 \u250a     0.38% \u250a &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq::hd24dd5abd41e5b1e\n           516 \u250a     0.38% \u250a &lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::decode_hex_escape::h5d0841e9a773c3e3\n           516 \u250a     0.38% \u250a &lt;char as core::fmt::Debug&gt;::fmt::hf4d4d42619ef0cdb\n           500 \u250a     0.37% \u250a core::num::flt2dec::strategy::dragon::mul_pow10::hea1943a1add29dcc\n           484 \u250a     0.35% \u250a &lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::ops::drop::Drop&gt;::drop::h79641b791baa1842\n           466 \u250a     0.34% \u250a &lt;&amp;mut W as core::fmt::Write&gt;::write_char::h9736bb92c5da236f\n           466 \u250a     0.34% \u250a serde_json::de::Deserializer&lt;R&gt;::parse_long_integer::heedfd072494e1cae\n           461 \u250a     0.34% \u250a serde_json::de::from_str::h0c57491722bafd29\n           441 \u250a     0.32% \u250a serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize::h983e3af7846c9868\n           411 \u250a     0.30% \u250a &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string::h49ea104a2f023993\n           403 \u250a     0.30% \u250a serde_json::de::Deserializer&lt;R&gt;::parse_decimal_overflow::hda82da7897c41eaa\n           394 \u250a     0.29% \u250a dlmalloc::dlmalloc::Dlmalloc::unlink_chunk::hb54c9431c5da8c90\n           393 \u250a     0.29% \u250a hashbrown::raw::RawTable&lt;T&gt;::insert::hfe37ce9d03e88840\n           377 \u250a     0.28% \u250a dlmalloc::dlmalloc::Dlmalloc::memalign::h086eeda70f67ce50\n           375 \u250a     0.27% \u250a core::slice::memchr::memchr::h427f6feb61ce9409\n           370 \u250a     0.27% \u250a js_sys::global::GLOBAL::__init::h7eda8245db214fa1\n           366 \u250a     0.27% \u250a core::char::methods::&lt;impl char&gt;::escape_debug_ext::h69b4f3f02f315351\n           360 \u250a     0.26% \u250a &lt;serde_json::error::Error as serde::de::Error&gt;::custom::h5b7caf335bb57d40\n           359 \u250a     0.26% \u250a &lt;serde_json::error::Error as serde::de::Error&gt;::custom::h53d2bbeb241fa3e5\n           359 \u250a     0.26% \u250a &lt;serde_json::error::Error as serde::de::Error&gt;::custom::hf0c8989de3f48de9\n           353 \u250a     0.26% \u250a wasm_bindgen_futures::queue::Queue::push_task::hc4d810c360a62361\n           351 \u250a     0.26% \u250a core::num::flt2dec::round_up::h0291c3249685452b\n           350 \u250a     0.26% \u250a &lt;&amp;mut W as core::fmt::Write&gt;::write_char::hec03daa0001d5446\n           350 \u250a     0.26% \u250a &lt;&amp;mut W as core::fmt::Write&gt;::write_char::h0080d1d7115cb30b\n           343 \u250a     0.25% \u250a &lt;char as core::fmt::Display&gt;::fmt::h78264f42e278569a\n           341 \u250a     0.25% \u250a core::fmt::num::imp::fmt_u64::h60f74fa030785f72\n           341 \u250a     0.25% \u250a core::fmt::builders::DebugInner::entry::h41176185f1be7ea5\n           335 \u250a     0.25% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal::ha87d24cea1eb6ae8\n           330 \u250a     0.24% \u250a &lt;std::panicking::begin_panic_handler::PanicPayload as core::panic::BoxMeUp&gt;::take_box::h291054427e0c20d9\n           327 \u250a     0.24% \u250a &lt;wasm_bindgen_futures::JsFuture as core::convert::From&lt;js_sys::Promise&gt;&gt;::from::finish::h2e6c69bac0475827\n           324 \u250a     0.24% \u250a &lt;&amp;T as core::fmt::Debug&gt;::fmt::h772be68db8125b10\n           319 \u250a     0.23% \u250a wasm_bindgen_futures::queue::Queue::new::{{closure}}::hd8d8be1112384dc3\n           311 \u250a     0.23% \u250a serde_json::de::Deserializer&lt;R&gt;::end_seq::h75b63839d312dd51\n           308 \u250a     0.23% \u250a core::fmt::num::&lt;impl core::fmt::Debug for usize&gt;::fmt::hebc0ac7247d67333\n           307 \u250a     0.23% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::h8711fab359b7bdbf\n           290 \u250a     0.21% \u250a wasm_bindgen_futures::queue::QUEUE::__init::hf6a11a0657c1fcb4\n           272 \u250a     0.20% \u250a wasm_bindgen_futures::task::singlethread::Task::run::h8aa8c131c006b836\n           270 \u250a     0.20% \u250a core::fmt::Write::write_char::ha284f206f0d2dae6\n           263 \u250a     0.19% \u250a &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop::h2b6b0b23e34a9191\n           263 \u250a     0.19% \u250a &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop::hec27225f48e05014\n           262 \u250a     0.19% \u250a core::ptr::drop_in_place::h67bb8deb2c89077d\n           255 \u250a     0.19% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit::h5eb2ebcca06ac197\n           248 \u250a     0.18% \u250a std::panicking::rust_panic_with_hook::h6e978a402e3e301e\n           242 \u250a     0.18% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::h42aecbba5c685334\n           242 \u250a     0.18% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::h3665d7b2ff1ded9e\n           242 \u250a     0.18% \u250a &lt;std::panicking::begin_panic_handler::PanicPayload as core::panic::BoxMeUp&gt;::get::h2f7e7c07b59f0156\n           240 \u250a     0.18% \u250a core::slice::&lt;impl [T]&gt;::copy_from_slice::h973875c8e0fef9af\n           238 \u250a     0.17% \u250a core::slice::&lt;impl [T]&gt;::copy_from_slice::h18bd616657e49fe8\n           232 \u250a     0.17% \u250a wasm_bindgen_futures::task::singlethread::Task::into_raw_waker::raw_wake::h16f63f043546f696\n           230 \u250a     0.17% \u250a alloc::raw_vec::RawVec&lt;T,A&gt;::double::ha2f328a3911c3288\n           225 \u250a     0.16% \u250a web_sys::features::gen_RequestInit::RequestInit::mode::h274ba80a5a605a32\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202914130,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1593942285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>(overall the wasm blob is ~13k uncompressed, i'd guess that serde is the biggest thing in it)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202914137,
            "is_me_message": false,
            "last_edit_timestamp": 1593942330,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1593942320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>you and the author of <a href=\"https://github.com/artichoke\">artichoke</a> both, <span class=\"user-mention\" data-user-id=\"8090\">@Kamal Marhubi (he) (m2'18)</span> (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202931113,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust-embed",
            "submessages": [],
            "timestamp": 1593971445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>also - if you like serde but are concerned about code size, maybe check out <a href=\"https://github.com/makepad/makepad/tree/dev/render/microserde\"><code>microserde</code></a>. it's not really a \"thing\" yet but you could probably use if you wanted to.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202938226,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1593983104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c6367e152fae3a77b79726730e83aa8021a77caa?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>This is really neat. I'm still so intimidated by Rust though lol</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202952121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "wgrisaitis@gmail.com",
            "sender_full_name": "William Grisaitis (he) (F1'19)",
            "sender_id": 234883,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1594008699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Just a reminder for those <span class=\"user-group-mention\" data-user-group-id=\"41\">@Currently at RC</span>, we have a weekly Birds-of-a-Feather Rust chat time on the calendar today at 12:30 Eastern</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202997580,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust BoF",
            "submessages": [],
            "timestamp": 1594046110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I keep running into walls trying to do compile time computation in Rust (calculating constants, asserting relationships, etc.). I recently came across this gem / horror:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// check at compile time that the specified priority is within the supported range</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">NVIC_PRIORITY_BITS</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uart0_prio</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)];</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>which is I guess the best way one can write <code>assert!(2.pow(NVIC_PRIORITY_BITS) &gt;= uart0_prio)</code> and have it run at compile time.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204336078,
            "is_me_message": false,
            "last_edit_timestamp": 1595141532,
            "reactions": [
                {
                    "emoji_code": "1f628",
                    "emoji_name": "fear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "colin.rofls@gmail.com",
                        "full_name": "Colin Rothfels (he) (SP1'19)",
                        "id": 203403
                    },
                    "user_id": 203403
                },
                {
                    "emoji_code": "1f628",
                    "emoji_name": "fear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jamie@scattered-thoughts.net",
                        "full_name": "Jamie Brandon (he) (W1'20)",
                        "id": 863
                    },
                    "user_id": 863
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compile time assertion horror",
            "submessages": [],
            "timestamp": 1595141285,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi Everyone,</p>\n<p>I want to write a webapp. I see two paths for myself. Either python or rust. I really want to use rust but I do not know which library to use. Does anyone have any recommendations for a server library. I am leaning towards using rocket <a href=\"https://rocket.rs/\">https://rocket.rs/</a> because of its similarity to flask (which I have used before), its maturity, and ease of use. Does anyone have any thoughts? Thanks</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204739215,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595464494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i've used rocket before (<a href=\"https://github.com/wesleyac/hanabi\">https://github.com/wesleyac/hanabi</a>) and i like it, but it's definitely not production ready. if you're just doing things for fun it's probably fine, but rocket has some severe bugs otherwise (specifically <a href=\"https://github.com/SergioBenitez/Rocket/issues/1302\">this</a> is pretty bad).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204751435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595466346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://gotham.rs/\">https://gotham.rs/</a> is another option, it looks nice but i haven't used it</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204751478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595466364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>i've used gotham, it's also pretty usable but similarly not what i would consider production-ready</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204756097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595472908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>rust is definitely usable as a language to write a webapp in, but if you aren't specifically looking to use rust, or improve the rust ecosystem, i think python is probably a better choice to just get things done in?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204756233,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595473108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Ok. Ill just use flask. Once the webapp ecosystem in rust matures ill try rocket or gotham. Thanks</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204803013,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595513914,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Actually I have decided that I wont be learning anything by using flask. I am going to use a rust framework. Maybe actix-web or gotham. Ill check it out.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204808558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595516309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>There is a new version of Rocket coming Real Soon Now that uses a new version of hyper. When I ran some casual benchmarks on 0.4.4 vs. 0.5 and it was more than an order of magnitude faster.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204810998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595517382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah. I also saw that 0.5 will run on stable. I think ill use rocket. It seems really nice.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204829257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "choosing a server for my webapp",
            "submessages": [],
            "timestamp": 1595526280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4aed3eb291895487e95cc2850cb92391?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>This can go horrible wrong! A recent Compiler bug resulted in really long compilation times if you passed a zero (:</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205302294,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "asf@boinkor.net",
            "sender_full_name": "Andreas Fuchs (he/they)",
            "sender_id": 9362,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compile time assertion horror",
            "submessages": [],
            "timestamp": 1595978401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi there (oops too quick with the enter button)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206509851,
            "is_me_message": false,
            "last_edit_timestamp": 1597091652,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Anyone with experience knowledge of smoltcp / libpnet?",
            "submessages": [],
            "timestamp": 1597091629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm currently working on a rather odd TLS SNI aware reverse proxy that keeps source address information by switching from IPv4 to IPv6. For that I need to do rather low level networking stuff because the source addresses will all be virtually handled by a interfacing with a TUN device.</p>\n<p>So I'm looking at different TCP/IP stacks. smoltcp looks nice, but libpnet may be more mature, given that it's apparently a lot more popular. Has anyone worked with either (for whatever reason) and has some insight?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206510224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Anyone with experience knowledge of smoltcp / libpnet?",
            "submessages": [],
            "timestamp": 1597091853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>Hi there! It's my 2nd day of RC and I had been planning to spend a bit of time on the front end. I came across this post and wondering if there's something special about Rust compiling to wasm, vs other languages.</p>\n<p><a href=\"http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/\">http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</a></p>\n<p>Hope question is sufficiently well-formed. I don't know much about Rust besides being most loved on Stack Overflow, but might dip my toes a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206641676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597187012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>I'd say as a matter of degree, yes, Rust has the best from-scratch support for compiling to WebAssembly; as a qualitative thing, Rust (and C and C++ and Zig) are compiled languages that map better onto the WebAssembly paradigm than Python.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206642032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597187239,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4d94d953db52e1e7cfc3724b95a6dc906fa9d58?x=x&version=2",
            "client": "website",
            "content": "<p>If you're just getting started with WebAssembly but want to do it on the frontend, here's a starter series I wrote about writing WebAssembly from scratch; it's JavaScript so it's frontend, and it's writing the bytes of WebAssembly from scratch so you get very familiar with the structure of WebAssembly: <a href=\"https://observablehq.com/@ballingt/advent-of-wasm-day-1?collection=@ballingt/advent-of-wasm\">https://observablehq.com/@ballingt/advent-of-wasm-day-1?collection=@ballingt/advent-of-wasm</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206642191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@ballingt.com",
            "sender_full_name": "Tom Ballinger (he) (W'12)",
            "sender_id": 807,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597187350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>hi Tom! I've been curious about Compilers at Bradfield but haven't gotten around to taking it :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206642229,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44b",
                    "emoji_name": "wave",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@ballingt.com",
                        "full_name": "Tom Ballinger (he) (W'12)",
                        "id": 807
                    },
                    "user_id": 807
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597187386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>awesome taking a look - thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206642304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597187417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>there's also this talk, that I haven't watched yet but it's on my list, where Dave Beazley livecodes a wasm interpreter that can run a game written in Rust: <a href=\"https://www.youtube.com/watch?v=VUT386_GKI8&amp;feature=youtu.be\">https://www.youtube.com/watch?v=VUT386_GKI8&amp;feature=youtu.be</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"VUT386_GKI8\" href=\"https://www.youtube.com/watch?v=VUT386_GKI8&amp;feature=youtu.be\"><img src=\"https://i.ytimg.com/vi/VUT386_GKI8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206648170,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f3f3",
                    "emoji_name": "white_flag",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tmg@fastmail.com",
                        "full_name": "Thomas Gardner (W2'19)",
                        "id": 198212
                    },
                    "user_id": 198212
                },
                {
                    "emoji_code": "1f453",
                    "emoji_name": "glasses",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597192394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>^This is a really good talk! I was there at PyCon India when it happened and it was magical when everything he was talking about came together at the end <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206673475,
            "is_me_message": false,
            "last_edit_timestamp": 1597223339,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597223273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/xT0xeJpnrWC4XWblEk/giphy.gif\"><img src=\"https://media.giphy.com/media/xT0xeJpnrWC4XWblEk/giphy.gif\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206701103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597242461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>wow</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206701112,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597242467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>that is magical</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206701141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597242480,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hello everyone!</p>\n<p>I am reading the rust async book currently, and within chapter 2 (2.3), there is a type signature of an argument that I don't quite fully understand. The code snippet I am referring to is this: </p>\n<div class=\"codehilite\"><pre><span></span><code>...\nfn spawn(&amp;self, future: impl Future&lt;Output = ()&gt; + &#39;static + Send) {\n        let future = future.boxed();\n...\n</code></pre></div>\n\n\n<p>The <code>future</code> argument is where I am confused. From what I understand, it is a type that implements the <code>Future</code> trait and has a static lifetime, but I am unsure what <code>Send</code>  means, and I may be wrong about my current understanding of the rest of it as well. Does anyone have any ideas of what this may be?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206704312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Understanding a type signature",
            "submessages": [],
            "timestamp": 1597243940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>I think <code>Send</code> is just another trait that must be implemented on the argument</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206704476,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Understanding a type signature",
            "submessages": [],
            "timestamp": 1597244022,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Ahhhh okay, that makes sense. I think I was confused by that because in the syntax highlighting it seems to be a keyword. The text I am referring to is here: <a href=\"https://rust-lang.github.io/async-book/02_execution/04_executor.html\">https://rust-lang.github.io/async-book/02_execution/04_executor.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206704702,
            "is_me_message": false,
            "last_edit_timestamp": 1597244138,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Understanding a type signature",
            "submessages": [],
            "timestamp": 1597244126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>Heh, yeah, looks like they're styling <code>impl</code>, lifetimes, and traits with different colors</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206704879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Understanding a type signature",
            "submessages": [],
            "timestamp": 1597244221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah, Send &amp; Sync must both be special traits that get the same highlighting as some keywords. Thanks for the help!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206705216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Understanding a type signature",
            "submessages": [],
            "timestamp": 1597244402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>in case anyone experimenting with wasm, the minimal example i've tried that works is this <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207186258,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597692191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also <em>really</em> enjoying rust+wasm. I'm new to Rust and writing mostly TypeScript at work, so when I want to implement something new, I can just write it in TypeScript and port it over to rust+wasm later on</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207187140,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "16425",
                    "emoji_name": "nice",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                },
                {
                    "emoji_code": "16425",
                    "emoji_name": "nice",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22680,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1597692679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I'm starting Rust from scratch, I generally hear about the Rust book but also came across O'Reilly's Programming Rust (Blandy + Orendorff). anyone have thoughts on either?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207670548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598035970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>adding <span class=\"user-mention\" data-user-id=\"327980\">@Andrey Petrov (he) (F1'20)</span> to this discussion as fellow learner</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207670569,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598035986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I did the Rust book a few years ago, it was pretty good, they do a great job keeping it updated. Don't know anything about the O'Reilly one though.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207670739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598036095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I came across O'Reilly through this course <a href=\"https://www.cis.upenn.edu/~cis198/\">https://www.cis.upenn.edu/~cis198/</a>. The syllabus mentioned Nix and wasm which caught my eye</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207670891,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598036177,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>also a bunch of resources here <a href=\"https://github.com/upenn-cis198\">https://github.com/upenn-cis198</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207671003,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598036255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327456\">@Ezzeri Esa (he) (F1'20)</span> I'm also planning to start learning Rust from scratch, would love to chat! Maybe we can also form a study group and pair on a project! Also, <span class=\"user-mention\" data-user-id=\"327422\">@Flip Stewart (they) (m6'20)</span> had some beginner resources here <a href=\"https://flipactual.gitlab.io/learning-rust/\">https://flipactual.gitlab.io/learning-rust/</a> but it now gives a 404.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207672824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598037171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>I changed the repository settings a few moments ago <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I'll go fiddle with it</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207673021,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22680,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598037257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207673115,
            "is_me_message": false,
            "last_edit_timestamp": 1598037321,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598037316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>awesome! i like how CIS198 has problem sets, so can work off those</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207673845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598037737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207674279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598037973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>I <em>think</em> my notes are back up at <a href=\"https://flipactual.gitlab.io/learning-rust/\">https://flipactual.gitlab.io/learning-rust/</a><br>\nThey're from reading The Rust Programming Language</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207675073,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                }
            ],
            "recipient_id": 22680,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598038398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks! I can see them now <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207675473,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598038586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>something for the weekend <a href=\"https://github.com/poteto/rustconf-2020\">https://github.com/poteto/rustconf-2020</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207695805,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598052695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>hello everyone! Vinayak and I created this event every Friday 1 - 2 pm ET in case you're interested in learning as a group <a href=\"https://www.recurse.com/calendar/12121\">https://www.recurse.com/calendar/12121</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598297548,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>the plan is to have it open-ended, i.e. either discuss concepts, work on exercises or review repos. list of what we're looking into are in a Google Doc <a href=\"https://docs.google.com/document/d/1XCvAddUohCFpwSvTzPWeoS60Oqv0mQiirbxDXkwIWVY\">https://docs.google.com/document/d/1XCvAddUohCFpwSvTzPWeoS60Oqv0mQiirbxDXkwIWVY</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598297660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>we'll iterate as we go along, feel free to ping with ideas!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886579,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                },
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sara@farquharson.dev",
                        "full_name": "Sara Farquharson (she) (m6'20)",
                        "id": 327751
                    },
                    "user_id": 327751
                },
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                },
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598297681,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327980\">@Andrey Petrov (he) (F1'20)</span> ^</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598297799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>also feel free to edit the doc</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207886899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598297882,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bfae6cfb52a5d20b01ee9d6a8c4d4490004b98ee?x=x&version=4",
            "client": "website",
            "content": "<p>I am also interested in learning more Rust, and I have a bunch of repos bookmarked to practice code reading. I likely won't be able to make this Friday, but I might try to join in the future if that's ok!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207923293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "sara@farquharson.dev",
            "sender_full_name": "Sara Farquharson (she) (m6'20)",
            "sender_id": 327751,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598328723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327751\">@Sara Farquharson (she) (m6'20)</span> No worries, look forward to catching you next time!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207926679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1598334207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>In which cases would you want to use <code>if let</code> over just another boolean check?</p>\n<div class=\"codehilite\"><pre><span></span><code>    let some_u8_value = Some(3u8);\n\n    if let Some(3) = some_u8_value {\n        println!(&quot;three&quot;);\n    }\n\n    if Some(3) == some_u8_value {\n        println!(&quot;three&quot;);\n    }\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208135207,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598469279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bfae6cfb52a5d20b01ee9d6a8c4d4490004b98ee?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>_Rust By Example_ has a good use case: if the PartialEq trait isn\u2019t implemented for your type, you can\u2019t compare values using ==, but you can use <code>if let</code> <br>\n<a href=\"https://doc.rust-lang.org/stable/rust-by-example/flow_control/if_let.html\">https://doc.rust-lang.org/stable/rust-by-example/flow_control/if_let.html</a></p>\n<p>Otherwise...I don\u2019t know! I mostly don\u2019t use <code>if let</code> because I don\u2019t understand it yet.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208135880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "sara@farquharson.dev",
            "sender_full_name": "Sara Farquharson (she) (m6'20)",
            "sender_id": 327751,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598469621,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>you can bind to a variable in <code>if let</code>, which is quite useful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">do_thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208136981,
            "is_me_message": false,
            "last_edit_timestamp": 1598470337,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p><code>if let</code> is syntax sugar for <code>match</code>, so you can do many of the things you can in <code>match</code> in <code>if let</code>, but sometimes the <code>if let</code> version looks a bit nicer</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208137069,
            "is_me_message": false,
            "last_edit_timestamp": 1598470547,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>in the above example, doing it with an if would look like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">do_thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>which is more verbose and more prone to error if you change the code later on (say, if the code inside the if statement gets more complicated, and is then later copy-pasted to a different part of the codebase, but the check isn't). it's also much more verbose if you need to use <code>bar.unwrap()</code> in multiple places in the code inside the if statement.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208137582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>and when i say it's syntax sugar for <code>match</code>, i mean that it can be expanded to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">do_thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>which is just a lot more stuff, especially if you have a bunch of nested match statements</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208137809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>got it. this is helpful, thank you! :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208137848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>this can also be confusing, since you might think that since <code>if let</code> is like <code>if</code> you should be able to do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">qux</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">do_thing</span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>but you actually can't :(</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208137986,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>that may be fixed at some point, here's the issue tracking it: <a href=\"https://github.com/rust-lang/rust/issues/53667\">https://github.com/rust-lang/rust/issues/53667</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208138157,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598470791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327751\">@Sara Farquharson (she) (m6'20)</span> Now I'm curious about PartialEq...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208139382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598471341,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bfae6cfb52a5d20b01ee9d6a8c4d4490004b98ee?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327456\">@Ezzeri Esa (he) (F1'20)</span> I don\u2019t know a ton about comparison traits, or why I had to derive PartialEq but not any others for my code to compile, but clearly it had to do with trying to compare two structs using <code>if</code>!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208140097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "sara@farquharson.dev",
            "sender_full_name": "Sara Farquharson (she) (m6'20)",
            "sender_id": 327751,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598471711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><code>PartialEq</code> is the trait that controls the <code>==</code> operator, so if you ever tried to use that operator on a type you wrote, that may be why you would need that.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208143547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598473351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4b802c55ae5fe3bdac9dc52be2a04b7f?d=identicon&version=1",
            "client": "website",
            "content": "<p>damn---that dabeaz wasm interpreter makes me think wasm seems like an actually cool future</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208303183,
            "is_me_message": false,
            "last_edit_timestamp": 1598587552,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "tmg@fastmail.com",
            "sender_full_name": "Thomas Gardner (W2'19)",
            "sender_id": 198212,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "wasm is magical",
            "submessages": [],
            "timestamp": 1598587532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>So I am a total rust newbie, and I noticed that Swift also has a 'if let' which I seemed to be able to understand last year. I wonder if this phrase means the same in Rust as in Swift.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208702837,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598973610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "website",
            "content": "<p>Don't have experience with Swift, I assume it's the same, but to be sure, in Rust it allows you to assign a variable based on an enum, like \u2026</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">basically_unwrapped_but_only_if_its_some</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:#?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">basically_unwrapped_but_only_if_its_some</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208727071,
            "is_me_message": false,
            "last_edit_timestamp": 1598984512,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598984499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "website",
            "content": "<p>But yeah can be applied in multiple ways, including when you have nested enums</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Enum</span>::<span class=\"n\">Variant</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">stuff</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stuff</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// etc.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208727469,
            "is_me_message": false,
            "last_edit_timestamp": 1598984673,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598984661,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oooh didn't realise this was a thread. Sorry for the noise</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208727621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1598984750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I find myself waiting for compiles to complete. Should I be worried about compiling other Rust code in a different Terminal tab?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208866293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compiling in different tabs",
            "submessages": [],
            "timestamp": 1599071029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p>As long as you're not compiling the same project at the same time, I believe there is no limit to the number of concurrent compilations.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208970774,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 22680,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compiling in different tabs",
            "submessages": [],
            "timestamp": 1599141509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>on the other hand, the rust compiler tries to use all available cores, and compilation is cpu-bound, so you're probably still spending the same amount of time compiling</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208998843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compiling in different tabs",
            "submessages": [],
            "timestamp": 1599152524,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If you find yourself curious about making compiling times fast too, check out: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a>. The cranelift back end has a pretty significant improvement on compile speeds.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209004538,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "compiling in different tabs",
            "submessages": [],
            "timestamp": 1599155025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I was running benchmarks on wasm to discover my rust code (to find the nth prime) runs slower than the js version. </p>\n<p><a href=\"https://repl.it/@savarin/WittyOptimisticMetadata#index.js\">js</a> 18s<br>\n<a href=\"https://repl.it/@savarin/MemorableDishonestPerformance#main.rs\">rust</a> 130s</p>\n<p>it turns out there's already a Stack Overflow <a href=\"https://stackoverflow.com/questions/54828815/why-is-nodejs-faster-than-rust-in-computing-the-sum-of-the-primes\">question</a> on it. however running the <a href=\"https://repl.it/@savarin/ArtisticUnderstatedCollaborativesoftware#index.js\">js</a> example against <a href=\"https://repl.it/@savarin/UsedCarpalCores#main.rs\">rust</a>, i still have js outperform</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209232766,
            "is_me_message": false,
            "last_edit_timestamp": 1599413386,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599411290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>now looking for examples where rust clearly outperforms js, let me know if you have any ideas/thoughts</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209232851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599411465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>understanding microbenchmarks is always fascinating!! I did some more searching, couple more posts on the topic:</p>\n<ul>\n<li><a href=\"https://users.rust-lang.org/t/why-is-this-prime-number-benchmark-30-slower-than-c/5887/13\">https://users.rust-lang.org/t/why-is-this-prime-number-benchmark-30-slower-than-c/5887/13</a></li>\n<li><a href=\"https://medium.com/@alistairisrael/how-fast-is-rust-655f6dd90ff8\">https://medium.com/@alistairisrael/how-fast-is-rust-655f6dd90ff8</a></li>\n<li><a href=\"https://www.reddit.com/r/rust/comments/a0g730/new_to_rust_discouraged_by_slowrunning_code/\">https://www.reddit.com/r/rust/comments/a0g730/new_to_rust_discouraged_by_slowrunning_code/</a></li>\n</ul>\n<p>I don't have a clear answer for this example yet but curious to hear what you learn. :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209306000,
            "is_me_message": false,
            "last_edit_timestamp": 1599491647,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599491571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>it might be interesting to profile the rust and javascript to see what\u2019s so slow on the rust side</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209306601,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599491988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>if i had to guess it\u2019s because you\u2019re resizing the vector and javascript is somehow able to figure out that you only ever need a size n vector and just allocates that instead</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209306679,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599492030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i bet you\u2019d get a much faster version in rust if you preallocated the array to store the results, since you know ahead of time how big it should be</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209306744,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599492080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also maybe see if there's a way to get the JS JIT'd instructions that end up executing? I wonder if it's doing some clever things about converting function calls into constants: <a href=\"https://stackoverflow.com/questions/48007072/are-there-ways-to-see-the-assembly-code-for-the-code-generated-by-any-of-the-jav\">https://stackoverflow.com/questions/48007072/are-there-ways-to-see-the-assembly-code-for-the-code-generated-by-any-of-the-jav</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209306903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599492200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>annoyingly <a href=\"http://repl.it\">repl.it</a> is being a bit weird and i deleted my JS code by accident, so started a fresh here <a href=\"https://github.com/savarin/benchmark/tree/master/primes\">https://github.com/savarin/benchmark/tree/master/primes</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209321394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599505356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>you get a minor speedup with fixed arrays but still behind by quite a bit</p>\n<div class=\"codehilite\"><pre><span></span><code># dynamic array\nbenchmark $ node primes/primes_v1.js\n104743\n0.07746533679999411\n\nbenchmark $ rustc  -C opt-level=3 primes/primes_v1.rs; ./primes_v1\n104743\n261.15254ms\n\n# fixed array\nbenchmark $ node primes/primes_v2.js\n104743\n0.07515992700010538\n\nbenchmark $ rustc  -C opt-level=3 primes/primes_v2.rs; ./primes_v2\n104743\n259.69901ms\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209321537,
            "is_me_message": false,
            "last_edit_timestamp": 1599507560,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599505537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327980\">@Andrey Petrov (he) (F1'20)</span> thanks for the links! taking a break for lunch and will take a closer look</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209321593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599505576,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>it looks like in your benchmark you have the node.js version running <code>nth</code> three times, but the rust version running 10 times? if i make the loops inside the <code>primes</code> function run the same number of times, the runtimes become ~equal</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209322872,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599506945,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"6426\">@Jesse Luehrs (he) (F1'14)</span> yup i just noticed that and re-ran, still getting same magnitude of difference i.e. JS 3x faster vs Rust</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209323286,
            "is_me_message": false,
            "last_edit_timestamp": 1599507359,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599507345,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>can i check what you're seeing?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209323292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599507350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>i updated the times ^</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209323469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599507494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>the explanation i find most convincing so far is in the Reddit post</p>\n<div class=\"codehilite\"><pre><span></span><code>Now that this is out of the way, my intuition is that you\u2019ve written what is literally a textbook example\nof an easily JITable function. It operates exclusively on its arguments (so there\u2019s no global state to worry\nabout), the function is absolutely tiny, and the only operations that it does are purely numerical.\nChrome\u2019s V8 JavaScript engine is able to take this function and optimize it into machine code that is as\nefficient as what Rust would generate, because it doesn\u2019t have to keep checking the types of things, and\nit doesn\u2019t have to worry about anything going wrong inside the optimal machine code that it generates.\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209323977,
            "is_me_message": false,
            "last_edit_timestamp": 1599508172,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599508145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>please disregard, sorry i keep mixing things up</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209327030,
            "is_me_message": false,
            "last_edit_timestamp": 1599516123,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599511933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209327120,
            "is_me_message": false,
            "last_edit_timestamp": 1599516127,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599512064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209327126,
            "is_me_message": false,
            "last_edit_timestamp": 1599516133,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599512077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209327143,
            "is_me_message": false,
            "last_edit_timestamp": 1599516137,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599512100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209327335,
            "is_me_message": false,
            "last_edit_timestamp": 1599516144,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599512329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yea sounds plausible! Thanks for sharing! :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209389547,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599573531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>yup my conclusion is in prime number generation, there's one main loop, it gets into the hot path, gets JIT-ed, runs super fast</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209400372,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599577855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>massive new found respect for v8</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209400384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599577861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>so i'm cheating a bit and looking into where JS microbenchmarks is less performant, and using that as an example ;)</p>\n<p><a href=\"https://julialang.org/benchmarks/\">https://julialang.org/benchmarks/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209400470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599577904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>i had some trouble with <code>mersenne_twister</code> import in Rust last night (trying to get matrix multiply to work), will try again today</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209400583,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599577939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>OK progress, i need to add <code>edition = \"2018\"</code> - it's the second time that's tripped me up</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209416358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599585107,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>annoyingly getting new error, x-posted on small questions since it looks like an LLVM error</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209416452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599585134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>  = note: ld: library not found for -lgfortran\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre></div>\n\n\n<p>full trace here <a href=\"https://gist.github.com/savarin/6eb8a7ceba34d596914ccf486d90647e\">https://gist.github.com/savarin/6eb8a7ceba34d596914ccf486d90647e</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209416474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1599585143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Thanks for the example. I did some reading of Rust documentation and it seems that the meaning is indeed similar to the meaning in Swift. Swift additionally does a check for nil values, which I guess Rust doesn\u2019t need to.</p>\n<p>I still feel Rust is quite difficult to write, even though the result is far safer code. I wonder if it will become a widely used language. Historically languages which became wildly popular were all simple and easy to write, e.g., C, JavaScript. I still have next to zero programming ability in Rust, so maybe I\u2019m just guessing in the dark.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209462981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1599614419,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I think Rust has a great WebAssembly story, so might be even more popular when it's more mainstream</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209465475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1599617772,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Ah, perhaps that's it - I have never tried WebAssembly myself, I should try it. But first I'll try to focus a bit more on Rust and see if I can use it for something</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209537193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1599670194,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>OK so it turns out my benchmarks were off because I didn't realize Node leaks variables, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>function nth(n) {\n    for (i=0; i &lt; 10; i++) {\n        n += 1\n    }\n\n    return n\n}\n\nconsole.log(nth(10))  # prints 20\nconsole.log(i)  # prints 10, expected an error\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210037105,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600104509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>in any case i'm now fascinated by JIT, so not a terrible outcome</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210037164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600104546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>how are the revised results? :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210147304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600184594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>lesson: add <code>\"use strict\"</code> at the top of the file</p>\n<p>average of 3:</p>\n<div class=\"codehilite\"><pre><span></span><code>0.395  # Node\n0.336s  # Rust\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210163887,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "15913",
                    "emoji_name": "100-party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192087,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>TIL Deno is written in Rust</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210163908,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>still pretty impressive JIT results</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210163977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>yup i'm surprised you don't see V8 coming up on university courses</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210164062,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>or maybe i haven't been looking in the right places</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210164085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>c.f. the latest image/text neural network models</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210164164,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>love it<br>\n<a href=\"https://blog.bitsrc.io/how-does-javascript-really-work-part-1-7681dd54a36d\">https://blog.bitsrc.io/how-does-javascript-really-work-part-1-7681dd54a36d</a></p>\n<div class=\"codehilite\"><pre><span></span><code>Google created Google Maps for the browser which required a lot of processing power. The JavaScript\nimplementation at that time was not good enough to run maps fast. Google wants to bring more users\nto their services so that they can sell more advertisements and make money. For this, the service\nneeds to be fast and robust. So Google built its own engine called the V8 in C++ which was launched\nin 2008 and quite fast or as some say the fastest.\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210164318,
            "is_me_message": false,
            "last_edit_timestamp": 1600192316,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600192277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e718d061ebfdfb7062a4b25608cec649?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>There is a steep learning curve for sure, but at some point that pays off and then it becomes quite fun. There's gotta be a reason why Rust has been one of the most loved programming languages for a while now</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210217874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "m@niij.org",
            "sender_full_name": "Michael Zeltner (he/they) (F2'18)",
            "sender_id": 129935,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600225815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ddd1dac23c28efe065d6b7cd0fdf91077132fa7?x=x&version=3",
            "client": "website",
            "content": "<p>I think part of the reason it's popular is also that the community is great. Like, in addition to the fact that it's a useful and/or fun language once you get over the steep part of the learning curve, there's an awful lot of people who want to help get you there <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210240993,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "fabi@hey.com",
            "sender_full_name": "Fabian Tamp (he) (W2'20)",
            "sender_id": 255053,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600250161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i saw this thread about new rust developers and \"fighting the borrow checker\" that talks about the experience of what happens when you get enough experience in rust to get comfortable with it <a href=\"https://twitter.com/fu5ha/status/1305952770436988928\">https://twitter.com/fu5ha/status/1305952770436988928</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/fu5ha/status/1305952770436988928\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1287093289519157249/FbllewYT_normal.jpg\"></a><p>Musings about developing in Rust:\n\nWhen people start in Rust, they often get into 'fights' with the borrow checker. This can be a source of much frustration, especially for experienced devs who try to use patterns they know from other languages which give them lots of headaches.</p><span>- gray | \ud83d\udd8c\ufe0f\ud83c\udfa8\u2728\ud83d\udc69\u200d\ud83d\udcbb (@fu5ha)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210289387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600274963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i really liked how she says that it's kinda nudging you toward a better design by flagging ownership issues in patterns you may want to bring in from other languages</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210289557,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "m@niij.org",
                        "full_name": "Michael Zeltner (he/they) (F2'18)",
                        "id": 129935
                    },
                    "user_id": 129935
                }
            ],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600275050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"240569\">Victoria Mitchell (she) (F2'19)</span> <a href=\"#narrow/stream/20305-rust/topic/if.20.20let/near/210289387\">said</a>:</p>\n<blockquote>\n<p>i saw this thread about new rust developers and \"fighting the borrow checker\" that talks about the experience of what happens when you get enough experience in rust to get comfortable with it <a href=\"https://twitter.com/fu5ha/status/1305952770436988928\">https://twitter.com/fu5ha/status/1305952770436988928</a></p>\n</blockquote>\n<p>this is cool. I just started going through The Rust Book last week and it's been really interesting so far.  Had started looking at Go about the same time but, the quality of the documentation for Rust makes it so much more inviting.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210292182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600276377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>That's the strongest argument for trying Rust I've seen yet. Thank you, Victoria. :)<br>\n(I've been bored of learning new languages for their own sake for about 15 years, but I have a soft spot for languages that encourage better patterns of thinking about certain problems.)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210367453,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600335356,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've often said that I feel that working in Rust made me a better C programmer.  I can't remember the details since it's been a while, but right after writing a bunch of Rust, I went back to a C project and realized it had a subtle lifetime issue.  I don't write much Rust anymore but it definitely goes on my list of \"languages that shape how you think\".</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210388293,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "raph.levien@gmail.com",
                        "full_name": "Raph Levien (F1'17)",
                        "id": 101701
                    },
                    "user_id": 101701
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "grey@quietmisdreavus.net",
                        "full_name": "Victoria Mitchell (she) (F2'19)",
                        "id": 240569
                    },
                    "user_id": 240569
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                }
            ],
            "recipient_id": 22680,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600348957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Where would you recommend an experienced programmer wanting to try Rust look first, these days?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210388686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600349129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i\u2019d vote for cracking open the rust book, there\u2019s enough new concepts in rust that it\u2019s worth very carefully going through it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210394612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600351624,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the rustlings exercises are quite nice but very beginner focused</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210394689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600351654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://github.com/rust-lang/rustlings\">https://github.com/rust-lang/rustlings</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210394698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600351657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you mean <a href=\"https://doc.rust-lang.org/book/\">https://doc.rust-lang.org/book/</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210398456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600353254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>yup, klabnik and nichols :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210399845,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600353839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i\u2019d also suggest just solving some leetcode or advent of code style problems in rust after you\u2019ve gotten as far as, say, the chapter on borrowing</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210400066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600353935,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>there's also Rust By Example if you're more into seeing live-editable samples of concepts than reading about them: <a href=\"https://doc.rust-lang.org/stable/rust-by-example/\">https://doc.rust-lang.org/stable/rust-by-example/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210400481,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600354114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>and yeah, once you get a handle on the syntax and basic semantics, it's really nice to have something to work through. i got pretty far by making IRC bots (and eventually, a Twitter library) but even something like leetcode or advent of code can be nice. you can load up smaller examples into places like <a href=\"https://play.rust-lang.org/\">https://play.rust-lang.org/</a> or <a href=\"http://repl.it\">repl.it</a> if you don't want to set up a project on your own system.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210400734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600354218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>I have read more from Rust books, and heard more talks and podcasts about Rust since I last posted on this thread. And now I feel I like the design decisions behind Rust quite a lot. It doesn't seem difficult now if consider what Rust is trying to achieve. For example if someone wants to write truly memory safe code in C++for a big application it will look much more clunky and verbose than Rust. I also like the way Rust has taken functional programming concepts - probably mostly from Haskell. I first started appreciating the functional roots of Rust after hearing <a href=\"https://newrustacean.com/show_notes/e026/index.html\">this podcast</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210400866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600354284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>How do you feel about linked lists?  This is pretty funny read and a bit tongue in cheek. Supposedly it's a good way to get a grasp on some of the more complex features.  I haven't worked through it yet but, plan to peruse it after finishing the book.<br>\n<a href=\"https://rust-unofficial.github.io/too-many-lists/\">https://rust-unofficial.github.io/too-many-lists/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210401057,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600354352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>working in Rust made me a better C programmer</p>\n</blockquote>\n<p>seconded (though i don't work much in C so it's more like a better \"c#/bash/etc programmer\"). seeing stuff like \"you have to deal with null values\" or \"you have to deal with error values as they occur\" or \"you have to deal with all the versions of this enum/conditional\" also subtly nudges you when working with other systems.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210401256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600354441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"125284\">Debamitro Chakraborti (he) (m6'20)</span> <a href=\"#narrow/stream/20305-rust/topic/if.20.20let/near/210400866\">said</a>:</p>\n<blockquote>\n<p>I also like the way Rust has taken functional programming concepts - probably mostly from Haskell.</p>\n</blockquote>\n<p>Fun Fact: the initial implementation of the Rust compiler was <a href=\"https://github.com/graydon/rust-prehistory\">written in OCaml</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210401767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600354649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the rust community is pretty nice so don\u2019t be afraid to ask specific questions in this stream, on the rust discord, or on discourse</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210403174,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lukeadba@gmail.com",
                        "full_name": "Luke Barone-Adesi (he) (F'13)",
                        "id": 2903
                    },
                    "user_id": 2903
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600355219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>I would recommend the Rust book and Rustlings. I'm not very good at reading code at long stretches so I worked on Rustlings first and read the whole chapter on the topic when I get stuck.</p>\n<p>I started with O'Reilly's Programming Rust alongside UPenn's CIS 198 but realized Rust book has a style that's less terse <a href=\"https://github.com/upenn-cis198\">https://github.com/upenn-cis198</a></p>\n<p>Exercism is another good source of exercises, and if you're into videos I quite like UIUC's CIS 196 <a href=\"https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos\">https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210405909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600356265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"342266\">Brady Fontenot</span> <a href=\"#narrow/stream/20305-rust/topic/getting.20started.3F/near/210401057\">said</a>:</p>\n<blockquote>\n<p>How do you feel about linked lists?  This is pretty funny read and a bit tongue in cheek. Supposedly it's a good way to get a grasp on some of the more complex features.  I haven't worked through it yet but, plan to peruse it after finishing the book.<br>\n<a href=\"https://rust-unofficial.github.io/too-many-lists/\">https://rust-unofficial.github.io/too-many-lists/</a></p>\n</blockquote>\n<p>on the other hand, the author freely admits that this is a deliberate foray into the parts of the software space that Rust doesn't want to go and is bad for beginners :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210420629,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600362924,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327456\">Ezzeri Esa (he) (F1'20)</span> <a href=\"#narrow/stream/20305-rust/topic/getting.20started.3F/near/210405909\">said</a>:</p>\n<blockquote>\n<p>I would recommend the Rust book and Rustlings. I'm not very good at reading code at long stretches so I worked on Rustlings first and read the whole chapter on the topic when I get stuck.</p>\n<p>I started with O'Reilly's Programming Rust alongside UPenn's CIS 198 but realized Rust book has a style that's less terse <a href=\"https://github.com/upenn-cis198\">https://github.com/upenn-cis198</a></p>\n<p>Exercism is another good source of exercises, and if you're into videos I quite like UIUC's CIS 196 <a href=\"https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos\">https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos</a></p>\n</blockquote>\n<p>man, my software engineering class at uiuc was \"comment your code and use cvs\"</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210420807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600362998,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>or maybe rcs</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210420843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "getting started?",
            "submessages": [],
            "timestamp": 1600363015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3c0275c73d9c05a4a2e092649b4deb2a5a79be07?x=x&version=2",
            "client": "website",
            "content": "<p>Having worked for a very javascript expert-heavy org in the past, the idea that wasm would be unlikely to generically outperform js was drilled into me repeatedly (eg <a href=\"https://twitter.com/seldo/status/1065043625627643904\">https://twitter.com/seldo/status/1065043625627643904</a>) </p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/seldo/status/1065043625627643904\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1278482676870078464/83MVy7M8_normal.jpg\"></a><p>People think WASM is going to be about performance but it's going to be about dramatically expanding the number of libraries available to web developers, and the number of languages web development can be effectively executed in. <a href=\"https://t.co/BMfTIDgPip\">https://twitter.com/mathias/status/1065023448290811904</a></p><span>- Laurie Voss (@seldo)</span></div></div><p>And similarly that V8 is an incredibly well optimized engine :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210424121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bittmanmax@gmail.com",
            "sender_full_name": "Max Bittman (he) (S2'18)",
            "sender_id": 120392,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600364463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>yup i keep going on about how i started by getting into wasm but leaving impressed with V8 :D</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210428104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600366097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>my fav pitch for wasm is that it can be the new CFFI bridge between languages</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210428840,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600366512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>any two languages that can speak wasm can speak to each other</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210428865,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600366528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>and also great for plugins :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210428987,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2728",
                    "emoji_name": "sparkles",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600366571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I consider work on V8 to have effectively started with StrongTalk (circa early 90s), so from my point of view it's been worked on for nearly 3 decades.  It's no wonder it produces fast code.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210437558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600370183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>yup I came across a post that mentioned how the collective experience of the team is in centuries :D</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210438084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1600370469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm trying to build a super simple build_tool and I recently discovered <code>and_then</code> and <code>or_else</code> to combine <code>Result</code>s together. My code looks like this now:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait Runner {\n    fn run(&amp;self) -&gt; io::Result&lt;std::process::Output&gt;;\n}\n\npub struct Orchestrator&lt;&#39;a&gt; {\n    build: &amp;&#39;a dyn Runner,\n    test: &amp;&#39;a dyn Runner,\n    commit: &amp;&#39;a dyn Runner,\n    revert: &amp;&#39;a dyn Runner,\n}\n\nimpl Orchestrator&lt;&#39;_&gt; {\n    pub fn handle_event(&amp;self) {\n        let res = self.build.run().or_else(self.run_revert);\n    }\n\n    fn run_revert(&amp;self) {\n        let revert_res = self.revert.run();\n        match revert_res {\n            Ok(_) =&gt; (),\n            Err(e) =&gt; println!(&quot;Error reverting: {:?}&quot;, e),\n        }\n    }\n}\n</code></pre></div>\n\n\n<p>But when I compile this I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0615]: attempted to take value of method `run_revert` on type `&amp;orchestrator::Orchestrator&lt;&#39;_&gt;`\n  --&gt; src/orchestrator.rs:19:49\n   |\n19 |         let res = self.build.run().or_else(self.run_revert);\n   |                                                 ^^^^^^^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n19 |         let res = self.build.run().or_else(self.run_revert());\n   |                                                           ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0615`.\n</code></pre></div>\n\n\n<p>I would have expected you to be able to pass a methodto <code>or_else</code> in this way. Am I doing something wrong? Is there a difference between a method and a function in rust?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210440558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600371688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>try <code>let res = self.build.run().or_else(|_| { self.run_revert() });</code>?</p>\n<p><del>my guess is that it has to do with the fact that you're doing this in a trait, so there isn't a concrete type or something? but i don't really know, i just expect that wrapping it in a closure like that will fix the problem <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></del></p>\n<p>Victoria's answer is correct</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210444201,
            "is_me_message": false,
            "last_edit_timestamp": 1600373639,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600373463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>the issue here is the use of <code>self</code>, and the closure signature that <code>or_else</code> wants. <code>or_else</code> wants to take a function that accepts the error type (in this case, <code>io::Error</code>) and return another <code>Result</code>value. looking at your code, it seems like <code>run_revert</code> has the signature <code>fn(&amp;Orchestrator) -&gt; ()</code>. this may seem surprising! the <code>&amp;self</code> parameter is an actual argument to the function, which is why it was an error to try to use <code>self.run_revert</code> like a function pointer like that.</p>\n<p>another way to look at it is, what is the output of this line?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">().</span><span class=\"n\">or_else</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">run_revert</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>what do you want <code>res</code> to be when the build fails and you run the revert step? here, it looks like it would either be the successful output of the build step, or nothing at all if it reverted since <code>run_revert</code> discards <code>revert_res</code> after matching on it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210444416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600373560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Ooooh thanks!  Should I modify <code>run_revert</code> to take an error then? Or do I need to wrap it in some other way because of the <code>&amp;self</code> parameter? And good point about what the output should be, all of these things should return a Result at some point I'm just trying to short circuit it for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210448177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600375343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>you might want to consider just <code>match</code>ing on the result, that'll give you a lot of flexibility and you can clean it up into a nicer chain later if you want.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210448808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600375643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>you could make it return the <code>io::Result</code> from <code>revert.run()</code>, and still match on it to print out:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run_revert</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">revert_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">revert</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">revert_res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Error reverting: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>then you can call it like <code>self.build.run().or_else(|_| self.run_revert())</code>, which would make <code>res</code> be either (1) <code>Ok</code> and the output from <code>build</code>, (2) <code>Ok</code> and the output from <code>revert</code>, or (3) <code>Err</code> and the error from <code>revert</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210449031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600375756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>That worked!! Thanks so much y'all, this is feeling much better :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210450577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "and_then/or_else problem",
            "submessages": [],
            "timestamp": 1600376449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"240569\">@Victoria Mitchell (she) (F2'19)</span>  - wow thanks for pointing to that piece of history.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210509710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "if  let",
            "submessages": [],
            "timestamp": 1600431083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a9d4d2558b560b0ef168ced0f6c5198c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hello Rustaceans, in the last months I've contributed to a browser-based demo of nushell, which is written in Rust. The demo compiles nushell to wasm, then builds a small app on top of that to provide a custom UI (instead of the terminal based CLI). Generally this is working pretty well: <a href=\"https://www.nushell.sh/demo/\">https://www.nushell.sh/demo/</a></p>\n<p>Unfortunately some commands don't quite work, yet, for various reasons (there's a mostly up-to-date list here: <a href=\"https://github.com/nushell/demo/issues/18\">https://github.com/nushell/demo/issues/18</a> ). What's much worse, when the wasm module fails due to a Rust panic, it crashes, and the error isn't show anywhere in the UI (only in DevTools/Console as an error). There's some detail about that issue here: <a href=\"https://github.com/nushell/demo/issues/12\">https://github.com/nushell/demo/issues/12</a></p>\n<p>Now I'm wondering if someone with experience in both Rust and WebAssembly might want to pair with me on debugging and hopefully fixing this. Generally any hints how to deal with these panics, so that the error can be exposed in the JS world, would be very welcome.</p>\n<p>Specifically for <code>random bool</code> I also wonder why it crashed with \"could not initialize thread_rng: getrandom: this target is not supported'\", since the documentation for the <code>getrandom</code> crate says that it supports webassmebly targets: <a href=\"https://docs.rs/getrandom/0.2.0/getrandom/#webassembly-support\">https://docs.rs/getrandom/0.2.0/getrandom/#webassembly-support</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210711551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "joern.zaefferer@gmail.com",
            "sender_full_name": "J\u00f6rn Zaefferer (he) (m7'20)",
            "sender_id": 341890,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600675734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"341890\">@J\u00f6rn Zaefferer (he) (m7'20)</span> Hi J\u00f6rn, having 3 sources of errors is always harder than just 1, I remember having similar issues. I'm not super familiar with the bit where you're stuck at i.e. bindings to JS, I'd recommend just taking up one of the pairing stations and invite people to join in.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210782421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600713512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a9d4d2558b560b0ef168ced0f6c5198c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>taking up one of the pairing stations and invite people to join in.</p>\n</blockquote>\n<p>How does the inviting part work? Mention it here on Zulip? Or just set a status in Virtual RC?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210784761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "joern.zaefferer@gmail.com",
            "sender_full_name": "J\u00f6rn Zaefferer (he) (m7'20)",
            "sender_id": 341890,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600714696,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>Yup in Zulip, either in this channel or in 397 Bridge in case they're not already in this channel (likely since it's Day 1). do \"@Currently at RC\" to ping more people</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210785722,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joern.zaefferer@gmail.com",
                        "full_name": "J\u00f6rn Zaefferer (he) (m7'20)",
                        "id": 341890
                    },
                    "user_id": 341890
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600715072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a9d4d2558b560b0ef168ced0f6c5198c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>having 3 sources of errors is always harder than just 1</p>\n</blockquote>\n<p>I think I've finally got the point of this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'll try to reproduce one of those problems by itself, probably starting with the error handling for panics. With a standalone setup, the compile times should make iterating much faster (compiling nu takes a while).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210892065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "joern.zaefferer@gmail.com",
            "sender_full_name": "J\u00f6rn Zaefferer (he) (m7'20)",
            "sender_id": 341890,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600790464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a9d4d2558b560b0ef168ced0f6c5198c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>1 down, 2 to go <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> The demo is now handling panics a lot better than before: <a href=\"https://www.nushell.sh/demo/\">https://www.nushell.sh/demo/</a> (try with <code>random bool</code>)</p>\n<p>If someone wants to check out the code behind that change, the PR is here: <a href=\"https://github.com/nushell/demo/pull/63/files\">https://github.com/nushell/demo/pull/63/files</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211172577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "joern.zaefferer@gmail.com",
            "sender_full_name": "J\u00f6rn Zaefferer (he) (m7'20)",
            "sender_id": 341890,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Handling Rust panics with wasm in the browser",
            "submessages": [],
            "timestamp": 1600972728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hello, week three Rust learner here! I want to build myself a little abstraction to take a command line string (<code>ls -al</code>) and turn it in to a Rust <code>std::process::Command</code>. Here's what I have right now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">cmd_from_string</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">split_ascii_whitespace</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Not a great err msg...</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"s\">\"Expected there to be at least one thing in the command\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base_command</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>But because <code>base_command.args</code> returns a pointer to a Command (a <code>&amp;mut Command</code> to be exact) this function is really hard to write.</p>\n<p>If I change the return type to be a pointer that obviously doesn't work because Rust doesn't let you return a pointer from a function (I think?)</p>\n<p>But I also can't dereference it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">command</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Results in </p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0716]: temporary value dropped while borrowed\n  --&gt; src/main.rs:28:19\n   |\n28 |     let command = Command::new(cmd).args(iter);\n   |                   ^^^^^^^^^^^^^^^^^           - temporary value is freed at the end of this statement\n   |                   |\n   |                   creates a temporary which is freed while still in use\n29 |\n30 |     return Ok(*command);\n   |               -------- borrow later used here\n   |\n   = note: consider using a `let` binding to create a longer lived value\n\nerror[E0507]: cannot move out of `*command` which is behind a mutable reference\n  --&gt; src/main.rs:30:15\n   |\n30 |     return Ok(*command);\n   |               ^^^^^^^^ move occurs because `*command` has type `std::process::Command`, which does not implement the `Copy` trait\n</code></pre></div>\n\n\n<p>Doing as it says and moving it into its own variable doesn't help either.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">base_command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base_command</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">command</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Results in</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0507]: cannot move out of `*command` which is behind a mutable reference\n  --&gt; src/main.rs:31:15\n   |\n31 |     return Ok(*command);\n   |               ^^^^^^^^ move occurs because `*command` has type `std::process::Command`, which does not implement the `Copy` trait\n</code></pre></div>\n\n\n<p>What should I do instead? I understand returning references is bad but I'm not sure what else to do here.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211185644,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600979291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p>Builders like <code>Command</code> can be a bit tricky. What works is to assign <code>Command::new(..)</code> to its own name and then mutate it later (doing nothing with the mutable reference it returns).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211191840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600982748,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p>Something like this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">cmd_from_string</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">split_ascii_whitespace</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Not a great err msg...</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"s\">\"Expected there to be at least one thing in the command\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211191937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600982797,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>aha! That did the trick. I wouldn't have expected to be able to ignore the mutable reference that <code>.args</code> returns, but it seems to work just fine. Thanks!</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"327359\">@Vinayak Mehta (he) (F1'20)</span> you were totally right!! I can't believe I doubted you)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211196025,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600985660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yay! Well I also doubted myself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211196186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600985765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>What is the mutable reference that <code>.args</code> returns _for_ then? Hmm</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211206343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600993872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>One way to use the mutable reference would be to make chains in the builder pattern, <code>cmd.arg(\"arg1\").arg(\"arg2\").arg(\"arg3\")</code> (found it in <a href=\"https://stackoverflow.com/a/25688599/2780127\">this SO answer</a>). I'm also curious about other ways we can use this <code>&amp;mut</code>.</p>\n<p>EDIT: Oh wait we're already using <code>.args</code> to supply all the args at once. <img alt=\":thinking_face_3d:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/14067.gif\" title=\"thinking face 3d\"></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211206727,
            "is_me_message": false,
            "last_edit_timestamp": 1600994629,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600994352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>yeah I guess it lets you do builder style things, so there's that</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211206997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1600994695,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>yeah, the reference it returns is so that you can do builder-style things with it. since you already have an iterator with the flags you want, you can safely ignore it</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211257868,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Command factory function",
            "submessages": [],
            "timestamp": 1601040814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone know how to do this?  I need to add two u8 numbers and handle the overflow.<br>\nWithout variables I can do <code>5u8.overflowing_add(255)</code> but I need to do this w/ methods that return u8's so I'm trying to do something like <code>x()overflowing_add(y())</code> but compiler is looking for a symbol(i.e. period, comma, etc..) between the method and <code>overflowing_add()</code>.  Is there any other way to do this other than writing my own function to handle it?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212226548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "overflowing_add",
            "submessages": [],
            "timestamp": 1601823394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i think  <code>(x()).overflowing_add(y())</code> will work but am on my phone and haven\u2019t tried</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212226934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "overflowing_add",
            "submessages": [],
            "timestamp": 1601823970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>worked! coulda sworn I tried that but I think I still included the u8 when I did it.  much appreciated.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212227021,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@marcusklaas.nl",
                        "full_name": "Marcus Klaas de Vries (S2'17)",
                        "id": 101443
                    },
                    "user_id": 101443
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                }
            ],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "overflowing_add",
            "submessages": [],
            "timestamp": 1601824187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327980\">Andrey Petrov (he) (F1'20)</span> <a href=\"#narrow/stream/20305-rust/topic/rust.20vs.20js.20benchmarks/near/210428840\">said</a>:</p>\n<blockquote>\n<p>my fav pitch for wasm is that it can be the new CFFI bridge between languages</p>\n</blockquote>\n<p>I did a small Python-Rust example here, gets 10x improvement on generating prime numbers <a href=\"https://github.com/savarin/bridge\">https://github.com/savarin/bridge</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212442519,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "203c",
                    "emoji_name": "bangbang",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1601997196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>average time Python: 5.923739s\naverage time Rust: 0.400865s\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212443131,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f680",
                    "emoji_name": "rocket",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@marcusklaas.nl",
                        "full_name": "Marcus Klaas de Vries (S2'17)",
                        "id": 101443
                    },
                    "user_id": 101443
                },
                {
                    "emoji_code": "1f3ce",
                    "emoji_name": "racecar",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@marcusklaas.nl",
                        "full_name": "Marcus Klaas de Vries (S2'17)",
                        "id": 101443
                    },
                    "user_id": 101443
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "rust vs js benchmarks",
            "submessages": [],
            "timestamp": 1601997429,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>all material online (videos, assignments etc). curious to check it out in detail when i get back to doing more Rust <a href=\"https://reberhardt.com/blog/2020/10/05/designing-a-new-class-at-stanford-safety-in-systems-programming.html\">https://reberhardt.com/blog/2020/10/05/designing-a-new-class-at-stanford-safety-in-systems-programming.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212608717,
            "is_me_message": false,
            "last_edit_timestamp": 1602099561,
            "reactions": [
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@marcusklaas.nl",
                        "full_name": "Marcus Klaas de Vries (S2'17)",
                        "id": 101443
                    },
                    "user_id": 101443
                },
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                },
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                }
            ],
            "recipient_id": 22680,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "stanford class on safety in systems programming",
            "submessages": [],
            "timestamp": 1602099372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>I came across this comment in the <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#avoid-monomorphization\">style guide for rust-analyzer</a>:</p>\n<blockquote>\n<p>Avoid AsRef polymorphism, it pays back only for widely used libraries:</p>\n<p>// Good<br>\nfn frbonicate(f: &amp;Path) {<br>\n}</p>\n<p>// Not as good<br>\nfn frbonicate(f: impl AsRef&lt;Path&gt;) {<br>\n}</p>\n</blockquote>\n<p>Does anyone have any insight into why this is? In applications I've been writing I usually take path arguments as <code>impl AsRef&lt;Path&gt;</code>, but usually just to match the types on the std lib functions I pass them on to. I'm not sure what the trade-off for switching would be like...</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212874501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "AsRef versus actual ref",
            "submessages": [],
            "timestamp": 1602276849,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>if a function takes <code>impl AsRef&lt;Path&gt;</code>, the compiler needs to generate a separate copy of the function for every type that you call the function with, which increases compile times. <code>&amp;Path</code> is a concrete type, which only requires a single copy of the function. the tradeoff is that the <code>AsRef</code> version is much nicer to use, since you don't need to do a bunch of manual type conversion at the call site, but this is mainly a benefit for libraries which use it in their public api - if it's just internal apis within the context of a single project, it doesn't matter as much, and the compile-time hit might not be as worthwhile (since at that point it's just a tradeoff between annoying the people working on your project by making them write out things more explicitly vs annoying the people working on your project by making compilation take longer - there's not really any external benefits like there is with a public api).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212875638,
            "is_me_message": false,
            "last_edit_timestamp": 1602277633,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "AsRef versus actual ref",
            "submessages": [],
            "timestamp": 1602277501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>Cool, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212902745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "AsRef versus actual ref",
            "submessages": [],
            "timestamp": 1602313052,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>what's the deal? the maintainer stepped down a while ago, but it's still being maintained. is it reasonable to use? do the new maintainers care more about not using unsafe poorly than the old maintainer?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212905366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "what happened to actix-web?",
            "submessages": [],
            "timestamp": 1602318519,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>(you don't need to rehash the things leading up to the initial maintainer quitting, i'm just curious about what happened to the project after that, and what the current state is)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212905383,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "what happened to actix-web?",
            "submessages": [],
            "timestamp": 1602318550,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8298819261d94800ac2ac771b9904a89?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yea the original maintainer stepped down because of all the controversy. New maintainer seems really nice and open, and lots (all known?) issues with unsafe have been addressed. There's still some things that are a bit awkward to me (doing disk IO in particular), but what project doesn't have its rough edges? The leadership seems solid at least now.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212912299,
            "is_me_message": false,
            "last_edit_timestamp": 1602330275,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22680,
            "sender_email": "mail@marcusklaas.nl",
            "sender_full_name": "Marcus Klaas de Vries (S2'17)",
            "sender_id": 101443,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "what happened to actix-web?",
            "submessages": [],
            "timestamp": 1602330244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Hey y'all. I've just started getting into Rust and I really like the documentation. I do a lot of my work over SSH (or in a VM) so even doing  <code>rustup doc</code> doesn't work because it attempts to open it in a browser automatically. I'm surprised there is no baked-in http server for this?</p>\n<p>One thing I miss from Go though is being able to browse documentation (and peek into the stdlib) in terminal. Is that a thing with Rust? I would like to eventually integrate it with vim's <code>K</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212932950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Browse docs in terminal",
            "submessages": [],
            "timestamp": 1602361089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>maybe <a href=\"https://crates.io/crates/rusty-man\">https://crates.io/crates/rusty-man</a> ?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212933091,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Browse docs in terminal",
            "submessages": [],
            "timestamp": 1602361372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>or <a href=\"https://crates.io/crates/rocdoc\">https://crates.io/crates/rocdoc</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212933096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Browse docs in terminal",
            "submessages": [],
            "timestamp": 1602361385,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Ooo rusty-man looks like it could fit. Will try it out. Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212933351,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Browse docs in terminal",
            "submessages": [],
            "timestamp": 1602361806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>when i was writing rust on a VPS, i would either copy/paste docs into a directory served by apache, or i would use a text-mode browser like w3m to do a quick look. rustdoc output doesn\u2019t really play nice with w3m, tho, so YMMV</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212935881,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Browse docs in terminal",
            "submessages": [],
            "timestamp": 1602366162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Could use some help managing lifetimes if anyone knows. This is part of course I'm following on doing an OS in Rust.  I'm trying to implement an <code>IntoIterator</code> for the following struct and hitting the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>cannot infer an appropriate lifetime for autoref due to conflicting requirements\n\nnote: ...so that the expression is assignable:\n      expected core::slice::Iter&lt;&#39;a, _&gt;\n         found core::slice::Iter&lt;&#39;_, _&gt;\n</code></pre></div>\n\n\n<p>I've implemented it fine for <code>StackVec</code>  but, I'm not sure where to make changes for it to work w/ <code>&amp;StackVec</code>.  Am I on the correct path if I'm thinking I need to dereference somehow?  I'm not really sure why it's losing track of the lifetime.</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct StackVec&lt;&#39;a, T: &#39;a&gt; {\n    storage: &amp;&#39;a mut [T],\n    len: usize,\n}\n\nimpl&lt;&#39;a, T&gt; IntoIterator for &amp;StackVec&lt;&#39;a, T&gt;{\n    type Item = &amp;&#39;a T;\n    type IntoIter = slice::Iter&lt;&#39;a, T&gt;;\n    fn into_iter(self) -&gt; slice::Iter&lt;&#39;a, T&gt;{\n        self.storage.iter()\n\n    }\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214865406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "lifetime error",
            "submessages": [],
            "timestamp": 1603903928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>I am feeling like talking (or rather, blabbering) about Rust basics with someone. Anyone interested? I am still a beginner in Rust and am in the Eastern Time Zone. I am going to bed now but I'll check this thread tomorrow first thing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214924840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1603944975,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>i'm down</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214925671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1603945964,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm interested too! I'm also a beginner.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214941557,
            "is_me_message": false,
            "last_edit_timestamp": 1603975295,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1603962786,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>i sorted this out. kind of... fix one thing. break another.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214988340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "lifetime error",
            "submessages": [],
            "timestamp": 1603987305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Cool, should we resume the old meeting which was started a few months ago? 1-2pm eastern time would be hard on Vinayak, since from next week that would mean 11:30p-12:30a for him. Shall we do it in the morning, like 10-11am eastern time?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214995232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1603990206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thank you for thinking about the timezone <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> 1-2pm EST works for me, how about 2-3pm EST though?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215000723,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1603992466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Works for me. Let's try tomorrow (Friday) or should we pick a day tomorrow?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215032276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604007718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5c9f6b47dcb9445449eefb07bc719483?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Tomorrow works!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215033994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "vmehta94@gmail.com",
            "sender_full_name": "Vinayak Mehta (he) (F1'20)",
            "sender_id": 327359,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604008754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Great - I have put it up on the calendar.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215052053,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                }
            ],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604026579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Hey y'all -- I'm running into an interesting problem. I have a nested enum in <code>TokenType::Literal</code>. Say I want to match against all <code>TokenType::Literal</code> enum variants. How do I go about doing that? Here's the code: </p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e17f5cda2f78bb06c59872de08c9c792\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e17f5cda2f78bb06c59872de08c9c792</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">TokenType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Comma</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Semicolon</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">LiteralKind</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(PartialEq)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">LiteralKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Str</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">match_token</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">TokenType</span>::<span class=\"n\">Comma</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">TokenType</span>::<span class=\"n\">Comma</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TokenType</span>::<span class=\"n\">Semicolon</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// XXX: How do I tell match_token here that I want to match against all TokenType::Literal?</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">match_token</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">TokenType</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">LiteralKind</span>::<span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"mf\">65.0</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">TokenType</span>::<span class=\"n\">Literal</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">match_token</span><span class=\"p\">(</span><span class=\"n\">expect</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TokenType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tkns</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">TokenType</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">tkn</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tkns</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">tkn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I understand my <code>match_tokens</code> function is expecting a concrete value, but I want to match against all <code>TokenType::Literal(LiteralKind)</code> variants. Is that possible? Do I need to restructure my code somehow? I looked into <a href=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\"><code>std::mem::discriminant</code></a> (as pointed to by rust IRC) but that doesn't quite get me there either.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215269904,
            "is_me_message": false,
            "last_edit_timestamp": 1604276550,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604276508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks to me like you are trying to pass a type around at runtime, which I don't think is possible in Rust. You can do the match if you write out the code yourself. E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">TokenType</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\" do something here \"</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I don't think you can pass <code>TokenType::Literal</code> around because it's not a realizable value, it's a type. You could try and do something with macros (to syntactically transform something that looks like what you want into a match expression), but that's a whole 'nother can of worms.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215273219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604282008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which is to say, I've wanted this kind of thing before too and the solution I'm pursuing is to learn Zig and see if I like it more over there = /</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215273305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604282144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah I figured as much. I will find a way to re-write it using pattern matching, ie. more idiomatic Rust. Thanks!</p>\n<p>The interesting thing about Rust is that I can almost immediately feel the tension when I'm starting to \"not flow\" with the language: like fighting the borrow checker a lot or writing too many for loops :-) Coming from lots of Go and JS will do that I guess haha</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215278187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604290642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you can also pass a function that does the match</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215335217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604331649,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems like discriminant should work? <code>if (discriminant(expect) == discriminant(token)</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215349292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604337328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>discriminant would work if you didn't have nesting.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215362974,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604343777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think your 'match_token' is just 'any(is_literal...)', where is_literal is <code>match(tok) { TokenType::Literal(...) =&gt; true; _=&gt; false; }</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215363440,
            "is_me_message": false,
            "last_edit_timestamp": 1604344277,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604343981,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks everyone. This is what I ended up going with. It's a lot cleaner and easier to read too.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_literal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">().</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TokenType</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Impl'd on my parser struct that holds the tokens.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215537072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604459820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101320\">@Aos Dabbagh (S2'17)</span>  there's a newish <a href=\"https://doc.rust-lang.org/std/macro.matches.html\"><code>matches!</code></a> macro in std which I think means you could change that to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_literal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">matches</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">().</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TokenType</span>::<span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215674163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Matching against nested enum",
            "submessages": [],
            "timestamp": 1604556256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>hi, guys!  Is this going to be coming back, or should I throw something in the calendar?  My batch starts monday - just wanted to get a little head start.  Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 215771658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604609185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Hey Ben, welcome to RC! The last time we met we were sort of thinking of having multiple kinds of Rust sessions,</p>\n<ul>\n<li>completely beginner-friendly and unfocused ones</li>\n<li>more focused ones targetting a topic or library</li>\n</ul>\n<p>I am more interested in running and showing up in the first category. How about you?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 215872145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604681218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>would be interested in the first....new to rust and have been working on a couple things w/ it. would be to discuss concepts and what not.  there's also a few  college courses floating around online w/ exercises if anyone is interested in that.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 215878391,
            "is_me_message": false,
            "last_edit_timestamp": 1604683954,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604683926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So I am also fairly new to rust - I've been sort of hovering around chapter 12 of _the book_.    Perhaps we could start with that, and if we manage to get through it with time to spare transition to the second type.  I'm itching to _make something_ but I also need to eat my Rust wheaties, as it were.</p>\n<p>So my questions for you guys are:</p>\n<ol>\n<li>What times and days work for you (don't forget to include timezone!)</li>\n<li>Is going through _The Book_ amenable to you, and if so, about where in it are you?</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 215910714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604700922,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I'm up for whatever. I'm gone through the book up to about the same point.  Would prefer any day but Monday. Afternoon preferably.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216022944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604865984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>I can join on Friday afternoons but can manage on other days as well at 3-4pm EST. I am also up for whatever Rust. I have read some parts of the book, but most of my learning has been from podcasts, videos and code reading.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216028663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604874603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Cool.  So why don't we meet on tuesday the 10th at 3pm EST for a quick chat about direction / focus / goals (or the lack thereof), and then start regular meetings on Fridays at 3pm EST thereafter?</p>\n<p>It also might be handy for us to do some resource-sharing.  I'm thinking we could throw together a smaller, more learning-focused version of this: <a href=\"https://github.com/rust-unofficial/awesome-rust#resources\">https://github.com/rust-unofficial/awesome-rust#resources</a><br>\n...or just put together a PR for that repo with whatever we find.</p>\n<p><span class=\"user-mention\" data-user-id=\"342266\">@Brady Fontenot (he) (F2'20)</span> What are the courses you've been working with?</p>\n<p>Also, are we missing anyone that either of you know of?  The sooner we know to reschedule the better.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216029677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604876090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Tuesday 3pm EST sounds good to me</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216039491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604890668,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>that time works for me too.... </p>\n<p>regarding courses:  UPenn has assignments from two separate years for a course they have (CIS198). no lectures or anything. just smallish assignments.  and I also ran across a stanford course (cs110L) which uses rust to teach systems programming... has lectures, assignments, etc.. all online.</p>\n<p><a href=\"http://cis198-2016s.github.io/\">UPenn 198 - 2016</a><br>\n<a href=\"https://www.seas.upenn.edu/~cis198/\">UPenn 198 - 2019</a></p>\n<p><a href=\"https://reberhardt.com/cs110l/spring-2020/\">Stanford CS110L - safety in systems programming</a><br>\n<a href=\"https://reberhardt.com/blog/2020/10/05/designing-a-new-class-at-stanford-safety-in-systems-programming.html\">blog post about course from teacher</a></p>\n<p>I'm actually not working any of those though.  I'm doing this other course based on building an OS  in Rust that runs on a raspberry pi.  it's cool but, kind of proving to be a torturous way to learn rust. course is from georgia tech but it's basically a straight copy of another course from stanford w/ some additional modules. <br>\n<a href=\"https://tc.gts3.org/cs3210/2020/spring/info.html\">tech version</a>  <br>\n<a href=\"https://cs140e.sergio.bz/\">stanford original</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216045316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604899685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Cool, I have set up <a href=\"https://www.recurse.com/calendar/13499\">https://www.recurse.com/calendar/13499</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216100492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604936183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Is anyone working on learning rust right now, and wants to pair up?  I'll be on it until about 7pm EST</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216151603,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1604961253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>I've been playing around and making little HashMap&lt;Uuid, String&gt; dbs whenever I want to futz with something that deals with data storage, and I'm wondering if there's some idiomatic data storage technique that covers the broader use cases of databases.  Something in the back of my head is whispering that &lt;String&gt; is a clunky and potentially inflexible / error prone method.   Particularly, I'm wondering what to deserialize to, when doing that.  I suppose it's also possible that I'm thinking about this in terms that are too abstract and once designing some specific implementation the answer will jump out at me.</p>\n<p>I may have just rubber duckyd this question.  I'm still interested to know how you other Rustaceans structure your data esp. when serializing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216160491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604968442,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>serde_json can be nice for persisting data if you're lazy and fine with json</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216160571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604968498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>you can also use sqlite if you want a \"real\" database, there are a couple alright bindings for rust</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216160598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604968535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>depends on what you want to store though \u2014 if the thing you're storing is actually a string, string is fine, but sometimes an enum or something like that will be a better option. it all depends on what your usecase is.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216160688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604968608,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah.  I decided to just give myself a project to do and the path sort of crystallized somewhat - I'm going to hack together a sort of server-side pomodoro timer.  Now I'm looking at sqlx - is that what you meant re: sqlite bindings?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216161507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604969399,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i haven't used sqlx \u2014 i've used rusqlite and diesel, both of which seemed reasonable.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216162521,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604970299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "website",
            "content": "<p>is there something similar to rocksdb in rust?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216162777,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604970562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>there's <a href=\"https://github.com/rust-rocksdb/rust-rocksdb\">this</a> :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216162890,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f643",
                    "emoji_name": "upside_down",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sory.rawyer@gmail.com",
                        "full_name": "Rory Sawyer (he) (SP2'18)",
                        "id": 111920
                    },
                    "user_id": 111920
                }
            ],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Idiomatic data persistence",
            "submessages": [],
            "timestamp": 1604970675,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>I'm just starting to poke my head into futures.  There's a behavior that I <em>think</em> i get, but is confusing.  I'll try to explain in short:<br>\nin this truncated pseudocode:<br>\nuse futures::executor::block_on;</p>\n<p>async fn slow_async() -&gt; blocking_value{}<br>\naync fn dependant_async(blocking_value) {}<br>\nasync fn hopefully_concurrent_async() {}</p>\n<p>async fn compound_async() {<br>\n   let blocking = slow_async().await()<br>\n   thread::sleep(long enough to make a difference)<br>\n   dependant_async(blocking value)<br>\n}</p>\n<p>async fn master_async() {<br>\n   let f1 = compound_async();<br>\n   let f2 = hopefully_concurrent_async();<br>\n   futures::join(f1, f2)<br>\n}</p>\n<p>fn main() {<br>\n   block_on(master_async());<br>\n}</p>\n<p>...my expectation is that hopefully_concurrent will complete first, but it does not.  Is this a behavior of futures::join?  Where would I put code that was supposed to run while we wait for compound_async to resolve?</p>\n<p>I have an intuition that testing these sorts of behaviors <em>might</em> be impossible in a single thread - requiring a second thread IOT simulate an external process (being that when you call thread::sleep everything halts until it's over).  If that is the case, how do you go about poking at and inspecting async code?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216224947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605020999,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's a bit hard to tell from the pseudocode, but one issue that jumps out is that <code>thread::sleep</code> is not an async function, so it will block all tasks on the thread. to get things to run concurrently with the sleep, you'll need to either use an async sleep function or be running a multithreaded executor.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216229752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605023210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>that's what I thought.  Thanks for the tip: I found <a href=\"https://docs.rs/async-std/0.99.5/async_std/task/fn.sleep.html\">https://docs.rs/async-std/0.99.5/async_std/task/fn.sleep.html</a></p>\n<p>I think I also need to grab me a little multithreading to make testing these easier</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216230120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605023390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>It's probably worth manually desugaring an async execution by hand to really get what it's doing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216231224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605023837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>behind the scenes, it's more or less turning it into state machine -- pretty much a big match statement.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216231315,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605023878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd type out an example, but I'm vague on the details for Rust and don't want to give something misleading.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216231423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605023908,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>What is desugaring?  The immediate online results aren't totally clear</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216236478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605025815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>transforming the code by hand to expand out syntax sugar</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216239635,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605027126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://wiki.c2.com/?SyntacticSugar\">https://wiki.c2.com/?SyntacticSugar</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216239862,
            "is_me_message": false,
            "last_edit_timestamp": 1605027260,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605027236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://lliwynd.blogspot.com/2016/11/rust-for-loops.html\">https://lliwynd.blogspot.com/2016/11/rust-for-loops.html</a><br>\nthis article talks a little about how for loops are desugared</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216253965,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605033333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://tmandry.gitlab.io/blog/posts/optimizing-await-1/\">https://tmandry.gitlab.io/blog/posts/optimizing-await-1/</a> <br>\nthis talks a little about async await and what its represented as<br>\nTo understand desugaring, you first have to understand what syntax sugar is. Looking that up might help you.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216254280,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605033469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"362560\">Lloyd Massiah (he) (W1'20)</span> <a href=\"#narrow/stream/20305-rust/topic/Rust.20async/near/216254280\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://tmandry.gitlab.io/blog/posts/optimizing-await-1/\">https://tmandry.gitlab.io/blog/posts/optimizing-await-1/</a> <br>\nthis talks a little about async await and what its represented as<br>\nTo understand desugaring, you first have to understand what syntax sugar is. Looking that up might help you.</p>\n</blockquote>\n<p>this is a great post</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216258876,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lmassiah37@gmail.com",
                        "full_name": "Lloyd Massiah (he) (W1'20)",
                        "id": 362560
                    },
                    "user_id": 362560
                }
            ],
            "recipient_id": 22680,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Rust async",
            "submessages": [],
            "timestamp": 1605035252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Hey all, I find myself doing this pattern a <em>lot</em>:</p>\n<p>struct OnlyOneElement {<br>\ntheonlyelement: &lt;T&gt;<br>\n}</p>\n<p>impl OnlyOneElement {<br>\n/<em>...stuff...</em>/<br>\n}</p>\n<p>...because I frequently want to organize code such that I'm defining methods and implementing traits on something from std, or a primitive.  I have a peeve about this pattern, though, because it forces me to do this:</p>\n<p>referencing indexed items:  OnlyOneElement.theonlyelement[index]</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216262197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605036720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>You can implement the index traits for your type</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216262556,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605036857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>protip: Surround your code snippets with ``` to preserve formatting and get syntax highlighting.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216273766,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "benmorsillo@gmail.com",
                        "full_name": "Ben Morsillo (W1'20)",
                        "id": 361923
                    },
                    "user_id": 361923
                }
            ],
            "recipient_id": 22680,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605042111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>chat transcript:</p>\n<p>12:04:31     From Debamitro Chakraborti : Rust at last two jobs - that\u2019s interesting! I\u2019d like to catch you on that, Wesley<br>\n12:05:18     From Debamitro Chakraborti : Hi Ben<br>\n12:11:38     From Wesley Aptekar-Cassels (they) : <a href=\"https://github.com/image-rs/image\">https://github.com/image-rs/image</a><br>\n12:11:45     From Nate Lane : Did sound on the call just cut out for anyone else?<br>\n12:11:51     From david tudury : no<br>\n12:11:53     From Debamitro Chakraborti : umm not for me<br>\n12:11:54     From Ben Morsillo : not for me<br>\n12:12:02     From Brady Fontenot : <a href=\"https://github.com/Rust-SDL2/rust-sdl2\">https://github.com/Rust-SDL2/rust-sdl2</a><br>\n12:12:08     From Brady Fontenot : Sdl2 bindings<br>\n12:12:30     From Brady Fontenot : <a href=\"https://crates.io/crates/pixels\">https://crates.io/crates/pixels</a><br>\n12:12:52     From Brady Fontenot : <a href=\"https://github.com/Gekkio/imgui-rs\">https://github.com/Gekkio/imgui-rs</a><br>\n12:13:36     From Ben Morsillo : quick google: <a href=\"https://c2rust.com/\">https://c2rust.com/</a><br>\n12:14:16     From Lloyd Massiah : <a href=\"https://duckduckgo.com/?t=ffab&amp;q=rust+glium&amp;ia=images\">https://duckduckgo.com/?t=ffab&amp;q=rust+glium&amp;ia=images</a><br>\n12:14:24     From Indrajit Rajtilak : I haven't tried using it, but found this interesting for Python data apps: <a href=\"https://www.streamlit.io/\">https://www.streamlit.io/</a><br>\n12:14:30     From Lloyd Massiah : <a href=\"https://github.com/glium/glium\">https://github.com/glium/glium</a><br>\n12:14:36     From Lloyd Massiah : this is a wrapper for opengl<br>\n12:16:23     From James Carlsons : Thanks Brady!<br>\n12:23:04     From Brady Fontenot : <a href=\"https://rust-unofficial.github.io/too-many-lists/\">https://rust-unofficial.github.io/too-many-lists/</a><br>\n12:23:12     From Brady Fontenot : There\u2019s this ^<br>\n12:23:26     From Brady Fontenot : There\u2019s also rustlings.<br>\n12:24:21     From Nate Lane : <a href=\"https://github.com/pingcap/talent-plan/blob/master/courses/rust/README.md\">https://github.com/pingcap/talent-plan/blob/master/courses/rust/README.md</a><br>\n12:25:23     From Brady Fontenot : <a href=\"https://lowlvl.org/\">https://lowlvl.org/</a> rust networking<br>\n12:31:38     From Wesley Aptekar-Cassels (they) : <a href=\"https://github.com/WesleyAC/commonplace/\">https://github.com/WesleyAC/commonplace/</a><br>\n12:44:48     From Wesley Aptekar-Cassels (they) : <a href=\"https://blog.wesleyac.com/posts/rust-parsing\">https://blog.wesleyac.com/posts/rust-parsing</a><br>\n12:47:47     From Wesley Aptekar-Cassels (they) : <a href=\"https://rocket.rs/\">https://rocket.rs/</a><br>\n12:48:13     From Wesley Aptekar-Cassels (they) : <a href=\"https://hanabi.site/\">https://hanabi.site/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216273785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605042118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">you_do_that</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"it looks like this\"</span><span class=\"p\">)</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216273860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605042140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So, I didn't quite finish this thought.  Today was a rollercoaster (in a good way)</p>\n<p>What I'm looking to do, is to avoid having to reference the wrapping struct.  For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>somestructinstance.someu32 + somestaticu32\n</code></pre></div>\n<p>should become</p>\n<div class=\"codehilite\"><pre><span></span><code>somestructinstance + somestaticu32\n</code></pre></div>\n<p>The closest concept I can think of in c++ is typedef, but that's still not quite the thing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216298718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605059014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Okay, the rubber ducky strikes again.  I think.</p>\n<p><code>type</code> seems like the ticket.  To add functions and whatnot <code>impl &lt;Trait&gt; for &lt;MyType&gt;</code>.  I <em>think</em> this is the best answer, but if anyone knows a reason this is poor practice (or knows of a more idiomatic method) I'd love to hear it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216299206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605059494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>yeah, <code>type</code> seems like what you want :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216299416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605059722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>type</code> will create a type alias, which isn't treated as a different type at the type system level (just another way to refer to an existing type). this means that if you do something like <code>type MyType = u32</code>, you won't actually be able to impl things on it, for the same reason that you can't impl things on u32 directly. if you want to actually create a new type, you do want to use structs (<code>struct MyType(u32)</code>) and then maybe impl <code>Deref</code>/<code>DerefMut</code> to be able to use it as a <code>u32</code> directly. crates like <a href=\"https://crates.io/crates/shrinkwraprs\">https://crates.io/crates/shrinkwraprs</a> can help with all of the fiddly bits of this.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216299535,
            "is_me_message": false,
            "last_edit_timestamp": 1605059890,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605059865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So the docs on Deref state that you should only use <code>Deref</code> on smart pointers.  It <em>almost</em> feels like that's what I'm doing?  I don't know a ton about smart pointers, only that they're mechanisms for ensuring data lifetimes.  Which I suppose is some kind of what I'm doing here, even if the point is to implement a bunch of methods on what is otherwise a builtin.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216300578,
            "is_me_message": false,
            "last_edit_timestamp": 1605061034,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605060943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>what are you trying to do?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216300828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605061220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>The most common example I can give, is that I'll be trying to use a <code>HashMap</code> for data that will eventually live in a db.  Whenever I define an in-memory db of this kind, I want to do things to it that <code>HashMap</code> doesn't do on it's own.  Things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MySerializer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyHashMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SomeJsonType</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"cm\">/* do a buncha stuffs */</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...there are a ton of other situations where I want to teach some builtin to jump through a hoop or ride a unicycle, so to speak.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216301274,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605061568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>I realize, too, that one can simply </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but one of the problems the custom types solve is that the name hints at the use throughout the codebase.  Naming my custom <code>HashMap</code> something like <code>UserDB</code> means less commenting and more readable code.</p>\n<p>...at the end of the day, I think <code>type</code> does the trick, but I'm reading up on <code>Deref</code> now and it may also provide solutions.  I think I need a deeper understanding of the meaning of a smart pointer as an abstraction.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216301495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605061883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>if your underlying type will be a hashmap then maybe you can use the Newtype pattern</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216303523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605064335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>then implement all the traits and functions you want for your new type</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216303531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605064351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>that's it!  So many <code>fixme</code>s!  Maybe this is a good place to dive deep and contribute some.  Thanks for the tip!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216303989,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Custom types",
            "submessages": [],
            "timestamp": 1605065012,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Unfortunately Tuesdays at 3 are a bit difficult for me. If y\u2019all decide to do another session sometime I\u2019d be down to join :-)</p>\n<p>I\u2019m working on a few things right now: Crafting Interpreters, some networking stuff, and a BitTorrent client. I\u2019d like to eventually build an NES emulator but I\u2019m not comfortable enough with the language just yet for that</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216306532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605068538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101320\">@Aos Dabbagh (S2'17)</span> actually, I think we're doing fridays at three instead.  Today was just to bootstrap so we all had some direction for the week, as a bunch of us just started our batch</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216306703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605068771,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>That is much more doable ! I\u2019ll be there this week if y\u2019all doing it then</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216306725,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605068818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3c0275c73d9c05a4a2e092649b4deb2a5a79be07?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342266\">@Brady Fontenot (he) (F2'20)</span> Some other folks and I worked through that Raspberry Pi in Rust course when we were in batch (Summer '18). I'd be happy to chat about anything there/share the code that we ended up writing</p>\n<p>We actually ended up going a little further than the course and implemented a kind of shitty framebuffer so that we could write to a display</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216404506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bittmanmax@gmail.com",
            "sender_full_name": "Max Bittman (he) (S2'18)",
            "sender_id": 120392,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605132468,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>i'm using a library that uses libz-sys, and it's panicking with this message:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;attempted to zero-initialize type `deflate::ffi::z_stream`, which is invalid&#39;\n</code></pre></div>\n<p>when trying to do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stream</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span>::<span class=\"n\">z_stream</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>anyone have an idea of how to fix this?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216409932,
            "is_me_message": false,
            "last_edit_timestamp": 1605136883,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "ffi zero init",
            "submessages": [],
            "timestamp": 1605136822,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120392\">@Max Bittman (he) (S2'18)</span>  thanks for the heads up.  def be curious to chat about it.  i'm still pretty early in it.  halfway through the xmodem protocol right now.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216410775,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                }
            ],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605137590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>well i did:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stream</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span>::<span class=\"n\">z_stream</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">zeroed</span><span class=\"p\">().</span><span class=\"n\">assume_init</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and i have a different error now which is cool</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216410801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "ffi zero init",
            "submessages": [],
            "timestamp": 1605137629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Is it possible to use a trait to change the private field of the struct that implements it?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216485022,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605195782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>yes, assuming the trait is implemented in the same file (or module, maybe?) that the struct is</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216486643,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605196408,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>assuming this is what you're talking about - this compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Qux</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">asdf</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Qux</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">asdf</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216486717,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605196435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>public vs private is mostly something that the module system cares about, it shouldn't affect your code too much</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216486947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605196523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>ah i see, I'm trying to implement a trait for a foreign struct(foreign to my own code). I thought that it would have access to the fields since I'm implementing the trait for the struct.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216491612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605198276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>This is a question of idiomaticy, style, and preference.</p>\n<p>I have a thing I'm building, and it's going to need configuration - things like an access key (it's a server that must validate incoming requests), pool options, et al.  What are the patterns you all have found that work best for this sort of thing?  My thoughts on it have been things like:</p>\n<ul>\n<li>have options set up from the command line (this <em>will</em> be an option, but <em>can't</em> be the only one</li>\n<li>have a .conf that the app loads</li>\n<li>have a separate .rs file that holds all config information in a manner structured to be useful (this seems boneheaded)</li>\n<li>Put data in the manifest?</li>\n<li>Look for a crate designed around this</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216519173,
            "is_me_message": false,
            "last_edit_timestamp": 1605211085,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "To Config, or not to Config",
            "submessages": [],
            "timestamp": 1605211017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>personally i tend to wait until the last minute to do this - keeping things in variables or hardcoded at the beginning, and then once i have a better understanding of how it'll be used, picking something else. these days i'd probably lean towards using a json file for config with serde_json, but the toml crate is also probably reasonable. i think keeping it all in a .rs file is totally reasonable to the start of a project up until the point where other people also want to use it :)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216524525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "To Config, or not to Config",
            "submessages": [],
            "timestamp": 1605213379,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>yeah, i think what I'm gonna do is provide a .conf that starts with reasonable defaults, and checks command line args for overrides (just because I started looking at that crate and it's so easy to use).</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216544566,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "To Config, or not to Config",
            "submessages": [],
            "timestamp": 1605223895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Hey, all!  Not only am I experiencing the mother of all confounding internet tech support issues, but I have another event today that conflicts with the Rust group.  Can someone take on leading the Rust Jam?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216653866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605292776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yea no worries.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216655571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605293466,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>I feel like I'm always hunting for the correct names of 'features' to include in the Cargo.toml.  Is there a standard place they live on pages on <a href=\"http://docs.rs\">docs.rs</a>?  Serde_json has them under their own header on <a href=\"http://serde.rs\">serde.rs</a> but the cargo doc doesn't appear to have them at all.  I feel like I'm missing something right under my nose.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216693958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "features",
            "submessages": [],
            "timestamp": 1605314722,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>rust doesn't allow any external access to private things, because it relies quite heavily on privacy rules for its safety guarantees - poking around at private members of <code>Vec</code> for instance could trivially lead to segfaults/etc.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216695662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605316462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>unfortunately there is no standard/automated place for cargo features - i typically just go to the repository and read the Cargo.toml when it's not clear from the docs</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216703454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "features",
            "submessages": [],
            "timestamp": 1605325491,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I actually found a solution to my actual problem, so I don't need to worry about accessing private fields.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216704978,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "traits and private fields",
            "submessages": [],
            "timestamp": 1605327556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>that's what I was looking for. Cheers!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216707591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "features",
            "submessages": [],
            "timestamp": 1605331127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So, I feel like I'm using the string sisters wrong.  I'm assuming it stems from my arms-length relationship with the borrow checker.</p>\n<p>I end up doing stuff like this a <em>lot</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">opt1</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">opt2</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cm\">/*snip*/</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...which means that I end up doing <em>this</em> a lot:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Thing</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"this\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"blows\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The problem is, when i implement with &amp;str, I get all sorts of problems trying to make my stuff interoperable.  Frequently, I want an interface to have the option of just throwing in there <code>\"something\"</code> or taking a value from <code>SomeOtherObject.value</code> which causes the compiler nun to slap my hand with her ruler of \"size cannot be known at compile time\".</p>\n<p>What am I missing, here?  The world can't be made up of <code>String::from()</code>s.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216762366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605404526,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Can you post an example that gives you that error?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216770551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605416503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>to delve a little more deeply, this is what I would prefer, that throws the \"size at compile time\" error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">opt1</span>: <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...okay, I say, let's make it a reference....<br>\n...now it wants a lifetime specifier.  alright,  we can go there. ..</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">opt1</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...now my constructor is lit up like a christmas tree, and I'm not sure how to fix it.  I know this is because the lifetime specifier is just a compiler annotation, and that without putting the <code>str</code> in the struct itself there's no guarantee that it will live long enough.  This is where I hit a wall.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216797787,
            "is_me_message": false,
            "last_edit_timestamp": 1605453907,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605453728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I think it might be easier to understand exactly what you\u2019re asking if you can maybe share a <a href=\"https://play.rust-lang.org\">rust playground</a> link that demonstrates what you\u2019re asking (e.g. the link you share generates a compiler error and you want one of us to modify it so there\u2019s no more error and explain what we did). I <em>think</em> I sort of understand what you\u2019re asking and have definitely come across similar issues, it\u2019s just hard to be sure we\u2019re on exactly the same page without a bit more concrete detail. Asking questions in a technical forum like this one in a way that makes it easier for readers to understand exactly what you asked, and makes it easy for them to dive in and provide some quick help is really key for getting useful answers. Tools like the rust playground help that a lot.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216797996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605454091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>To provide more context:  The specific case I'm working on at the moment is an interface to curl.  It looks a little like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">command</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_string</span><span class=\"p\">(</span><span class=\"n\">string</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">command</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">opts</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">method</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Curler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">command</span>: <span class=\"nc\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"curl -{OPTS} {METHOD} -G {URL}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">OPTS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">opts</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">METHOD</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">URL</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add_data_urlencode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} --data-urlencode {}=</span><span class=\"se\">\\'</span><span class=\"s\">{}</span><span class=\"se\">\\'</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} -d </span><span class=\"se\">\\'</span><span class=\"s\">{}={}</span><span class=\"se\">\\'</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add_user</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">\"-u\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"attempted to add two user fields to Curl command\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} -u {}:{}\"</span><span class=\"p\">,</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subprocess</span>::<span class=\"n\">PopenError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Exec</span>::<span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">(</span><span class=\"n\">Redirection</span>::<span class=\"n\">Pipe</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">capture</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stdout_str</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have an intermediate interface to <code>Curler</code>, which is meant to help construct queries specific to the zulip api.  Here's the signature where it calls <code>Curler</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">curl</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subprocess</span>::<span class=\"n\">PopenError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Curler</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"sSX\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"GET\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}/api/v1/messages\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">add_user</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">api_user</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">api_key</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">add_data</span><span class=\"p\">(</span><span class=\"s\">\"anchor\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">anchor</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">add_data</span><span class=\"p\">(</span><span class=\"s\">\"num_before\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">add_data</span><span class=\"p\">(</span><span class=\"s\">\"num_after\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">narrow</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">narrows</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">add_data_urlencode</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"narrow\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">narrow</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"curler command:</span><span class=\"se\">\\n</span><span class=\"s\">{}</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>edited to remove dead code block in <code>curl()</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216798358,
            "is_me_message": false,
            "last_edit_timestamp": 1605455855,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605454579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Let me refactor this so it's a little more digestible and I'll upload the playground link</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216798497,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathan12343@gmail.com",
                        "full_name": "Nathan Goldbaum (he) (S1'19)",
                        "id": 221814
                    },
                    "user_id": 221814
                }
            ],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605454759,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>a higher-level thing is that you could consider using <a href=\"https://docs.rs/curl/0.4.34/curl/\">https://docs.rs/curl/0.4.34/curl/</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216799755,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605456243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>i think for this case in general, though, i'd just use <code>String</code> and not worry too much about the <code>.to_string()</code> verbosity \u00af\\_(\u30c4)_/\u00af</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216799796,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605456312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>you could also take a &amp;str and do the to_string immediately in your library functions, if you want the api to be nicer but don't want to deal with lifetimes much</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216799869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605456483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>It's just a pattern that I end up doing so much, it would be worthwhile to figure out what the <em>right</em> way to do it is.</p>\n<p>I looked at curl, can't remember why I decided to implement my own... But looking at it again now, I think I'm going to crawl through their implementation and see what they ended up doing.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216799999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605456704,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>taking &amp;str and casting in library seems like it might be the ticket.  Will update.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216800044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605456730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>looking at curl might not help too much, since they're using a C library under the hood, so i think there's some FFI stuff going on under the hood rather than constructing a string or whatever. but in general, whether to have your function take a <code>&amp;str</code> or a <code>String</code> has to do with what you're going to do with the string later, so there isn't a general-purpose answer.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216800307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605457215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>More generally, oftentimes the most pragmatic way through compiler errors about lifetimes and ownership is just to give up and call <code>.clone()</code> or similar at interfaces. Once you have something fully working it\u2019s often easier to refactor and make things faster, if that even matters.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216800462,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bittmanmax@gmail.com",
                        "full_name": "Max Bittman (he) (S2'18)",
                        "id": 120392
                    },
                    "user_id": 120392
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacoblevgw@gmail.com",
                        "full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
                        "id": 264901
                    },
                    "user_id": 264901
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605457483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>you can always take a &amp;str and convert it into a String, and you can try to do that in the place that will be least verbose, but that will possibly be less efficient in some cases (if the user already has a String that they could pass in, but instead they pass in a reference to it, and you clone it inside the function by calling to_string). whether that's worth worrying about depends on the usecase (almost all of the time it probably isn't, though)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216800492,
            "is_me_message": false,
            "last_edit_timestamp": 1605457893,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605457562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>for some context on what <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> is saying, <code>to_string</code> is effectively cloning the string, since it's copying the memory (and thus uncoupling the new object that's made from the previous lifetime associated with it)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216800705,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "&String::from(&str).to_str()",
            "submessages": [],
            "timestamp": 1605457830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone know if closures get inlined?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216916120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "closures and inlining",
            "submessages": [],
            "timestamp": 1605553260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>not sure what the state of things today are but <a href=\"https://users.rust-lang.org/t/closure-inlining/16690/4\">this thread</a> seems relevant</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216916802,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lmassiah37@gmail.com",
                        "full_name": "Lloyd Massiah (he) (W1'20)",
                        "id": 362560
                    },
                    "user_id": 362560
                }
            ],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "closures and inlining",
            "submessages": [],
            "timestamp": 1605553584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>with the answer being \u201cthe same as any other functions since closures are syntax sugar for a struct and function\u201d</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216916860,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "closures and inlining",
            "submessages": [],
            "timestamp": 1605553610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>ok that looks cool, thanks for find this <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216918316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "closures and inlining",
            "submessages": [],
            "timestamp": 1605554370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"362560\">@Lloyd Massiah (he) (W1'20)</span> Just in case you don't know about this, I find <a href=\"https://godbolt.org/\">https://godbolt.org/</a> to be a fast and easy way to answer \"what is the compiler doing to my code\"-type questions.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 216969652,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "16177",
                    "emoji_name": "cool-button",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                }
            ],
            "recipient_id": 22680,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "closures and inlining",
            "submessages": [],
            "timestamp": 1605593645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3344bde70c1e1010ef326eb078358c71?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm trying to write an iterator adapter that takes an iterator over <code>u8</code>s and returns an iterator over structured tokens derived from this byte stream. I want to make it generic over anything that implements <code>Iterator</code> with <code>type Item = u8</code>,  but I can't figure out the syntax; for example, the following code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Lexer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">bytes</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields the error: <code>expected trait, found builtin type 'u8'</code> for the <code>T::Item:</code> clause. Is this possible without the boilerplate of defining a new trait and adding a wrapper implementation for any <code>Iterator</code> impl I actually want to pass in?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217012622,
            "is_me_message": false,
            "last_edit_timestamp": 1605627129,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "mail@nathanael0x4c.com",
            "sender_full_name": "Nate Lane (he) (W1'20)",
            "sender_id": 361690,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "generic type with concrete associated type in trait bound",
            "submessages": [],
            "timestamp": 1605624861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3344bde70c1e1010ef326eb078358c71?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Update: I figured it out. Kind of odd syntax, imo, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>  )</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Lexer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">bytes</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217018579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "mail@nathanael0x4c.com",
            "sender_full_name": "Nate Lane (he) (W1'20)",
            "sender_id": 361690,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "generic type with concrete associated type in trait bound",
            "submessages": [],
            "timestamp": 1605627456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So I'm working through macros, because they represent half of the solution to a serialization problem I want to solve.  I'm writing an interface to a SQL db and I want to be able to declare schema like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// example of something I'd want to serialize</span>\n<span class=\"k\">struct</span> <span class=\"nc\">User</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">id</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">email</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// blank object so we have a reference to fields</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">User</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n\n<span class=\"c1\">// this should return a Hashmap&lt;String, String&gt; that looks like:</span>\n<span class=\"c1\">// ['id' : 'u32' , 'email' : 'String', 'name' : 'String']</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">schema</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make_schema</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm working on a macro that can take the names of the fields (id, email, name), but I'm struggling to find a way to iterate over them.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217053438,
            "is_me_message": false,
            "last_edit_timestamp": 1605642865,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Macro expansion and object serialization",
            "submessages": [],
            "timestamp": 1605642827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Take a look at proc macros. <a href=\"https://doc.rust-lang.org/nightly/reference/procedural-macros.html\">https://doc.rust-lang.org/nightly/reference/procedural-macros.html</a> they seem to allow you to make custom #derives on structs and things like that. Then you could make a trait with a function that would return a HashMap based on the struct fields that is derivable. I haven't made a proc-macro, but I remember them from reading the book.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217056054,
            "is_me_message": false,
            "last_edit_timestamp": 1605646395,
            "reactions": [
                {
                    "emoji_code": "1f446",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@wesleyac.com",
                        "full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
                        "id": 101330
                    },
                    "user_id": 101330
                }
            ],
            "recipient_id": 22680,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Macro expansion and object serialization",
            "submessages": [],
            "timestamp": 1605644005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>Are we having the jam tomorrow?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217334197,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605821982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ce34e0268627e8c6c415781546608fa2f7a98de5?x=x&version=4",
            "client": "website",
            "content": "<p>I added it to the calendar anyway <a href=\"https://www.recurse.com/calendar/13686\">https://www.recurse.com/calendar/13686</a></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217339550,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "smichaelmedes@gmail.com",
                        "full_name": "Michael Smedes (W2'20)",
                        "id": 256966
                    },
                    "user_id": 256966
                },
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                },
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 22680,
            "sender_email": "debamitro@gmail.com",
            "sender_full_name": "Debamitro Chakraborti (he) (m6'20)",
            "sender_id": 125284,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "learning rust",
            "submessages": [],
            "timestamp": 1605824863,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>So I keep coming up against Error types from other libraries throwing compiler complaints.  Is this a common problem?  It seems fairly basic, but it's difficult to find good information about how to handle it.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217446409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605899795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>do you have an example of what sorts of compiler complaints you're getting?</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217446741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605899962,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Soooooo, I have been wrestling with this problem for days, and I figured I would post about it here, and what do you figure, moments later I figured it out.</p>\n<p>The issue was with the way I was importing serde_json.  I had</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"p\">{</span><span class=\"n\">Deserializer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>::<span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In multiple places.  What it took me a while to realize was that I no longer had access to the standard <code>Result</code> because of this.   I'm going to search for the bit of documentation that I got this from and open an issue for the tutorial, because that is one heck of a frustrating behavior.</p>\n<p>The fix was to find the places where serde_json:::Result was necessary and pattern the app this way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"p\">{</span><span class=\"n\">Deserializer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>::<span class=\"n\">Value</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"cm\">/* snip */</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">do_failable_serialization</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">serde_json</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"cm\">/*...*/</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217447524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605900310,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>the nature of the complaints, when I was getting them, was that I had too many arguments when invoking result.  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">do_something_unrelated_to_serde</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SomeOtherError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...would throw <code>wrong number of type arguments</code></p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217447799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605900460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>...and now I feel extra silly because I had to deal with precisely this flavor of namespace collision <em>all the time</em> with Python, but for some reason that instinct failed to surface in this context.</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217447943,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605900529,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>ah, yeah. i'm pretty annoyed when example code does <code>use foo::Result</code> or whatever for exactly this reason, i prefer <code>Result</code> and <code>Error</code> to always refer to the <code>std</code> variations. glad you figured ot out!</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217448897,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605900972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>yeah qualifying stdlib-like types from a crate with the crate name is the way to go, this is definitely a confusing pattern</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217451403,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605902236,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>the style i have personally developed is to just basically never use imports at all - with <code>rustfmt</code> being as good as it is, i find the code personally ends up easier to read overall this way, and i don't ever have to worry about running into problems like this</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217455149,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605904256,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/dd9aceaf17982bc33972b3bb8701cd19?d=identicon&version=1",
            "client": "website",
            "content": "<p>(even for traits you can do <code>use foo::Trait as _</code> to bring the trait into scope without giving it a name)</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217455230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "doy@tozt.net",
            "sender_full_name": "Jesse Luehrs (he) (F1'14)",
            "sender_id": 6426,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605904298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>That was my pattern in python more often than not.  I just need to remember that fundamental lessons are framework-agnostic</p>",
            "content_type": "text/html",
            "display_recipient": "rust",
            "flags": [
                "read"
            ],
            "id": 217455428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22680,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 20305,
            "subject": "Error collisions",
            "submessages": [],
            "timestamp": 1605904388,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
