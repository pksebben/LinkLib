{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you're interested in Erlang, come by and talk!</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 6432975,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "(no subject)",
            "submessages": [],
            "timestamp": 1370284027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>The timing is almost too good: <a href=\"http://pchiusano.blogspot.co.uk/2013/09/actors-are-overly-nondeterminstic.html\" target=\"_blank\" title=\"http://pchiusano.blogspot.co.uk/2013/09/actors-are-overly-nondeterminstic.html\">http://pchiusano.blogspot.co.uk/2013/09/actors-are-overly-nondeterminstic.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10164012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "(no topic)",
            "submessages": [],
            "timestamp": 1378997571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3d7b72d70ff07f8186126a4464bc6166?d=identicon&version=1",
            "client": "website",
            "content": "<p>fyi brew install erlang works fine, rebar (the build tool) is in headonly so you have to:</p>\n<p>brew tap homebrew/headonly<br>\nbrew install --HEAD rebar</p>\n<p>cf <a href=\"https://github.com/basho/rebar/issues/365\" target=\"_blank\" title=\"https://github.com/basho/rebar/issues/365\">https://github.com/basho/rebar/issues/365</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10165492,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "emmbeezee@gmail.com",
            "sender_full_name": "Maggie Zhou (she) (S'13)",
            "sender_id": 2161,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1378999837,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, in my experience Homebrew users seem to be better off than apt aficionados like myself. I usually end up having to install OTP from source (which, thankfully, is pretty easy).</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10171531,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379010657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>The thing is that the Erlang community moves pretty fast and new versions are quickly adopted. Incompatibilities are introduced between recent versions of common Erlang libraries and older OTP runtimes. You upgrade or you die. Of course, apt lags behind...</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10171542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379010718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8996f672ef71791a650a66949102f430875dd3a2?x=x&version=1",
            "client": "website",
            "content": "<p>Which is the best textbook for Erlang? I have Learn You An Erlang for free from the library, is that enough?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10341530,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "amandine.m.lee@gmail.com",
            "sender_full_name": "Amandine Lee (S'13)",
            "sender_id": 2163,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379393497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"amandine.m.lee@gmail.com\">@Amandine Lee</span> Learn You Some Erlang is also freely available on the <a href=\"http://learnyousomeerlang.com/\" target=\"_blank\" title=\"http://learnyousomeerlang.com/\">intarweb</a>. It's the only Erlang book I've read (I consider myself fairly proficient in Erlang), and I think it's pretty good.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10344242,
            "is_me_message": false,
            "last_edit_timestamp": 1379400292,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379400050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>The core language is very small, so you should be able to learn it fairly quickly. The trick is to get into the OTP libraries, build tools like <a href=\"http://github.com/basho/rebar\" target=\"_blank\" title=\"http://github.com/basho/rebar\">rebar</a>, etc quickly so that you can write a few applications before you get bored :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10344250,
            "is_me_message": false,
            "last_edit_timestamp": 1379400324,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379400109,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd also be happy to review code and whatnot.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10344293,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379400178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8996f672ef71791a650a66949102f430875dd3a2?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"martin@tornwall.net\">@Martin T\u00f6rnwall</span>. The basic language is familiar enough from Haskell that it's not too difficult to get through. My main purpose is to do some concurrent programming, if anyone knows an interesting project to pursue to practice that would be great.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10363571,
            "is_me_message": false,
            "last_edit_timestamp": 1379442475,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "amandine.m.lee@gmail.com",
            "sender_full_name": "Amandine Lee (S'13)",
            "sender_id": 2163,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379442423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8996f672ef71791a650a66949102f430875dd3a2?x=x&version=1",
            "client": "website",
            "content": "<p>Lol I mentioned to my dad that I was looking into Erlang and he gave me a problem his company was work on to \"practice\" with. Thanks, Dad, for trying to get some free consultation work out of me. </p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10372285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "amandine.m.lee@gmail.com",
            "sender_full_name": "Amandine Lee (S'13)",
            "sender_id": 2163,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379456720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c5b4e77efa6e623fbd38ca2747865ce7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha, nice try!</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 10386615,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "martin@tornwall.net",
            "sender_full_name": "Martin T\u00f6rnwall (S'13)",
            "sender_id": 2124,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "install on mac",
            "submessages": [],
            "timestamp": 1379488470,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I have been subscribed to this stream for approaching one year. So far... nothing, I don't think.</p>\n<p>I wrote my first erlang app, a toy REST server built on leptus. The majority of it is word-for-word from a tutorial. <a href=\"https://github.com/subsetpark/numbers_station\" target=\"_blank\" title=\"https://github.com/subsetpark/numbers_station\">https://github.com/subsetpark/numbers_station</a></p>\n<p>It exposes a single endpoint, <code>series/{name}/{n}</code>. Right now the only two series supported are <code>natural</code> (not exactly a great feat) and <code>fibonacci</code> (not particularly creative either). It will return the nth term of the series.</p>\n<p>My custom code is in <code>numbers_handler:get/3</code> and <code>numbers_handler:get_term/2</code>. I feel pretty good about the form they've taken so far. They feel roughly 'erlangic'\u2014though I'd of course really welcome any suggestions. </p>\n<p>What I'm wondering about now is error handling. I'm trying to keep in the spirit of 'let it crash'\u2014so right now, if you enter a bad series name, for instance, or a negative n, the application crashes. Which is fine, but that also results in a 500, which is not fine. What is the graceful and idiomatic way to handle errors in this case?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33248836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420517290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Haha indeed, you've revived this stream after over a year of silence! That's awesome <span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span>, well done.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33253483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420526450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>The only thing I know about web servers in Erlang is that there's this thing called <a href=\"https://github.com/basho/webmachine\" target=\"_blank\" title=\"https://github.com/basho/webmachine\">Webmachine</a>, that has a whole decision graph for determining what HTTP status code to return and what content type, language, etc to use for it. I used a Clojure library that was a clone of it.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33253513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420526525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Leptus I'm not familiar with. One idea that crosses my mind is, maybe there could be a web server task that *doesn't* crash, but spin off a task to do your processing, and if *that* crashes, it could somehow provide an error code up to the parent task first?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33253533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420526575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>That does make sense - what little I know of idiomatic erlang is 'if in doubt, spawn a new process'. I don't know whether that's true in the general case or only for concurrency purposes. maybe I'll look into error handling in cowboy, the framework on which leptus is built.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33265175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420552461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Here's a followup question: </p>\n<p>What's the best pattern to take advantage of hot code loading in Erlang when developing? If I make a change to <code>numbers_handler</code>, how do I get it into the application process? Right now I'm doing:</p>\n<p>- Code<br>\n- <code>rebar compile</code><br>\n- in shell: <code>C-c a</code><br>\n- <code>erl -pa ebin deps/*/ebin</code><br>\n- in shell: <code>application:start(numbers).</code></p>\n<p>I have the very strong *there has to be a better way* feeling.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33297555,
            "is_me_message": false,
            "last_edit_timestamp": 1420602318,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420601324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>If you have the erlang shell already open, you can run <code>l(numbers_handler).</code> after \"rebar compile\"</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325026,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420654259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>There are some plugins though that aim to do that automatically for you: </p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420654273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://github.com/rustyio/sync\" target=\"_blank\" title=\"https://github.com/rustyio/sync\">https://github.com/rustyio/sync</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420654279,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><a href=\"https://github.com/oinksoft/reloader\" target=\"_blank\" title=\"https://github.com/oinksoft/reloader\">https://github.com/oinksoft/reloader</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420654282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>I haven't used any of them, so I cannot recommend one in particular.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420654289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Regarding the \"let it crash\", it makes sense when you are writing your own processes, but when you are working with user input, you don't have much option, you need to handle the input accordingly and return the proper status code and what not</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420655030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>for example, if you are writing a command line client, you can't just crash on bad input, you need to report and act on that</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33325623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420655045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jose.valim@gmail.com\">@Jos\u00e9 Valim</span>, thank you so much for your first comment! You've saved me an awful lot of typing. </p>\n<p>Especially because <code>application:stop(numbers).</code> just silently hangs, and I'm not sure why.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33343428,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420677405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Ok, continuing my single-handed resurrection of this thread:</p>\n<p>I have a function <code>get_term/2</code> that returns tuples of the form <code>{ok, A}</code>. I am writing a function <code>n_terms/2</code> which takes N and returns an integer series up to A.N. I wrote a list comprehension:</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> \n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"k\">fun</span><span class=\"p\">({</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">A</span> <span class=\"k\">end</span><span class=\"p\">(</span><span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">))</span> <span class=\"p\">||</span> <span class=\"nv\">Y</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"p\">]}.</span>\n</pre></div>\n\n\n<p>Which does what I want it to do but also has a bit of a smell on it. I feel like there should be a way to use pattern matching to pull out the element of the tuple I'm interested in. Something like this:</p>\n<div class=\"codehilite\"><pre>    <span class=\"p\">[</span><span class=\"nv\">A</span>  <span class=\"p\">||</span> <span class=\"nv\">A</span> <span class=\"o\">&lt;-</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"nv\">Y</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"p\">].</span>\n</pre></div>\n\n\n<p>But that doesn't compile. Is a nested list comprehension the way to go here? Is there a cleaner way than what I have?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33436372,
            "is_me_message": false,
            "last_edit_timestamp": 1420832184,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420832141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>You can try this:</p>\n<div class=\"codehilite\"><pre> [A  || {ok, A} &lt;- get_term(Sequence, Y), Y &lt;- lists:seq(1, N)].\n</pre></div>\n\n\n<p>That's a comprehension with two generators. A nested comprehension would return a list of lists (which you can change to if that is what you want). Also notice we can have a pattern on the left side of \"&lt;-\". If you pass a value that does not match the pattern, it won't fail, it wll simply ignore the pattern, for example:</p>\n<div class=\"codehilite\"><pre>[X || {ok, X} &lt;- [no, no, no]]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33510016,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1420991336,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jose.valim@gmail.com\">@Jos\u00e9 Valim</span> , I'm having trouble getting that to compile in its present form. I get an error that 'Y' is unbound. And I get a different error if I switch the order of the generators. For example:</p>\n<div class=\"codehilite\"><pre><span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"nv\">A</span> <span class=\"p\">||</span> <span class=\"nv\">Y</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"nv\">A</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">].</span>\n<span class=\"o\">**</span> <span class=\"n\">exception</span> <span class=\"nn\">error</span><span class=\"p\">:</span> <span class=\"n\">bad</span> <span class=\"n\">generator</span> <span class=\"mi\">2</span>\n<span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"nv\">A</span> <span class=\"p\">||</span> <span class=\"nv\">A</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">Y</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)].</span>\n<span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"n\">variable</span> <span class=\"n\">&#39;Y&#39;</span> <span class=\"n\">is</span> <span class=\"n\">unbound</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33583173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421119040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Generators in comprehensions always expect lists on the right side. <code>A &lt;- Y+1</code> is failing because you are giving it an integer. Try this for example:</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33591365,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421133810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<div class=\"codehilite\"><pre>[A || Y &lt;- lists:seq(1, 5), A &lt;- [Y, Y + 1]].\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33591366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421133815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Ok, <code>[A  || Y &lt;- lists:seq(1, N), {ok, A} &lt;- get_term(Sequence, Y)]</code> worked. I was sure I had tried that last night but I probably mispunctuated. So it seems that generators are evaluated from left to right, and that they *can* make use of variables that were bound in preceding generators. What exactly is happening in <code>&lt;-</code>? Is it only ever used in list comprehensions? Is kind like a <code>yield</code> plus pattern-matching?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33602803,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421158196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<blockquote>\n<p>So it seems that generators are evaluated from left to right, and that they *can* make use of variables that were bound in preceding generators.</p>\n</blockquote>\n<p>Yes, exactly. The last thing about list comprehensions in Erlang is that they also support filters:</p>\n<div class=\"codehilite\"><pre>[A  || Y &lt;- lists:seq(1, N), Y rem 2 /= 0, {ok, A} &lt;- get_term(Sequence, Y)]\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33650817,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421222191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Post mortem:</p>\n<p>I had to make one final change to get it to return (and not just compile!):</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>  <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">A</span>  <span class=\"p\">||</span> <span class=\"nv\">Y</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"p\">[</span><span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">)]]}.</span>\n</pre></div>\n\n\n<p>Otherwise the second generator was producing <code>bad_generator</code>.  Remind me to write types for these before I go any further :)</p>\n<p>The fact that I had to wrap the second generator in a list indicates to me that it is simply not idiomatic to use a list comprehension here. So I redid it as a simple recursive function.</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(_,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">};</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">L</span><span class=\"p\">]).</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33659058,
            "is_me_message": false,
            "last_edit_timestamp": 1421241118,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first erlang",
            "submessages": [],
            "timestamp": 1421240818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>erlang, you keep existing, I'll keep posting in this thread! </p>\n<p>Is it possible to pass operators as funs? Eg, to write:</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span><span class=\"nv\">Prod</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">X</span> <span class=\"o\">*</span> <span class=\"nv\">Prod</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">).</span>\n</pre></div>\n\n\n<p>as some variation on</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"n\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"o\">*/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">).</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33694151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "passing operators",
            "submessages": [],
            "timestamp": 1421288263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>You can pass it as <code>fun erlang:'*'/2</code> but it is so obscure it is probably better to have the function explicit.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33726071,
            "is_me_message": false,
            "last_edit_timestamp": 1421346384,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "passing operators",
            "submessages": [],
            "timestamp": 1421346282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span> enjoying your semiregular updates. keep em coming. :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33786184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "passing operators",
            "submessages": [],
            "timestamp": 1421443165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, Patrick! Here's a good one for everybody. </p>\n<p>My integer sequences server has two endpoints. One to get the Nth term of a sequence, and one to get the first N terms of a sequence. Here's the sequential code of the second one:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">-</span><span class=\"ni\">spec</span> <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"n\">atom</span><span class=\"p\">(),</span> <span class=\"n\">non_neg_integer</span><span class=\"p\">())</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">())}.</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(_,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">};</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">L</span><span class=\"p\">]).</span>\n</pre></div>\n\n\n<p>Pretty simple - just recurse up the list until you've got as many terms as you like. Not very efficient - since none of the terms depend on each other[^1], it would be a good case to farm out calculation of terms to multiple processes and mush them together on the other side.</p>\n<p>[^1] Not strictly true for the recurrent sequences like Fibonacci, but true in the general sense.</p>\n<p>Here's my concurrent version:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">-</span><span class=\"ni\">spec</span> <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"n\">atom</span><span class=\"p\">(),</span> <span class=\"n\">non_neg_integer</span><span class=\"p\">())</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">())}.</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Tabulator_Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">numbers_sequences</span><span class=\"p\">,</span> <span class=\"n\">tabulator</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">(),</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">]),</span>\n    <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">numbers_sequences</span><span class=\"p\">,</span> <span class=\"n\">get_term</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(_,</span> <span class=\"p\">_,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nv\">N</span> <span class=\"o\">==</span> <span class=\"nv\">K</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"p\">{</span><span class=\"n\">all_terms</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">}</span>\n    <span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">numbers_sequences</span><span class=\"p\">,</span> <span class=\"n\">get_term</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">length</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">=:=</span> <span class=\"nv\">N</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Parent_Pid</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"n\">all_terms</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">};</span>\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"p\">{</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">L</span><span class=\"p\">])</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</pre></div>\n\n\n<p>Here, I start by spawning the process that will catch all the calculated terms, then I fire off a process to calculate the first term. Then I fire off processes for the rest of terms and wait to hear back from the tabulator when I'm done. </p>\n<p>The tabulator just sits and waits for its sibling processes to tell it about certain terms. (Right now I'm not actually ordering the terms, I'm just putting them all into a list).  All well and good. But I wanted to use the more idiomatic <code>spawn/1</code> style by passing in a closure rather than a MFA reference (especially since they're in the same module), so I rewrote it like this.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">-</span><span class=\"ni\">spec</span> <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"n\">atom</span><span class=\"p\">(),</span> <span class=\"n\">non_neg_integer</span><span class=\"p\">())</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">())}.</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Tabulator_Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">tabulator</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">(),</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n    <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(_,</span> <span class=\"p\">_,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nv\">N</span> <span class=\"o\">==</span> <span class=\"nv\">K</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"p\">{</span><span class=\"n\">all_terms</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">}</span>\n    <span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"nf\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n    <span class=\"n\">n_terms</span><span class=\"p\">(</span><span class=\"nv\">Tabulator_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">).</span>\n\n<span class=\"nf\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">get_term</span><span class=\"p\">(</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">length</span><span class=\"p\">(</span><span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">=:=</span> <span class=\"nv\">N</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Parent_Pid</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"n\">all_terms</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">};</span>\n<span class=\"nf\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"p\">{</span><span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">K</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">tabulator</span><span class=\"p\">(</span><span class=\"nv\">Parent_Pid</span><span class=\"p\">,</span> <span class=\"nv\">Sequence</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">L</span><span class=\"p\">])</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</pre></div>\n\n\n<p>This *does not work* and I can't tell why. To my newbie eyes it's a completely equivalent substitution, but here, whenever I make a request to my web server, the server just times out. </p>\n<p>a) Why is this happening?<br>\nb) How could I debug this?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33837165,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421547228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The problem is in this line:</p>\n<div class=\"codehilite\"><pre>Tabulator_Pid = spawn(fun() -&gt; tabulator(self(), Sequence, N) end),\n</pre></div>\n\n\n<p><code>self()</code> inside the function will refer to the spawned process. You need to get <code>self()</code> outside of the function first:</p>\n<div class=\"codehilite\"><pre>Parent = self(),\nTabulator_Pid = spawn(fun() -&gt; tabulator(Parent, Sequence, N) end),\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33885745,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421669447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, how very clever. The power of closures! Thanks again <span class=\"user-mention\" data-user-email=\"jose.valim@gmail.com\">@Jos\u00e9 Valim</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33888535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421676733,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>by the way, does that look like a reasonable way to structure that code? It was my naive implementation of concurrency so I don't know if there are better practices.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33888540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421676778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>It looks reasonable, yes. You should just use spawn_link instead of spawn, because if the child process crash, you likely want the parent to crash too, otherwise it would be waiting forever for a reply.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33925287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421752201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Yes, as it happens I noticed that and implemented last night! Now it fails immediately because the process can't get all the way back to a 500 response. I'm still wrestling with 'let it crash' - is the idea to spawn_link everywhere except at the location of the original spawn, where you wait for an exit signal and return something more orderly?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33935513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421771887,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>The \"let it crash\" is about unknowns. It is about avoiding defensive programming. For example, if you are receiving user data, you still want to validate it explicitly and give the user feedback, you don't want to let it crash.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33981264,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421850819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Let it crash for example allow you to create a TCP server that simply crashes when someone sends invalid protocol data. You don't need to worry about what to return and so on. Just let it crash, the supervisor will start a new server for you.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33981320,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421850891,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e837f6b7fd146ab16ed3d663476c063e?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Not sure if this helps. :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33981330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jose.valim@gmail.com",
            "sender_full_name": "Jos\u00e9 Valim",
            "sender_id": 6318,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421850913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>It does, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 33997463,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "My first stabs at concurrency.",
            "submessages": [],
            "timestamp": 1421870971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>While working through the <a href=\"http://chimera.labs.oreilly.com/books/1234000000726/ch06.html#CH06-INTERLUDE\" target=\"_blank\" title=\"http://chimera.labs.oreilly.com/books/1234000000726/ch06.html#CH06-INTERLUDE\">Erlang Etudes</a>:</p>\n<blockquote>\n<p>Dentists check the health of your gums by checking the depth of the \"pockets\" at six different locations around each of your 32 teeth. The depth is measured in millimeters. If any of the depths is greater than or equal to four millimeters, that tooth needs attention. (Thanks to Dr. Patricia Lee, DDS, for explaining this to me.)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35126946,
            "is_me_message": false,
            "last_edit_timestamp": 1423951056,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Today I learned",
            "submessages": [],
            "timestamp": 1423951047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4f69778c259cfc4aad446d5423467955cddc5fc9?x=x&version=1",
            "client": "website",
            "content": "<p>:D I remember the same from the <a href=\"http://chimera.labs.oreilly.com/books/1234000001642/ch06.html#CH06-ET03\" target=\"_blank\" title=\"http://chimera.labs.oreilly.com/books/1234000001642/ch06.html#CH06-ET03\">\u00c9tudes for Elixir</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 35129677,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "florian@alum.recurse.com",
            "sender_full_name": "Florian J. Breunig (he) (W1'18)",
            "sender_id": 6695,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Today I learned",
            "submessages": [],
            "timestamp": 1423957765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I wrote an <a href=\"https://github.com/subsetpark/tag_systems\" target=\"_blank\" title=\"https://github.com/subsetpark/tag_systems\">elementary cellular automaton in Erlang</a>.</p>\n<p>It handles edges by wrapping around; here's the code:</p>\n<div class=\"codehilite\"><pre><span class=\"nf\">process_state</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Rules</span><span class=\"p\">,</span> <span class=\"nv\">Out</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">Z</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">mod_nth</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">+</span><span class=\"nv\">K</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"nv\">K</span> <span class=\"o\">&lt;-</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]],</span>\n    <span class=\"nv\">R</span> <span class=\"o\">=</span> <span class=\"n\">apply_rules</span><span class=\"p\">([</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">Z</span><span class=\"p\">],</span> <span class=\"nv\">Rules</span><span class=\"p\">),</span>\n    <span class=\"n\">process_state</span><span class=\"p\">(</span><span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"nv\">Rules</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">R</span><span class=\"p\">|</span><span class=\"nv\">Out</span><span class=\"p\">],</span> <span class=\"nv\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">).</span>\n</pre></div>\n\n\n<p>where <code>mod_nth</code> basically implements modular arithmetic in <code>lists:nth</code>, indexing into the list and wrapping around to the beginning if we reach past the end, or to the end if we reach past the end. It grabs the Nth, N-1th, and N+1th elements and passes them to a function which matches them to the correct neighborhood rule and sticks the output onto the new generation.</p>\n<p>Maybe it's just because it's 1-indexed, but I feel dirty putting lists:nth into the inner loop of my program. Originally I was pattern-matching on <code>[X, Y, Z|State]</code> and consuming the list that way, but that meant that I had to bend over backwards to access the last element when <code>N == 0</code>, or the first element when <code>N == length(State)</code>. Pattern-matching feels much more idiomatic but I can't see how to make it work here. Is there a better way that what I've currently got to iterate through the cells in the state, with the added requirement of wrapping around at the beginning and end of the iteration? </p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 41700878,
            "is_me_message": false,
            "last_edit_timestamp": 1435516627,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "performance: indexing into a list",
            "submessages": [],
            "timestamp": 1435516611,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/43629df76ff51972188919f392a50fccf6233dfb?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Neato, just learned tail-call recursion and the reason for tail-call recursion elimination.  Two versions of a function to create a list with element S repeated N times:</p>\n<div class=\"codehilite\"><pre><span class=\"go\">% normal recursive version</span>\n<span class=\"go\">duplicate(0, _) -&gt; [];</span>\n<span class=\"go\">duplicate(N, S) when N &gt; 0 -&gt; [S|duplicate(N - 1, S)].</span>\n\n<span class=\"go\">% tail-call recursive version</span>\n<span class=\"go\">duplicate2(N, S) -&gt; duplicate2(N, S, []).</span>\n\n<span class=\"go\">duplicate2(0, _, Acc) -&gt; Acc;</span>\n<span class=\"go\">duplicate2(N, S, Acc) when N &gt; 0 -&gt; duplicate2(N - 1, S, [S|Acc]).</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44680670,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jamesmlee@gmail.com",
            "sender_full_name": "James M Lee (F1'15)",
            "sender_id": 8477,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Today I learned",
            "submessages": [],
            "timestamp": 1439842082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/43629df76ff51972188919f392a50fccf6233dfb?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>rlwrap is a beautiful thing, but is eating ^G, anyone get good readline support going for the repl?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 44904168,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jamesmlee@gmail.com",
            "sender_full_name": "James M Lee (F1'15)",
            "sender_id": 8477,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "readline support",
            "submessages": [],
            "timestamp": 1440015151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/43629df76ff51972188919f392a50fccf6233dfb?x=x&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Nested loops, an evolution:</p>\n<div class=\"codehilite\"><pre>-module(nested_loops).\n-export([pair_list_list/2, pair_e_list/2, pair_list_list2/2, pair_e_list2/2, pair_list_list3/2, pair_list_list4/2]).\n\npair_list_list(List1, List2) -&gt;\n    pair_list_list(List1, List2, []).\n\npair_list_list([], _, Acc) -&gt;\n    Acc;\npair_list_list(List1, List2, Acc) -&gt;\n    [E|Rest] = List1,\n    Acc2 = pair_e_list(E, List2, Acc),\n    pair_list_list(Rest, List2, Acc2).\n\npair_e_list(E, List) -&gt;\n    pair_e_list(E, List, []).\n\npair_e_list(_, [], Acc) -&gt;\n    Acc;\npair_e_list(E, List, Acc) -&gt;\n    [F|Rest] = List,\n    pair_e_list(E, Rest, [{E,F}|Acc]).\n\npair_list_list2(List1, List2) -&gt;\n    lists:map(fun(E) -&gt; pair_e_list2(E, List2) end, List1).\n\npair_e_list2(F, List) -&gt;\n    lists:map(fun(E) -&gt; {F,E} end, List).\n\npair_list_list3(List1, List2) -&gt;\n    lists:map(\n        fun(E) -&gt; lists:map(\n                fun(F) -&gt; {F, E} end,\n                List2\n            )\n        end,\n        List1\n    ).\n\npair_list_list4(List1, List2) -&gt;\n    [{X, Y, Z} || X &lt;- List1, Y &lt;- List2].\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 45118908,
            "is_me_message": false,
            "last_edit_timestamp": 1440186588,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "jamesmlee@gmail.com",
            "sender_full_name": "James M Lee (F1'15)",
            "sender_id": 8477,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Today I learned",
            "submessages": [],
            "timestamp": 1440186554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/uWM6lq8X7kU04IyBvO2WAzk5/screen-shot-2015-09-25-at-175353.png\" target=\"_blank\" title=\"screen-shot-2015-09-25-at-175353.png\">screen-shot-2015-09-25-at-175353.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/uWM6lq8X7kU04IyBvO2WAzk5/screen-shot-2015-09-25-at-175353.png\" target=\"_blank\" title=\"screen-shot-2015-09-25-at-175353.png\"><img src=\"/user_uploads/13/uWM6lq8X7kU04IyBvO2WAzk5/screen-shot-2015-09-25-at-175353.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 47552561,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "new channel topic",
            "submessages": [],
            "timestamp": 1443218069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>I recently started to experiment with Erlang. Coming from a Clojure/Prolog background, the language seems comfortable so far, but I'm eager to get a better understanding of how the language diverges from other declarative/functional languages, especially in terms of application architecture. Does anyone have any ideas for small (~200-500 line) projects I could use to get my hands dirty? I plan to pair with an experienced Erlang dev on game of life this week, but I'm not sure where to go after. I have a strong interest in the language's approach towards concurrency.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102697724,
            "is_me_message": false,
            "last_edit_timestamp": 1477507479,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477507459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>A networked chat system could be fun.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102698441,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477508706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>@Alan O'Donnell Yes, I eventually hope to build a IRC server, but I'm concerned that that might be too big of an undertaking this early on.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102698594,
            "is_me_message": false,
            "last_edit_timestamp": 1477508995,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477508976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cc8143c4a09981835e0d490b4627ffc0cd2baa37?x=x&version=2",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>what about a simplified version? a mock IRC protocol or something</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102698660,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "andrea@orru.io",
            "sender_full_name": "Andrea Orru (he) (m1'18)",
            "sender_id": 100195,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477509055,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6d5e5a94fd7ae55388dd64dbf4da7b2732b8348e?x=x&version=1",
            "client": "website",
            "content": "<p>That is true, chat is the \"hello world\" in Elixir's Phoenix Framework</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102698671,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "juliano.solanho@gmail.com",
            "sender_full_name": "Juliano Bortolozzo Solanho (he) (F1'16)",
            "sender_id": 100035,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477509095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>Worker pool is not trivial but a good challenge. I can send you some books that cover them and other related things.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102699326,
            "is_me_message": false,
            "last_edit_timestamp": 1477510279,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477510263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p>well put, <span class=\"user-mention\" data-user-email=\"juliano.solanho@gmail.com\">@Juliano Bortolozzo Solanho (F1'16)</span> </p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102699474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477510535,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ds2643@columbia.edu\">@David Shaked (W2'16)</span> , game of life / cellular automata is a fun project to get your feet wet with Erlang (mostly because pattern matching makes it really elegant), but I agree that in order to get a feel for application layout, you want to get something multiprocess going. Setting up chat should be simpler than you think, really. Especially if you keep it all on one machine at first.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102701966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477514770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span> <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> I'll give chat a shot!</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102706612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477523744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>BTW: Here's my cellular systems project in Erlang. <a href=\"https://github.com/subsetpark/systems\" target=\"_blank\" title=\"https://github.com/subsetpark/systems\">https://github.com/subsetpark/systems</a> I'm no expert so don't use it as a style guide or anything.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102741521,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477595717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ff22292433214ccd87cf6ff9ae34e54ac477eab8?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span> That's funny! I actually found your project a few days ago surfing github without knowing you'd done it. Really impressive.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102745434,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "ds2643@columbia.edu",
            "sender_full_name": "David Shaked (W2'16)",
            "sender_id": 8995,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477602215,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Oh gosh, thanks so much. It was a blast to write.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102756065,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1477624140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>How do I manage packages and dependencies in erlang? </p>\n<p>I'm used to Python, which has <code>pip</code>. So if I want to include a python library in my runtime, I will <code>pip install</code> it; if I want to install a python binary, I can use <code>pip install</code>; and when I am developing locally I run <code>pip install -r requirements.txt</code> to make sure I have the proper versions of all the libraries.</p>\n<p>What are the equivalent flows, if any, with erlang? All the libraries I'm interested in seem to end up recommending I clone their github repo. I am aware of the existence of <code>rebar</code> and <code>rebar3</code> but honestly have no idea how to use them.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102756161,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "package management in erlang",
            "submessages": [],
            "timestamp": 1477624342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>Haven't ever used it as Elixir nails the modern dev tools experience down perfectly, but <a href=\"https://hex.pm/docs/rebar3_usage\" target=\"_blank\" title=\"https://hex.pm/docs/rebar3_usage\">this guide</a> at least makes it look like it's simple? Hex is Elixir's and apparently know Erlang's package manager.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102757551,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "package management in erlang",
            "submessages": [],
            "timestamp": 1477627690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Huh, ok. That seems pretty straightforward and similar to the above. So Hex is the standard package repository for erlang these days, too? People treat it like Python people treat PyPI?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102771733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "package management in erlang",
            "submessages": [],
            "timestamp": 1477663025,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p>I guess so! I only know of Hex because of Elixir, but a few weeks ago I found out they do Erlang libraries as well. A lot of Elixir libraries depend on Erlang ones so it makes sense. I'm not sure if they have everything you may find on GitHub but it seems they have a decent selection. But yes, Hex is Elixir's (and I guess now Erlang's) PyPI.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 102771813,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "package management in erlang",
            "submessages": [],
            "timestamp": 1477663192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I can now report back on this:</p>\n<p>The sane way (if not as standard as pip) is to use rebar3 to create a new app, and add package names and versions into the <code>deps</code> section of <code>rebar.config</code>. </p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103437297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "package management in erlang",
            "submessages": [],
            "timestamp": 1479151078,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Crossposted from <code>victory</code>, here's a web app I wrote to power my website:</p>\n<p><a href=\"http://chiselapp.com/user/subsetpark/repository/poem_server/home\" target=\"_blank\" title=\"http://chiselapp.com/user/subsetpark/repository/poem_server/home\">http://chiselapp.com/user/subsetpark/repository/poem_server/home</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 103471145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "archy - shitty poem generator",
            "submessages": [],
            "timestamp": 1479221326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f2793e7c0de9bb00c6c88c585bc865c5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am getting started with Erlang. All these time I was writing snippets from <code>learnyousomeerlang</code>. I want to search the documentation for the function <code>rr</code>. I used <code>rr</code> only inside the shell so far. I didn't know in which module it's defined in. So duckduckgo/google <code>erlang rr function</code> takes it to the proper documentation page.</p>\n<p>The <a href=\"http://erlang.org/doc/\" target=\"_blank\" title=\"http://erlang.org/doc/\">doc</a> page doesn't have top search by like <a href=\"https://docs.python.org/3/index.html\" target=\"_blank\" title=\"https://docs.python.org/3/index.html\">Python Docs</a> or <a href=\"https://doc.rust-lang.org/std/net/struct.UdpSocket.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/net/struct.UdpSocket.html\">rust doc</a>. Accidentally I found the <a href=\"http://erlang.org/doc/search/\" target=\"_blank\" title=\"http://erlang.org/doc/search/\">search</a>. The result for <code>rr(</code> and <code>rr</code> in the search box didn't yield the expected result - Link to rr function documentation.</p>\n<ul>\n<li>What am I missing here?</li>\n<li>What is the canonical way?</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104040396,
            "is_me_message": false,
            "last_edit_timestamp": 1480462476,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "me@kracekumar.com",
            "sender_full_name": "Kracekumar R (F2'16)",
            "sender_id": 100188,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Documentation search",
            "submessages": [],
            "timestamp": 1480462387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"me@kracekumar.com\">@Kracekumar R (F2'16)</span> Ordinarily I would point you to <a href=\"http://erldocs.com\" target=\"_blank\" title=\"http://erldocs.com\">erldocs.com</a> - it's the Erlang docs with a nicer web UI. However in this case it's just a bit of bad luck, because <code>rr</code> actually isn't a function; it's a shell command. You can see all of them here - <a href=\"http://erlang.org/doc/man/shell.html\" target=\"_blank\" title=\"http://erlang.org/doc/man/shell.html\">http://erlang.org/doc/man/shell.html</a> - they are not elements of the erlang language, just the erlang shell.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104043684,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Documentation search",
            "submessages": [],
            "timestamp": 1480469002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f2793e7c0de9bb00c6c88c585bc865c5?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zd@zdsmith.com\">@Zach Smith (W'14)</span> That makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104043906,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "me@kracekumar.com",
            "sender_full_name": "Kracekumar R (F2'16)",
            "sender_id": 100188,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Documentation search",
            "submessages": [],
            "timestamp": 1480469463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9a33b8d32ab77c0c2f9524cc1ef74e4f?d=identicon&version=1",
            "client": "website",
            "content": "<p>In section 2.1. of <a href=\"http://erlang.org/doc/apps/erts/communication.html\" target=\"_blank\" title=\"http://erlang.org/doc/apps/erts/communication.html\">http://erlang.org/doc/apps/erts/communication.html</a>, I read the following interesting thing about guarantees on message ordering between Erlang nodes:</p>\n<p>\"The only signal ordering guarantee given is the following: if an entity sends multiple signals to the same destination entity, the order is preserved; that is, if A sends a signal S1 to B, and later sends signal S2 to B, S1 is guaranteed not to arrive after S2.\"</p>\n<p>My question is, how is this guarantee possible/how does it provide this guarantee if the entities are communicating across a network?<br>\nIt would make more sense to me if the guarantee is that  B will consume/process events from A in the order in which they were sent (regardless of the order in which they arrive).</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104153197,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "granders@gmail.com",
            "sender_full_name": "Geoff Anderson (W1'16)",
            "sender_id": 100332,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "message ordering in Erlang",
            "submessages": [],
            "timestamp": 1480696328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9a33b8d32ab77c0c2f9524cc1ef74e4f?d=identicon&version=1",
            "client": "website",
            "content": "<p>E.g. say S1 is dropped/lost, and S2 arrives first at B. Then will B hold on to S2 in some buffer and block in some fashion until it receives and processes S1 before moving on to S2?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104153582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "granders@gmail.com",
            "sender_full_name": "Geoff Anderson (W1'16)",
            "sender_id": 100332,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "message ordering in Erlang",
            "submessages": [],
            "timestamp": 1480697028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"granders@gmail.com\">@Geoff Anderson (W1'16)</span> isn't the guarantee you're describing (\"B will consume/process events from A in the order in which they were sent (regardless of the order in which they arrive\") the same as described in the docs?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104240398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "message ordering in Erlang",
            "submessages": [],
            "timestamp": 1480907963,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd016afc5e2d346a0eee00bb0268c2b33da824d5?x=x&version=1",
            "client": "website",
            "content": "<p>I believe the scenario you're describing is how it works:<br>\n - S1 is sent, and lost<br>\n - S2 is sent, and arrives at B<br>\n - B notices (e.g. with message numbering) that S2 is not the next message it should have received from A. It waits for an earlier message from A<br>\n - A notices that S1 has been lost, and resends it<br>\n - B receives S1 and processes it, then processes S2</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104240490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "amindfv@gmail.com",
            "sender_full_name": "Tom Murphy (F2'15)",
            "sender_id": 8693,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "message ordering in Erlang",
            "submessages": [],
            "timestamp": 1480908136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6d5e5a94fd7ae55388dd64dbf4da7b2732b8348e?x=x&version=1",
            "client": "website",
            "content": "<p>Distribuited Erlang uses TCP, from what I gather, so A-&gt;S1-&gt;B being lost and A-&gt;S2-&gt;B being accepted wouldn't really happen, no? Sounds to me kinda like downloading a file and it's contents being out of order. Is that possible in TCP? If it's not, I'd assume S1 arriving before S2 is impossible too.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104258129,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "juliano.solanho@gmail.com",
            "sender_full_name": "Juliano Bortolozzo Solanho (he) (F1'16)",
            "sender_id": 100035,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "message ordering in Erlang",
            "submessages": [],
            "timestamp": 1480950692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f2793e7c0de9bb00c6c88c585bc865c5?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a project with <code>ct</code> and <code>eunit</code> tests and run the command<code>rebar3 ct; and rebar3 eunit; and rebar3 cover -v</code>(fish shell syntax) to run all tests and display cover data in the shell. The cover data output looks like</p>\n<div class=\"codehilite\"><pre><span></span>===&gt; Performing cover analysis...\n  |------------------------|------------|\n  |                module  |  coverage  |\n  |------------------------|------------|\n  |              edht_app  |        0%  |\n  |              edht_sup  |       21%  |\n  |                   sup  |        0%  |\n  |------------------------|------------|\n  |                 total  |        7%  |\n  |------------------------|------------|\n  coverage calculated from:\n    /media/user/code/edht/_build/test/cover/eunit.coverdata\n    /media/user/code/edht/_build/test/cover/ct.coverdata\n  cover summary written to: /media/user/code/edht/_build/test/cover/index.html\n</pre></div>\n\n\n<p>The <code>index.html</code> has a hyperlink to the source files under <code>&lt;type&gt;_summary</code>. The HTML file displaying source code uses red color to say the line non-tested and black color lines to denote tested.</p>\n<p>I am looking for a tool/options to provide the lines numbers for missing statements in the command line. What is the suggested tool/plugin/method? <a href=\"/user_uploads/13/rgdcs9TCbmsdA8aWkKdd-4N4/erlang_cover_html.png\" target=\"_blank\" title=\"erlang_cover_html.png\">erlang_cover_html.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/rgdcs9TCbmsdA8aWkKdd-4N4/erlang_cover_html.png\" target=\"_blank\" title=\"erlang_cover_html.png\"><img src=\"/user_uploads/13/rgdcs9TCbmsdA8aWkKdd-4N4/erlang_cover_html.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104823818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "me@kracekumar.com",
            "sender_full_name": "Kracekumar R (F2'16)",
            "sender_id": 100188,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Coverage tool",
            "submessages": [],
            "timestamp": 1482192697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone,<br>\nI just posted on <a href=\"https://recurse.zulipchat.com/#narrow/near/106801478/stream/elixir/topic/unit.20testing\" target=\"_blank\" title=\"https://recurse.zulipchat.com/#narrow/near/106801478/stream/elixir/topic/unit.20testing\">unit-testing Generic Servers</a> in the Elixir stream. The same goes for Generic Servers in Erlang so thought it'd be a shame to miss it here.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 106802804,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Testing Generic Servers",
            "submessages": [],
            "timestamp": 1486417413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3cfe3facb74ad3aef7c326f8d822ae1967b9c6cd?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, just wanted to let anyone new to NYC know about the Erlang NYC meet up.  I used to go regularly and thought it was great.  There's one coming up next week: <a href=\"https://www.meetup.com/Erlang-NYC/events/238598657/\" target=\"_blank\" title=\"https://www.meetup.com/Erlang-NYC/events/238598657/\">https://www.meetup.com/Erlang-NYC/events/238598657/</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108861169,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joseph.yiasemides13@alumni.imperial.ac.uk",
                        "full_name": "Joseph George Yiasemides (he) (SP1'17)",
                        "id": 100508
                    },
                    "user_id": 100508
                }
            ],
            "recipient_id": 22629,
            "sender_email": "berke.alexandra@gmail.com",
            "sender_full_name": "Alex Berke (she) (S2'19)",
            "sender_id": 100510,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Erlang NYC Meetup",
            "submessages": [],
            "timestamp": 1490647048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am looking at a template for the gen_statem and one of the function returns:<br>\n<code>{ok, Pid :: pid()}</code></p>\n<p>While I understand that effectively this means a 2-tuple of <code>ok</code> and the pid, but what is the purpose of naming the result of <code>pid()</code> ?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113278363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Erlang syntax",
            "submessages": [],
            "timestamp": 1499904182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry, my bad. This is in the <code>-spec</code> declaration. So that clears the confusion.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113278378,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Erlang syntax",
            "submessages": [],
            "timestamp": 1499904212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah: regardless though... those dialyzer declarations often seen redundant (sometimes they're helpful when you want to communicate the difference between parameters that have the same type but even so we have the variable names in the function head for that).</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 113303278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Erlang syntax",
            "submessages": [],
            "timestamp": 1499961402,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e092a1150b4f46e5b8388fcc0467589?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hey all, I'm having a tough time getting a child_spec to work for a <code>simple_one_to_one</code> supervisor strategy.</p>\n<p>When calling start_link on my supervisor, I get the following error: </p>\n<div class=\"codehilite\"><pre><span></span>** exception exit: {bad_start_spec,#{id =&gt; game_server,\n                                     modules =&gt; [game_server],\n                                     restart =&gt; transient,shutdown =&gt; brutal_kill,\n                                     start =&gt; {game_server,start_link,[]},\n                                     type =&gt; worker}}\n</pre></div>\n\n\n<p>However, when I pass the same child_spec to <code>supervisor:check_childspecs</code> I get <code>ok</code> which signals to me that the specification is correct. Any ideas as to what the issue could be?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114166438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "sgrshah@gmail.com",
            "sender_full_name": "Sagar Shah (S2'17)",
            "sender_id": 101477,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "supervisor start_spec",
            "submessages": [],
            "timestamp": 1501782688,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e092a1150b4f46e5b8388fcc0467589?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh shoot, found the issue. The supervisor module's init needs to return a list of child_specs, not just one. Wrapping in a list did the trick.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114166963,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "simple_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joseph.yiasemides13@alumni.imperial.ac.uk",
                        "full_name": "Joseph George Yiasemides (he) (SP1'17)",
                        "id": 100508
                    },
                    "user_id": 100508
                }
            ],
            "recipient_id": 22629,
            "sender_email": "sgrshah@gmail.com",
            "sender_full_name": "Sagar Shah (S2'17)",
            "sender_id": 101477,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "supervisor start_spec",
            "submessages": [],
            "timestamp": 1501783528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Hey everyone!</p>\n<p>I came accross this: <a href=\"http://propertesting.com/\" target=\"_blank\" title=\"http://propertesting.com/\">http://propertesting.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114762875,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44c",
                    "emoji_name": "ok_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jo.chasinga@gmail.com",
                        "full_name": "Joe Chasinga (S2'17)",
                        "id": 101482
                    },
                    "user_id": 101482
                },
                {
                    "emoji_code": "1f44c",
                    "emoji_name": "ok_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sgrshah@gmail.com",
                        "full_name": "Sagar Shah (S2'17)",
                        "id": 101477
                    },
                    "user_id": 101477
                },
                {
                    "emoji_code": "1f44c",
                    "emoji_name": "ok_hand",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "indradhanush.gupta@gmail.com",
                        "full_name": "Indradhanush Gupta (he) (S1'17)",
                        "id": 101105
                    },
                    "user_id": 101105
                }
            ],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Property Based Testing Resources",
            "submessages": [],
            "timestamp": 1503054411,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>Which of these is more idiomatic in Erlang for declaring the <code>spec</code> of a function?</p>\n<div class=\"codehilite\"><pre><span></span>-spec follower(atom(), atom(), metadata()) -&gt; gen_statem:event_handler_result().\nfollower(timeout, ticker, #metadata{name = Name} = Data) when is_atom(Name) -&gt;\n    %% Start an election\n    log(&quot;timeout&quot;, Data, []),\n    {\n        next_state,\n        candidate,\n        Data#metadata{votes = [], voted_for = null},\n        [get_timeout_options(0)]\n    };\n</pre></div>\n\n\n<p><strong>VS</strong></p>\n<div class=\"codehilite\"><pre><span></span>-spec follower(timeout, ticker, metadata()) -&gt; {next_state, candidate,\n                                                metadata(), [{timeout, integer(), ticker}]}.\nfollower(timeout, ticker, #metadata{name = Name} = Data) when is_atom(Name) -&gt;\n    %% Start an election\n    log(&quot;timeout&quot;, Data, []),\n    {\n        next_state,\n        candidate,\n        Data#metadata{votes = [], voted_for = null},\n        [get_timeout_options(0)]\n    };\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134045510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Idiomatic Erlang",
            "submessages": [],
            "timestamp": 1537086045,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>It's common to declare a type then use it in the spec... I'd say the second leans toward the idiom</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134087395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Idiomatic Erlang",
            "submessages": [],
            "timestamp": 1537172510,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'd agree. If your function only takes specific atoms then it is not the case that it can take any atom. Dialyzer also has a higher likelihood of finding breakage if you are as specific as possible about the data you expect.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134101066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Idiomatic Erlang",
            "submessages": [],
            "timestamp": 1537191693,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p>This makes sense. Thank you folks! <span class=\"emoji emoji-1f607\" title=\"innocent\">:innocent:</span></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134117030,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Idiomatic Erlang",
            "submessages": [],
            "timestamp": 1537207640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, I realize I didn't explain at all, like Nick said... and also we tend to use Dialyzer to make code more expressive. Declaring a <code>-type</code> helps do that and more often than not it keeps the <code>-spec</code> shorter too because we don't have to spell out the return type.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134151219,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "indradhanush.gupta@gmail.com",
                        "full_name": "Indradhanush Gupta (he) (S1'17)",
                        "id": 101105
                    },
                    "user_id": 101105
                }
            ],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Idiomatic Erlang",
            "submessages": [],
            "timestamp": 1537257048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/17ef591b05100649a72a6820c2155579?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Silly question probably \u2013\u00a0I'm about 10 minutes into learning Erlang, and I've become distracted by the following:</p>\n<div class=\"codehilite\"><pre><span></span>a == a.  % true\na =:= a.  % true\nA = a.\nA == a.  % false\nB = a.\nA =:= B.  % true\n</pre></div>\n\n\n<p>It looks like we're always talking about the same atom <code>a</code> here. So I'm surprised that <code>A == a.</code> is <code>false</code>. Is the problem that I'm trying to compare a variable to an atom?</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160904536,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "rileyjshaw@gmail.com",
            "sender_full_name": "Riley J Shaw (they/he) (W'14)",
            "sender_id": 5033,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "atom equality?",
            "submessages": [],
            "timestamp": 1552677133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I think you might have had a mistype :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160922596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "atom equality?",
            "submessages": [],
            "timestamp": 1552693150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span>Eshell V10.0.3  (abort with ^G)\n1&gt; A = a.\na\n2&gt; A == a.\ntrue\n3&gt; A =:= a.\ntrue\n4&gt;\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 160922597,
            "is_me_message": false,
            "last_edit_timestamp": 1552693163,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "atom equality?",
            "submessages": [],
            "timestamp": 1552693154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Hello! For NGW I'm looking to make a tiny little Erlang-style system with a Lisp syntax. There's an implementation idea I'd like to explore: representing the heap data in a compressed way taking advantage of immutability. (Typically functional languages do have some mutability behind the scenes, e.g. Haskell's lazy evaluation makes for updates to thunks at runtime. Erlang is unusual in really not changing anything once allocated.)<br>\n<span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (F1'16)</span> just pointed out there could be other angles to explore on taking advantage of this. I'd like to chat or collaborate if anyone's interested.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165541568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1557762986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Previously I made <a href=\"https://github.com/darius/elv\" target=\"_blank\" title=\"https://github.com/darius/elv\">https://github.com/darius/elv</a> which is even more of a toy -- this new one is hoping to be vaguely usable.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 165542397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1557763509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Related to this, what are some of your favorite small Erlang programs to read? I'm interested in porting a couple to the small Erlang-style language I posted about in another thread last week.<br>\nI thought I someone at RC had made a BitTorrent client in Erlang years ago, but I couldn't find any sign of it.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166204196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1558466712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry I missed this earlier; I'm definitely interested in this.  There are actually a lot of BEAM variations that I think would be very interesting to experiment with.  Compressed and succinct representations of things could be very interesting... one variant I have wanted to make is the same scheduling model, but using performance counters instead of reductions.  Let us know what you end up doing!</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166709548,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559045451,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't have any good suggestions here, although my first thought was some of Robert Virding's recent projects, like erlog.  All the big names in Erlang have written interesting code worth reading, but I can't think of many small, standalone programs that would be interesting to port.  I would check out code by Virding, Joe Armstrong, Richard Carlsson, Lukas Larsson; there should be something suitable.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166711279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559046870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I've got a little interpreter running tiny example programs, but it's going to be a while longer before the examples are interesting enough to take some interesting data with. I'll post here when it gets there -- nice to have some encouragement. :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166729691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>By the way lol, I always thought a fun name for a toy Erlang VM would be MOTE: <a href=\"https://en.wikipedia.org/wiki/The_Mote_and_the_Beam\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/The_Mote_and_the_Beam\">https://en.wikipedia.org/wiki/The_Mote_and_the_Beam</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730047,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f600",
                    "emoji_name": "grinning",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 22629,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>And yeah, there should be some other variations to explore. How about sort-of-Smalltalk-style persistence? You could make snapshots of system state and write them out incrementally, without as much overhead from a write barrier as you'd see in a mutation-heavy system.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Ha!</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730159,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I had the notion of calling it Dinklage after another compact actor, though I don't think I'd have really gone there. MOTE is much better.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730284,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Haha :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730312,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559058823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Thanks, I'll search on those! One thing I found earlier was <a href=\"https://joearms.github.io/published/2013-11-21-My-favorite-erlang-program.html\" target=\"_blank\" title=\"https://joearms.github.io/published/2013-11-21-My-favorite-erlang-program.html\">https://joearms.github.io/published/2013-11-21-My-favorite-erlang-program.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166730827,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559059068,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>One other thing about the BEAM that I feel is worth exploring outside of Erlang itself is the way that processes are like regions from a memory management perspective; a common pattern is to create processes with heaps sized such that GC never happens before the whole process is thrown away (or processes that live forever).  Porting some region-oriented application from another language to an Erlang-like VM with this property could be useful to highlight it, and maybe explore variations on how this could be used.  Maybe explicitly long-lived processes could persist their heaps to disk (as you mentioned in the Smalltalk case) using something like an LSM-tree, and explicitly short-lived processes could be optimized for that case (how much GC mechanism overhead can be avoided if you're explicit about the fact that fallback to GC is a failure case instead of an inevitability?).</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166738448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559064000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hopefully it takes you a while to do some of this since I now also want to experiment with a bunch of these ideas and definitely don't have time right now. :-)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 166738532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "A toy Erlang-like VM",
            "submessages": [],
            "timestamp": 1559064033,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>There's a pure Erlang (no OTP) Web server that Joe wrote a long time ago. I can't find it tho. IIRC it was on his university page or an old Ericsson page. I reckon it's a few pages of pretty dense Erlang w/ processes, sockets, lists... that kind of thing. Let me know if you're interested &amp; also can't find it. I just don't have time to look thoroghly today</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167113722,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559467071,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Didn't find it right away, though this <a href=\"https://gist.github.com/ishankhare07/7ae50a9463caa799be36\" target=\"_blank\" title=\"https://gist.github.com/ishankhare07/7ae50a9463caa799be36\">giant list of Erlang links</a> did come up for me to grovel through later.<br>\nThat search also brought up old Joe Armstrong tweets, which makes me kind of sad. I wish I hadn't skipped a chance to meet him.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167128353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559492598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100508\">@Joseph George Yiasemides (SP1'17)</span> this looks like the webserver you brought up: <a href=\"https://web.archive.org/web/20150905064951/https://www.sics.se/~joe/tutorials/web_server/web_server.html\" target=\"_blank\" title=\"https://web.archive.org/web/20150905064951/https://www.sics.se/~joe/tutorials/web_server/web_server.html\">https://web.archive.org/web/20150905064951/https://www.sics.se/~joe/tutorials/web_server/web_server.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167150591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559529721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Yes! That one. You can download the whole listing :)</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167500600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559840840,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Also it turns out... wait for it... <a href=\"http://www1.erlang.org/examples.html\" target=\"_blank\" title=\"http://www1.erlang.org/examples.html\">http://www1.erlang.org/examples.html</a> is pretty good.</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167501529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559841502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "website",
            "content": "<p>Interesting... I'm surprised I haven't come across that before</p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 167577866,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 22629,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "small project ideas?",
            "submessages": [],
            "timestamp": 1559915365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hey! I figured people in this channel would be interested to know that Robert Virding will be a guest at the elixir meetup this Tuesday talking about luerl (a sandboxed implementation of Lua that runs in the erlang vm):</p>\n<p>Join me at NYC Elixir November: Shell Scripting and Luerl</p>\n<p><a href=\"http://meetu.ps/e/Hpy4V/kqHPv/a\" target=\"_blank\" title=\"http://meetu.ps/e/Hpy4V/kqHPv/a\">http://meetu.ps/e/Hpy4V/kqHPv/a</a></p>",
            "content_type": "text/html",
            "display_recipient": "erlang",
            "flags": [
                "read",
                "historical"
            ],
            "id": 180967952,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joseph.yiasemides13@alumni.imperial.ac.uk",
                        "full_name": "Joseph George Yiasemides (he) (SP1'17)",
                        "id": 100508
                    },
                    "user_id": 100508
                }
            ],
            "recipient_id": 22629,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 20278,
            "subject": "Erlang Co creator Robert Virding at elixir meetup next Tu...",
            "submessages": [],
            "timestamp": 1574016820,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
