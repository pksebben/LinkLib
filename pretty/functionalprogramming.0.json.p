{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>First post hype!!!</p>\n<p>Posting a sample exercise about equational reasoning and its uses in functional programming. I've taken this from my notes as an instructor and student for Indiana University's \"Advanced Functional Programming Course\".</p>\n<p>Consider the following definitions of <code>append</code> and <code>rev</code> in Haskell (one can, however, do this in any functional language).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">append</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">append</span> <span class=\"kt\">[]</span>     <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n<span class=\"nf\">append</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"p\">(</span><span class=\"n\">append</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"p\">)</span>\n\n<span class=\"nf\">rev</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">rev</span> <span class=\"kt\">[]</span>     <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n<span class=\"nf\">rev</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">append</span> <span class=\"p\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>This implementation of <code>rev</code> works quite well for smaller sized lists. However, on larger lists, its performance suffers quite a bit (due to the fact that it also calls another recursively defined function, <code>append</code>).</p>\n<p>We can improve its performance using \"equational reasoning\" to remove the dependency of <code>rev</code> on <code>append</code>. First, let's define a function that takes two lists, reverses the first list and then appends the two lists together.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">appendRev</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">appendRev</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">append</span> <span class=\"p\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span>\n</pre></div>\n\n\n<p><strong>Exercises</strong>:</p>\n<p>As an example, I've included the solution to the first exercise.</p>\n<p>1. Calculate <code>appendRev [] ys</code> for any list <code>ys</code>. Use substitution.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">appendRev</span> <span class=\"kt\">[]</span> <span class=\"n\">ys</span>\n<span class=\"o\">==</span> <span class=\"n\">append</span> <span class=\"p\">(</span><span class=\"n\">rev</span> <span class=\"kt\">[]</span><span class=\"p\">)</span> <span class=\"n\">ys</span>       <span class=\"p\">(</span><span class=\"n\">def</span> <span class=\"kr\">of</span> <span class=\"n\">appendRev</span><span class=\"p\">)</span>\n<span class=\"o\">==</span> <span class=\"n\">append</span> <span class=\"kt\">[]</span> <span class=\"n\">ys</span>             <span class=\"p\">(</span><span class=\"n\">def</span> <span class=\"kr\">of</span> <span class=\"n\">rev</span><span class=\"p\">)</span>\n<span class=\"o\">==</span> <span class=\"n\">ys</span>                       <span class=\"p\">(</span><span class=\"n\">def</span> <span class=\"kr\">of</span> <span class=\"n\">append</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>2. Calculate <code>appendRev (x:xs) ys</code> in a similar manner.<br>\n3. Reimplement <code>appendRev</code> using (1) and (2).<br>\n4. Reimplement <code>rev</code> to use <code>appendRev</code> from (3).</p>\n<p>To see this in action, open a GHCi repl, then type the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">*&gt;</span> <span class=\"kt\">:</span><span class=\"n\">set</span> <span class=\"o\">+</span><span class=\"n\">s</span>\n</pre></div>\n\n\n<p>Then run <code>rev</code> on a large list (e.g. <code>[1..5000]</code>). Compare the time it took to complete the computation using the two implementations of <code>rev</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107141079,
            "is_me_message": false,
            "last_edit_timestamp": 1487188205,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jose.evelio.martinez.saiz@gmail.com",
                        "full_name": "Jose Evelio Martinez Saiz (SP1'17)",
                        "id": 100529
                    },
                    "user_id": 100529
                }
            ],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487091829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is SO interesting! It's taking me ages though and I'm not even sure I'm on the right track.<br>\nIn exercise 2 is <code>appendRev (x:xs) ys</code> equal to  <code>append (rev xs) ys</code>? I arrived to this using the definition of <code>appendRev</code> and the fact that <code>(x:xs)</code> gets passed as <code>xs</code> (since <code>:</code> is <code>cons</code>ing <code>x</code> and <code>xs</code> I think...)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107157763,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487121754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>But... even if it is like that (and I doubt I applied correctly <code>(x:xs)</code>) then how are you supposed to break out of the recursion using the base case in the next step? Because <code>append</code> will continue to get the first item out, but with equational reasoning we don't know how many items a collection has. I think I'm missing something.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107157869,
            "is_me_message": false,
            "last_edit_timestamp": 1487122145,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487122070,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>That is... unless <code>appendRev (x:xs) ys</code> on the first substitution passage gives <code>append (rev [x]) ys</code>, but then I don't understand what <code>(x:xs)</code> means and gives back when executed (lol sorry for the spam)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107158018,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487122343,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> </p>\n<p>Hi, Alberto. Let me get home real quick, and I\u2019ll explain a few things.</p>\n<p>For now, I\u2019ll just say that you should be taking expressions <em>to</em> and <em>from</em> equal signs (<code>=</code>) and replace them. For example, the first step of exercise 2 should be:</p>\n<div class=\"codehilite\"><pre><span></span>appendRev (x:xs) ys\n== append (rev (x:xs)) ys               (def of appendRev)\n</pre></div>\n\n\n<p>This is an example of <em>beta-reduction</em> (i.e., taking the expression on the left of the <code>=</code> and replacing it with the expression on the right). You can also do the same for any expression you find on the right and replace it with the expression on the left.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107159847,
            "is_me_message": false,
            "last_edit_timestamp": 1487126439,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487126262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I see, I thought I would've to \"expand\" <code>(x:xs)</code> to its result, also because <code>rev</code> takes a list as input, so I thought \"hey <code>x</code> cons <code>xs</code> could be seen as <code>xs</code> let's write that\" :D But I have no strong reasoning to back this up!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107160253,
            "is_me_message": false,
            "last_edit_timestamp": 1487127177,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487127145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> </p>\n<p>Essentially, the goal here is to remove the dependency of <code>rev</code> on <code>append</code>. Exercises 1-4 detail one way to do that ;)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107161938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487130896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>You also cannot expand <code>(x:xs)</code> any further because there's no way of knowing what <code>xs</code> is (i.e., it could be <em>any</em> list). Come find me tomorrow morning if you are still having issues.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107161990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487131039,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c2865418c880526dd518b2bd65adc37?d=identicon&version=1",
            "client": "website",
            "content": "<p>this was neat, i got 3.58 sec vs .8 sec</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107184867,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 102134,
            "sender_email": "janaipakos@gmail.com",
            "sender_full_name": "James Anaipakos (SP1'17)",
            "sender_id": 100534,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Equational Reasoning",
            "submessages": [],
            "timestamp": 1487181163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>Let's put the <code>fun</code> in <em>functional programming</em>!</p>\n<p>Consider the definition of the simplest foldable data structure: the <em>Natural Number</em>!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Nat</span> <span class=\"ow\">=</span> <span class=\"kt\">Zero</span>\n         <span class=\"o\">|</span> <span class=\"kt\">Add1</span> <span class=\"kt\">Nat</span>\n\n<span class=\"c1\">-- How to print natural numbers a nice way :P</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"n\">show</span> <span class=\"kt\">Zero</span>     <span class=\"ow\">=</span> <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"ow\">::</span> <span class=\"kt\">Integer</span><span class=\"p\">)</span>\n  <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">show</span> <span class=\"o\">$</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">read</span> <span class=\"o\">$</span> <span class=\"n\">show</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>A natural number is either <code>Zero</code> or the successor of (i.e., 1 value greater than) another natural number. Think <em>peano numbers</em>. With this, we have defined a data structure that includes all positive integers and as well as 0.</p>\n<p>Let's define some basic functions for Natural Numbers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- add two natural numbers together.</span>\n<span class=\"nf\">plus</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">plus</span> <span class=\"kt\">Zero</span>     <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">y</span>\n<span class=\"nf\">plus</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">plus</span><span class=\"p\">`</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- multiply two natural numbers.</span>\n<span class=\"nf\">times</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">times</span> <span class=\"kt\">Zero</span>     <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">Zero</span>\n<span class=\"nf\">times</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">times</span><span class=\"p\">`</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">plus</span><span class=\"p\">`</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- pow raises its first argument to the power of the second argument.</span>\n<span class=\"nf\">pow</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">pow</span> <span class=\"kr\">_</span> <span class=\"kt\">Zero</span>     <span class=\"ow\">=</span> <span class=\"kt\">Add1</span> <span class=\"kt\">Zero</span>\n<span class=\"nf\">pow</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">`</span><span class=\"n\">pow</span><span class=\"p\">`</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">times</span><span class=\"p\">`</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>Cool, but nothing really out of the ordinary here. These are just your average, every-day run of the mill recursively defined functions, but we can make things a bit more interesting.</p>\n<p>Consider the following definition of <code>foldNat</code>, which behaves exactly like a reducer (i.e., a <em>recursion principle</em>) for natural numbers.</p>\n<p>Any data structure that is defined similarly to natural numbers (e.g. Lists) has a corresponding <code>fold</code> function. Looking at its type definition, <code>foldNat</code> takes an <code>a</code>, a function of type <code>a -&gt; a</code>, a <code>Nat</code> and returns an <code>a</code>. One should think of <code>a</code> as equivalent to <em>any</em> type, which makes <code>foldNat</code> an example of a <strong>polymorphic function</strong>. I will write more about those later on :)</p>\n<p>Essentially, the job of <code>foldNat</code> is to take <em>any</em> natural number into the appropriate <code>a</code>. For example, reading the first line of <code>foldNat</code> says that:</p>\n<p><em>In the event that</em> <code>n</code> <em>is the natural number</em> <code>Zero</code>, <code>foldNat</code> <em>should return</em> <code>base</code>.</p>\n<p>Consequently, the second line of <code>foldNat</code> is called in the event that the given <code>n</code> is <strong>not</strong> <code>Zero</code> but is instead the <code>Add1</code> of another natural number <code>n</code>. Thus, <code>foldNat</code> would then recur on the smaller natural number, <code>n</code>, resulting in an <code>a</code> which is then passed to <code>recur</code> that does whatever it is it's meant to do. The real magic that happens is mostly contained within the function <code>recur</code> passed to <code>foldNat</code> (<strong>hint</strong> <strong>hint</strong>).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">foldNat</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"nf\">foldNat</span> <span class=\"n\">base</span> <span class=\"n\">recur</span> <span class=\"kt\">Zero</span>     <span class=\"ow\">=</span> <span class=\"n\">base</span>\n<span class=\"nf\">foldNat</span> <span class=\"n\">base</span> <span class=\"n\">recur</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">recur</span> <span class=\"o\">$</span> <span class=\"n\">foldNat</span> <span class=\"n\">base</span> <span class=\"n\">recur</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>To further understand what exactly <code>foldNat</code> is meant to do, I've included some exercises! As an example, I've done the first of these.</p>\n<p>For those who want a little bit more, I've also included a bonus question to define factorial (<code>fact</code>) in terms of <code>foldNat</code>.</p>\n<p>Good luck!</p>\n<p><em>Hint</em>: You may find it useful to define a few natural numbers to avoid having to write out a long series of <code>Add1</code>s every time you want to test your functions. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">two</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">two</span> <span class=\"ow\">=</span> <span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"kt\">Zero</span><span class=\"p\">)</span>\n\n<span class=\"nf\">five</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">five</span> <span class=\"ow\">=</span> <span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"kt\">Zero</span><span class=\"p\">))))</span>\n</pre></div>\n\n\n<p><strong>Exercises</strong>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- 1. Define `plusFold` that behaves like `plus` but uses `foldNat`.</span>\n<span class=\"nf\">plusFold</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">plusFold</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">foldNat</span> <span class=\"n\">n</span> <span class=\"kt\">Add1</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- 2. Define `timesFold` that behaves like `times` but uses `foldNat`.</span>\n<span class=\"nf\">timesFold</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">timesFold</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span>\n\n<span class=\"c1\">-- 3. Define `powFold` that behaves like `pow` but uses `foldNat`.</span>\n<span class=\"nf\">powFold</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">powFold</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span>\n\n<span class=\"c1\">-- BONUS!! This is rather difficult...</span>\n<span class=\"nf\">fact</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">fact</span> <span class=\"kt\">Zero</span>     <span class=\"ow\">=</span> <span class=\"kt\">Add1</span> <span class=\"kt\">Zero</span>\n<span class=\"nf\">fact</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Add1</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"n\">times</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"n\">fact</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"nf\">factFold</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n<span class=\"nf\">factFold</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107189734,
            "is_me_message": false,
            "last_edit_timestamp": 1487190093,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Recursion Principles and Foldable Data Structures",
            "submessages": [],
            "timestamp": 1487189200,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3510573a5aa248c6a2f1fcd58b043af7?d=identicon&version=1",
            "client": "website",
            "content": "<p>cool stuff!  can I come over to ask you about this <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> ?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107191500,
            "is_me_message": false,
            "last_edit_timestamp": 1487192122,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ajay.tungare@gmail.com",
            "sender_full_name": "Ajay Tungare (W2'17)",
            "sender_id": 100464,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Recursion Principles and Foldable Data Structures",
            "submessages": [],
            "timestamp": 1487192104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<blockquote>\n<p>cool stuff!  can I come over to ask you about this <span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> ?</p>\n</blockquote>\n<p>Pls feel free! :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107191519,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Recursion Principles and Foldable Data Structures",
            "submessages": [],
            "timestamp": 1487192134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Hey, anyone want to pair on some Haskell now or later today? I don't have a good suggestion for a project at the moment, but I'm up for whatever you're working on or just an exercise.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107191821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1487192602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<blockquote>\n<p>Hey, anyone want to pair on some Haskell now or later today? I don't have a good suggestion for a project at the moment, but I'm up for whatever you're working on or just an exercise.</p>\n</blockquote>\n<p>It's not quite Haskell, but a few of us (<span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> ) are trying to work on a teaching tool for Haskell/Functional Programming (similar to EloquentJs: <a href=\"http://eloquentjavascript.net/\" target=\"_blank\" title=\"http://eloquentjavascript.net/\">http://eloquentjavascript.net/</a>). Nice if you want to learn some Haskell and some web dev stuff.</p>\n<p>I was talking to <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> today about possibly starting a small series of projects in Haskell (i.e., games), which is something that I, myself, have never done. As for my own ideas in working in Haskell, I'm still open to suggestion :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107191940,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1487192804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e5310d577f719e57009db6273218242?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would be into building some small games in Haskell. <span class=\"user-mention\" data-user-email=\"janaipakos@gmail.com\" data-user-id=\"100534\">@James Anaipakos (SP1'17)</span>  linked me to <a href=\"http://www.seas.upenn.edu/~cis194/spring13/lectures/01-intro.html\" target=\"_blank\" title=\"http://www.seas.upenn.edu/~cis194/spring13/lectures/01-intro.html\">http://www.seas.upenn.edu/~cis194/spring13/lectures/01-intro.html</a> which I still want to work through to learn some syntax, the trial-by-fire approach isn't working as well as in other languages so far :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107191953,
            "is_me_message": false,
            "last_edit_timestamp": 1487192886,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "xianny@gmail.com",
            "sender_full_name": "Xianny Ng (SP1'17)",
            "sender_id": 100527,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1487192870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"cfactora93@gmail.com\" data-user-id=\"100519\">@Carl Joshua Factora (SP1'17)</span> would love to! Just started a study group on algorithms and data structures, will update you later on my progress with the server running haste :D</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107192004,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1487192944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> <span class=\"user-mention\" data-user-email=\"xianny@gmail.com\" data-user-id=\"100527\">@Xianny Ng (SP1'17)</span> </p>\n<p>I do also have a little experience with Elm, which is similar to Haskell, except that it's <em>signal-based</em> (previously it was using FRP (functional reactive programming)). There are also some nice examples on their site, along with a few nice ideas that we might want to build off of.</p>\n<p>Here is a simple counter written in Elm: <a href=\"http://elm-lang.org/examples/buttons\" target=\"_blank\" title=\"http://elm-lang.org/examples/buttons\">http://elm-lang.org/examples/buttons</a></p>\n<p>EDIT: RIP FRP. Pong is dead.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107192149,
            "is_me_message": false,
            "last_edit_timestamp": 1487193382,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "pairing",
            "submessages": [],
            "timestamp": 1487193235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b01c5830c2d6afff34afec8086b018f26d1edb7b?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>I'm interested in learning functional programming. Is it better to start learning a functional programming language, or use javascript/python in a functional way? The goal I have is to change the way I think about programming, and don't have a particular application in mind.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107196411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bsadkhin@gmail.com",
            "sender_full_name": "Boris Sadkhin (SP1'17)",
            "sender_id": 100516,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487200523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>In my experience a lot of good material for learning functional programming is written with a functional language. But there might good material out there that is written in JS or Python. I guess something in JS or Python would be great coz then you'd only be learning functional programming concepts as opposed to learning a language too. I.e. you'd be concentrating on just one thing.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107197318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487202430,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bsadkhin@gmail.com\" data-user-id=\"100516\">@Boris Sadkhin (SP1'17)</span> If you choose to use Python, I recommend <a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\" target=\"_blank\" title=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\">An introduction to functional programming</a> by RC alum and facilitator emeritus <span class=\"user-mention\" data-user-email=\"maryrosecook@hackerschool.com\" data-user-id=\"949\">@Mary Rose Cook</span> :) (who's unfortunately not subscribed to this stream)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107198300,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bsadkhin@gmail.com",
                        "full_name": "Boris Sadkhin (SP1'17)",
                        "id": 100516
                    },
                    "user_id": 100516
                }
            ],
            "recipient_id": 102134,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487204452,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<p>In my opinion, it would be rather difficult to learn functional programming without actually working in a (primarily) functional language. When I say <em>difficult</em>, that doesn't mean it isn't an effective or a viable method, but it's one that more or less teaches you <em>concepts</em> of functional programming as opposed to actually teaching what functional programming is. </p>\n<p>A nice read is the first 4 sections (up to the section on Pattern Matching) of \"A Gentle Introduction to Haskell\" (I've attached the whole thing here). This covers the basic concepts of functional languages and teaches you a bit of Haskell along the way!</p>\n<p><a href=\"/user_uploads/13/FBYTYjbmELloh3lBpciH_YLS/gentle_introduction_to_haskell.pdf\" target=\"_blank\" title=\"gentle_introduction_to_haskell.pdf\">gentle_introduction_to_haskell.pdf</a></p>\n<p>P.S. There\u2019s quite a few ways to pick up FP; I, myself, took a more theoretical route (i.e., starting with the Lambda Calculus and ending in Constructive Mathematics). However, taking a similar route would seem rather silly if one didn\u2019t have a language to play with it in (this is where, I think, Haskell fits in quite nicely).</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107201621,
            "is_me_message": false,
            "last_edit_timestamp": 1487211761,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487211217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "desktop app Mac 0.5.2",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bsadkhin@gmail.com\" data-user-id=\"100516\">@Boris Sadkhin (SP1'17)</span>: I had a look at <a href=\"http://learnyouahaskell.com/chapters\" target=\"_blank\" title=\"http://learnyouahaskell.com/chapters\">Learn You a Haskell for Great Good</a> once. If/when you look for Haskell resources (it seemed quite nice to me).</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107202426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487212859,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4a640d570251bb87bb6b20d02bd6f59e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bsadkhin@gmail.com\" data-user-id=\"100516\">@Boris Sadkhin (SP1'17)</span> I'd highly recommend the first 2, maybe 3, chapters of <a href=\"https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs\">SICP</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107202643,
            "is_me_message": false,
            "last_edit_timestamp": 1487213377,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adityavkk@gmail.com",
            "sender_full_name": "Aditya Kumarakrishnan (SP1'17)",
            "sender_id": 100340,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487213303,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "desktop app Mac 0.5.2",
            "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-email=\"bsadkhin@gmail.com\" data-user-id=\"100516\">@Boris Sadkhin (SP1'17)</span> I'd highly recommend the first 2, maybe 3, chapters of <a href=\"https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs\">SICP</a></p>\n</blockquote>\n<p>I second this.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107202645,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Getting Started",
            "submessages": [],
            "timestamp": 1487213324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Hi all,</p>\n<p>Been working on writing this for a while, so if anyone is interested (or bored enough), please head over to: </p>\n<p><a href=\"https://ivanthetricourne.github.io/pl-chp1/\" target=\"_blank\" title=\"https://ivanthetricourne.github.io/pl-chp1/\">https://ivanthetricourne.github.io/pl-chp1/</a> </p>\n<p>to read up on the first chapter of <em>Project Lamp</em>! I'm open to critiques and suggestions (which you can post here or DM me).</p>\n<p>Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107773842,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488407231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><strong>NOTE</strong>: The code interaction will come later and <em>not</em> on my personal <a href=\"http://Github.io\" target=\"_blank\" title=\"http://Github.io\">Github.io</a> page <img alt=\":+1:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/+1.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107773914,
            "is_me_message": false,
            "last_edit_timestamp": 1488407421,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488407394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Halp! <img alt=\":+1:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/+1.png\" title=\":+1:\"></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107774411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488408260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c2865418c880526dd518b2bd65adc37?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you want a smaller answer \"box\", you could specify the css weight/height and set the overflow property to 'scroll' so the user can scroll through an answer if the content exceeds the element box size. </p>\n<p>Two ways could do it--append the inlined styles to <code>js-results.</code> when it's created in <a href=\"https://github.com/lazywithclass/project-lamp/blob/092c9840c8cf17f2d0e668009b13b85080444bb7/js/recursion-principles-and-foldables.js\" target=\"_blank\" title=\"https://github.com/lazywithclass/project-lamp/blob/092c9840c8cf17f2d0e668009b13b85080444bb7/js/recursion-principles-and-foldables.js\">https://github.com/lazywithclass/project-lamp/blob/092c9840c8cf17f2d0e668009b13b85080444bb7/js/recursion-principles-and-foldables.js</a>, or make a new class name, set your styles in index.css, and then wrap <code>js-results</code> in a div with the same class name.</p>\n<p>example:<br>\n<a href=\"/user_uploads/13/fwxR2C6zzwj177HNhoiNM70V/zoom.png\" target=\"_blank\" title=\"zoom.png\">zoom.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/fwxR2C6zzwj177HNhoiNM70V/zoom.png\" target=\"_blank\" title=\"zoom.png\"><img src=\"/user_uploads/13/fwxR2C6zzwj177HNhoiNM70V/zoom.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107822154,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 102134,
            "sender_email": "janaipakos@gmail.com",
            "sender_full_name": "James Anaipakos (SP1'17)",
            "sender_id": 100534,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488504782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"janaipakos@gmail.com\" data-user-id=\"100534\">@James Anaipakos (SP1'17)</span> </p>\n<p><span class=\"user-mention\" data-user-email=\"montecristoh@gmail.com\" data-user-id=\"100509\">@Alberto Zaccagni (SP1'17)</span> This actually solves one of the issues we were talking about earlier about what to do when the input gets excessively long. Thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107822509,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488505630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "ZulipAndroid",
            "content": "<p>Yes, we could have a scroll but a lot of times longer texts mean longer computation, we dont want to do that on purpose, but it is still a good solution to avoid losing formatting when the user quicksorts on 5000 items :D</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107823099,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grin",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "janaipakos@gmail.com",
                        "full_name": "James Anaipakos (SP1'17)",
                        "id": 100534
                    },
                    "user_id": 100534
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grin",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488506905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh and thanks for the feedback <span class=\"user-mention\" data-user-email=\"janaipakos@gmail.com\" data-user-id=\"100534\">@James Anaipakos (SP1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 107845028,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "janaipakos@gmail.com",
                        "full_name": "James Anaipakos (SP1'17)",
                        "id": 100534
                    },
                    "user_id": 100534
                }
            ],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Pls Halp",
            "submessages": [],
            "timestamp": 1488557128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>Anyone have experience with F#? I'm wondering how it compares to Haskell, if you have any suggestions for intro books/tutorials, and any other opinions!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108605196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "F#",
            "submessages": [],
            "timestamp": 1490116241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p>I have read some tutorials but never done anything in it. I think it is inspired more by Ocaml than Haskell and I'm not an expert in the differences between those languages.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108607829,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "F#",
            "submessages": [],
            "timestamp": 1490120673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p>This should be useful <a href=\"https://fsharpforfunandprofit.com/\" target=\"_blank\" title=\"https://fsharpforfunandprofit.com/\">https://fsharpforfunandprofit.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108607831,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "F#",
            "submessages": [],
            "timestamp": 1490120686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/919b4af386b43c5ca84d8e664790a7d906336c0d?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> What use cases are you thinking of. This project is interesting as it is a in-process 'bridge' between node and .NET (with F# support). I'd be willing to try out F# through this project. Maybe. Let me know.</p>\n<p><a href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" title=\"https://github.com/tjanczuk/edge\">https://github.com/tjanczuk/edge</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108607920,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "botwhytho@gmail.com",
            "sender_full_name": "Alberto Torres (SP1'17)",
            "sender_id": 100545,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "F#",
            "submessages": [],
            "timestamp": 1490120835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "website",
            "content": "<p>No particular use case at the moment, just got a lead for a possible job in F#, so thought I should check it out. I'll take a look at the project and see if it looks fun.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 108610174,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "F#",
            "submessages": [],
            "timestamp": 1490124513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p>seems a well-considered <a href=\"http://mutanatum.com/posts/2017-01-12-Browser-FP-Head-to-Head.html\" target=\"_blank\" title=\"http://mutanatum.com/posts/2017-01-12-Browser-FP-Head-to-Head.html\">post</a> on comparisons between frontend FP as of early 2017. Except it's missing Bucklescript <span class=\"user-mention\" data-user-email=\"rudichen@gmail.com\" data-user-id=\"101102\">@Rudi Chen (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111217636,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "frontend",
            "submessages": [],
            "timestamp": 1495576912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>this was nice</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111224560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "frontend",
            "submessages": [],
            "timestamp": 1495591564,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"annafkh@gmail.com\" data-user-id=\"101087\">@Anna Harrington (S1'17)</span> <span class=\"user-mention\" data-user-email=\"kve216@nyu.edu\" data-user-id=\"101086\">@Katrina Evtimova (S1'17)</span> <span class=\"user-mention\" data-user-email=\"rudichen@gmail.com\" data-user-id=\"101102\">@Rudi Chen (S1'17)</span> <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111249674,
            "is_me_message": false,
            "last_edit_timestamp": 1495646790,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "inviting people",
            "submessages": [],
            "timestamp": 1495646776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0e74dfe9b92822b1371cae0f22538b2e?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://pragprog.com/magazines/2013-01/functional-programming-basics\" target=\"_blank\" title=\"https://pragprog.com/magazines/2013-01/functional-programming-basics\">https://pragprog.com/magazines/2013-01/functional-programming-basics</a><br>\nI was discussing about this article over lunch with a few folks.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111249686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "indradhanush.gupta@gmail.com",
            "sender_full_name": "Indradhanush Gupta (he) (S1'17)",
            "sender_id": 101105,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Uncle Bob Martin on FP",
            "submessages": [],
            "timestamp": 1495646825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>\n<p>I think about this question a lot. What do we think about the following?</p>\n<p>There are three (or four) schools of thought:</p>\n<p>a. FP is about pure I/O: it's all about input and output. Like John Hughs put it: a function can have no other effect but to compute its result (and only from its arguments)</p>\n<p>b. FP is about strong typing (and lazy): I.e. Haskell</p>\n<p>c. FP is about functions being first class citizens (or values): You can pass them around as arguments, you can build them (the only way _I_ know how is with a closure), and you can return them</p>\n<p>d. FP is about small functions (or small programs)</p>\n<p>I think someone listed those at a Google talk and I've remembered them ever since.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120776289,
            "is_me_message": false,
            "last_edit_timestamp": 1515417002,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515416791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Personally... I consider FP to be <em>a</em>, then <em>c</em>, and <em>d</em> to some degree (thought that's not specific to FP).</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120776350,
            "is_me_message": false,
            "last_edit_timestamp": 1515416963,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515416936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>I was also under the impression that FP is mostly about a and c. Can you tell me more about b? I consider (b) as a school of thought that usually coincides with a &amp; c but isn't essential to either.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120840366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515529757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think of it primarily as <em>a</em>, along the lines of  the description in this great post by <span class=\"user-mention\" data-user-email=\"mary@maryrosecook.com\" data-user-id=\"949\">@Mary Rose Cook</span> (who's not subscribed to this stream): <a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\" target=\"_blank\" title=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\">https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120841485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515531503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"bonnie.eisenman@gmail.com\" data-user-id=\"105050\">@Bonnie Eisenman (m1'18)</span>  Yeah: in <em>b</em> I meant an _expressive_ type system. Haskell, ML, Java, and C++ have this but Erlang, Elixir, and Scheme to a lesser extent. They coincide in my mind too: with _a_ because function signatures are all about the types of input + output data and with _b_ becuase a function is just another type.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120910854,
            "is_me_message": false,
            "last_edit_timestamp": 1515661532,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515661514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think of it as c. a and b exclude a class of programming languages i consider functional (most lisps, for instance, many MLs, any BEAM language except <em>maybe</em> alpaca). d excludes a class of programs i consider functional (because they\u2019re either too big or some functions are)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120910955,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515661750,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"nick@recurse.com\" data-user-id=\"811\">@Nick Bergson-Shilcock</span> I read <span class=\"user-mention\" data-user-email=\"mary@maryrosecook.com\" data-user-id=\"949\">@Mary Rose Cook</span>'s post a while ago + loved it because I felt that (1) this is what it's all about on a day-to-day basis and (2) because it didn't glorify FP (especially things I don't understand yet)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120910956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515661766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7f89b22589ca6f3490f8a75591a699adc0e02fcc?x=x&version=1",
            "client": "ZulipMobile",
            "content": "<p>I generally think about functional programming as an extension of the lambda calculus, which would go to (c) I guess. If all you're ever doing is applying functions then that seems a lot like functional programming.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120921905,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ark.email@gmail.com",
            "sender_full_name": "Adam Bratschi-Kaye (he) (SP1'17)",
            "sender_id": 100532,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515683372,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a39073ec6ea8070cbfb74f6d7da8c999?d=identicon&version=1",
            "client": "website",
            "content": "<p>I kind of think (d) mostly just follows naturally from (c) as a side effect (haha) since the easiest way to reason about and organize first-class functions that can be composed is in small units.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120924972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "recurse@vijithassar.com",
            "sender_full_name": "Vijith Assar (W2'18)",
            "sender_id": 105042,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515688064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span> I see what you mean by excluding them if you take only one of those four (or the three you mention). I haven't seen a lot of \"big\" functions or programs that couldn't be written in smaller pieces (even if a lot of work) though they might be different in some important aspect. Do you have an example?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120928928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515694158,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"ark.email@gmail.com\" data-user-id=\"100532\">@Adam Kaye (SP1'17)</span> Yeah: that's stands to reason... I don't know a thing about the lambda calculus but I guess it could be <em>a</em> too coz mathematical functions only map a range to a domain (all about I/O) and then it might be like <em>b</em> if you take the view that ranges and domains are sets and that's what types are about</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120929055,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515694401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"vijithassar@yahoo.com\" data-user-id=\"105042\">@Vijith Assar (W2'18)</span> I like this, and for me it's related to the end <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span>'s comment... but I haven't seen this hold true too often (I mean ever) in practice in any of the projects I've worked on or seen. I do believe it can be true though</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120929216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515694646,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i\u2019ve seen it a lot in e.g. <code>eval</code> functions in interpreters. imagine a function that takes in an AST and evaluates it. the best way, imho, is to patternmatch and specialize, but it will still be one giant function. haskells syntactic sugar around pattern matching with functions heads really doesnt change that much.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120930662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515696634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span>: I see. That's an interesting example. Erlang and Elixir have pattern matching in the function head, like Prolog, but like you say... multiple clauses are in fact just <strong>one</strong> big function</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120972375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515775219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>for me, its an example that\u2019s near and dear to my heart, because ive written <a href=\"https://github.com/hellerve/bc/blob/master/src/BC/Eval.hs#L22\" target=\"_blank\" title=\"https://github.com/hellerve/bc/blob/master/src/BC/Eval.hs#L22\">multiple</a> of <a href=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Primitives.hs#L527\" target=\"_blank\" title=\"https://github.com/zepto-lang/zepto/blob/master/src/Zepto/Primitives.hs#L527\">such functions</a> in the <a href=\"https://github.com/hellerve/brainfuck/blob/master/brainf*ck.hs#L32\" target=\"_blank\" title=\"https://github.com/hellerve/brainfuck/blob/master/brainf*ck.hs#L32\">past</a>, none of <a href=\"https://github.com/hellerve/unlambda/blob/master/unlambda.hs#L68\" target=\"_blank\" title=\"https://github.com/hellerve/unlambda/blob/master/unlambda.hs#L68\">which</a> i consider pretty by <em>any</em> standard.</p>\n<p>the second example is particularly glaring: zepto\u2019s eval function was over 400 lines long, although each of the clauses was less than 10. that solves nothing.</p>\n<p>fwiw, the carp compiler has multiple of those functions as well, because all it ever does is AST traversions, basically.</p>\n<ul>\n<li><a href=\"https://github.com/carp-lang/Carp/blob/master/src/Emit.hs#L63\" target=\"_blank\" title=\"https://github.com/carp-lang/Carp/blob/master/src/Emit.hs#L63\">the emitter</a></li>\n<li><a href=\"https://github.com/carp-lang/Carp/blob/master/src/Eval.hs#L32\" target=\"_blank\" title=\"https://github.com/carp-lang/Carp/blob/master/src/Eval.hs#L32\">the macro evaluator</a></li>\n<li><a href=\"https://github.com/carp-lang/Carp/blob/master/src/GenerateConstraints.hs#L15\" target=\"_blank\" title=\"https://github.com/carp-lang/Carp/blob/master/src/GenerateConstraints.hs#L15\">the type constraints generator</a></li>\n<li><a href=\"https://github.com/carp-lang/Carp/blob/master/src/ManageMemory.hs#L28\" target=\"_blank\" title=\"https://github.com/carp-lang/Carp/blob/master/src/ManageMemory.hs#L28\">the borrow checker</a></li>\n</ul>\n<p>of course you can do all kinds of things to clean this up syntactically (for instance make it a monad and then make it a function per constructor or somesuch), but this is all just syntactic sugar over the fact that all of these are just damn big functions.</p>\n<p>of course the same is true in any other paradigm (i.e. if you think of object orientation, when you want to know what the <code>AST.eval()</code> method really does you have to look at every nodes implementation of <code>eval</code>), but what im saying is that the functional paradigm doesnt inherently help to destructure this and make it smaller.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120972902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515775980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>addendum: githubs highlighting has problems with multiline escaped strings in haskell, which are a little ugly to begin with. that\u2019s why highlighting is pretty broken for zepto in github.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120972929,
            "is_me_message": false,
            "last_edit_timestamp": 1515776051,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515776042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>also, my haskell is objectively pretty terrible, and that although ive written (tens of) thousands of lines in it. i should probably work on that, but i can get by in haskell land without knowing anything about most of its features. dont judge me.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120973073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515776241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, I get you, I think that evaluating and compiling are pretty hard... even parsing must be tricky if you want it to give helpful information when something goes wrong or if the language isn't simple. I wrote a lisp scanner, parser, and evaluator (in part) which was pretty but it's neither complete nor a difficult syntax to read in nor does it help you if something is wrong with the input. The hard thing to face is that IMO the everyday code I read is not as difficult to get right but sucks anyway</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120976011,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515780302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think you can get by in parsing with parser combinators, which feel declarative and prettier. i\u2019ve not seen any approaches like that used in evaluating/compiling, because they would likely be a little less performant (especially the evaluator part), but i\u2019m sure there are equivalent approaches. i have yet to see the light, though.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120976411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515780876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>i think whats important also is that while the \"every day code\" we work with isn\u2019t as complex, the code we <em>depend on</em> likely is. think of a tcp/ip stack or the interpreter/compiler of your choice. it likely has at least a few icky bits that are there because all else failed.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120976440,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515780951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm okay with less performant compilers in terms of compilation time because I feel like it's okay for me to wait if they produce performant code... I.e. if you want quick iteration then use and interpreter: it's slow when your program runs but you can run it straight away. If you want performace when you run the program then wait for a compiler. I'm happy sacrificing compilation time for readability</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120977363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515782396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I agree with TCP/IP likely having icky bits + I think we agree pretty generally on the subject of function size. I guess I'm getting at the FP stuff that people see or advocate or talk about when the say \"FP\" to better understand how it's all ambiguous and what it is they're doing or how to talk to them about what might be a better way to do something</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120977707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515782926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>compilation time might again not be an issue for your average app, but for a codebase like GCC or Firefox that take at least an hour to compile it definitely matters.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 120978330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515783907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>I feel like this is going off topic... maybe we should spin up another thread somewhere</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121006565,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515843912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Oh, BTW <span class=\"user-mention\" data-user-email=\"veit@veitheller.de\" data-user-id=\"101103\">@Veit Heller (S1'17)</span>, I just thought of another _bigger_ function kind of thing that would be ruled out by <em>d</em>. Some exhaustive searches, a  BFSes I wrote, were <strong>not</strong> small</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 121007711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "What is Functional Programming?",
            "submessages": [],
            "timestamp": 1515846754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey all!</p>\n<p>This seems like a good place to ask because Property-Based Testing (PBT) comes from the FP community. Let me know if you have suggestions for where else to post this on Zulip <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>\n<p>People seem to be under the impression that PBT is much better suited to very technical domain (e.g. encoding/decoding) than business-like logic which I think is a big barrier to it's adoption (at least in the Elixir community maybe). I have a couple of not so technical domains/examples for a talk I'm giving in a few weeks:</p>\n<p>1. credit line<br>\n2. e-mail digesting</p>\n<p>I have a few more but left my list at home (those are the ones I remember). I'll update this tonight.</p>\n<p>I'm wondering if we have any PBT I could share to say \"PBT isn't just for deeply technical domains!\"</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130201453,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ds2643@columbia.edu",
                        "full_name": "David Shaked (W2'16)",
                        "id": 8995
                    },
                    "user_id": 8995
                }
            ],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532425462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I can't say I have used property based testing in this way (yet!) but I am under the impression that using property based testing for exploring code that behaves like an FSM is something that is commonly  done. </p>\n<p>Lots of problems can be represented as FSMs (multi step forms, lots of business logic i.e. a post can be in draft, awaiting approval or posted, etc). Property based testing can (I believe) help  with answering questions like: Does this multi step login form allow for someone using it to get into an invalid state, such that they can't complete the form?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130214394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532442382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Are those the kind of \"non deeply technical \" examples you are looking of?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130214413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532442405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/649c2682ffc71d16cddbbbcb3595bc45?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also, Stripe put out a post a while ago about using property based testing for testing their machine learning models: <a href=\"https://stripe.com/blog/hypothesis\" target=\"_blank\" title=\"https://stripe.com/blog/hypothesis\">https://stripe.com/blog/hypothesis</a> which seems very compelling to me.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130214544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "me@nicksanford.io",
            "sender_full_name": "Nick Sanford (he) (S2'18)",
            "sender_id": 120479,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532442502,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>I've used them to express high-level invariants of the domain that might not otherwise be encoded anywhere in the program. For example, I had a solitaire game and one of the properties was that the cards (if picked up from the table and sorted) exactly match the starting deck of cards; nothing added or removed. Then generators for creating valid game states and the moves the player makes, and now the tests ensure that no combination generated violates that property. This was a really pleasant way to exercise a business rule that holds for the overall program as it's composed and used rather than gain confidence in low-level plumbing.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130228397,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532457332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"120479\">@Nick Sanford (S2'18)</span> I like the FSM idea: about a year ago I had a look through all the projects I've worked on... but all the FSM-like code I've found just goes from one state to one other (I haven't found any branching or cycling): draft \u27f6 awaiting approval \u27f6 posted. There hasn't been a nice FSM since either <span class=\"emoji emoji-1f63f\" title=\"crying cat face\">:crying_cat_face:</span> They're really similar to the post example you give. I might go with something like that a basically write a property around the ordering (e.g. dependency on a previous step, etc.).</p>\n<p>It's hard to come up with a tricky form, for instance, because I have no concrete use-case around it. Perhaps you had a particular form/experience in mind? I like the multi-step login... I think I can draw inspiration form some projects I've worked on to construct an example around that. The examples you mention are exactly what I'm looking for. I just need more details and/or to work them into a more substantial example.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130262714,
            "is_me_message": false,
            "last_edit_timestamp": 1532508650,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532508093,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span>  This is a really interesting example. Could we say this is an _emergent property_ (i.e. the rules of the game are such that this invariant always holds tho it's not stated explicitly anywhere)? I don't know anything about card games (tho, come to think about it, games might serve as really good examples).</p>\n<blockquote>\n<p>generators for creating valid game states and the moves the player makes</p>\n</blockquote>\n<p>What exactly do you mean by the above? If we take Chess then generating (valid) game state is different from the moves players will make (of course you can use valid moves to get to a valid game state). Which one or both were you doing? I ask because in my mind making moves is part of the game API but the state can only be arrived at thru those moves starting from the initial Chess set-up. Is Solitaire different?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130264012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532509946,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>The other example I had in mind was <strong>authorization</strong> which is loosely related to one of Nick's suggestions</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130264042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532510008,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>(It's worth mentioning I avoid using games as talk/blog examples because I've heard kneejerk \"but what about <a href=\"https://www.urbandictionary.com/define.php?term=srs%20bsns\" target=\"_blank\" title=\"https://www.urbandictionary.com/define.php?term=srs%20bsns\">srs bzns</a>\" dismissals enough to believe some people assume anything mentioning games is irrelevant and they instantly stop paying attention. I thought it might be useful to you for creating an example that looks more like enforcing a business rule, because every business app I've worked on has had vital invariants that are used everywhere and so have no single expression.)</p>\n<p>When I say valid game states, I mean one players could actually have reached. To carry that to chess, you can generate valid game state that allows more valid moves with two different strategies: 1. place random pieces from the standard collection of pieces (without placing pawns on the first or last rank) and then, if a king is in checkmate, remove pieces until they're not 2. create a board with the standard initial chess opening and apply 0-50 valid moves, but don't apply a move if it would result in checkmate. Either way you get a game that can have more moves applied to it, right? Well, in chess there are subtly invalid scenarios, like black having two or more pawns on one file, that strategy 1 might create \"impossibly\", where the white player still has all their pieces or otherwise hasn't sacrificed the proper pieces to help black line them up.  Strategy 2 would never create these.</p>\n<p>There's nothing special about solitaire here, though its invalid game states are a more apparent at a glance than chess's. Many solitaire games are won by extracting cards one-by-one to \"foundations\", where they're stacked up in order by suit, and you'll win by having four foundations of ace-to-king for each of the four suits. If a foundation had a card of the wrong suit or wasn't in order, it would be instantly clear it's invalid in a way that's not in chess. In chess there are lots of states where you'd have to stare at and puzzle out \"well, if the players weren't trying to win, could they have really worked that one white pawn all the way from H file to  C file?\" to recognize whether it's invalid or not. These probably don't matter for your tests and may even make your code more robust by being more likely to generate really weird edge cases, but maybe you waste time fixing can't-happen issues where someone has two bishops on black, etc.</p>\n<p>The word \"emergent\" has a lot of weird baggage in AI, game design, and systems analysis so I try not to use it. But every system I ever have or ever will worked on has implicit, non-obvious rules about impossible-to-reach states that are not obviously invalid at a glance, or that look impossible but can be reached through just the right combination of edge cases. Property tests are useful for exploring that hazy space.</p>\n<p>For a business example: I consulted on a startup subscription service that wanted help paying down technical debt, especially around billing. I didn't use property testing, but while I was helping out we found eight ways that customers could have gotten unlimited free deliveries. They required weird combinations of actions like cancelling an account with an order placed but not shipped and then creating a new account with the same e-mail address to reuse a one-time coupon code for a free first order before the delivery was billed for, etc. Auditing turned up that these odd circumstances had only happened a few times and it looked like they were all accidental - but they were especially worth fixing because customers rarely contact support to complain that they're not billed enough/at all. Mostly they enjoy looking cool when they tell their friends \"hey, so if you do this weird thing you get free stuff\".</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130276455,
            "is_me_message": false,
            "last_edit_timestamp": 1532526867,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532526843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span> I won't bring up games for the same reason. I want this talk to convince people that PBT is applicable to the kind of thing an application programmer (or similar) might write every day.</p>\n<p>Yeah: right... strategy 2 would never create invalid game state. I'd be for <em>this</em> strategy coz it tests the correctness of the API, and its use, where strategy 1 does not. It seems like a bad idea to stick state, even if it's constructed in some reasonable way, into a program to test it. It won't test the correctness we want to see from using its API. I've been asked once or twice how to build a generator for a complex data-structure so that they can do PBT. My answer was not to do it because we should be exercising the API to get us to any state we need (granted - we might need a model or a trace to exercise it the way we want - but that is meant to reflect very real user interaction w/ the API).</p>\n<p>I love the business example. It's perfect for what my talk is aiming to do + it reminds me of some work my colleagues have done... do you mind if I use roughly this example as my final example?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130398169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532682556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a2cc22089e70c6b1e9a84d91ac82118ab06aa82a?x=x&version=2",
            "client": "website",
            "content": "<p>Yes, certainly! Use anything you like from my responses, reshape as needed, no need to credit me. I'm happy to see you give the best talk you can.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130413607,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "peter@push.cx",
            "sender_full_name": "Peter Bhat Harkins (he) (F2'17)",
            "sender_id": 102004,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532701545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>depending on how well-factored the business logic is, you can definitely do property based testing in contexts that would traditionally be considered mocks or dependency injection situations. if an application is implemented with a free-monad-with-interpreter pattern, you can generate data describing a series of interactions with the application, and define a simple interpreter on the free monad that asserts conditions on individual responses or arbitrary conditions on the entire history of responses. so you can do sophisticated yet purely functional testing of code that otherwise only makes sense in a world of interactions with stateful systems (databases, network connections, etc)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130421173,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532709108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>also david nolen has done some interesting work in the past on generative testing of ui interactions in web apps</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130421243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532709168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102004\">@Peter Bhat Harkins (F2'17)</span> Thanx</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130567886,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532943940,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<blockquote>\n<p>depending on how well-factored the business logic is, you can definitely do property based testing in contexts that would traditionally be considered mocks or dependency injection situations. </p>\n</blockquote>\n<p>ACK on that.</p>\n<p><span class=\"user-mention\" data-user-id=\"2857\">@Kyle Littler (F'13)</span>  I'm not familiar w/ the <strong>free-monad-with-interpreter</strong>... are there any resources on it that you like?</p>\n<p>I'll have a look for David's work. UI interaction could be a really interesting case</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130568041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532944161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I've never really been able to find a simple, satisfactory, straightforward introduction to the idea, but this blog series is as close as it comes: <a href=\"http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/\" target=\"_blank\" title=\"http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/\">http://blog.ploeh.dk/2017/01/27/from-dependency-injection-to-dependency-rejection/</a> . the last section, \"pure interactions\", is another entire series of posts on its own, which covers the actual pattern in depth. it's f#-centric, but much of the same code is presented in haskell too if that helps. most other tutorials/introductions seem to focus only on the technical and theoretical details, but this author does a good job explaining the <em>why</em> of these approaches. he doesn't quite get into property-based testing, but having a declarative, data-oriented definition of the valid interactions with an application is exactly what makes that possible</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130581666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532960049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanx <span class=\"user-mention\" data-user-id=\"2857\">@Kyle Littler (F'13)</span> I'll have a read + let you know how I get on</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130582400,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1532960781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2857\">@Kyle Littler (F'13)</span> Hey Kyle! I found <a href=\"https://www.youtube.com/watch?v=Rlu-X5AqWXw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Rlu-X5AqWXw\">this talk</a> where David briefly talks about UI and <a href=\"https://github.com/swannodette/ui-check\" target=\"_blank\" title=\"https://github.com/swannodette/ui-check\">this repository</a> (tho I haven't had a look thru that yet). I feel weird asking again but do you have a link/pointer to some material?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Rlu-X5AqWXw\" href=\"https://www.youtube.com/watch?v=Rlu-X5AqWXw\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=Rlu-X5AqWXw\"><img src=\"https://i.ytimg.com/vi/Rlu-X5AqWXw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130623932,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1533016888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>what you just linked is already pretty much the extent of my knowledge. but if you @ david nolen here on zulip, he's been known to answer the call...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130624361,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Non-Technical Property-Based Testing Example",
            "submessages": [],
            "timestamp": 1533017474,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hello, long time no see :)</p>\n<p>In a couple weeks <a href=\"https://www.amazon.com/Little-Typer-MIT-Press/dp/0262536439\" target=\"_blank\" title=\"https://www.amazon.com/Little-Typer-MIT-Press/dp/0262536439\">The little typer</a> will be available! <br>\n<a href=\"https://github.com/the-little-typer/pie\" target=\"_blank\" title=\"https://github.com/the-little-typer/pie\">Pie</a>, the language that will be used in the book, is a Racket with dependent types, and it's already available on Github.</p>\n<p>I am writing to ask if there's someone interested in creating a remote study group.<br>\nI am based in Italy / Switzerland (UTC+02:00), let me know.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130779243,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "heneli@kailahi.com",
                        "full_name": "Heneli Ta'angafala Kailahi (SP2'17)",
                        "id": 100771
                    },
                    "user_id": 100771
                },
                {
                    "emoji_code": "1f370",
                    "emoji_name": "cake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jrojasdavalos@gmail.com",
                        "full_name": "Junior Rojas (he) (S1'16)",
                        "id": 9347
                    },
                    "user_id": 9347
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "marlenefdez@gmail.com",
                        "full_name": "Marlene Fernandez (she) (SP1'18)",
                        "id": 109654
                    },
                    "user_id": 109654
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "kyle.littler@gmail.com",
                        "full_name": "Kyle Littler (F'13)",
                        "id": 2857
                    },
                    "user_id": 2857
                }
            ],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533218015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm interested!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130782337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533221197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p>I would also be interested in joining!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130786787,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533225699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I've been following this project on github and waiting for the book to be released. I'm interested!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130792970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533233539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I am also interested!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130795752,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533236988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>What timezone are you in?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130795877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533237121,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I am UTC-7</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130796054,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533237305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>UTC-6</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130796244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533237520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will be back from holidays on the 27th of August, so ideally I would like to start from September, is this OK for everyone?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130824389,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "marlenefdez@gmail.com",
                        "full_name": "Marlene Fernandez (she) (SP1'18)",
                        "id": 109654
                    },
                    "user_id": 109654
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jrojasdavalos@gmail.com",
                        "full_name": "Junior Rojas (he) (S1'16)",
                        "id": 9347
                    },
                    "user_id": 9347
                }
            ],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533283218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>sounds good to me <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 130824899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533284151,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looks like the release date on Amazon has been postponed to September the 18th <a href=\"https://www.amazon.com/dp/0262536439/\" target=\"_blank\" title=\"https://www.amazon.com/dp/0262536439/\">https://www.amazon.com/dp/0262536439/</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 131054099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1533658612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2451bf67052aa2b66fc7500d315762b4?d=identicon&version=1",
            "client": "website",
            "content": "<p>Interested!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132371068,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "omsragha@gmail.com",
            "sender_full_name": "Omar Agha (he) (S2'18)",
            "sender_id": 120551,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1534617449,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I\u2019ve ordered the book, but based on reading a previous one in this series, it might be so \u201clittle\u201d that there\u2019s not enough content for a study group to cover. On the other hand, it means we might actually finish it instead of letting the group fizzle out</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132379032,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "marlenefdez@gmail.com",
                        "full_name": "Marlene Fernandez (she) (SP1'18)",
                        "id": 109654
                    },
                    "user_id": 109654
                }
            ],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1534632186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes, and if we get to finish it without any sort of difficulties (I doubt this will be my case), we can always see if we want to expand some ideas, see if we could apply them to our daily tasks, etc...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 132903969,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1535444853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p><a href=\"https://twitter.com/d_christiansen/status/1037912059323662342\" target=\"_blank\" title=\"https://twitter.com/d_christiansen/status/1037912059323662342\">https://twitter.com/d_christiansen/status/1037912059323662342</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/d_christiansen/status/1037912059323662342\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/792838468120436736/vcWCXcIJ_normal.jpg\"></a><p>Just got home from a business trip and something exciting was waiting for me! It feels totally unreal to actually be holding the real thing! <a href=\"https://t.co/Eqm55y5yAi\" target=\"_blank\" title=\"https://t.co/Eqm55y5yAi\">https://twitter.com/d_christiansen/status/1037912059323662342/photo/1</a></p><span>- David Thrane Christiansen (@d_christiansen)</span><div class=\"twitter-image\"><a href=\"https://t.co/Eqm55y5yAi\" target=\"_blank\" title=\"https://t.co/Eqm55y5yAi\"><img src=\"https://pbs.twimg.com/media/Dmdngl6VAAAJ6Hi.jpg:thumb\"></a></div></div></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133496725,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "marlenefdez@gmail.com",
                        "full_name": "Marlene Fernandez (she) (SP1'18)",
                        "id": 109654
                    },
                    "user_id": 109654
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1536308338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/216dd445a46512212fb170dd7574e740416478c2?x=x&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey all!</p>\n<p>I wrote a post on Elixir's Pipe Operator, <code>|&gt;</code>, which we can find in F# and SML (I think) too:</p>\n<p><a href=\"https://www.erlang-solutions.com/blog/to-pipe-or-not-to-pipe.html\" target=\"_blank\" title=\"https://www.erlang-solutions.com/blog/to-pipe-or-not-to-pipe.html\">https://www.erlang-solutions.com/blog/to-pipe-or-not-to-pipe.html</a></p>\n<p>I'd love your thoughts, comments, any discussion really <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 133510310,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "joseph.yiasemides13@alumni.imperial.ac.uk",
            "sender_full_name": "Joseph George Yiasemides (he) (SP1'17)",
            "sender_id": 100508,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The Pipe Operator",
            "submessages": [],
            "timestamp": 1536326503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>got the book this weekend and I'm a chapter and a half in. do people still want to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134111406,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537201344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I pre-ordered a copy on Amazon but it won't ship till tomorrow :/ But I'm interested too.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134112753,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537203085,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2857\">@Kyle Littler (F'13)</span>  same boat as <span class=\"user-mention\" data-user-id=\"813\">@Alan O'Donnell</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134124604,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537216021,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>still interested too, I'll get my copy in a few days</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134261388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537383081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>I'm also still interested and I just ordered the book!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134317005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537457678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/20a01060af1034994b2b9c0cf12035c60680a6c9?x=x&version=4",
            "client": "website",
            "content": "<p>I got my copy today!  maybe once everyone else gets their copies, we can figure out how we want to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134483887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "marlenefdez@gmail.com",
            "sender_full_name": "Marlene Fernandez (she) (SP1'18)",
            "sender_id": 109654,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537720832,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Also in! But still have to order the book</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134491537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537737018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f9168c90ac77e5592118339e9859e5f3?d=identicon&version=1",
            "client": "website",
            "content": "<p>My copy is on its way, I will surely be able to get it for the end of the week!<br>\nAfter that I am happy and still willing to discuss / do a study group / chat  / whatever about the first chapter with whoever is interested.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134515535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "montecristoh@gmail.com",
            "sender_full_name": "Alberto Zaccagni (SP1'17)",
            "sender_id": 100509,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1537781482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I'm slowly going through the book and I recently tried to write some code in pie. Maybe this is something that's explained in a later chapter, but the <code>+</code> operator which is used in some examples in the first chapters doesn't seem to work, I get an <code>Unknown variable +</code> error. Is that normal?</p>\n<div class=\"codehilite\"><pre><span></span>#lang pie\n(claim a Nat)\n(define a 2)\n(claim b Nat)\n(define b 4)\n(claim c Nat)\n(define c (+ a b))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151144707,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1544219079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36e38f07213a4459a526a3334d690aa09a75b04d?x=x&version=3",
            "client": "website",
            "content": "<p><a href=\"https://stackoverflow.com/questions/53582408/unknown-variable\" target=\"_blank\" title=\"https://stackoverflow.com/questions/53582408/unknown-variable\">https://stackoverflow.com/questions/53582408/unknown-variable</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157480194,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "iain@mccoy.id.au",
                        "full_name": "Iain McCoy (he) (SP2'17)",
                        "id": 100806
                    },
                    "user_id": 100806
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jrojasdavalos@gmail.com",
                        "full_name": "Junior Rojas (he) (S1'16)",
                        "id": 9347
                    },
                    "user_id": 9347
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dclau04@gmail.com",
            "sender_full_name": "Daniel Lau (he) (SP2'17)",
            "sender_id": 100522,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "The little typer",
            "submessages": [],
            "timestamp": 1549221603,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's an online functional programming seminar series starting with SPJ next Monday that looks like will have many potentially interesting talks: <a href=\"http://chalmersfp.org/\" title=\"http://chalmersfp.org/\">http://chalmersfp.org/</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196648538,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1172",
                    "emoji_name": "cool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aya@charaf.xyz",
                        "full_name": "aya charaf (she/they) (SP1'20)",
                        "id": 263956
                    },
                    "user_id": 263956
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "gnusosa.mx@gmail.com",
                        "full_name": "Carlos Sosa (he) (SP2'20)",
                        "id": 276586
                    },
                    "user_id": 276586
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nandaja.varma@gmail.com",
                        "full_name": "Nandaja Varma N (she) (SP1'17)",
                        "id": 100518
                    },
                    "user_id": 100518
                },
                {
                    "emoji_code": "1172",
                    "emoji_name": "cool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "jasdev@jasdev.me",
                        "full_name": "Jasdev Singh (he) (SP2'20)",
                        "id": 8474
                    },
                    "user_id": 8474
                },
                {
                    "emoji_code": "1172",
                    "emoji_name": "cool",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1100",
                    "emoji_name": "lambda",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 102134,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Simon Peyton Jones on Zoom",
            "submessages": [],
            "timestamp": 1588777871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p>Oh no! I missed the first talk. Is there a recording of the talk anywhere? Cant find anything on youtube.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197389586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Simon Peyton Jones on Zoom",
            "submessages": [],
            "timestamp": 1589363267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it's going to be posted but hasn't been yet.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197483028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Simon Peyton Jones on Zoom",
            "submessages": [],
            "timestamp": 1589407245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>The first talk had some technical issues-- I attended the first one \"live\" but I'm going to watch the others once the recordings are available because I think it'll be a better experience</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197483099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Simon Peyton Jones on Zoom",
            "submessages": [],
            "timestamp": 1589407294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>SPJ's talk! <a href=\"https://www.youtube.com/watch?v=ZuNMo136QqI\">https://www.youtube.com/watch?v=ZuNMo136QqI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ZuNMo136QqI\" href=\"https://www.youtube.com/watch?v=ZuNMo136QqI\"><img src=\"https://i.ytimg.com/vi/ZuNMo136QqI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197589246,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                }
            ],
            "recipient_id": 102134,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Simon Peyton Jones on Zoom",
            "submessages": [],
            "timestamp": 1589477079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure of the right channel for this (can one crosspost?). I've just put the full text of Logic and Computation Intertwined on my Web site. <a href=\"https://cs.uwaterloo.ca/~plragde/flaneries/LACI/\">https://cs.uwaterloo.ca/~plragde/flaneries/LACI/</a> It's a mini-textbook based on work that had its first public airing at RC when I was a resident, in fall 2015. It's about learning logic by building a very small proof assistant in Racket, and it also has sections on Agda and Coq. Please alert anyone you think might be interested!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202498836,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dwinston@alum.mit.edu",
                        "full_name": "Donny Winston (he) (W1'19)",
                        "id": 246979
                    },
                    "user_id": 246979
                }
            ],
            "recipient_id": 102134,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593553312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Woah cool, thanks for sharing!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202558856,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593604133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e3320e126276138a2347efd87ca2a61bd1ab4016?x=x&version=2",
            "client": "website",
            "content": "<p>I love the use of executable functional notation. It reminds me of Sussman and Wisdom's <a href=\"https://groups.csail.mit.edu/mac/users/gjs/6946/sicm-html/book-Z-H-4.html\">Structure and Interpretation of Classical Mechanics (SICM)</a>:</p>\n<blockquote>\n<p>The traditional use of ambiguous notation is convenient in simple situations, but in more complicated situations it can be a serious handicap to clear reasoning...Our notation is functional...We require that our mathematical notations be explicit and precise enough that they can be interpreted automatically, as by a computer.</p>\n</blockquote>\n<p>I also love the \"fl\u00e2nerie\" approach. As you mention in your TYR one, \"patience is sometimes a luxury we cannot afford and sometimes a virtue we choose to forego\". Thanks for sharing here!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202566826,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "dwinston@alum.mit.edu",
            "sender_full_name": "Donny Winston (he) (W1'19)",
            "sender_id": 246979,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593609242,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>paging <span class=\"user-mention\" data-user-id=\"256945\">@Pius Uzamere (he) (SP2'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202596942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593623819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111960\">@Adam Palay (he) (SP2'18)</span> is this something you'd be interested in?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202632797,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593643723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111920\">@Rory Sawyer (he) (SP2'18)</span> yes, thanks. And hi <span class=\"user-mention\" data-user-id=\"8655\">@Prabhakar Ragde (he)</span> ! I recently became friends with one of your former students at waterloo</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202635205,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593645867,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111960\">@Adam Palay (he) (SP2'18)</span> Hi, and ha. You will learn the truth! Who is it, if you care to share?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202636938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593647518,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Dan Li?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202698297,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593701251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>Vaguely related: here's my fantasy for a first computer science lecture at university, using Agda. <a href=\"https://cs.uwaterloo.ca/~plragde/flaneries/FICS/preludes.html\">https://cs.uwaterloo.ca/~plragde/flaneries/FICS/preludes.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202751994,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593729413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"111960\">@Adam Palay (he) (SP2'18)</span> The name isn't familiar but if \"Dan\" is an English name and they have a Chinese name I might know that instead.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202752145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593729537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Ah, not that I know of :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202944331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Logic and Computation Intertwined",
            "submessages": [],
            "timestamp": 1593994594,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/57ad6b289d2b066f6497c2c7a542f246?d=identicon&version=1",
            "client": "website",
            "content": "<p>Along with Nate Foster and Talia Ringer, I\u2019m organizing the Programming Languages Mentoring Workshop (PLMW) in conjunction with the International Conference on Functional Programming (ICFP) next month. PLMW is a series of workshops designed to encourage people to pursue careers in programming languages (PL) research. This edition of PLMW will be held online on August 23, the day before the main ICFP conference (also online), and we have a wonderful lineup of talks that will inform, enlighten, entertain, and inspire:</p>\n<ul>\n<li>Amal Ahmed on \u201cManaging Your Research, Your Advisor, Your Ph.D.\u201d;</li>\n<li><span class=\"user-mention\" data-user-id=\"2178\">@Nada Amin</span>  on \u201cMining Knowledge Graphs for COVID-19 Drug Repurposing\u201d;</li>\n<li>Derek Dreyer on \u201cHow To Write Papers So People Can Read Them\u201d;</li>\n<li>Kenny Foner on \u201cHow Can I Academia When My Brain Can\u2019t Even? Mental Health in Grad School and Beyond\u201d;</li>\n<li>Nadia Polikarpova on \u201cConstraint Solvers for the Working PL Researcher\u201d;</li>\n<li>David Van Horn on \u201cBasic Mechanics of Operational Semantics\u201d;</li>\n<li>and a panel discussion, \u201cMaking a career in PL (even in uncertain times)\u201d, moderated by Simon Peyton Jones, with five great panelists: Jos\u00e9 Calder\u00f3n, Sarah Chasins, Kathleen Fisher, Benjamin Pierce, and Jeff Vaughan.</li>\n</ul>\n<p>PLMW is free, but you need to apply and be accepted in order to participate fully.  Fortunately, applying is easy!  There are testimonials from past PLMW attendees on <a href=\"https://icfp20.sigplan.org/home/plmw-icfp-2020\">our web page</a>, and you can read <a href=\"http://composition.al/blog/2020/07/20/yet-another-post-telling-you-to-apply-to-plmw/\">this blog post</a> for more details about why I'm urging you to apply.  I'm happy to talk with Recursers individually about it, too -- just let me know. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n<p>The deadline to apply is August 8; <a href=\"https://icfp20.sigplan.org/home/plmw-icfp-2020#Apply-Now\">here's the application form</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204522430,
            "is_me_message": false,
            "last_edit_timestamp": 1595364906,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sory.rawyer@gmail.com",
                        "full_name": "Rory Sawyer (he) (SP2'18)",
                        "id": 111920
                    },
                    "user_id": 111920
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "PLRedmond@gmail.com",
                        "full_name": "Patrick Redmond (W'14)",
                        "id": 5014
                    },
                    "user_id": 5014
                }
            ],
            "recipient_id": 102134,
            "sender_email": "lindsey@composition.al",
            "sender_full_name": "Lindsey Kuper (she)",
            "sender_id": 2170,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Apply to PLMW!",
            "submessages": [],
            "timestamp": 1595319821,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (S2'20)</span> <span class=\"user-mention\" data-user-id=\"328929\">@Roujia Wen (she) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"328942\">@Izaak Sofer (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"328918\">@Hannah Lazarus (she) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"327414\">@Dan Miller (he) (F1'20)</span> starting a topic for CIS 194</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207167972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597683162,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>woo! I wasn't able to adjust my sleep schedule enough to get there this morning, but I will have questions about the \"double every other number\" problem tomorrow morning :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207168084,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597683234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the wiki page, everyone should feel free to post reading notes / assignment code etc as we progress through the course! <a href=\"https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020\">https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207168385,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597683384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> as well :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207168902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597683700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> , who I believe has also done the legwork of setting up the wiki and recurring event.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207169069,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597683792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>Amazing! Thank you <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207186528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597692353,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>Hey I won't be there today - I've got an emergency that I need to deal with! See you tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207256666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597756056,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey everyone, working on the insert function for homework two...I think i have my recursive case down for searching down on the right or left, but I'm stuck on how to actually figure out when to insert, essentially my base case</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207265653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597760765,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>NVM, got it. Forgot about the Leaf type</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207266223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597761027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Does anybody wanna pair on the Week 2 Problem set this afternoon? I'm realizing I won't be able to make tomorrow morning because I am travelling.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207277854,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597766251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0af95e0b4e2b7aeb21daabfa9070cd7c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I won't be there today! Have lots o fun.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207404044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "hannah.lazarus+recurse@gmail.com",
            "sender_full_name": "Hannah Lazarus (she) (F1'20)",
            "sender_id": 328918,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597842104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does anyone know how to convert IO [LogMessage] to a [LogMessage]?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207409033,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597844557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I do not, apologies. So we have solutions for these Problem sets?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207416656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597848191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Try <code>import System.IO.Unsafe (unsafePerformIO)</code> -- <a href=\"http://hackage.haskell.org/package/base-4.14.0.0/docs/System-IO-Unsafe.html\">hackage</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207416924,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597848333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And yes, we hae example Week 2 solutions posted on the wiki</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207417020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597848371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Gotcha, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207417246,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597848488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327388\">Daniel McCrevan (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207409033\">said</a>:</p>\n<blockquote>\n<p>Does anyone know how to convert IO [LogMessage] to a [LogMessage]?</p>\n</blockquote>\n<p>You can definitely use <code>unsafePerformIO</code> to extract an <code>a</code> from an <code>IO a</code>, but usually it's not necessary to do so, and should be avoided in most cases since <code>unsafePerformIO</code> can sometimes cause some weird and hard-to-reason-about things to happen.</p>\n<p>You would usually operate on the <code>a</code> inside an <code>IO a</code> using the <code>Functor</code>, <code>Applicative</code>, and <code>Monad</code> typeclass functions, or with <code>do</code> notation (which is syntactic sugar for <code>Monad</code> typeclass functions).</p>\n<p>What are you looking to do with a <code>[LogMessage]</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207481497,
            "is_me_message": false,
            "last_edit_timestamp": 1597888437,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597888281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey! I found this great github repo with hundreds* of Haskell examples ranging over many topics. Check it out!</p>\n<p><a href=\"https://github.com/sdiehl/wiwinwlh\">https://github.com/sdiehl/wiwinwlh</a><br>\n<a href=\"http://dev.stephendiehl.com/hask/\">http://dev.stephendiehl.com/hask/</a><br>\n*I didn't count them and it's not explicitly labeled, but there seems to be a lot.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207488488,
            "is_me_message": false,
            "last_edit_timestamp": 1597905824,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "kseniaroselake@gmail.com",
                        "full_name": "Ksenia Rose Lake (she) (m2'20)",
                        "id": 264905
                    },
                    "user_id": 264905
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597898902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"264095\">Alex Chen (he) (SP1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207481497\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327388\">Daniel McCrevan (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207409033\">said</a>:</p>\n<blockquote>\n<p>Does anyone know how to convert IO [LogMessage] to a [LogMessage]?</p>\n</blockquote>\n<p>You can definitely use <code>unsafePerformIO</code> to extract an <code>a</code> from an <code>IO a</code>, but usually it's not necessary to do so, and should be avoided in most cases since <code>unsafePerformIO</code> can sometimes cause some weird and hard-to-reason-about things to happen.</p>\n<p>You would usually operate on the <code>a</code> inside an <code>IO a</code> using the <code>Functor</code>, <code>Applicative</code>, and <code>Monad</code> typeclass functions, or with <code>do</code> notation (which is syntactic sugar for <code>Monad</code> typeclass functions).</p>\n<p>What are you looking to do with a <code>[LogMessage]</code>?</p>\n</blockquote>\n<p>Right, this was just in the context of \"oh we just want to debug something quickly, accepting side effects\"; Applicatives, Functors, and Monads all come in later weeks of the course :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207513000,
            "is_me_message": false,
            "last_edit_timestamp": 1597923660,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "awchen@fastmail.com",
                        "full_name": "Alex Chen (he) (SP1'20)",
                        "id": 264095
                    },
                    "user_id": 264095
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597923623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey! I got a late start today. I'll be in at ~9:30am/</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207518306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597927939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"314689\">Jacob Vartuli-Schonberg (he) (S2'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207518306\">said</a>:</p>\n<blockquote>\n<p>Hey! I got a late start today. I'll be in at ~9:30am/</p>\n</blockquote>\n<p>Jacob, wanna jump into our own room? I was late too.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207523192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597930896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>We wrapped up Week 2 HW today and read Week 3 text, so tomorrow we'll be pairing on Week 3 HW<br>\n'</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207528756,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597934042,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Anyone around to help me get unstuck with <code>whatWentWrong</code> of Pset 2?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207529251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597934270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>i can for the next 20 mins, pairing station 4? <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207529829,
            "is_me_message": false,
            "last_edit_timestamp": 1597934548,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597934540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> let's do it!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207529855,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597934553,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/833ed696bb4b9faaa8adbba9e8a2d9a8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327353\">Taro Kuriyama (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207513000\">said</a>:</p>\n<blockquote>\n<p>Right, this was just in the context of \"oh we just want to debug something quickly, accepting side effects\"; Applicatives, Functors, and Monads all come in later weeks of the course :)</p>\n</blockquote>\n<p>Ah, I see! Sorry for replying without the proper context.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207565447,
            "is_me_message": false,
            "last_edit_timestamp": 1597952763,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurachistic@gmail.com",
                        "full_name": "Yura Chistov (he) (F1'20)",
                        "id": 328912
                    },
                    "user_id": 328912
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "awchen@fastmail.com",
            "sender_full_name": "Alex Chen (he) (SP1'20)",
            "sender_id": 264095,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597952401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Waaaait a second, is the way that I tell the compiler to cast this int as a TimeStamp (<code>::</code>) the same thing that I'm doing whenever I explicitly tell the compiler what the type of a function is?? :mindblown:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">parseTime</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">TimeStamp</span>\n<span class=\"nf\">parseTime</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">read</span> <span class=\"n\">x</span> <span class=\"ow\">::</span> <span class=\"kt\">TimeStamp</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207572543,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597956412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>am I just like ... type casting/asserting <code>parseTime</code> is a <code>String -&gt; Timestamp</code>, and that's all a \"type annotation\" is? Or am I reading too much in to this? :P</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207572600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597956448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm not sure if it's exactly how the compiler behaves, but that's the model I subscribe to.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207574189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597957352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I am really enjoying the second homework. I developed a \"take home coding problem\" (to replace whiteboard interviewing) at my last job which is basically this exercise, modeled off of work we actually had to do to parse logs coming from <a href=\"https://github.com/moby/buildkit\">Docker buildkit</a> that could arrive out of order.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207581367,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597962089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>What you've got here is not quite a cast! My mental model of casting is that you'd be saying \"just parse this string for me, then convert the result to this type\". I'm going to try to explain how the compiler sees it and how your interpretation is similar to the compiler - close enough to get things done, for sure - but also different in some ways that I find super-interesting.</p>\n<p>You are completely right that it's a type annotation very like the one you use when you're telling the compiler about the type of a function, but there are some tricksy details about annotating an expression (where a value is computed and returned) vs annotating a binding (where you declare that a name refers to an expression) that mean it's not quite the same thing. The main way you'll experience this difference is that some expressions can only be annotated with the use of various ghc extensions.</p>\n<p>What's going on here is that the \"read\" function is declared by a typeclass, which is a haskell feature that lets\u00a0the same name refer to many different functions with similar but not identical types. At compile time the compiler sees that the name you've used is a function defined by a typeclass and it finds the version of the function whose type works in the context where you've used it.</p>\n<p>In this case that means it finds you a function that goes directly from a string to a Timestamp. Boom! There is a lot more to typeclasses than that, but\u00a0that's all stuff you have to look forward to later on in your Haskell adventure :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207585732,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1597965654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"328912\">@Yura Chistov (he) (F1'20)</span> here's the study group topic, sorry for the omission!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207629925,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598014198,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">partition</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span>\n  <span class=\"n\">partition</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">filter</span> <span class=\"p\">(</span><span class=\"o\">/=</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207633231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598016234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://hackage.haskell.org/package/Unique-0.4.7.8/docs/Data-List-Unique.html#v:countElem\">https://hackage.haskell.org/package/Unique-0.4.7.8/docs/Data-List-Unique.html#v:countElem</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207634108,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598016753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(5,3) -&gt; 5 = ***</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207635173,
            "is_me_message": false,
            "last_edit_timestamp": 1598017366,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598017355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><code>genRow x xs = [if i == x then '*' else ' ' | i &lt;- xs]</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207636362,
            "is_me_message": false,
            "last_edit_timestamp": 1598017971,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598017961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> <a href=\"https://github.com/bitemyapp/fp-course\">this is the link</a> I was thinking of, it follows from the <a href=\"https://github.com/bitemyapp/learnhaskell\">Learn Haskell</a> recommendation for what to do after cis194</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207641762,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598020744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>happy to do something else too, though!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207641802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598020770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I found this good explanation of the difference between application operator (<code>$</code>) and function composition (<code>.</code>) <a href=\"https://nanxiao.me/en/differentiate-application-operator-and-function-composition-in-haskell/\">https://nanxiao.me/en/differentiate-application-operator-and-function-composition-in-haskell/</a> this had been confusing me a bunch</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207643587,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598021627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Is anyone up to pair on problem set 4 tomorrow afternoon?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207743470,
            "is_me_message": false,
            "last_edit_timestamp": 1598136097,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598132857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Won\u2019t be online today, food poisoning is not fun, I\u2019ll be online tmro (hopefully!)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207836602,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f912",
                    "emoji_name": "sick",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "1f912",
                    "emoji_name": "sick",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598271947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327388\">Daniel McCrevan (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/207836602\">said</a>:</p>\n<blockquote>\n<p>Won\u2019t be online today, food poisoning is not fun, I\u2019ll be online tmro (hopefully!)</p>\n</blockquote>\n<p>Sorry to hear it! Feel better.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207836892,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598272131,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0af95e0b4e2b7aeb21daabfa9070cd7c?d=identicon&version=1",
            "client": "website",
            "content": "<p>going back in time:<br>\nHaskell 1990 - has list comprehensions<br>\nMiranda 1985 - has list comprehensions <br>\nNPL 1977 - has list comprehensions but calls them \"set comprehensions\" <br>\nSETL 1969 - has a set formation construct similar to list comprehensions</p>\n<p>\"List Comprehension\" coined by Phil Wadler who worked on Orwell language (influened by Miranda, influencing Haskell and also worked on one of a few query languages that use list comprehensions, including C# 3.0 LINQ released 2007 )</p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_comprehension#History\">https://en.wikipedia.org/wiki/List_comprehension#History</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207872346,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 102134,
            "sender_email": "hannah.lazarus+recurse@gmail.com",
            "sender_full_name": "Hannah Lazarus (she) (F1'20)",
            "sender_id": 328918,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598290665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>If anyone is around right now, I could use someone to help me wiggle my way out of a knot in Problem Set 3. Not too hard, I don't believe.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207894676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598301599,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here's the lecture in Functional Design Patterns: <a href=\"https://www.youtube.com/watch?v=srQt1NAHYC0\">https://www.youtube.com/watch?v=srQt1NAHYC0</a> : for a Friday event.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"srQt1NAHYC0\" href=\"https://www.youtube.com/watch?v=srQt1NAHYC0\"><img src=\"https://i.ytimg.com/vi/srQt1NAHYC0/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207959956,
            "is_me_message": false,
            "last_edit_timestamp": 1598365688,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598360876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does foldr calculate in this sequence? For example <code>foldr (+) 5 [1,2,3,4]</code></p>\n<p>5 + 4 = 9<br>\n9 + 3 = 12<br>\n12 + 2 = 14<br>\n14 + 1 = 15</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207996230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598377536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span>  it does! Expanded completely, it should look like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ow\">=</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"n\">foldr</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"kt\">[]</span><span class=\"p\">))))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">))))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">9</span><span class=\"p\">)))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">))</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p><code>foldl</code> for the same operation: it being endomorphic <code>a -&gt; a -&gt; a</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ow\">=</span> <span class=\"n\">foldl</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"mi\">5</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"n\">foldl</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"n\">foldl</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"p\">((</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"n\">foldl</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"p\">(((</span><span class=\"mi\">5</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"ow\">=</span> <span class=\"n\">foldl</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"p\">(((((</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"kt\">[]</span>\n<span class=\"ow\">=</span> <span class=\"p\">(((((</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"ow\">=</span> <span class=\"p\">((((</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"ow\">=</span> <span class=\"p\">(((</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"ow\">=</span> <span class=\"p\">((</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208018056,
            "is_me_message": false,
            "last_edit_timestamp": 1598387405,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598387054,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also, their is a <code>foldl'</code> which is useful too.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208021037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598388339,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I'll be 30 minutes late today. If anybody would like to pair on Problem Set 4, let me know. I gave a wack at most of the problems and got stuck every time.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208073944,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598437128,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can't make it today, but there a re a few folks who are catching up to/on week 4 so you're in good company :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208087468,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598446818,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0af95e0b4e2b7aeb21daabfa9070cd7c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> we'll be going over chapter 4 then trying some exercises so wanna join at pairing station 4 anytime</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208089192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "hannah.lazarus+recurse@gmail.com",
            "sender_full_name": "Hannah Lazarus (she) (F1'20)",
            "sender_id": 328918,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598447873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hmm, any idea what's wrong with this <code>xor</code> function here? I have a feeling I am missing something simple <a href=\"https://repl.it/@dmiller313/NanoVoluminousTranslation#main.hs\">https://repl.it/@dmiller313/NanoVoluminousTranslation#main.hs</a></p>\n<p>What I want to happen, and this might not be fulfilling the exercise requirements but whatever, is to count how many trues there are and then check if that number is odd. So fold over the list of bools, counting each true</p>\n<p>But I _think_ the value of my accumulator is Bool for some reason? And I'm not sure how to get it to be int. I assumed that it would assume it was an int because I am passing in 0 for the empty value</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208107909,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598455876,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(.) is function composition; you're trying to apply the argument xs, so you'll need to switch to ($) instead, or keep the (.) and omit the xs references</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208111663,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598457717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>which is what GHCI tries to tell you: <code>Couldn't match expected type </code>Bool' with actual type `a0 -&gt; Bool'</p>\n<div class=\"codehilite\"><pre><span></span><code>* Probable cause: &#39;(.)&#39; is applied to too few arguments`\n</code></pre></div>\n\n\n<p>(and btw, the type of your accumulator is an integral; your <code>odd</code> has type <code>Integral a -&gt; Bool</code> achieving what you want)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208112820,
            "is_me_message": false,
            "last_edit_timestamp": 1598458450,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598458280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>ohhh thanks <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> ! The thing I was missing was that the <code>xs</code> didn't need to be on the left hand side of the = sign. Syntax is hard!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208115667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598459689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I gotta say, I just perused Learn You A Haskell for the first time, and I find it to be soooo much friendlier than the CIS 194 lecture text. If you're struggling with these problem sets and haven't yet checked it out, I highly recommend.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208134652,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hannah.lazarus+recurse@gmail.com",
                        "full_name": "Hannah Lazarus (she) (F1'20)",
                        "id": 328918
                    },
                    "user_id": 328918
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598469030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Adventure with Types in Haskell - Simon Peyton Jones (Lecture 1) :: <a href=\"https://youtu.be/6COvD8oynmI\">https://youtu.be/6COvD8oynmI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6COvD8oynmI\" href=\"https://youtu.be/6COvD8oynmI\"><img src=\"https://i.ytimg.com/vi/6COvD8oynmI/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208224386,
            "is_me_message": false,
            "last_edit_timestamp": 1598538665,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598538642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>As a reminder, tomorrow is catch-up day, so folks can catch up on Week 5 and/or pick a Haskell / FP talk to watch</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208249099,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598549173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Or really do anything of choice!)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208249175,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598549212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>(Week 4 Exercise 4) Did anyone figure out how to do the Sieve of Sundaram problem using function composition?</p>\n<p>The instructor seems to ask for code that looks like (i.e. point-free style)</p>\n<div class=\"codehilite\"><pre><span></span><code>sieveSundaram :: Integer -&gt; [Integer]\nsieveSundaram = ...\n</code></pre></div>\n\n\n<p>I can only think of how to solve this problem using n explicitly in the definition, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>sieveSundaram :: Integer -&gt; [Integer]\nsieveSundaram n = ...\n</code></pre></div>\n\n\n<p>This is because I'll need to use n several times in the function definition. Does anyone know how this can be solved using point-free style? <a href=\"/user_uploads/13/KrHVBSQs-FxX2QNkht0cs2m8/w4_hw.pdf\">w4_hw.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208503318,
            "is_me_message": false,
            "last_edit_timestamp": 1598820010,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598819976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>If you want it point free, you can have the rightmost function responsible for generating a list from <code>[1..n]</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">point_free_list</span> <span class=\"ow\">::</span> <span class=\"kt\">Integer</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Integer</span><span class=\"p\">]</span>\n<span class=\"nf\">point_free_list</span> <span class=\"ow\">=</span> <span class=\"n\">flip</span> <span class=\"n\">take</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208511310,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598833803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This week : Mon / Tue Week 6; Wed / Thu Week 7; Friday regular time is cancelled, instead Alex Chen will be telling us a bit about his Haskell game from 11:30am - 12pm ET (in the RC calendar, though I couldn't delete the occurence of the regular Friday session)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208564582,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598884380,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Sorry I missed today friends! I'm on the west coast and blew my time zone math. Will be playing catchup on pset 5 today if anyone wants to join.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208568242,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598885814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have any experience with cabal? For some reason I cannot get Data.Text to be imported into a simple program. I have cabal &amp; ghc both installed</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208576102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598889102,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>When I run <code>cabal install text</code> it throws me some conflict issue with <code>deepseq</code> : <code>base-4.14.0.0 (has the same characteristics that caused the previous version to fail: excluded by constraint '&gt;=4.5 &amp;&amp; &lt;4.14' from 'deepseq')</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208576378,
            "is_me_message": false,
            "last_edit_timestamp": 1598889236,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598889216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You may want to just re-install the Haskell Platform, if that's an option. Otherwise maybe try posting in the <code>haskell</code> stream?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208579070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598890178,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Figured it out, strange issue. Apparently I didn't have the <code>ghc</code> package installed on my system. I had <code>ghc-cabal</code> which provided me with the <code>ghc</code> and <code>ghci</code> binaries, but I didn't have all off the other things required for actually installing haskell packages.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208583469,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1598891806,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>FYI <a href=\"https://twitter.com/MuniHac/status/1301128764508831744\">https://twitter.com/MuniHac/status/1301128764508831744</a> (free 6-hr Haskell introductory workshop plus various talks Fri/Sat)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/MuniHac/status/1301128764508831744\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1108851734204555265/UvxHWpOb_normal.png\"></a><p>If you want to learn Haskell, then Virtual MuniHac 11-12 September 2020 is an ideal opportunity. We have a two-part introductory workshop (2 x 3 hours) with plenty of exercises by <a href=\"https://twitter.com/quch3n\">@quch3n</a> in the program! Registration is free. <a href=\"https://t.co/4Fjk6paGpO\">https://munihac.de/2020.html#speakers</a></p><span>- MuniHac (@MuniHac)</span></div></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208817644,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599050780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fragment from study group today <a href=\"https://gist.github.com/tkuriyama/0da7c3c7a01c459e3401d016437893bb\">https://gist.github.com/tkuriyama/0da7c3c7a01c459e3401d016437893bb</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208832348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599057041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have any recommendation for an http client library? It seems the package <code>http-client</code>'s documentation is out of date and <code>req</code> doesn't have any tutorials/examples of using query parameters so its been pretty tough diving into the source code to figure out how the whole query param/flag types work</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208878606,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599076460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>*In haskell ^</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208878626,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599076473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I used <code>wreq</code> a while back and thought the docs were OK (I think that's the one that they mention in \"The Haskell Book\").</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208878973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599076664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>AH okay, ill check it out thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208879101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599076719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wow, got <code>wreq</code> within minutes when i was hacking at the others for an hour...lol</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208879988,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599077135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Niceeee</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208880167,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599077227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I found a great text on Category Theory and Haskell last night. There's an accompanying set of lectures too!</p>\n<p>text -- <a href=\"https://github.com/hmemcpy/milewski-ctfp-pdf/\">https://github.com/hmemcpy/milewski-ctfp-pdf/</a></p>\n<p>part 1 -- <a href=\"https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_\">https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_</a><br>\npart 2 -- <a href=\"https://www.youtube.com/playlist?list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm\">https://www.youtube.com/playlist?list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm</a><br>\npart 3 -- <a href=\"https://www.youtube.com/playlist?list=PLbgaMIhjbmEn64WVX4B08B4h2rOtueWIL\">https://www.youtube.com/playlist?list=PLbgaMIhjbmEn64WVX4B08B4h2rOtueWIL</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208963297,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "wenroujia@gmail.com",
                        "full_name": "Roujia Wen (she) (F1'20)",
                        "id": 328929
                    },
                    "user_id": 328929
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599138414,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Blew right past my alarm this morning! Sorry about that folks. I'll be working through PSet 7 today if anybody would like to continue pairing.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208973072,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599142403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Anybody around for a 15 min pair on Problem Set 7? I have a question about binary trees + annotations.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209027251,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599165902,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'll pair up if you haven't gotten any one else <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209030036,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599167494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"315058\">Justin Holzmann (he) (S2'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/209030036\">said</a>:</p>\n<blockquote>\n<p>I'll pair up if you haven't gotten any one else <span class=\"user-mention silent\" data-user-id=\"327378\">Will Moritz (he) (F1'20)</span></p>\n</blockquote>\n<p>Lezdoit! Pairing station 4! <a href=\"https://recurse.rctogether.com/zoom/pairing_station_4\">https://recurse.rctogether.com/zoom/pairing_station_4</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209030118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599167537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I won\u2019t be online for today\u2019s session 9-10:30, but Alex is showing off his game around whag time? 11:30?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209089085,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599223556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yep, Alex at 11:30am ET in Sammet There is no organized 9 - 10:30am today :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209090292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599224325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>and here i was waking up at 5:30am pt. well if anybody wants to pair on ps7 (i'm starting ex 2.1), lmk!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209090427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599224405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327378\">Will Moritz (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/209090427\">said</a>:</p>\n<blockquote>\n<p>and here i was waking up at 5:30am pt. well if anybody wants to pair on ps7 (i'm starting ex 2.1), lmk!</p>\n</blockquote>\n<p>i'll join!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209090951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599224738,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0af95e0b4e2b7aeb21daabfa9070cd7c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Can you send me the zoom link? I'm having trouble logging in to recurse and really want to join this one! <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209108819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "hannah.lazarus+recurse@gmail.com",
            "sender_full_name": "Hannah Lazarus (she) (F1'20)",
            "sender_id": 328918,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599233880,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry just saw this: Sammet <a href=\"https://recurse.rctogether.com/zoom/sammet\">https://recurse.rctogether.com/zoom/sammet</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209110119,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599234569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>Made a script to test solutions for week7! (my procrastination strategy)<br>\n<a href=\"https://github.com/roujiawen/haskell_cis194/blob/master/w7/Tests.hs\">https://github.com/roujiawen/haskell_cis194/blob/master/w7/Tests.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209123175,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "1f62e",
                    "emoji_name": "open_mouth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f44f",
                    "emoji_name": "clap",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599242252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Will be on in 5</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209382135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599570072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Calling attention to <a href=\"/user_uploads/13/CTa7baikLGolfHO4jYRG0CM_/image.png\">this gem</a> from Learn Your A Haskell</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/CTa7baikLGolfHO4jYRG0CM_/image.png\" title=\"this gem\"><img src=\"/user_uploads/13/CTa7baikLGolfHO4jYRG0CM_/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209504441,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mayaf2003@gmail.com",
                        "full_name": "Maya Farber Brodsky (she) (F1'20)",
                        "id": 327383
                    },
                    "user_id": 327383
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599655002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Public update: Thursday = Week 9 reading, Friday = Week 9 HW, next Monday = Week 10 reading, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209517276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599661232,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Could someone share what  their output for testing maxFun on testCompany?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209553150,
            "is_me_message": false,
            "last_edit_timestamp": 1599678000,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599677980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">\u03bb</span><span class=\"kt\">:</span> <span class=\"n\">maxFun</span> <span class=\"n\">testCompany</span>\n<span class=\"kt\">GL</span> <span class=\"p\">[</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;Sue&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;Sarah&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">17</span><span class=\"p\">}</span>\n   <span class=\"p\">,</span> <span class=\"kt\">Emp</span> <span class=\"p\">{</span><span class=\"n\">empName</span> <span class=\"ow\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">empFun</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n   <span class=\"p\">]</span> <span class=\"mi\">26</span>\n</code></pre></div>\n\n\n<p>This is what I have without filtering <code>null</code> employees.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209556273,
            "is_me_message": false,
            "last_edit_timestamp": 1599679915,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599679441,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>GL [Emp {empName = \"John\", empFun = 1},Emp {empName = \"Sue\", empFun = 5},Emp {empName = \"Fred\", empFun = 3},Emp {empName = \"Sarah\", empFun = 17}] 26</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209588685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599702673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Week 9 has no HW, so for Friday study group let's read Chapter 1 of the Category Theroy book <a href=\"https://github.com/hmemcpy/milewski-ctfp-pdf\">https://github.com/hmemcpy/milewski-ctfp-pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209647653,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599746817,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca621d5447c000c8c5f3cfabbe09d7e48e3f25d?x=x&version=2",
            "client": "website",
            "content": "<p>There's also this happening at 9:30 eastern time on Friday : ) <a href=\"https://munihac.de/2020.html#DavidLuposchainsky\">https://munihac.de/2020.html#DavidLuposchainsky</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209702981,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "wenroujia@gmail.com",
            "sender_full_name": "Roujia Wen (she) (F1'20)",
            "sender_id": 328929,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599768744,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>a former recurser recommend <a href=\"https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/\">this post</a> (about illustrating monads using JavaScript) to me... note that it uses the exact <code>compose</code> function we came up with today! <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span>  in particular :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209790005,
            "is_me_message": false,
            "last_edit_timestamp": 1599835812,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599835703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"327353\">Taro Kuriyama (he) (F1'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/209790005\">said</a>:</p>\n<blockquote>\n<p>a former recurser recommend <a href=\"http://about%20illustrating%20monads%20using%20JavaScript\">this post</a> to me... note that it uses the exact <code>compose</code> function we came up with today! <span class=\"user-mention silent\" data-user-id=\"327378\">Will Moritz (he) (F1'20)</span>  in particular :)</p>\n</blockquote>\n<p>What's the link?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209790125,
            "is_me_message": false,
            "last_edit_timestamp": 1599835789,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599835776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fixed... <a href=\"https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/\">it's also here</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209790249,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599835830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>So I think this is a way to do partial functional application in JS</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209821126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599850683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>        <span class=\"kd\">function</span> <span class=\"nx\">foo</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"s2\">&quot;Today&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Friday&quot;</span><span class=\"p\">);</span>\n        <span class=\"c1\">// &quot;Today is Friday&quot;</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">aboutToday</span> <span class=\"o\">=</span> <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Today&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">aboutToday</span><span class=\"p\">(</span><span class=\"s2\">&quot;is&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cloudy&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\">// &quot;Today is cloudy&quot;</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">todayIs</span> <span class=\"o\">=</span> <span class=\"nx\">aboutToday</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">todayIs</span><span class=\"p\">(</span><span class=\"s2\">&quot;dope.&quot;</span><span class=\"p\">)</span>\n       <span class=\"c1\">// &quot;Today is dope.&quot;</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209821143,
            "is_me_message": false,
            "last_edit_timestamp": 1599850802,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1599850690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Is there some special thing I should be doing for exercise 5? Been stuck on it for a bit trying to hack together some deep case statement</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210147730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600184816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>you should be able to use the previous building blocks... i.e. the simple parsers + Alternative</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210152281,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600186949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Just realized i skipped exercise 4, that'll prob help</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210153688,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600187627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson</span> check out this stream &amp; topic :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210166620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600193277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hey all, won\u2019t be online this morning but I\u2019ll catch up with the reading tonight</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210249597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600256644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"341780\">@Zarak Mahmud</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210262579,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600263643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>As a recap for Fall 2 joiners</p>\n<ul>\n<li>this is the study group wiki: <a href=\"https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020\">https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020</a></li>\n<li>we are wrapping up week 11 of the CIS 194 course this week, and the full course next week; plans after that TBD, but the Learn Haskell page recommends as the next step the <a href=\"https://github.com/bitemyapp/fp-course\">FP Course</a></li>\n<li>feel free to do the CIS 194 at your own pace and Fall 1 batch folks are happy to mentor... or skip that if you are more experienced</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210263673,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600264101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Here's <a href=\"https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/\">the article about monads in JS</a> that Taro recommended.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210515203,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600434513,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> !  I used that reference to find the <a href=\"http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html\">original source</a>.  You might want to look at it.  Very enlightening.  I wonder who the author is.  He really knows his stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210621391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600530366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> where are you in the <em>Haskell School of Music</em>? Perhaps we could work through it together if I can catch up sufficiently.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210621545,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600530673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm on Chapter 9 and have been for a while as I procrastinate... would be glad for some company. I think the author of the blog is a pretty illustrious engineer, <a href=\"https://pwlconf.org/2018/dan-piponi/\">https://pwlconf.org/2018/dan-piponi/</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210622656,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600532208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I mean, this is just insane: <a href=\"https://github.com/dpiponi/quine-central\">https://github.com/dpiponi/quine-central</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210622819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600532445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wait, what? LOL</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210623163,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600532925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wonderful!  I'll try to catch up as quickly as possible.  As I go along, I am writing some <a href=\"https://jxxcarlson.io/tags/music/\">blog posts</a> that might be useful to others just starting out with Euterpea.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210627850,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600539565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I looked at Piponi's web site. Truly amazing.  I read some of his posts on physics.  Superb exposition.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210627970,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600539697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you tried <code>play $ instrument Trombone mel</code>?  For me, changing instruments doesn't change the sound produced.  I'm using Sforzando as my synth.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210632017,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600544697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"342488\">James Carlson</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/210621391\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"327378\">Will Moritz (he) (F1'20)</span> !  I used that reference to find the <a href=\"http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html\">original source</a>.  You might want to look at it.  Very enlightening.  I wonder who the author is.  He really knows his stuff.</p>\n</blockquote>\n<p>Cool, will read that too.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210640586,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600558579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Will be on today at 9:10, had a late start</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210736470,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600692957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since Friday has become a floating day for the FP study group, what do people think of making it Mon - Thu officially, and starting a weekly Elm Hangouts on Friday instead? Maybe 10-11am for a slightly later start on Fridays... tagging a few Elm enthusiasts <span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> <span class=\"user-mention\" data-user-id=\"342488\">@James Carlson</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210756718,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f333",
                    "emoji_name": "tree",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "1f333",
                    "emoji_name": "tree",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                },
                {
                    "emoji_code": "1f333",
                    "emoji_name": "tree",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f333",
                    "emoji_name": "tree",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600701635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Love it, I'm in.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210756769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600701667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Whoa awesome.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210756875,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600701719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Calendars updated!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210757884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600702145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm down to learn elm!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210764549,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600705069,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342347\">@Amanda Hong Galemmo (she) (F2'20)</span> this is the stream that the FP study group has been using :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210768118,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1240",
                    "emoji_name": "parrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "amandagalemmo@gmail.com",
                        "full_name": "Amanda Hong Galemmo (she) (F2'20)",
                        "id": 342347
                    },
                    "user_id": 342347
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600706846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "Internal",
            "content": "<p>Good idea \u2026 although one thing we should talk about is what we should do for the new batch \u2026 there is a lot of interest in FP, and many are just starting out.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210786219,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600715311,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>curious to see what elm. is about as well. may come and go pending taking on too much.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210787012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600715713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm in for doing something with Elm ... have worked with it a lot over the last few years.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210796102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600720413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have a suggestion on language tutorials?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210812893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600730856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>FWIW I've found <a href=\"https://elmprogramming.com/\">this to be useful</a>, though coming from Haskell you can probably skip the Syntax and Semantics section and just look it up when something doesn't work as you expect (at least what's what I've been doing)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210864514,
            "is_me_message": false,
            "last_edit_timestamp": 1600779193,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600778855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I read through most of the official elm guide when I was first learning elm. <a href=\"https://guide.elm-lang.org/\">https://guide.elm-lang.org/</a></p>\n<p>From a language design perspective, Elm is pretty much Haskell without the ability to create your own type classes (so a sharp subset with a friendly compiler &lt;- Rust was inspired by Elm to improve its compiler messaging for instance).</p>\n<p>And then the basic pattern to think about is that you have a Model (application state), an update function (which receives the current model and a message from the Elm runtime), and then a view function (which takes a model and presents it via HTML). So the whole structure is \"functional reactive\", which is pretty <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span> in practice.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210867893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1600780620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sorry about any noises from my background today. My dog wasn't too happy that nobody was entertaining him.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210878679,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f415",
                    "emoji_name": "dog",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600785289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>Hey folks! Sorry I missed this morning, I went surfing early morning and totally forgot to let everybody know. BUT: made progress last night and am now on the last ex of chapter 11! The end is nigh!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210879523,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600785614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>For new joiners, this is the wiki page we've been using to share assignments etc <a href=\"https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020#rcwiki\">https://github.com/recursecenter/wiki/wiki/FP-Study-Group-Fall-2020#rcwiki</a></p>\n<p><span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (F2'20)</span> we are going to take this week to finish Week 12, and plan to try the <a href=\"https://github.com/bitemyapp/fp-course\">FP course</a> starting Monday</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210879528,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600785617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Recently finished up a stat viewer in Elm: <a href=\"https://github.com/IvantheTricourne/slippi-scripts\">https://github.com/IvantheTricourne/slippi-scripts</a></p>\n<p>It's meant to be used with Project Slippi <code>.slp</code> files, which are generated by playing <em>Super Smash Bros. Melee</em> games on appropriate setups (i.e., via Slippi Online or a hacked Wii). Really quite happy with how it turned out, especially given my lack of experience in HTML/CSS (there's &lt;30 lines of actual HTML and <em>NO CSS</em> in the project!). There are a few other future additions that I'd like to add:</p>\n<ul>\n<li>\"Remove\" dependency on <code>node</code>: The viewer should be able to generate the necessary <code>.json</code> info from a directory of <code>.slp</code> files</li>\n<li>Add a frontend (ala <em>Slippi Stat Viewer</em>) for other scripts in the above mentioned repo</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210886236,
            "is_me_message": false,
            "last_edit_timestamp": 1600788255,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "SSBM Slippi Stat Viewer",
            "submessages": [],
            "timestamp": 1600788091,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/RWLSJ0kMgICq2oieoToBcaL3/demo.gif\">demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/RWLSJ0kMgICq2oieoToBcaL3/demo.gif\" title=\"demo.gif\"><img src=\"/user_uploads/13/RWLSJ0kMgICq2oieoToBcaL3/demo.gif\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210886878,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "SSBM Slippi Stat Viewer",
            "submessages": [],
            "timestamp": 1600788320,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Finished lecture 12 homework of CIS 194. What a great course that was!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210894936,
            "is_me_message": false,
            "last_edit_timestamp": 1600791668,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600791662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>This is awesome! I've been wanting to work on Slippi stuff in my batch but aside from <a href=\"https://github.com/vinceau/project-clippi/pull/103\">one feature that might be too niche to be merged</a> I haven't made much progress. Anyways looks great :D</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210898349,
            "is_me_message": false,
            "last_edit_timestamp": 1600793184,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "cfactora93@gmail.com",
                        "full_name": "Carl Joshua Factora (SP1'17)",
                        "id": 100519
                    },
                    "user_id": 100519
                }
            ],
            "recipient_id": 102134,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "SSBM Slippi Stat Viewer",
            "submessages": [],
            "timestamp": 1600793171,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/57ee4628e40dfdc98e509d3cb7d823c7dfaf5eae?x=x&version=4",
            "client": "website",
            "content": "<p>Interesting. I haven't looked into Clippi since it first came out. One of my scripts (<code>getGames.js</code>) was largely based on the \"baby\" version of that replay processor except in CLI form. Might take a look at it!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210904145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "cfactora93@gmail.com",
            "sender_full_name": "Carl Joshua Factora (SP1'17)",
            "sender_id": 100519,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "SSBM Slippi Stat Viewer",
            "submessages": [],
            "timestamp": 1600795690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Anyone working on fp-course List exercises, did you figure out lengthGT4 and the sequence exercise? Those are the only two I can't seem to figure out</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211047658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600887538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>i haven't looked at it since this morning... let's work it out in tomorrow's session!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211074960,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600904389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Starting new topic for folks who have moved on from CIS 194</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211075044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1600904481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'll be a few minutes late to the session this morning.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211126252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600951987,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Hey ya'll, I'm in deep with some bad folks because I promised a 5-m presentation on what I've learned in Haskell. I'm currently thinking that it would be cool to explain the difference between functors, applicatives, and monads.</p>\n<p>If anybody would like to help with this presentation, lmk. My goal would be to make this very intuitive to somebody who doesn't know Haskell (although I don't know if this is possible).</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211137651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1600957186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm happy to chat for a bit, maybe you can use working with the <code>Maybe</code> type as the motivator, many people will have encountered it in other languages, and it is relatively intuitive (e.g. i want to do some operation on two Maybes, and i don't want to unwrap and check for Nothing each time)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211146523,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1600960717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Just completed homework 12. It's running very slow though. Ping me if you're up to help me debug.</p>\n<p>link -- <a href=\"https://github.com/OpenJ92/language/blob/master/haskell/cis194/chapter12/Risk.hs\">https://github.com/OpenJ92/language/blob/master/haskell/cis194/chapter12/Risk.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211180379,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600976555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"314689\">Jacob Vartuli-Schonberg (he) (F2'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/Haskell.20CIS.20194.20Fall.202020/near/211180379\">said</a>:</p>\n<blockquote>\n<p>Just completed homework 12. It's running very slow though. Ping me if you're up to help me debug.</p>\n<p>link -- <a href=\"https://github.com/OpenJ92/language/blob/master/haskell/cis194/chapter12/Risk.hs\">https://github.com/OpenJ92/language/blob/master/haskell/cis194/chapter12/Risk.hs</a></p>\n</blockquote>\n<p>I would be if you're around tn! Just finished as well if you want to peep my attempt: <a href=\"https://github.com/willthefirst/CIS-194/blob/master/week-12/Risk.hs\">https://github.com/willthefirst/CIS-194/blob/master/week-12/Risk.hs</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211181798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600977322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>I tried running a 1000 vs 1000 game, 1000 times. Still waiting on those results ;)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211181861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600977362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>gonna settle for 10 v 10</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211181896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600977369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>WOW BUT HEY WE DID IT</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211181931,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600977389,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span>  Yee! I'll be around 6:00 pm est</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211182484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1600977627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>filtering</code> in Applicative is a bit mind-bending...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211198389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1600987371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Where are you guys starting?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211200478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1600988660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>List -&gt; Functors -&gt; Applicatives in <code>src/Course/</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211200711,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1600988815,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>tyty</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211200923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1600988990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Hey, won\u2019t be online today for the elm meeting, have fun though!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211245016,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601032782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Fyi. Will be a few min to elm. Don't wait up.  I'll hop on and be working through elm tutorial</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211258374,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601041086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This is cool Taro: <a href=\"https://elm-lang.org/examples/mario\">https://elm-lang.org/examples/mario</a> nice share.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211270063,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601046420,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Migrated</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211273067,
            "is_me_message": false,
            "last_edit_timestamp": 1601050429,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601047669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Migrated</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211273854,
            "is_me_message": false,
            "last_edit_timestamp": 1601050414,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601047949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is the Ellie link from today that <span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> wanted to share, if folks want to try to play around with the unicode shifting: <a href=\"https://ellie-app.com/b57Jbhq4syVa1\">https://ellie-app.com/b57Jbhq4syVa1</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211278623,
            "is_me_message": false,
            "last_edit_timestamp": 1601050206,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601050197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This is cool Taro: <a href=\"https://elm-lang.org/examples/mario\">https://elm-lang.org/examples/mario</a> nice share.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211278930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601050332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Also re: making Haskell catch more bugs at compile time. Check out NoRedInk's Prelude: <a href=\"https://github.com/NoRedInk/haskell-libraries/blob/trunk/nri-prelude/nri-prelude.cabal#L70\">https://github.com/NoRedInk/haskell-libraries/blob/trunk/nri-prelude/nri-prelude.cabal#L70</a></p>\n<p>I was on a Scala project for a while and the compiler wasn't tuned well. . . and I found it very frustrating. Like: \"We could have fixed this bug at compile time\". So although Elm may feel overly restrictive at first, it is way nicer than responding to bug fixes from users IMO.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211278936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601050334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't think I know how to use Ellie, somehow I can't work out how to save / sharea a new version... anyway if you copy-paste the below code it does the shifts for unicode as we intended! The <code>mod</code> value restriction is not so easy, it turns out, because emojis are in non-contiguous code points, as far as i can tell.</p>\n<div class=\"codehilite\"><pre><span></span><code>module Main exposing (main)\n\nimport Browser\nimport Char\nimport Html exposing (Html, button, div, h1, input, text)\nimport Html.Attributes exposing (placeholder, style, type_)\nimport Html.Events exposing (onClick, onInput)\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , view = view\n        , update = update\n        }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { plainText : String\n    , cipherText : String\n    , key : Int\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { plainText = &quot;&quot;, cipherText = &quot;&quot;, key = 0 }\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = PlainText String\n    | CipherText String\n    | Key String\n\n\nupdate : Msg -&gt; Model -&gt; Model\nupdate msg model =\n    case Debug.log &quot;update:&quot; msg of\n        PlainText plainText -&gt;\n            { model | plainText = plainText }\n\n        CipherText cipherText -&gt;\n            { model | cipherText = cipherText }\n\n        Key keyString -&gt;\n            let\n                key =\n                    String.toInt keyString |&gt; Maybe.withDefault 0\n\n                cipherText =\n                    encryptWithCaesar key model.plainText\n            in\n            { model | key = key, cipherText = cipherText }\n\n\n\n{- Conversion functions -}\n\n\nstringToIntList : String -&gt; List Int\nstringToIntList string =\n    string\n        |&gt; String.toList\n        |&gt; List.map Char.toCode\n\n\nintListToString : List Int -&gt; String\nintListToString intList =\n    intList\n        |&gt; List.map Char.fromCode\n        |&gt; String.fromList\n\n\n\n{- Encryption Functions -}\n\n\nshift : Int -&gt; Int -&gt; Int\nshift k n = k + n\n    --modBy 26 (k + n)\n\n\nencryptWithCaesar : Int -&gt; String -&gt; String\nencryptWithCaesar k str =\n    str\n        |&gt; stringToIntList\n        |&gt; Debug.log &quot;Int List&quot;\n        |&gt; List.map (shift k)\n        |&gt; Debug.log &quot;Shifted&quot;\n        |&gt; intListToString\n\n\n\n-- VIEW\n\n\nview : Model -&gt; Html Msg\nview model =\n    div\n        mainStyle\n        [ heading\n        , textInput\n        , keyInput\n        , cipherTextDisplay model\n        , message\n        ]\n\n\n\n-- STYLE\n\n\nheading =\n    h1\n        headingStyle\n        [ text &quot;Caesar cipher&quot; ]\n\n\ntextInput =\n    input\n        (plainTextInputStyle\n            ++ [ type_ &quot;text&quot;\n               , placeholder &quot;Plain text&quot;\n               , onInput PlainText\n               ]\n        )\n        []\n\n\ncipherTextDisplay model =\n    div\n        encryptedTextStyle\n        [ text model.cipherText ]\n\n\nkeyInput =\n    input\n        (keyInputStyle\n            ++ [ type_ &quot;text&quot;\n               , placeholder &quot;key&quot;\n               , onInput Key\n               ]\n        )\n        []\n\n\nmessage =\n    div\n        labeStyle\n        [ text &quot;Enter a word in &#39;Plain text&#39; and an integer in &#39;key&#39;&quot; ]\n\n\n\n{- STYLE -}\n\n\nmainStyle =\n    [ style &quot;width&quot; &quot;300px&quot;\n    , style &quot;height&quot; &quot;300px&quot;\n    , style &quot;padding&quot; &quot;15px&quot;\n    , style &quot;margin&quot; &quot;40px&quot;\n    , style &quot;background-color&quot; &quot;rgb(140,140,140)&quot;\n    ]\n\n\nlabeStyle =\n    [ style &quot;width&quot; &quot;210px&quot;\n    , style &quot;height&quot; &quot;32px&quot;\n    , style &quot;font-size&quot; &quot;12pt&quot;\n    , style &quot;padding&quot; &quot;4px&quot;\n    , style &quot;padding-top&quot; &quot;40px&quot;\n    , style &quot;color&quot; &quot;white&quot;\n    ]\n\n\nplainTextInputStyle =\n    [ style &quot;width&quot; &quot;150x&quot;, style &quot;font-size&quot; &quot;14pt&quot; ]\n\n\nheadingStyle =\n    [ style &quot;color&quot; &quot;white&quot;\n    , style &quot;padding-bottom&quot; &quot;20px&quot;\n    ]\n\n\nkeyInputStyle =\n    [ style &quot;width&quot; &quot;65px&quot;, style &quot;margin-top&quot; &quot;15px&quot;, style &quot;font-size&quot; &quot;14pt&quot; ]\n\n\nencryptedTextStyle =\n    [ style &quot;width&quot; &quot;210px&quot;\n    , style &quot;height&quot; &quot;32px&quot;\n    , style &quot;font-size&quot; &quot;18pt&quot;\n    , style &quot;padding&quot; &quot;4px&quot;\n    , style &quot;margin-top&quot; &quot;15px&quot;\n    , style &quot;background-color&quot; &quot;rgb(160, 110, 110)&quot;\n    , style &quot;color&quot; &quot;white&quot;\n    ]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211282987,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601052284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> try this one: <a href=\"https://ellie-app.com/b58XvT65FCta1\">https://ellie-app.com/b58XvT65FCta1</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211284808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601053150,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I made a new one (so that it would be Elm 0.19.1)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211284952,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601053209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have seen it before as well where ellie doesn't save. . . I cant remember why though <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211285358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601053387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>What all is different btw (it looks the same to me haha)?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211285584,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601053499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here are updated Ellie's re crypto with emojis &amp; unicode: <a href=\"https://ellie-app.com/b5b87sLSXgGa1\">Caesar cipher</a>, <a href=\"https://ellie-app.com/b5bc6N9V2cda1\">Caesar cipher for unicode</a>.  All credit to Taro!</p>\n<p><a href=\"/user_uploads/13/Is0CmjuY1p6qMh7r36BlUOxG/Screen-Shot-2020-09-25-at-2.25.46-PM.png\">Screen-Shot-2020-09-25-at-2.25.46-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/Is0CmjuY1p6qMh7r36BlUOxG/Screen-Shot-2020-09-25-at-2.25.46-PM.png\" title=\"Screen-Shot-2020-09-25-at-2.25.46-PM.png\"><img src=\"/user_uploads/13/Is0CmjuY1p6qMh7r36BlUOxG/Screen-Shot-2020-09-25-at-2.25.46-PM.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211295795,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601058531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Nice, as far as I can tell our live-coded verision was ok, it's just that using latest Elm corrected String.toList treatment of Unicode codepoints... I guess we could compare with older Elm version but i'm too lazy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211325387,
            "is_me_message": false,
            "last_edit_timestamp": 1601073054,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601073031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone want to work on Applicatives over the weekend?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211335766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601085406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm up for that, family constraints aside.  What time were you thinking of doing that?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211341912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601095122,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Taro, the reason you couldn't save was because my example was made with an old version of the compiler.  With the updated version of the Caesar Ellie, you can modify and save.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211341927,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601095201,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> I was thinking sometime Sunday morning.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211360083,
            "is_me_message": false,
            "last_edit_timestamp": 1601134774,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601126928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Got a basic english plaintext &lt;&gt; emojis working: <a href=\"https://ellie-app.com/b5ynW47cHCVa1\">https://ellie-app.com/b5ynW47cHCVa1</a><br>\n\u3299\ud83c\uddf7\ud83c\ude2f\ud83c\ude2f\ud83c\ude34\u2702\ud83c\udd98\ud83c\ude34\ud83c\ude37\ud83c\ude2f\ud83c\uddf5<br>\nThe key is, of course, 42</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211362655,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601130674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> <br>\nI'm pretty stuck on filtering. The closest I've got (which may be very far away) is the following.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">filtering</span> <span class=\"ow\">::</span> <span class=\"kt\">Applicative</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:.</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"kt\">True</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"kt\">:.</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Nil</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"kt\">Nil</span>\n</code></pre></div>\n\n<p>but the guard expects an input of <code>Bool</code>, not <code>f Bool</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211370341,
            "is_me_message": false,
            "last_edit_timestamp": 1601141130,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601141034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right, you are lifting <code>(==)</code> with <code>pure</code> so you get <code>f bool</code>. I tried going down that path as well! I think you're close, though. If you can find a way to access both <code>x</code> and <code>pred x</code> at the same time outside of the guard, you'll be able to decide to include <code>x</code> or not (as you're already trying to do)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211379877,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601150011,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Kind of like an Alternative?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211380166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601150424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "Internal",
            "content": "<p>That should work.  What technology do you want to use?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211381050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601151770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"314689\">Jacob Vartuli-Schonberg (he) (F2'20)</span> <a href=\"#narrow/stream/100484-functional-programming/topic/fp-course.20Fall.202020/near/211380166\">said</a>:</p>\n<blockquote>\n<p>Kind of like an Alternative?</p>\n</blockquote>\n<p>Hmm, that's interesting, in my mind you need both <code>x</code> and <code>f Bool</code> (the resultof <code>pred x</code>, rather than one or the other -- and then you can keep just the <code>x</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211383088,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601154988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is keeping me up now. Here are some morsels assuming <code>(Monad f, App f) =&gt; ... f</code></p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- 1</span>\n<span class=\"nf\">filtering'</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Applicative</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering'</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:.</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"kt\">True</span>  <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"kt\">:.</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering'</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:.</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"kt\">False</span> <span class=\"ow\">=</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering'</span> <span class=\"kr\">_</span>    <span class=\"p\">(</span><span class=\"kt\">Nil</span><span class=\"p\">)</span>   <span class=\"kr\">_</span>     <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"kt\">Nil</span>\n\n<span class=\"nf\">filtering</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Applicative</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs'</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:.</span><span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">filtering'</span> <span class=\"n\">pred</span> <span class=\"n\">xs'</span>\n\n<span class=\"c1\">-- 2</span>\n<span class=\"nf\">filtering</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Applicative</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:.</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"o\">==</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"kt\">True</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"kt\">:.</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Nil</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"kt\">Nil</span>\n\n<span class=\"c1\">-- 3</span>\n<span class=\"nf\">filtering</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Applicative</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:.</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n  <span class=\"ow\">=</span> <span class=\"kr\">if</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">pure</span> <span class=\"kt\">True</span>\n    <span class=\"kr\">then</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"kt\">:.</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n    <span class=\"kr\">else</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Nil</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"kt\">Nil</span>\n\n<span class=\"c1\">-- 4</span>\n<span class=\"nf\">filtering</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Applicative</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">List</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">List</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">filtering</span> <span class=\"n\">pred</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:.</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span>\n  <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"kt\">P</span><span class=\"o\">.&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">b'</span> <span class=\"ow\">-&gt;</span>\n    <span class=\"kr\">if</span> <span class=\"n\">b'</span>\n    <span class=\"kr\">then</span> <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"kt\">:.</span><span class=\"p\">)</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n    <span class=\"kr\">else</span> <span class=\"n\">filtering</span> <span class=\"n\">pred</span> <span class=\"n\">xs</span>\n<span class=\"nf\">filtering</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Nil</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">pure</span> <span class=\"kt\">Nil</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211404055,
            "is_me_message": false,
            "last_edit_timestamp": 1601193237,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601193186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Jacob, ping me at some point.  I may have to clear out of the apartment where I am couch-surfing for a while today, so that complicates matters for me today.  What section of the lecture notes  (or problems) are you working on?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211416152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601212444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (F2'20)</span> the path that ended up working for me was to first create a function that has return type <code>f (List (Bool, a))</code> then you can lift a filter function to do what you're trying to do. There may be other ways to solve it though!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211417265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601214235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>there are many ways to solve it! One pretty nice way involves an expression of type <code>Bool -&gt; List a -&gt; List a</code> which can then be part of an expression of type <code>f (List a -&gt; List a)</code> which in turn is a subexpression of an expression of type <code>f (List a)</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211586351,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601362554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Having trouble with the below  (in the new list of problems, section on Lists). It fails the test with the infinite list.</p>\n<div class=\"codehilite\"><pre><span></span><code>seqOptional ::\n  List (Optional a)\n  -&gt; Optional (List a)\nseqOptional Nil = Full Nil\nseqOptional (x:.xs) = merge x (seqOptional xs)\n\nmerge :: Optional a -&gt; Optional (List a) -&gt; Optional (List a)\nmerge o os =\n  case (o, os) of\n    (Full x, Full xs) -&gt; Full (x:.xs)\n    (Empty, Full xs) -&gt; Full xs\n    (Full x, Empty) -&gt; Full (x:.Nil)\n    (Empty, Empty) -&gt; Empty\n</code></pre></div>\n\n\n<p>I also tried the below, which works on finite lists.</p>\n<div class=\"codehilite\"><pre><span></span><code>seqOptional&#39; ::\n  List (Optional a)\n  -&gt; Optional (List a)\nseqOptional&#39; ms =\n  Full $ foldLeft (\\acc x -&gt; seqOptionalF x acc) Nil ms\n\nseqOptionalF :: Optional a -&gt; List a -&gt; List a\nseqOptionalF m as =\n  case m of\n    Full v -&gt; v:.as\n    Empty -&gt; as\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211636542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601393015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I needed two passes for <code>seqOptional</code> -- first to check for a <code>noEmpty</code> condition; then to return either <code>Empty</code> or <code>Full (List a)</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211651236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601398853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I am trying to setup a build for <a href=\"https://www.stephendiehl.com/llvm/\">Stephen Diehl's compiler notes</a>.  Lots of build fails but some progress.  The latest:  the data type IEEE is not known.  I found a package, <code>llvm-general-pure-3.5.1.0</code> in which it is defined.  But doing <em>stack install</em> for it produces its own build problems, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>llvm-general-pure&gt;     \u2022 No instance for (Semigroup QTree)\nllvm-general-pure&gt;         arising from the superclasses of an instance declaration\nllvm-general-pure&gt;     \u2022 In the instance declaration for \u2018Monoid QTree\u2019\nllvm-general-pure&gt;    |\nllvm-general-pure&gt; 61 | instance Monoid QTree where\nllvm-general-pure&gt;    |          ^^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>Is there a way to know what other dependencies are needed for a new dependency?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211664330,
            "is_me_message": false,
            "last_edit_timestamp": 1601404383,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601404349,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hmm .. I've done the stack install for both <code>llvm-general-pure-3.5.1.0</code> and <code>monoid-extras</code>.  I though maybe things were not working because I don't have an entry for these in <code>stack.yaml</code>. But I get an error if I put them in <code>extra-deps</code>.  Hmmmm.... must be doing things the wrong way.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211665564,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601404884,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe try posting in the haskell stream?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211673532,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601408368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>In the version of Haskell we're using, I think you have to specify a Semigroup instance to use a Monoid. You'll have to define (&lt;&gt;) function in Semigroup which should be the same as mappend in Monoid.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211683555,
            "is_me_message": false,
            "last_edit_timestamp": 1601413392,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601413289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> the key thing here I think is that as soon as you see one Empty in the list you can stop, because \"If the list contains one or more <code>Empty</code> values, then return <code>Empty</code>.\" Both of your implementations have the property that they look at the whole list in all cases, which then makes problems for infinite input</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211699095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601423216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Sorry I missed today folks, our apartment puppy was exploding with energy and I decided that it would be better to run her in circles at the park first thing in the morning. And in general, I'm not planning on sticking to the fp course with ya'll just because I'd like to use that time towards working on a project.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211769942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp-course Fall 2020",
            "submessages": [],
            "timestamp": 1601476874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>if anyone is interested, i could use some help coming up with a new data type that will do a good job of illustrating why functors, applicatives, and monads are useful. some sort of friendly metaphor that illustrates the key ability of each of those typeclasses. As best as I could put it:</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211938245,
            "is_me_message": false,
            "last_edit_timestamp": 1601570430,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601570381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>-- When working with types, we want to run functions on the information that the type \"contains.\"<br>\n-- Functors: allow us to run a function on the contents of a type, returning something of that type.<br>\n-- Applicatives: allow us to the contents of a type on the contents of another type.<br>\n-- Monads: allows us to feed the contents of a type into a function that doesn't accept that type  (but returns that type)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211938278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601570403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Found an interesting <a href=\"https://penkovsky.com/neural-networks/\">article</a> on neural networks using Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212005517,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601615463,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>One thing we could look at in the Elm group today is <a href=\"https://dashboard.lamdera.app\">Lamdera</a>.  Lamdera (still in alpha) provides an end-to-end solution for making web apps.  In one repo, you write the code for both the frontend and the backend.  The two communicate via websockets.  This is what I am using for <a href=\"https://minilatex.lamdera.app\">minilatex</a></p>\n<p>There is a little chat app on the site linked above that is a good starting point.  It can be used as a seed for developing something else, e.g, a tic-tac-toe game or chess or whatever.  I think I will make LaTeX chat app at some point.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212067092,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601641727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://elmlang.slack.com/archives/C0CJ671HU/p1601383122205900\">https://elmlang.slack.com/archives/C0CJ671HU/p1601383122205900</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212086457,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601651092,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is a link to <a href=\"https://svgchat.lamdera.app\">svgChat</a> -- a simple multiplayer app that allows \"players\" to move around a colored circle with their \"handle\" displayed.  For the <a href=\"https://github.com/jxxcarlson/svgChat\">source code</a>, you should use the <code>noauth</code> branch ...  I've temporarily disabled authentication (such as it is) because it is broken for some reason.</p>\n<p>For directions on installing lamdera, see <a href=\"https://dashboard.lamdera.app/\">https://dashboard.lamdera.app/</a> .  You will need to signup (project is in alpha), then download the lamdera binary.  The commands are mostly like elm, e.g., lamdera make src/WHATEVER.  There is also <code>lamdera live</code> to run the project locally.  Open <code>localhost:8000</code> for the app. You can open several tabs to play around with the multiplayerness.  </p>\n<p>We can jointly fix the various flaws in this project, e.g, the authentication.  I'd like to keep the feature set and code as simple as possible (even simpler than now would be great) so that it can be used as a learning example.  </p>\n<p>That said, one can easily evolve the project to do other things, e.g., play tic-tac-toe, various board games such as scrabble, chess, checkers, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212158494,
            "is_me_message": false,
            "last_edit_timestamp": 1601710316,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601710265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is an <a href=\"https://package.elm-lang.org/packages/jxxcarlson/elm-cell-grid/latest/\">Elm library</a> that facilitates constructing, updating, and rendering a square grid of cells.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212158573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601710423,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://jxxcarlson.io/posts/2020-10-03-haskell/\">Study notes</a> on using the Haskell library <em>servant</em> to build webservers.  My goal is to build a PDF server for MiniLaTeX documents.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212187681,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm Hangouts?",
            "submessages": [],
            "timestamp": 1601755587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm working on a Turing machine emulator. <code>Main.hs</code> looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>import Turing (advanceN, showConfig, showConfig&#39;, (|&gt;))\nimport Control.Monad\nimport Data.Drinkery.Combinators\nimport Machine.EnumerateN\n\nmain :: IO ()\nmain =\n    do\n      drainFrom $ forM [0..100] (\\n -&gt; do putStrLn $ (show n ++ &quot;: &quot; ++ show (advanceAndShow&#39;  n)) )\n\nadvanceAndShow&#39; n = advanceN machine n initalConfiguration |&gt; showConfig&#39; 30\n</code></pre></div>\n\n\n<p>Alas, I get an infinite amount of output, of which a snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n\n\n<p>92: (\"I\",3,\" 10000                        \")<br>\n93: (\"R\",3,\" 10100                        \")<br>\n94: (\"R\",4,\" 10100                        \")<br>\n95: (\"R\",5,\" 10100                        \")<br>\n96: (\"R\",6,\" 10100                        \")<br>\n97: (\"I\",5,\" 10100                        \")<br>\n98: (\"R\",5,\" 10101                        \")<br>\n99: (\"R\",6,\" 10101                        \")<br>\n100: (\"I\",5,\" 10101                        \")<br>\n0: (\"B\",0,\"                              \")<br>\n1: (\"I\",1,\" 0                            \")<br>\n2: (\"R\",1,\" 1                            \")<br>\n3: (\"R\",2,\" 1                            \")<br>\n4: (\"I\",1,\" 1                            \")<br>\n5: (\"I\",0,\" 0                            \")<br>\n6: (\"R\",1,\" 10                           \")<br>\n7: (\"R\",2,\" 10                           \")<br>\n8: (\"R\",3,\" 10                           \")</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212217066,
            "is_me_message": false,
            "last_edit_timestamp": 1601834519,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Turing Machine",
            "submessages": [],
            "timestamp": 1601807552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd like to display only one cycle.  Here's the <a href=\"https://github.com/jxxcarlson/turing-machine\">code</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212217076,
            "is_me_message": false,
            "last_edit_timestamp": 1601810161,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Turing Machine",
            "submessages": [],
            "timestamp": 1601807572,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>is this for the CS papers preso? I'm not sure what the <code>Data.Drinkery.Combinators.drainFrom</code> does, but seems like <code>main = forM_ [0..100] (\\n -&gt; do putStrLn $ (show n ++ \": \" ++ show (advanceAndShow'  n)) )</code> maybe does what you intend?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212239557,
            "is_me_message": false,
            "last_edit_timestamp": 1601842485,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Turing Machine",
            "submessages": [],
            "timestamp": 1601842473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Possibly ... did it while preparing for the talk.  Found this fix:</p>\n<div class=\"codehilite\"><pre><span></span><code>main :: IO ()\nmain =\n    let\n        actions :: [IO()]\n        actions = map (\\n -&gt; putStrLn $ (show n ++ &quot;: &quot; ++ show (advanceAndShow&#39;  n)) ) [0..100]\n    in\n      do\n          sequence_ actions\n</code></pre></div>\n\n\n<p>where  <code>sequence_</code> is in <code>Control.Monad</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212243959,
            "is_me_message": false,
            "last_edit_timestamp": 1601849636,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Turing Machine",
            "submessages": [],
            "timestamp": 1601849585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>If anybody has ~15 mins, i'd love to show you what i'm presenting on friday and get feedback and blind-spot checking.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212328558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601917601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi Will, I 'm available later this evening, but have another presentation this afternoon.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212335225,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1601921066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>many big functional code bases i work with, especially in haskell, seem to end up having a \u201cgod type\u201d which makes the whole system go. something like this (this is a simple one, i\u2019ve seen all kinds of goodness like stacking of layers of mtl transformers or deriving basically everything):</p>\n<div class=\"codehilite\"><pre><span></span><code>newtype Computation e a = Computation { runComputation :: ReaderT (Environment e) IO a }\n  deriving (Functor, Applicative, Monad, MonadIO, MonadUnliftIO, MonadReader (Environment e))\n</code></pre></div>\n\n\n<p>i usually don\u2019t like these very much, because they feel \"too powerful\". i usually name them\"god types\" in a kind of pun with \"god objects\" in oo programming, but i guess there must be a name for this? or patterns around this? is it even considered an antipattern? what do you think?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212398893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1601973521,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(for those trying to understand the type i posted, i thought of <code>Environment</code> as a regular data type that holds some additional data to facilitate this type being used in multiple different contexts, in this case for multiple compiler stages)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212399095,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1601973705,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>meh, apparently this isn\u2019t an anti pattern but rather a <a href=\"https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/\">design pattern</a> in the eyes of others. oh well.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212438537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1601995715,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://blogg.bekk.no/creating-a-repl-in-haskell-efcdef1deec2\">Making a repl using Haskell</a>  \u2014 might be of interest</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212553848,
            "is_me_message": false,
            "last_edit_timestamp": 1602196780,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602075481,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212660199,
            "is_me_message": false,
            "last_edit_timestamp": 1602314409,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602145813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>My messages below moved to <a href=\"#narrow/stream/100484-functional-programming/topic/god.20types\">fp/god types</a> topic</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212722673,
            "is_me_message": false,
            "last_edit_timestamp": 1602625918,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602177673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212722799,
            "is_me_message": false,
            "last_edit_timestamp": 1602625893,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602177724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212722897,
            "is_me_message": false,
            "last_edit_timestamp": 1602625890,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602177781,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212723298,
            "is_me_message": false,
            "last_edit_timestamp": 1602625888,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602177976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212723389,
            "is_me_message": false,
            "last_edit_timestamp": 1602625886,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602178030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212723674,
            "is_me_message": false,
            "last_edit_timestamp": 1602625884,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602178183,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212724027,
            "is_me_message": false,
            "last_edit_timestamp": 1602625883,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602178335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212724156,
            "is_me_message": false,
            "last_edit_timestamp": 1602625881,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602178415,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://minilatex.lamdera.app/g/205\">Some notes on the State Monad</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212752870,
            "is_me_message": false,
            "last_edit_timestamp": 1602196575,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602193337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> i'll show you how to use topics tomorrow :)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212754738,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jxxcarlson@gmail.com",
                        "full_name": "James Carlson (he) (F2'20)",
                        "id": 342488
                    },
                    "user_id": 342488
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602194560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"/user_uploads/13/I5qLNasdskj0m5VRW13KZQtq/Turings-Entscheidungsproblem-Paper.pdf\">Turings-Entscheidungsproblem-Paper.pdf</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212758005,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Turing Machine",
            "submessages": [],
            "timestamp": 1602196857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (F2'20)</span> Just had the chance to watch part 1 of the video, it's the most enjoyable math talk i've seen a while - thank you for sharing</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212760041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602198207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>for those who have done both CIS 194 and category theory + haskell, is there an order you'd recommend doing it in i.e. 194 first, category first, or in parallel OK?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212761593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602199364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>presentation finished! if anyone will be my guinea pig for a dry run tomorrow, let me know. it should take 10 minutes.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212766523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1602204126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can do it just before the Elm hangout for FP</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212779483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Presenting",
            "submessages": [],
            "timestamp": 1602213577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is an updated version of the <a href=\"https://github.com/jxxcarlson/svgChat\">code for svgChat</a> if you would like to try out Lamdera tomorrow. Cool for buildig multiplayer games, etc.</p>\n<p>Blurb: <a href=\"https://dashboard.lamdera.app\">Lambdera</a> is an all-Elm front-end + back-end solution.  Data is persisted, but you don't need to set up a database.</p>\n<p>Try the demo apps on the Lamdera site.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212779676,
            "is_me_message": false,
            "last_edit_timestamp": 1602213913,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602213847,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>whoa MIT had been teaching Applied Category Theory, and in 2020 got Bartosz Milewski to co-teach it</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212815021,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602244598,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"http://brendanfong.com/programmingcats.html\">http://brendanfong.com/programmingcats.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212815043,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602244614,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>ooh, they just updated the textbook draft again</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212815914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602245152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212860900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602268401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>with videos! <a href=\"https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS\">https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212861053,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602268471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>it's strange that only the solution for problem set 1 is available (course was back in Jan)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212861253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602268590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>After we finish fp-course I definitely want to work on the Applied Category Theory course. I read a huge chunk of Milewski's text a few weeks back and enjoyed it thoroughly!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212863834,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jxxcarlson@gmail.com",
                        "full_name": "James Carlson (he) (F2'20)",
                        "id": 342488
                    },
                    "user_id": 342488
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ezzeri.esa@gmail.com",
                        "full_name": "Ezzeri Esa (he) (F1'20)",
                        "id": 327456
                    },
                    "user_id": 327456
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602270082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>I finally finished HW12 and am done with the course! Somehow, Exercise 1 (\"download the MonadRandom package\") took a couple of orders of magnitude longer than everything else combined, which was tough sledding, but it feels good to be moving on.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212871830,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jxxcarlson@gmail.com",
                        "full_name": "James Carlson (he) (F2'20)",
                        "id": 342488
                    },
                    "user_id": 342488
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1602275185,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> somehow our discussion moved into a different topic? i\u2019ll continue talking about it in the correct one so as not to derail this</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212903358,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602314446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> i think you\u2019re on the right track with your assertion, though it seems that my ideas are at odds with \u201cmodern haskell\u201d, at least. a lot of people i\u2019m talking to suggested that what i described was almost exactly what <a href=\"https://github.com/commercialhaskell/rio\">rio</a> does, which is widely regarded as a good idea.</p>\n<p>i think generally why i think these types are too powerful is because they are too general, i.e. it is a data type that tries to model the state of my system, mixed with the effect(s), which, tbh, is mostly IO. but, basically it could conceivably be the only type i need to describe any of the functions i need, making it... less than informative?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212903461,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602314666,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>A lot of Snoyman's stuff is a particular perspective on Haskell that definitely isn't universal, though... For instance the way conduit (and therefore persistent and therefore esqueleto) is a bit Particular and it works real nice if you are entirely in that ecosystem, but using bits of that world in other contexts can be weird (and can elicit weird reactions). I wonder if there's something similar with RIO where there's a universe of people who are happy with it but also a universe of people who aren't going near it?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212911997,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602329757,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I definitely share your dissatisfaction with the megapowerful types. Ideally I want my functions to have types that say exactly what effects they're empowered to do. It's intriguing to me that RIO buys into typeclass constraints to specify which bits of env things are going to be able to read, but not for what effects they're going to be able to perform. I suspect that choice might make for better performance and error messages, maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 212912187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602330074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>yeah, that sounds right. haskell also just has the problem of having blanket \"IO\" for a lot of the effects outside of my program, which is rather broad to begin with. in an ideal world we\u2019d be more explicit and specific about this, but i think this might be a little over the top for a large part of the community, especially people who really need to get stuff done in haskell.</p>\n<p>it\u2019s interesting to see that since i brought this up there are definitely a lot of people with very divergent ideas here, and most of them rather strong. i have yet to find the person who says \"i don\u2019t care either way\", but i guess that is because it\u2019s such a fundamental design pattern?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213005590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602487855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Will be a little late today, have a phone call at 9</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213034151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602507457,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213221582,
            "is_me_message": false,
            "last_edit_timestamp": 1602625926,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602625879,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p>Copied comments on this topic from the <em>fp study group</em> topic where they were mistakenly posted</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"101103\">Veit Heller (he) (S1'17)</span> I think there are two things going on here: Deeply nested transformer stacks which support \"too many\" effects via MTL-style classes, and deriving MTL-style classes to make some <code>data</code> or <code>newtype</code> support the operations specified.</p>\n<p>Your example seems mostly focused on the latter, not the former, but they can both contribute to the feeling that a type is \"too powerful\" because it supports too many effects.</p>\n<p>Specifically, a <code>Computation e a</code> is a <code>ReaderT (Environment e) IO a</code>, but since it's a <code>newtype</code> it actually supports <em>no effects at all</em>. It's not too powerful!</p>\n<p>Deriving gives it back some of the effects it supports.</p>\n<ul>\n<li><code>Functor, Applicative, Monad</code> -- Oops, no, these don't give any effects. These are just necessary to be a monad.</li>\n<li><code>MonadIO</code> -- This lets you lift IO operations into the monad! It's very very powerful now!</li>\n<li><code>MonadUnliftIO</code> -- I don't really understand this one, but it says <em>IO</em> so I don't like it!</li>\n<li><code>MonadReader (Environment e)</code> -- This lets you read a value <code>Environment e</code> with <code>ask</code>. It's not a terribly powerful effect.</li>\n</ul>\n<p>If you break it down this way, it becomes clear that the problem is <code>IO</code> being present. <code>MonadIO</code> makes <code>Computation e a</code> equivalent to <code>IO</code>!</p>\n<p>If you change <code>Computation e a</code> to <code>ReaderT (Environment e) m a</code> which no longer hardcodes <code>IO</code> at the bottom of the stack, it defangs <code>MonadIO</code> and now the number of effects is dramatically reduced. It's definitely no longer a god type!</p>\n<p>So maybe the problem you're identifying relates more to the combination of hardcoded <code>IO</code> combined with <code>MonadIO</code>? Remove those from any given type, and do you still have concerns about god types?</p>\n<p>Fwiw, I agree with you, and I'm just trying to sus out where the problem lies and how to avoid it; Sorry for rambling.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213221713,
            "is_me_message": false,
            "last_edit_timestamp": 1602625994,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602625972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100806\">@Iain McCoy (he) (SP2'17)</span> </p>\n<blockquote>\n<p>A lot of Snoyman's stuff is a particular perspective on Haskell that definitely isn't universal, though...</p>\n</blockquote>\n<p>This, <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> .. Snoyman has had an outsized influence on the community, but he isn't the community.. I disagree with much of what he argues</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213221922,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602626117,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"101103\">@Veit Heller (he) (S1'17)</span> </p>\n<blockquote>\n<p>in an ideal world we\u2019d be more explicit and specific about this, but i think this might be a little over the top for a large part of the community, especially people who really need to get stuff done in haskell.</p>\n</blockquote>\n<p>You can do this, easily, and i don't think most haskell programmers would bat an eyelash over it.. It's commonly touted as the \"right\" way to do things, though requires a little boilerplate... in the example above, the way to do it is to keep <code>IO</code> in the monad, but don't expose it via <code>MonadIO</code> (or <code>MonadUnliftIO</code>, whatever that does) .. instead, you write a few choice operations which are \"supposed\" to be available, and implement them with IO.. then, you don't export the constructor of <code>Computation</code> from its implementing module.. now only the select few operations which return <code>Computation</code> can be performed, and the world of other IO actions aren't available!</p>\n<p>Another way to do it, which has some practical advantages is, is explained it a bit more detail in this post<br>\n<a href=\"https://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html\">https://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html</a></p>\n<p>If I were to summarize, having not read the post in several years:</p>\n<ul>\n<li>Define your monad <code>newtype MyMon m a = ...</code> and define domain operations on it <code>foo :: ... -&gt; MyMon m a</code>; you can use MTL stuff internally to implement and track effects that you need, but don't use IO!<ul>\n<li>Your operations don't actually do the thing they advertise, they just return an indicator that the thing is supposed to be done, like a little piece of an AST</li>\n<li>You can implement this easily by following one of the many \"free monad\" tutorials, because this is a bit like writing an interpreter; it's also nice to implement it manually once the first time to make the concepts very clear</li>\n</ul>\n</li>\n<li>Define multiple runner functions for your monad<ul>\n<li><code>realRunner :: MonadIO =&gt; MyMon m a -&gt; m a</code> (or, more concretely <code>realRunner' :: MyMon IO a -&gt; IO a</code>, but this type is not flexible and will make things harder.. it expresses the idea though: <strong>your monadic domain operations don't use IO, but the runner function translate things to IO!</strong>)<ul>\n<li>this is like an interpreter, though usually it won't be so complex</li>\n</ul>\n</li>\n<li><code>mockRunner :: ... -&gt; MyMon m a -&gt; m a</code> where <code>...</code> is some pile of things that help you to simulate the operation of your monad with pure functions without using IO.. the idea here is that you can inject an alternative pure implementation to help out with different sorts of things you want to test</li>\n</ul>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213223068,
            "is_me_message": false,
            "last_edit_timestamp": 1602627264,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602626888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Here's the link for a b-tree implementation in Haskell <a href=\"https://youtu.be/-HZ4bo_USvE\">https://youtu.be/-HZ4bo_USvE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-HZ4bo_USvE\" href=\"https://youtu.be/-HZ4bo_USvE\"><img src=\"https://i.ytimg.com/vi/-HZ4bo_USvE/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213295427,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602685436,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>And the Sqlite tutorial -- <a href=\"https://cstack.github.io/db_tutorial/\">https://cstack.github.io/db_tutorial/</a> which covers b-trees as well and we could use as the basis for the 2-week project (there are probably Haskell database tutorials too, i just haven't looked yet!)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213296200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602685714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span>  obvious question probably but...are y'all planning to build a db in Haskell?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213305446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602688857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>possibly, yes -- now that we've developed some modest proficiency, we're trying to decide on a Haskell project for the last 2 weeks of Fall 1 batch</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213311836,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602691172,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/661412d42ecbf0c0bd354116859a5af3562f8e5f?x=x&version=4",
            "client": "website",
            "content": "<p>it\u2019s good to know that i\u2019m not alone with my distaste for the design pattern i presented originally, but it does exemplify a pretty fundamental rift in what people perceive good style to be in the community, which is interesting.</p>\n<p><span class=\"user-mention\" data-user-id=\"5014\">@Patrick Redmond (W'14)</span> thank you for the link and the explanation, that\u2019s a nice little pattern. much cleaner than what i would usually do, i think.</p>\n<p>as for your mention of <code>MonadUnliftIO</code>, not to derail the conversation too much, but let me explain briefly: it comes from the package <code>unliftio</code>, which is a big, scary package that does a whole lot to your runtime. but the core of <code>MonadUnliftIO</code> itself is very simple: it avoids having to unwrap your wrappers around <code>IO</code> types when you want to run a computation. canonical example: say you want to read a file in a <code>ReaderT</code> environment; it would be tedious to always unwrap, and it would be even more tedious if you do this with a closure. the monad comes to the rescue, as per <a href=\"https://www.stackage.org/package/unliftio\">the documentation</a>. sprinkle some <code>MonadUnliftIO</code> fairydust on your functions, lose a bunch of meaningful types [you usually have to], but get rid of the tedium! (we don\u2019t actually use that part in the compiler, we use <code>IORef</code>s and <code>Exception</code>s, because we\u2019re bad people and we want to Make It Fast <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213340275,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "veit@veitheller.de",
            "sender_full_name": "Veit Heller (he) (S1'17)",
            "sender_id": 101103,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "god types",
            "submessages": [],
            "timestamp": 1602704049,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is a <a href=\"https://github.com/haskell-servant/servant/blob/master/doc/examples.md\">good reference</a> using <code>servant</code> to build webservers and web APIs</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213373279,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "webservers",
            "submessages": [],
            "timestamp": 1602728189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here is a <a href=\"https://mmhaskell.com/real-world\">good general link</a> for building servers with Haskell.  The author discusses various libraries for doing this, including <em>servant</em>, which I have been using and am increasingly happy with. <a href=\"https://mmhaskell.com/real-world/servant\">This section on servant</a> is especially helpful.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213406589,
            "is_me_message": false,
            "last_edit_timestamp": 1602759012,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "webservers",
            "submessages": [],
            "timestamp": 1602758497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> coming to Elm hangouts tomorrow? figured we'd pick up from last week and you have the code...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213456469,
            "is_me_message": false,
            "last_edit_timestamp": 1602781536,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602781520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Sounds good! I'll make a point to share the code today.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213456535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602781545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I posted test cases <a href=\"https://github.com/tkuriyama/puzzles/tree/master/fp-course\"><code>ParserSpec.hs</code> and <code>MoreParserSpec.hs</code></a> -- though they aren't complete transcriptions of all the test cases in the code comments, as I ran out of steam. Thankfully there are test cases provided for JsonParser!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213458141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1602782281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> I submitted a pull request to your original rc3 repo to add our work from last week. Not too familiar with PR's, so hopefully I did this right...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213478968,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602791606,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll be a few minutes late today</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213562632,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602856334,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span>  Here's the repo: <a href=\"https://github.com/willthefirst/rc3/tree/lamdera\">https://github.com/willthefirst/rc3/tree/lamdera</a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213573708,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602861264,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Make sure you're working off of the <code>lamdera</code> branch</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213573731,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602861276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>(all the others are Justin's original work from 3 months ago)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213573757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1602861294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I decided to take a shot at making an FSA module for haskell tonight. I used a StateT type to pass the most up to date state along in the computation but didn't use the output element whatsoever. I was wondering if anyone would be willing to do some code review on the following. Additionally, I'll be looking to write a FSA lang to parse which will build the FSA type.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">module</span> <span class=\"nn\">FSA</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.State.Lazy</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Sentence</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Char</span><span class=\"p\">]</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Alphabet</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">Char</span><span class=\"p\">]</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Word'</span>    <span class=\"ow\">=</span> <span class=\"kt\">Char</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">Name</span>     <span class=\"ow\">=</span> <span class=\"kt\">Char</span>\n<span class=\"kr\">data</span> <span class=\"kt\">State'</span>   <span class=\"ow\">=</span> <span class=\"kt\">State'</span> <span class=\"kt\">Name</span> <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Show</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">FSA</span> <span class=\"ow\">=</span> <span class=\"kt\">FSA</span> <span class=\"p\">{</span> <span class=\"n\">getAlphabet</span>           <span class=\"ow\">::</span> <span class=\"kt\">Alphabet</span>\n               <span class=\"p\">,</span> <span class=\"n\">getInitState</span>          <span class=\"ow\">::</span>  <span class=\"kt\">State'</span>\n               <span class=\"p\">,</span> <span class=\"n\">getStates</span>             <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">State'</span><span class=\"p\">]</span>\n               <span class=\"p\">,</span> <span class=\"n\">getFinalState</span>         <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">State'</span><span class=\"p\">]</span>\n               <span class=\"p\">,</span> <span class=\"n\">getTransitionFunction</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Word'</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">State'</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">State'</span><span class=\"p\">)</span>\n               <span class=\"p\">}</span>\n\n<span class=\"nf\">match</span> <span class=\"ow\">::</span> <span class=\"kt\">FSA</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Char</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">match</span> <span class=\"n\">fsa</span> <span class=\"n\">sentence</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">computation</span> <span class=\"n\">sentence</span> <span class=\"n\">fsa</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">False</span>\n    <span class=\"kt\">Just</span> <span class=\"n\">s</span>  <span class=\"ow\">-&gt;</span> <span class=\"n\">validFinal</span> <span class=\"n\">fsa</span> <span class=\"n\">s</span>\n\n<span class=\"nf\">validFinal</span> <span class=\"ow\">::</span> <span class=\"kt\">FSA</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">State'</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"nf\">validFinal</span> <span class=\"n\">fsa</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"n\">elem</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">getFinalState</span> <span class=\"n\">fsa</span><span class=\"p\">)</span>\n\n<span class=\"nf\">transit</span> <span class=\"ow\">::</span> <span class=\"kt\">FSA</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Char</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">State'</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"kt\">State'</span><span class=\"p\">)</span>\n<span class=\"nf\">transit</span> <span class=\"n\">fsa</span> <span class=\"n\">char</span> <span class=\"n\">state</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">getTransitionFunction</span> <span class=\"n\">fsa</span> <span class=\"n\">char</span> <span class=\"n\">state</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nothing</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kt\">Just</span> <span class=\"n\">s'</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"n\">s'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">transitStateT'</span> <span class=\"ow\">::</span> <span class=\"kt\">FSA</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Char</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">StateT</span> <span class=\"kt\">State'</span> <span class=\"kt\">Maybe</span> <span class=\"nb\">()</span>\n<span class=\"nf\">transitStateT'</span> <span class=\"n\">fsa</span> <span class=\"n\">char</span> <span class=\"ow\">=</span> <span class=\"kt\">StateT</span> <span class=\"p\">(</span><span class=\"n\">transit</span> <span class=\"n\">fsa</span> <span class=\"n\">char</span><span class=\"p\">)</span>\n\n<span class=\"nf\">computation</span> <span class=\"ow\">::</span> <span class=\"kt\">Sentence</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">FSA</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">State'</span>\n<span class=\"nf\">computation</span> <span class=\"n\">sentence</span> <span class=\"n\">fsa</span>\n  <span class=\"ow\">=</span> <span class=\"n\">execStateT</span> <span class=\"p\">(</span><span class=\"n\">traverse</span> <span class=\"n\">id</span> <span class=\"p\">((</span><span class=\"n\">transitStateT'</span> <span class=\"n\">fsa</span><span class=\"p\">)</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">sentence</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">getInitState</span> <span class=\"n\">fsa</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- Look to construct a regular eexpression parser that constructs FSA</span>\n<span class=\"c1\">-- Thereafter, make a CFG parser that builds RE given a grammer.</span>\n<span class=\"nf\">fsa</span> <span class=\"ow\">::</span> <span class=\"kt\">FSA</span>\n<span class=\"nf\">fsa</span> <span class=\"ow\">=</span> <span class=\"kt\">FSA</span> <span class=\"n\">alpha</span> <span class=\"n\">init</span> <span class=\"n\">allstates</span> <span class=\"n\">final</span> <span class=\"n\">transition</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">alpha</span> <span class=\"ow\">=</span> <span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n    <span class=\"n\">init</span>  <span class=\"ow\">=</span> <span class=\"kt\">State'</span> <span class=\"sc\">'_'</span>\n    <span class=\"n\">allstates</span> <span class=\"ow\">=</span> <span class=\"kt\">State'</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">alpha</span>\n    <span class=\"n\">final</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"kt\">State'</span> <span class=\"sc\">'o'</span><span class=\"p\">]</span>\n    <span class=\"n\">transition</span> <span class=\"n\">w</span> <span class=\"n\">s</span> <span class=\"ow\">=</span>\n      <span class=\"kr\">let</span> <span class=\"n\">map'</span> <span class=\"sc\">'h'</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'_'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'h'</span><span class=\"p\">)</span>\n          <span class=\"n\">map'</span> <span class=\"sc\">'e'</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'h'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'e'</span><span class=\"p\">)</span>\n          <span class=\"n\">map'</span> <span class=\"sc\">'l'</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'e'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'l'</span><span class=\"p\">)</span>\n          <span class=\"n\">map'</span> <span class=\"sc\">'l'</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'l'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'l'</span><span class=\"p\">)</span>\n          <span class=\"n\">map'</span> <span class=\"sc\">'o'</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'l'</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"p\">(</span><span class=\"kt\">State'</span> <span class=\"sc\">'o'</span><span class=\"p\">)</span>\n          <span class=\"n\">map'</span> <span class=\"kr\">_</span>   <span class=\"kr\">_</span>            <span class=\"ow\">=</span> <span class=\"kt\">Nothing</span>\n      <span class=\"kr\">in</span> <span class=\"n\">map'</span> <span class=\"n\">w</span> <span class=\"n\">s</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213682608,
            "is_me_message": false,
            "last_edit_timestamp": 1602987147,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Writing an FSA in Haskell",
            "submessages": [],
            "timestamp": 1602986682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8883f6051fe385c3b03f16804c838d4c6b10e4bc?x=x&version=2",
            "client": "website",
            "content": "<p>FYI there's a <a class=\"stream\" data-stream-id=\"26833\" href=\"/#narrow/stream/26833-category-theory\">#category theory</a>  stream on Zulip, I just went through the history to add a couple more things to the reading list</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213822840,
            "is_me_message": false,
            "last_edit_timestamp": 1603130851,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "ezzeri.esa@gmail.com",
            "sender_full_name": "Ezzeri Esa (he) (F1'20)",
            "sender_id": 327456,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Haskell CIS 194 Fall 2020",
            "submessages": [],
            "timestamp": 1603130435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<ul>\n<li>Syntax, Lexer, Parser finished -- next step to write some tests </li>\n<li>stack build / .cabal is still broken, going to ask Alex today about how to configure Main properly... </li>\n<li>merged Jacob's PR</li>\n<li>merged <code>Database.Database</code> into <code>Database.Main</code></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214058819,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603291104,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"314689\">@Jacob Vartuli-Schonberg (he) (F2'20)</span> <code>stack build</code> and <code>stack test</code> should run now...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214120290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603317632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Great! What was the fix?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214125322,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603321009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><code>Main.hs</code> is now immediately under <code>src</code> (at the same level as <code>Database/</code> and just calls <code>Database.Main</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214177278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603368655,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "website",
            "content": "<p>Just pushed some changes heres a quick summary:</p>\n<ul>\n<li>Fixed insert grammer (Missing semicolon at end)</li>\n<li>Added test cases for insert &amp; delete</li>\n<li>Added test cases for missing semicolons + other keywords in the expression grammer</li>\n<li>Cleaned up the Parser file a lil bit</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214207074,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603381960,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> could you invite me as a collaborator to svgChat so I can push the collision branch? i have the naive collision detection and repulsion working...</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214335522,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1603470843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327378\">@Will Moritz (he) (F1'20)</span> the algo i was thinking of is \"sort and sweep\" aka \"sweep and prune\" but i can't find good links online, I'll ask Alex about it alter as. I think he has a good PDF... happy to pair on the collision detection today as well</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214336389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1603471261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Yeah send me that link! Gonna see how far I can get with another project, but I'll letcha know!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214337499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1603471780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> <span class=\"user-mention\" data-user-id=\"341780\">@Zarak Mahmud (he) (F2'20)</span> This took way longer than it should have, but I think I finally have a B+-tree structure which works for insertions. The code is up on GitHub but is a huge mess currently; it definitely isn't using good functional programming paradigms (in retrospect, I think the whole approach I've taken would be much better done as some sort of state monad). I don't know if the next thing to do is try to improve the code as it stands now or to implement the deletion algorithms.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214502272,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zarak@hey.com",
                        "full_name": "Zarak Mahmud (he) (F2'20)",
                        "id": 341780
                    },
                    "user_id": 341780
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603648027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heroic work nonetheless, Bud!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214541289,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603697686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I will be absent tomorrow = Monday (which is now today) Still up at 3:35 am studying type theory.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214541329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603697732,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>Done!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214545148,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1603700770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is fantastic! I think we ought to move on to the deletion algorithms although I'm happy to continue working on this beyond next week when the fall 1 batch is due to end</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214606709,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603733318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry I've been MIA - I think my awkward sleeping schedule is finally catching up to me. I might miss today's session too but I'll be there on Thursday.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214798499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603864520,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>I've written the deletion algorithms and have a pull request up. As before, the code is very ugly and not at all debugged, but it does work in some cases. If anyone has some spare time, I could use some help figuring out which cases trip it up.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214912212,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603929473,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks Bud, I'm going to look at it now.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214921100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1603939778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>Deletion algorithms are now debugged (to the extent that I've been able to test them at least), which means that the B+ Tree module should be fully operational for searches, insertions, and deletions.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215055399,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zarak@hey.com",
                        "full_name": "Zarak Mahmud (he) (F2'20)",
                        "id": 341780
                    },
                    "user_id": 341780
                }
            ],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604031048,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "ZulipMobile",
            "content": "<p>Hey friends, I'm gonna have skip our elm hang today. Sorry to miss it.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215090655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1604062813,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Note that you don't need to submit a PR each time (since this is just a project for fun!) -- you can push directly to the repo</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215091492,
            "is_me_message": false,
            "last_edit_timestamp": 1604063268,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604063244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks everyone for a great experience in learning haskell together! Had zero plans on learning haskell coming into RC, but I'm super happy that I did :-)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215150711,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "willthefirst@gmail.com",
                        "full_name": "Will Moritz (he) (F1'20)",
                        "id": 327378
                    },
                    "user_id": 327378
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zarak@hey.com",
                        "full_name": "Zarak Mahmud (he) (F2'20)",
                        "id": 341780
                    },
                    "user_id": 341780
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1604092186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7fe4a9620069ee6245f0c8203ab1500b16e49948?x=x&version=5",
            "client": "website",
            "content": "<p>Ditto! Super fun to work through it with ya'll. Best of luck to folks!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215209659,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "willthefirst@gmail.com",
            "sender_full_name": "Will Moritz (he) (F1'20)",
            "sender_id": 327378,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "fp study group",
            "submessages": [],
            "timestamp": 1604174928,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess FP group is on break <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nOver the weekend I finished the BTree implementation, including a bunch of property-based test cases covering the tree invariants -- deletion is not at all optimized but overall it seems to be correct? Seems like the main things to finish are:</p>\n<ul>\n<li>plugin one of the \"backend\", let's start with Bud's BPlusTree (it would be cool if we can make it easy to switch the backend)</li>\n<li>backend includes writing serialization / deserialization to/from disk</li>\n<li>finish the middleware that Daniel has been working on -- <code>Database.Main</code> -- and get it all working with <code>Database.Repl</code></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215323520,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604326632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>I had figured we were on break but I am around right now if you'd like to chat, I'd be interested in talking about how you implemented the BTree.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215323933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604326855,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sorry, had a late start to the morning! Gotta do some minor task in the morning, but gonna work on the middleware later in the day <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215325021,
            "is_me_message": false,
            "last_edit_timestamp": 1604327332,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604327316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sounds good Daniel... and <span class=\"user-mention\" data-user-id=\"341026\">@Bud B Coulson (he) (F2'20)</span> I'll head bsack over to Sammet</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215325133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604327365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm probably going to take this week to rest up a bit - daylight savings means that everything is even later now hah.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215326902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604328154,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>in the meantime though I've been checking out some stuff on nix and maybe I can see if I can get a CI pipeline going?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215327067,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604328229,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> did you spend any more time on <code>servant-elm</code>? I think I'm going to try setting up <code>spock</code> + <code>elm-bridge</code> + <a href=\"https://hackage.haskell.org/package/acid-state\"><code>acid-state</code> </a></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215348980,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1604337196,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>:mind_blown: that looks super fun! I'm doing interview prep or I'd join you. Would love to see what you come up with though. I might have time Thursday afternoon if you are still doing stuff with it <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215350154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1604337682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> cool, hopefully i'll have something to show by Thursday -- tagging <span class=\"user-mention\" data-user-id=\"342488\">@James Carlson (he) (F2'20)</span> too (and I'll probably ping <span class=\"user-mention\" data-user-id=\"264095\">@Alex Chen (he) (SP1'20)</span> along the way as I inevitably get stuck...)</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215351189,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1604338146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Like RC, I think I'll take election day off, see y'all tomorrow</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215449165,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "15897",
                    "emoji_name": "captainamerica",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                },
                {
                    "emoji_code": "18911",
                    "emoji_name": "vote",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "15897",
                    "emoji_name": "captainamerica",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "bud.coulson@gmail.com",
                        "full_name": "Bud B Coulson (he) (F2'20)",
                        "id": 341026
                    },
                    "user_id": 341026
                }
            ],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604408227,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>I wrote up an alternative version of BPlusTree using ideas from Taro's BTree, it looks a lot cleaner. It's on GitHub as of now.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215530708,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604451842,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I\u2019ll be online later, dog vet appointment in the morning.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215581350,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f415",
                    "emoji_name": "dog",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bud.coulson@gmail.com",
                        "full_name": "Bud B Coulson (he) (F2'20)",
                        "id": 341026
                    },
                    "user_id": 341026
                }
            ],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604497412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52592d0bef9f45c5f179c6c215ace4e6c061b64?x=x&version=3",
            "client": "website",
            "content": "<p>I was also running very late this morning but I'm around now if anyone wants to talk.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215586869,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "bud.coulson@gmail.com",
            "sender_full_name": "Bud B Coulson (he) (F2'20)",
            "sender_id": 341026,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604499791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Was the room we used Sammet?</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215714823,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604584927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>yes... i guess this has ended up being an off week</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215718630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604586689,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Me &amp; Bud quickly met, explained some details about the new BPlusTree Impl, I almost have insert working, just need to fix a bug on my end, for some reason the columns are being switched up so inserting is sort of backwards in a way...but if you do insert backwards it works!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 215724336,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "toydb",
            "submessages": [],
            "timestamp": 1604588980,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>In the middle of a section on <code>ST</code> the state-transformer H.K.T., I started skimming through a <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1994/06/lazy-functional-state-threads.pdf\">paper</a> which was referenced, and I seem to have gotten side-tracked trying to make sense of the relationship between states / references / values in section <em>2. Overview</em> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216156826,
            "is_me_message": false,
            "last_edit_timestamp": 1604965074,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604965064,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Mostly, I am wondering about this passage:</p>\n<p><em>The following primitive operations are provided:</em><br>\n<code>\nnewVar :: a -&gt; ST s (MutVar s a)\nreadVar :: MutVar s a -&gt; ST s a \nwriteVar :: MutVar s a -&gt; a -&gt; ST s ()\n</code><br>\n<em>The function <code>newVar</code> takes an initial value, of type <code>a</code>, say, and delivers a state transformer of type <code>ST s (MutVar s a).</code> When this is applied to a state, it allocates a fresh reference \u2014 that is, one currently not used in the state. It augments the state with a mapping from this reference to the supplied value, and returns the reference along with the modi\ffied state.</em></p>\n<p><em>The type <code>MutVar s a</code> is the type of references allocated from a store of type <code>s</code>, containing a value of type <code>a</code>. Notice that, unlike SML's Ref types, for example, MutVars are parameterised over the type of the state as well as over the type of the value to which the reference is mapped by the state.</em></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216157133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604965313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The main thing I'm taking away from this so far is \"States map references to values\". So, is it the case that, by varying the state, the reference-to-value mappings (\"assignments\") in turn are varied? I am curious if there are other guiding intuitions / language that people have found helpful for understanding the relationship between states <code>:: s</code>, references <code>:: MutVar s a</code>, and stateful computations <code>ST s :: * -&gt; *</code></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216157501,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604965639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>It is true that varying the state varies the reference-to-value mappings, but it's kind of a trivial claim because the state is exactly the set of reference to value mappings.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216177525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604991391,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's a distinction between the state (the set of mappings), and the type of the state <code>s</code>, that might be tripping you up? I think the type of the state is actually a phantom type variable, you never actually have a value inhabiting that type <code>s</code>, and it exists to ensure that all collections of operations on the underlying mutable state are operations on the _same_ underlying mutable state. The actual state exists off somewhere else in a little pocket dimension.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216177704,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604991672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>an example of the kind of thing that could mess things up without <code>s</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>-- here, runST creates a little pocket dimension. Inside that world, newVar creates a mutable cell\nvarContainingTrue &lt;- runST $ newVar 1\n-- now, we take the reference to that mutable cell and try to look at it inside a different little pocket\n-- dimension. varContainingTrue doesn&#39;t exist in this runST&#39;s pocket dimension! So we can&#39;t read from it.\nrunST $ readVar varContainingTrue\n</code></pre></div>\n<p>By introducing <code>s</code> as part of the ST monad, and eliminating it when you run things within the ST monad, this sort of movement between spaces is prevented at the type level.</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216178143,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604992307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe I've completely misinterpreted the question!</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216178193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1604992325,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1a1cc60eecad744fd10abfc2700760d0b4397252?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks for the clarification that <code>s</code> is the type of states that track a reference-to-value \"universe\" (so to speak), I think I kept confusing <code>s</code> with the type of references themselves. </p>\n<p>Also thanks for pointing out that <code>s</code> is a phantom type variable. If I'm not mistaken, then what is happening every time we construct a term of type <code>:: ST s y</code> (whatever <code>y</code> may be) is that the type variable gets instantiated. And so in order to keep this state from being passed around freely, <code>runST :: (forall s . ST s a) -&gt; a</code> demands a fully abstract state type, meaning that terms of type based upon <code>ST s</code>, once fully constructed &amp; their monadic contents bounds to some name (as in the <code>varContainingTrue &lt;- runST $ newVar 1</code> example) simply won't type-check if <code>runST</code> is used on them elsewhere</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216226462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "fivehmay@gmail.com",
            "sender_full_name": "Jaime Luis Piedra (he) (W1'20)",
            "sender_id": 361613,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Lazy functional state threads",
            "submessages": [],
            "timestamp": 1605021712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> if you can make tomorrow's Elm session, i'm planning to walk through setting up <code>servant-elm</code> and database backends to work together</p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216533990,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1605217770,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oooo awesome <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216544883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1605224067,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Bleh. . . I have a direct conflict at that time <span class=\"user-mention\" data-user-id=\"327353\">@Taro Kuriyama (he) (F1'20)</span> . I might be back for the tail end of it but not sure. Maybe I can get you to show it to me at some other time as well <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
            "content_type": "text/html",
            "display_recipient": "functional programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 216563036,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 102134,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 100484,
            "subject": "Elm",
            "submessages": [],
            "timestamp": 1605238423,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
