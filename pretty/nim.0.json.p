{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>So I made my first toy application in Nim. It's a RPN calculator called <code>ad</code>. I like the name because it's a pun on <code>bc</code>, the UNIX calculator, as well as the word \"add\". Check it out:</p>\n<p><a href=\"https://github.com/subsetpark/ad\" target=\"_blank\" title=\"https://github.com/subsetpark/ad\">https://github.com/subsetpark/ad</a></p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60861627,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466448997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>So far I can say:<br>\n- I really like docopts. But that's a port so it's really neither here nor there.<br>\n- This is the first time I've done typed procedural programming in over ten years. It definitely took me a long time to get my bearings. Generally speaking I was pretty happy doing it, but I found myself being frustrated in conversion functions, that necessarily take a value of one type and return a value of a different one. In these types of functions my impulse is to want to be able to return one of *several* types. Especially because overloading based on type signatures seems so powerful and idiomatic - I want to use separate types for related but distinctly categorized values wherever possible. But I think you really can't do that. Ultimately I got more in the habit of adjusting my function boundaries so any type-based decision making happened in the middle, and you always knew what type you had by the end of the proc. It took me a while to realize that you can't use value types at all; I'm used, from the functional programming I've done, being able to say <code>Direction :: north | south | east | west; Speed :: fast | slow</code> and then being able to declare the return type of a function as <code>Direction | Speed</code>. But it seems like <code>|</code> in a type context is *completely* separate, and only useful in generics and templates, which I haven't touched yet.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60861867,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466449330,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not sure about returning different types, but I know you can use generics (like you said) with qualifiers for function arguments</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60870488,
            "is_me_message": false,
            "last_edit_timestamp": 1466464661,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466464653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I think I need to look into those. I haven't touched generics.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60894785,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466518467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>When I was following along with the make a lisp project on github, though.. I came across a cool feature when I needed to just return a mal data type</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60899550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466527097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>It's a bit gross, but you can actually put a case statement within an object and then just store the type.. for example..</p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span>\n  <span class=\"n\">malKind</span><span class=\"o\">*</span> <span class=\"o\">=</span> <span class=\"k\">enum</span>\n    <span class=\"n\">malNumber</span><span class=\"p\">,</span>\n    <span class=\"n\">malSymbol</span><span class=\"p\">,</span>\n    <span class=\"n\">malFunc</span><span class=\"p\">,</span>\n    <span class=\"n\">malString</span><span class=\"p\">,</span>\n    <span class=\"n\">malNil</span><span class=\"p\">,</span>\n    <span class=\"n\">malBool</span><span class=\"p\">,</span>\n    <span class=\"n\">malList</span>\n\n  <span class=\"n\">malDataObj</span> <span class=\"o\">=</span> <span class=\"k\">object</span>\n  <span class=\"c\">#Object variant for the various maltypes we encounter</span>\n    <span class=\"n\">malType</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"n\">malKind</span>\n    <span class=\"k\">case</span> <span class=\"n\">kind</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"n\">malKind</span>\n    <span class=\"k\">of</span> <span class=\"n\">malNumber</span><span class=\"p\">:</span>\n      <span class=\"n\">num</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"kt\">int</span>\n    <span class=\"k\">of</span> <span class=\"n\">malSymbol</span><span class=\"p\">:</span>\n      <span class=\"n\">sym</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"kt\">string</span>\n    <span class=\"k\">of</span> <span class=\"n\">malFunc</span><span class=\"p\">:</span>\n      <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"k\">proc</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"n\">varargs</span><span class=\"o\">[</span><span class=\"n\">malData</span><span class=\"o\">]</span><span class=\"p\">):</span> <span class=\"n\">malData</span> <span class=\"p\">{.</span><span class=\"n\">closure</span><span class=\"p\">}</span>\n    <span class=\"k\">of</span> <span class=\"n\">malString</span><span class=\"p\">:</span>\n      <span class=\"n\">str</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"kt\">string</span>\n    <span class=\"k\">of</span> <span class=\"n\">malNil</span><span class=\"p\">:</span>\n      <span class=\"k\">discard</span>\n    <span class=\"k\">of</span> <span class=\"n\">malBool</span><span class=\"p\">:</span>\n      <span class=\"n\">boolean</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"kt\">bool</span>\n    <span class=\"k\">of</span> <span class=\"n\">malList</span><span class=\"p\">:</span>\n      <span class=\"n\">list</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"kt\">seq</span><span class=\"o\">[</span><span class=\"n\">malData</span><span class=\"o\">]</span>\n\n  <span class=\"n\">malData</span><span class=\"o\">*</span> <span class=\"o\">=</span> <span class=\"k\">ref</span> <span class=\"n\">malDataObj</span>\n</pre></div>\n\n\n<p>EDIT: looks like the kind field in the case statement can be accessed, this would make the malType field redundant</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60899573,
            "is_me_message": false,
            "last_edit_timestamp": 1466527603,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466527182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Not sure if this will achieve the behaviour that you are looking for, it's a bit reminiscent of C's union, I suppose</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60899623,
            "is_me_message": false,
            "last_edit_timestamp": 1466527271,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466527224,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I've played with those - they call them ADTs (which confuses me given my experience with ADTs in the past). </p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60901195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466530119,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, I only ever had the single use for it...</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60901524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "My first app",
            "submessages": [],
            "timestamp": 1466530586,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>So, I just ran into an issue where I thought that..</p>\n<div class=\"codehilite\"><pre><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">@[@[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"p\">,</span> <span class=\"o\">@[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n<span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mf\">0</span><span class=\"p\">..</span><span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"mf\">1</span><span class=\"p\">..</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I thought that this would give \"@[@[2, 3], @[2, 3]]\"</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60910887,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466546350,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>However, it seems that a slice following a slice just tries to narrow the original slice</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60910893,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466546364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>As such, it gives index out of bound as it tries to change what is just the full copy of a from 1 to 2..</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60910926,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466546409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>I'm not entirely sure that this is really intuitive, anyone have any thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60910953,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466546424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I think it makes sense to me... But I'm not sure I understand your expectation. I think all that's happening is that a slice produces a sequence, so operating a slice on that also produces a sequence, right? So you have a sequence of two elements, which you then slice on the first two elements, producing effectively the same sequence. You then try to slice on the 2 and 3rd element, but there is no element. </p>\n<p>I think the behavior is analogous to this Python code:</p>\n<div class=\"codehilite\"><pre>&gt;&gt;&gt; a = [[1,2,3,4],[5,6,7,8]]\n&gt;&gt;&gt; a[0:2][1:3]\n[[5, 6, 7, 8]]\n</pre></div>\n\n\n<p>Except that in Python, slicing past the end of a sequence just ends the slice early.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003196,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466733446,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>yeah, I realize that's the behavior that's happening.. I was hoping for..</p>\n<div class=\"codehilite\"><pre><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">@[</span>\n                    <span class=\"o\">@[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"p\">,</span>\n                    <span class=\"o\">@[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"p\">,</span>\n                    <span class=\"o\">@[</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"o\">]</span><span class=\"p\">,</span>\n                    <span class=\"o\">@[</span><span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n                <span class=\"o\">]</span>\n<span class=\"n\">echo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mf\">1</span><span class=\"p\">..</span><span class=\"mi\">2</span><span class=\"o\">][</span><span class=\"mf\">1</span><span class=\"p\">..</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>  <span class=\"o\">@[</span>\n               <span class=\"o\">@[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"p\">,</span>\n               <span class=\"o\">@[</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"o\">]</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003388,
            "is_me_message": false,
            "last_edit_timestamp": 1466733911,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466733885,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, I see. So treating it more like a multidimensional array, like in Numpy. Got it.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003402,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466733951,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>for some reason, I expected this to be the behavior.. even though I've seen how it's implemented, lol</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003452,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466733988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>alas, being stressed makes me think funny things</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466734014,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I bet you could definitely write a macro to implement that.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466734942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>I can think of the implementation for the function, just not sure how to actually get it called as such (for arbitrary dimensions)</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61003928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "Multidimensional Slices",
            "submessages": [],
            "timestamp": 1466735059,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>I don't really understand how to deal with reference types. I thought I'm following the examples from the manual, but clearly I'm not. </p>\n<div class=\"codehilite\"><pre><span class=\"k\">type</span>\n  <span class=\"n\">Job</span> <span class=\"o\">=</span> <span class=\"k\">tuple</span><span class=\"o\">[</span><span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">workload</span><span class=\"p\">:</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">cubic_footage</span><span class=\"p\">:</span> <span class=\"kt\">float</span><span class=\"o\">]</span>\n  <span class=\"n\">Cell</span> <span class=\"o\">=</span> <span class=\"kt\">seq</span><span class=\"o\">[</span><span class=\"n\">Job</span><span class=\"o\">]</span>\n  <span class=\"n\">BufferArray</span> <span class=\"o\">=</span> <span class=\"kt\">array</span><span class=\"o\">[</span><span class=\"mf\">0</span><span class=\"p\">..</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Cell</span><span class=\"o\">]</span>\n  <span class=\"n\">Buffer</span> <span class=\"o\">=</span> <span class=\"k\">ref</span> <span class=\"n\">BufferArray</span> <span class=\"ow\">not</span> <span class=\"kp\">nil</span>\n\n<span class=\"k\">proc </span><span class=\"nf\">newBuffer</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"kt\">seq</span><span class=\"o\">[</span><span class=\"n\">Job</span><span class=\"o\">]</span><span class=\"p\">):</span> <span class=\"n\">Buffer</span> <span class=\"o\">=</span>\n  <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n  <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">hour</span><span class=\"o\">]</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>This code is wrong; when I run this I get illegal storage access error:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">workload</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">cubic_footage</span><span class=\"p\">:</span> <span class=\"mf\">50.00</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">newBuffer</span><span class=\"p\">(</span><span class=\"o\">@[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>What am I doing wrong?</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61076311,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466904596,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, ok. I think I got it - I need to initialize the array with <code>@[]</code>s before I can add the nodes. What's the idiomatic way to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61077571,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466907976,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>As far as I'm aware, it's just = @[]</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61077596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466908084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>so like this: </p>\n<div class=\"codehilite\"><pre>  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"mf\">0</span><span class=\"p\">..</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">high</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">@[]</span>\n  <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">hour</span><span class=\"o\">]</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Seems a little wordy no?</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61077613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466908114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">newSeqWith</span><span class=\"p\">(</span><span class=\"n\">someLength</span><span class=\"p\">,</span> <span class=\"o\">@[]</span><span class=\"p\">)</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61080269,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466915017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>from sequtils</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61080270,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466915029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"k\">template</span> <span class=\"n\">newSeqWith</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">:</span> <span class=\"kt\">int</span><span class=\"p\">;</span> <span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"n\">expr</span><span class=\"p\">):</span> <span class=\"n\">expr</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61080308,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466915062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>very nice!</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 61083047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "using refs",
            "submessages": [],
            "timestamp": 1466922019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>By the way, I just wanted to mention that I've been writing a crapton of Nim recently. One of my ongoing personal projects is in Nim, and most excitingly I just finished a hack week at work where I put together a soup-to-nuts proof of concept for writing an optimized inner loop in Nim and then calling it from our main Python application. I think it's a really great language and I want to spread the love.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105565239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "nim with a vengeance",
            "submessages": [],
            "timestamp": 1483936925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7734b5e8e3153b45f12a7f0d5e53ed6f1c5dd670?x=x&version=1",
            "client": "website",
            "content": "<p>Just noticed the templates <a href=\"http://nim-lang.org/docs/system.html#unlikely.t,bool\" target=\"_blank\" title=\"http://nim-lang.org/docs/system.html#unlikely.t,bool\">likely and unlikely</a>, procs over booleans that act as cues to the compiler as to what branches in a conditional to optimize for. What a neat idea. Self-documenting code is one thing; self-documenting optimizations is another.</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 105825921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "zd@zdsmith.com",
            "sender_full_name": "Zach Smith (W'14)",
            "sender_id": 5024,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "likely/unlikely",
            "submessages": [],
            "timestamp": 1484451609,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<p>I'm unreasonably excited about this. There is one specific note that they hardly even harp on that made me jump with joy</p>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123166560,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "0.18 Release!",
            "submessages": [],
            "timestamp": 1519960037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ebe0814e33fc0231a2def89423f7be9f4d96a6f9?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>It is now possible to forward declare object types so that mutually recursive types can be created across module boundaries. See package level objects for more information.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "nim",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123166562,
            "is_me_message": false,
            "last_edit_timestamp": 1519960071,
            "reactions": [],
            "recipient_id": 50489,
            "sender_email": "samanthadoran3@gmail.com",
            "sender_full_name": "Samantha Doran (she) (SP2'16)",
            "sender_id": 8983,
            "sender_realm_str": "recurse",
            "stream_id": 32886,
            "subject": "0.18 Release!",
            "submessages": [],
            "timestamp": 1519960044,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
